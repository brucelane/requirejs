10005 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10006 verbose lock tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz /home/lerenzo/.npm/88a20e1c-o-npm-optimist-0-3-7-package-tgz.lock
10007 silly lockFile 716cc5cd-04352-0-4560666822362691-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572304352-0.4560666822362691/package
10008 silly lockFile 716cc5cd-04352-0-4560666822362691-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572304352-0.4560666822362691/package
10009 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10010 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10011 silly lockFile 612bf11d-renzo-npm-optimist-0-3-7-package /home/lerenzo/.npm/optimist/0.3.7/package
10012 verbose lock /home/lerenzo/.npm/optimist/0.3.7/package /home/lerenzo/.npm/612bf11d-renzo-npm-optimist-0-3-7-package.lock
10013 silly lockFile 612bf11d-renzo-npm-optimist-0-3-7-package /home/lerenzo/.npm/optimist/0.3.7/package
10014 silly lockFile 612bf11d-renzo-npm-optimist-0-3-7-package /home/lerenzo/.npm/optimist/0.3.7/package
10015 verbose tar unpack /home/lerenzo/.npm/optimist/0.3.7/package.tgz
10016 silly lockFile 360efc44-renzo-npm-optimist-0-3-7-package tar:///home/lerenzo/.npm/optimist/0.3.7/package
10017 verbose lock tar:///home/lerenzo/.npm/optimist/0.3.7/package /home/lerenzo/.npm/360efc44-renzo-npm-optimist-0-3-7-package.lock
10018 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10019 verbose lock tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz /home/lerenzo/.npm/88a20e1c-o-npm-optimist-0-3-7-package-tgz.lock
10020 silly gunzTarPerm modes [ '755', '644' ]
10021 silly gunzTarPerm extractEntry package.json
10022 silly gunzTarPerm extractEntry LICENSE
10023 silly gunzTarPerm extractEntry index.js
10024 silly gunzTarPerm extractEntry .travis.yml
10025 silly gunzTarPerm extractEntry example/bool.js
10026 silly gunzTarPerm extractEntry example/default_singles.js
10027 silly gunzTarPerm extractEntry example/divide.js
10028 silly gunzTarPerm extractEntry example/line_count.js
10029 silly gunzTarPerm extractEntry example/default_hash.js
10030 silly gunzTarPerm extractEntry example/line_count_wrap.js
10031 silly gunzTarPerm extractEntry example/nonopt.js
10032 silly gunzTarPerm extractEntry example/reflect.js
10033 silly gunzTarPerm extractEntry example/short.js
10034 silly gunzTarPerm extractEntry example/string.js
10035 silly gunzTarPerm extractEntry example/boolean_single.js
10036 silly gunzTarPerm extractEntry example/usage-options.js
10037 silly gunzTarPerm extractEntry example/boolean_double.js
10038 silly gunzTarPerm extractEntry example/xup.js
10039 silly gunzTarPerm extractEntry example/line_count_options.js
10040 silly gunzTarPerm extractEntry readme.markdown
10041 silly gunzTarPerm extractEntry test/_.js
10042 silly gunzTarPerm extractEntry test/parse.js
10043 silly gunzTarPerm extractEntry test/usage.js
10044 silly gunzTarPerm extractEntry test/_/argv.js
10045 silly gunzTarPerm extractEntry test/_/bin.js
10046 silly lockFile 360efc44-renzo-npm-optimist-0-3-7-package tar:///home/lerenzo/.npm/optimist/0.3.7/package
10047 silly lockFile 360efc44-renzo-npm-optimist-0-3-7-package tar:///home/lerenzo/.npm/optimist/0.3.7/package
10048 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10049 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
10050 verbose chmod /home/lerenzo/.npm/optimist/0.3.7/package.tgz 644
10051 verbose chown /home/lerenzo/.npm/optimist/0.3.7/package.tgz [ 1000, 1000 ]
10052 silly lockFile 03b2dd13--org-optimist-optimist-0-3-7-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
10053 silly lockFile 03b2dd13--org-optimist-optimist-0-3-7-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
10054 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
10055 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
10056 silly lockFile 3bb5ebed-optimist-0-3-x optimist@0.3.x
10057 silly lockFile 3bb5ebed-optimist-0-3-x optimist@0.3.x
10058 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/tmp.tgz
10059 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10060 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package /home/lerenzo/.npm/31595784-05417-0-8102506415452808-package.lock
10061 silly lockFile aa1dd3d3-05417-0-8102506415452808-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/tmp.tgz
10062 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/tmp.tgz /home/lerenzo/.npm/aa1dd3d3-05417-0-8102506415452808-tmp-tgz.lock
10063 silly gunzTarPerm modes [ '755', '644' ]
10064 silly gunzTarPerm extractEntry package.json
10065 silly gunzTarPerm extractEntry index.js
10066 silly gunzTarPerm extractEntry jar.js
10067 silly gunzTarPerm extractEntry tests/run.js
10068 silly gunzTarPerm extractEntry tests/test-cookie.js
10069 silly gunzTarPerm extractEntry tests/test-cookiejar.js
10070 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10071 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10072 silly lockFile aa1dd3d3-05417-0-8102506415452808-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/tmp.tgz
10073 silly lockFile aa1dd3d3-05417-0-8102506415452808-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/tmp.tgz
10074 verbose tar pack [ '/home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz',
10074 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package' ]
10075 verbose tarball /home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10076 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10077 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10078 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package /home/lerenzo/.npm/31595784-05417-0-8102506415452808-package.lock
10079 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10080 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz /home/lerenzo/.npm/c420ea2f-npm-cookie-jar-0-2-0-package-tgz.lock
10081 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10082 silly lockFile 31595784-05417-0-8102506415452808-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572305417-0.8102506415452808/package
10083 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10084 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10085 silly lockFile da8d9cd5-nzo-npm-cookie-jar-0-2-0-package /home/lerenzo/.npm/cookie-jar/0.2.0/package
10086 verbose lock /home/lerenzo/.npm/cookie-jar/0.2.0/package /home/lerenzo/.npm/da8d9cd5-nzo-npm-cookie-jar-0-2-0-package.lock
10087 silly lockFile da8d9cd5-nzo-npm-cookie-jar-0-2-0-package /home/lerenzo/.npm/cookie-jar/0.2.0/package
10088 silly lockFile da8d9cd5-nzo-npm-cookie-jar-0-2-0-package /home/lerenzo/.npm/cookie-jar/0.2.0/package
10089 verbose tar unpack /home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10090 silly lockFile d364f81b-nzo-npm-cookie-jar-0-2-0-package tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package
10091 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package /home/lerenzo/.npm/d364f81b-nzo-npm-cookie-jar-0-2-0-package.lock
10092 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10093 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz /home/lerenzo/.npm/c420ea2f-npm-cookie-jar-0-2-0-package-tgz.lock
10094 silly gunzTarPerm modes [ '755', '644' ]
10095 silly gunzTarPerm extractEntry package.json
10096 silly gunzTarPerm extractEntry index.js
10097 silly gunzTarPerm extractEntry jar.js
10098 silly gunzTarPerm extractEntry tests/run.js
10099 silly gunzTarPerm extractEntry tests/test-cookie.js
10100 silly gunzTarPerm extractEntry tests/test-cookiejar.js
10101 silly lockFile d364f81b-nzo-npm-cookie-jar-0-2-0-package tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package
10102 silly lockFile d364f81b-nzo-npm-cookie-jar-0-2-0-package tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package
10103 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10104 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
10105 verbose chmod /home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz 644
10106 verbose chown /home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz [ 1000, 1000 ]
10107 silly lockFile 3216d71a--cookie-jar-cookie-jar-0-2-0-tgz https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.2.0.tgz
10108 silly lockFile 3216d71a--cookie-jar-cookie-jar-0-2-0-tgz https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.2.0.tgz
10109 silly lockFile d85dc282-cookie-jar-0-2-0 cookie-jar@0.2.0
10110 silly lockFile d85dc282-cookie-jar-0-2-0 cookie-jar@0.2.0
10111 silly lockFile 4df5a18a-cookie-jar-0-2-0 cookie-jar@~0.2.0
10112 silly lockFile 4df5a18a-cookie-jar-0-2-0 cookie-jar@~0.2.0
10113 http 200 https://registry.npmjs.org/oauth-sign
10114 silly registry.get cb [ 200,
10114 silly registry.get   { vary: 'Accept',
10114 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10114 silly registry.get     etag: '"2OITEFSW39VHBE8HF2T0H28FQ"',
10114 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:46 GMT',
10114 silly registry.get     'content-type': 'application/json',
10114 silly registry.get     'content-length': '3841' } ]
10115 silly addNameRange number 2 { name: 'oauth-sign',
10115 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
10115 silly addNameRange   hasData: true }
10116 silly addNameRange versions [ 'oauth-sign', [ '0.2.0', '0.3.0', '0.4.0' ] ]
10117 verbose addNamed [ 'oauth-sign', '0.2.0' ]
10118 verbose addNamed [ '0.2.0', '0.2.0' ]
10119 silly lockFile 5137425d-oauth-sign-0-2-0 oauth-sign@0.2.0
10120 verbose lock oauth-sign@0.2.0 /home/lerenzo/.npm/5137425d-oauth-sign-0-2-0.lock
10121 silly lockFile 2ed0640a--oauth-sign-oauth-sign-0-2-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz
10122 verbose lock https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz /home/lerenzo/.npm/2ed0640a--oauth-sign-oauth-sign-0-2-0-tgz.lock
10123 verbose addRemoteTarball [ 'https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz',
10123 verbose addRemoteTarball   'a0e6a1715daed062f322b622b7fe5afd1035b6e2' ]
10124 info retry fetch attempt 1 at 14:11:47
10125 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz
10126 http GET https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz
10127 http 200 https://registry.npmjs.org/aws-sign/-/aws-sign-0.2.0.tgz
10128 http 200 https://registry.npmjs.org/detective
10129 silly registry.get cb [ 200,
10129 silly registry.get   { vary: 'Accept',
10129 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
10129 silly registry.get     etag: '"AQM5MX3UA1EWZW2PUE6K2J82P"',
10129 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:35 GMT',
10129 silly registry.get     'content-type': 'application/json',
10129 silly registry.get     'content-length': '25369' } ]
10130 silly addNameRange number 2 { name: 'detective', range: '>=0.0.0-0 <0.1.0-0', hasData: true }
10131 silly addNameRange versions [ 'detective',
10131 silly addNameRange   [ '0.0.0',
10131 silly addNameRange     '0.0.1',
10131 silly addNameRange     '0.0.2',
10131 silly addNameRange     '0.0.3',
10131 silly addNameRange     '0.0.4',
10131 silly addNameRange     '0.1.0',
10131 silly addNameRange     '0.1.1',
10131 silly addNameRange     '0.2.0',
10131 silly addNameRange     '0.2.1',
10131 silly addNameRange     '1.1.0',
10131 silly addNameRange     '2.0.0',
10131 silly addNameRange     '2.1.0',
10131 silly addNameRange     '2.1.1',
10131 silly addNameRange     '2.1.2',
10131 silly addNameRange     '2.2.0' ] ]
10132 verbose addNamed [ 'detective', '0.0.4' ]
10133 verbose addNamed [ '0.0.4', '0.0.4' ]
10134 silly lockFile 0b6602ae-detective-0-0-4 detective@0.0.4
10135 verbose lock detective@0.0.4 /home/lerenzo/.npm/0b6602ae-detective-0-0-4.lock
10136 silly lockFile 37c6669d-rg-detective-detective-0-0-4-tgz https://registry.npmjs.org/detective/-/detective-0.0.4.tgz
10137 verbose lock https://registry.npmjs.org/detective/-/detective-0.0.4.tgz /home/lerenzo/.npm/37c6669d-rg-detective-detective-0-0-4-tgz.lock
10138 verbose addRemoteTarball [ 'https://registry.npmjs.org/detective/-/detective-0.0.4.tgz',
10138 verbose addRemoteTarball   'fca0be0bbae435ef756aadb14c7837776b851cea' ]
10139 info retry fetch attempt 1 at 14:11:47
10140 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz
10141 http GET https://registry.npmjs.org/detective/-/detective-0.0.4.tgz
10142 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/tmp.tgz
10143 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10144 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package /home/lerenzo/.npm/4aa7dcb8-00130-0-3165880043525249-package.lock
10145 silly lockFile 77439ad2-00130-0-3165880043525249-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/tmp.tgz
10146 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/tmp.tgz /home/lerenzo/.npm/77439ad2-00130-0-3165880043525249-tmp-tgz.lock
10147 silly gunzTarPerm modes [ '755', '644' ]
10148 silly gunzTarPerm extractEntry package.json
10149 silly gunzTarPerm extractEntry .npmignore
10150 silly gunzTarPerm extractEntry README.md
10151 silly gunzTarPerm extractEntry LICENSE
10152 silly gunzTarPerm extractEntry graceful-fs.js
10153 silly gunzTarPerm extractEntry polyfills.js
10154 silly gunzTarPerm extractEntry test/open.js
10155 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10156 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10157 silly lockFile 77439ad2-00130-0-3165880043525249-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/tmp.tgz
10158 silly lockFile 77439ad2-00130-0-3165880043525249-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/tmp.tgz
10159 verbose tar pack [ '/home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz',
10159 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package' ]
10160 verbose tarball /home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10161 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10162 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10163 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package /home/lerenzo/.npm/4aa7dcb8-00130-0-3165880043525249-package.lock
10164 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10165 verbose lock tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz /home/lerenzo/.npm/a83550d7-pm-graceful-fs-2-0-1-package-tgz.lock
10166 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10167 silly lockFile 4aa7dcb8-00130-0-3165880043525249-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572300130-0.3165880043525249/package
10168 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10169 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10170 silly lockFile 9ef24757-zo-npm-graceful-fs-2-0-1-package /home/lerenzo/.npm/graceful-fs/2.0.1/package
10171 verbose lock /home/lerenzo/.npm/graceful-fs/2.0.1/package /home/lerenzo/.npm/9ef24757-zo-npm-graceful-fs-2-0-1-package.lock
10172 silly lockFile 9ef24757-zo-npm-graceful-fs-2-0-1-package /home/lerenzo/.npm/graceful-fs/2.0.1/package
10173 silly lockFile 9ef24757-zo-npm-graceful-fs-2-0-1-package /home/lerenzo/.npm/graceful-fs/2.0.1/package
10174 verbose tar unpack /home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10175 silly lockFile 57064660-zo-npm-graceful-fs-2-0-1-package tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package
10176 verbose lock tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package /home/lerenzo/.npm/57064660-zo-npm-graceful-fs-2-0-1-package.lock
10177 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10178 verbose lock tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz /home/lerenzo/.npm/a83550d7-pm-graceful-fs-2-0-1-package-tgz.lock
10179 silly gunzTarPerm modes [ '755', '644' ]
10180 silly gunzTarPerm extractEntry package.json
10181 silly gunzTarPerm extractEntry .npmignore
10182 silly gunzTarPerm extractEntry README.md
10183 silly gunzTarPerm extractEntry LICENSE
10184 silly gunzTarPerm extractEntry graceful-fs.js
10185 silly gunzTarPerm extractEntry polyfills.js
10186 silly gunzTarPerm extractEntry test/open.js
10187 silly lockFile 57064660-zo-npm-graceful-fs-2-0-1-package tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package
10188 silly lockFile 57064660-zo-npm-graceful-fs-2-0-1-package tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package
10189 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10190 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10191 verbose chmod /home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz 644
10192 verbose chown /home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz [ 1000, 1000 ]
10193 silly lockFile ac6a9fd4-raceful-fs-graceful-fs-2-0-1-tgz https://registry.npmjs.org/graceful-fs/-/graceful-fs-2.0.1.tgz
10194 silly lockFile ac6a9fd4-raceful-fs-graceful-fs-2-0-1-tgz https://registry.npmjs.org/graceful-fs/-/graceful-fs-2.0.1.tgz
10195 silly lockFile 74ee75cd-graceful-fs-2-0-1 graceful-fs@2.0.1
10196 silly lockFile 74ee75cd-graceful-fs-2-0-1 graceful-fs@2.0.1
10197 silly lockFile 8099b76c-graceful-fs-2 graceful-fs@~2
10198 silly lockFile 8099b76c-graceful-fs-2 graceful-fs@~2
10199 silly resolved [ { author:
10199 silly resolved      { name: 'Isaac Z. Schlueter',
10199 silly resolved        email: 'i@izs.me',
10199 silly resolved        url: 'http://blog.izs.me' },
10199 silly resolved     name: 'graceful-fs',
10199 silly resolved     description: 'A drop-in replacement for fs, making various improvements.',
10199 silly resolved     version: '2.0.1',
10199 silly resolved     repository:
10199 silly resolved      { type: 'git',
10199 silly resolved        url: 'git://github.com/isaacs/node-graceful-fs.git' },
10199 silly resolved     main: 'graceful-fs.js',
10199 silly resolved     engines: { node: '>=0.4.0' },
10199 silly resolved     directories: { test: 'test' },
10199 silly resolved     scripts: { test: 'tap test/*.js' },
10199 silly resolved     keywords:
10199 silly resolved      [ 'fs',
10199 silly resolved        'module',
10199 silly resolved        'reading',
10199 silly resolved        'retry',
10199 silly resolved        'retries',
10199 silly resolved        'queue',
10199 silly resolved        'error',
10199 silly resolved        'errors',
10199 silly resolved        'handling',
10199 silly resolved        'EMFILE',
10199 silly resolved        'EAGAIN',
10199 silly resolved        'EINVAL',
10199 silly resolved        'EPERM',
10199 silly resolved        'EACCESS' ],
10199 silly resolved     license: 'BSD',
10199 silly resolved     readme: '# graceful-fs\n\ngraceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.\n\nThe improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.\n\n## Improvements over fs module\n\ngraceful-fs:\n\n* Queues up `open` and `readdir` calls, and retries them once\n  something closes if there is an EMFILE error from too many file\n  descriptors.\n* fixes `lchmod` for Node versions prior to 0.6.2.\n* implements `fs.lutimes` if possible. Otherwise it becomes a noop.\n* ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or\n  `lchown` if the user isn\'t root.\n* makes `lchmod` and `lchown` become noops, if not available.\n* retries reading a file if `read` results in EAGAIN error.\n\nOn Windows, it retries renaming a file for up to one second if `EACCESS`\nor `EPERM` error occurs, likely because antivirus software has locked\nthe directory.\n',
10199 silly resolved     readmeFilename: 'README.md',
10199 silly resolved     bugs: { url: 'https://github.com/isaacs/node-graceful-fs/issues' },
10199 silly resolved     homepage: 'https://github.com/isaacs/node-graceful-fs',
10199 silly resolved     _id: 'graceful-fs@2.0.1',
10199 silly resolved     dist: { shasum: 'aa0cc35a080620db331f53e6aa3c4ed3e04c71eb' },
10199 silly resolved     _from: 'graceful-fs@~2',
10199 silly resolved     _resolved: 'https://registry.npmjs.org/graceful-fs/-/graceful-fs-2.0.1.tgz' } ]
10200 info install graceful-fs@2.0.1 into /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf
10201 info installOne graceful-fs@2.0.1
10202 info /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs unbuild
10203 verbose tar unpack /home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10204 silly lockFile bc8e547b--rimraf-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs
10205 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs /home/lerenzo/.npm/bc8e547b--rimraf-node-modules-graceful-fs.lock
10206 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10207 verbose lock tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz /home/lerenzo/.npm/a83550d7-pm-graceful-fs-2-0-1-package-tgz.lock
10208 silly gunzTarPerm modes [ '755', '644' ]
10209 silly gunzTarPerm extractEntry package.json
10210 silly gunzTarPerm extractEntry .npmignore
10211 silly gunzTarPerm extractEntry README.md
10212 silly gunzTarPerm extractEntry LICENSE
10213 silly gunzTarPerm extractEntry graceful-fs.js
10214 silly gunzTarPerm extractEntry polyfills.js
10215 silly gunzTarPerm extractEntry test/open.js
10216 silly lockFile bc8e547b--rimraf-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs
10217 silly lockFile bc8e547b--rimraf-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs
10218 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10219 silly lockFile a83550d7-pm-graceful-fs-2-0-1-package-tgz tar:///home/lerenzo/.npm/graceful-fs/2.0.1/package.tgz
10220 info preinstall graceful-fs@2.0.1
10221 verbose readDependencies using package.json deps
10222 verbose readDependencies using package.json deps
10223 silly resolved []
10224 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs
10225 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules/graceful-fs
10226 verbose linkStuff [ true,
10226 verbose linkStuff   '/usr/local/lib/node_modules',
10226 verbose linkStuff   false,
10226 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf/node_modules' ]
10227 info linkStuff graceful-fs@2.0.1
10228 verbose linkBins graceful-fs@2.0.1
10229 verbose linkMans graceful-fs@2.0.1
10230 verbose rebuildBundles graceful-fs@2.0.1
10231 info install graceful-fs@2.0.1
10232 info postinstall graceful-fs@2.0.1
10233 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf
10234 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/rimraf
10235 verbose linkStuff [ true,
10235 verbose linkStuff   '/usr/local/lib/node_modules',
10235 verbose linkStuff   false,
10235 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules' ]
10236 info linkStuff rimraf@2.2.2
10237 verbose linkBins rimraf@2.2.2
10238 verbose link bins [ { rimraf: './bin.js' },
10238 verbose link bins   '/usr/local/lib/node_modules/jitsu/node_modules/fstream/node_modules/.bin',
10238 verbose link bins   false ]
10239 verbose linkMans rimraf@2.2.2
10240 verbose rebuildBundles rimraf@2.2.2
10241 verbose rebuildBundles [ 'graceful-fs' ]
10242 info install rimraf@2.2.2
10243 info postinstall rimraf@2.2.2
10244 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream
10245 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream
10246 verbose linkStuff [ true,
10246 verbose linkStuff   '/usr/local/lib/node_modules',
10246 verbose linkStuff   false,
10246 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules' ]
10247 info linkStuff fstream@0.1.22
10248 verbose linkBins fstream@0.1.22
10249 verbose linkMans fstream@0.1.22
10250 verbose rebuildBundles fstream@0.1.22
10251 verbose rebuildBundles [ '.bin', 'graceful-fs', 'inherits', 'mkdirp', 'rimraf' ]
10252 info install fstream@0.1.22
10253 info postinstall fstream@0.1.22
10254 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/tmp.tgz
10255 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10256 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package /home/lerenzo/.npm/be6fb379-06505-0-2631707948166877-package.lock
10257 silly lockFile a5741b3e-06505-0-2631707948166877-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/tmp.tgz
10258 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/tmp.tgz /home/lerenzo/.npm/a5741b3e-06505-0-2631707948166877-tmp-tgz.lock
10259 silly gunzTarPerm modes [ '755', '644' ]
10260 silly gunzTarPerm extractEntry package.json
10261 silly gunzTarPerm extractEntry index.js
10262 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10263 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10264 silly lockFile a5741b3e-06505-0-2631707948166877-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/tmp.tgz
10265 silly lockFile a5741b3e-06505-0-2631707948166877-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/tmp.tgz
10266 verbose tar pack [ '/home/lerenzo/.npm/aws-sign/0.2.0/package.tgz',
10266 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package' ]
10267 verbose tarball /home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10268 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10269 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10270 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package /home/lerenzo/.npm/be6fb379-06505-0-2631707948166877-package.lock
10271 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10272 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz /home/lerenzo/.npm/cbb60012-o-npm-aws-sign-0-2-0-package-tgz.lock
10273 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10274 silly lockFile be6fb379-06505-0-2631707948166877-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572306505-0.2631707948166877/package
10275 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10276 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10277 silly lockFile 3bb6027d-renzo-npm-aws-sign-0-2-0-package /home/lerenzo/.npm/aws-sign/0.2.0/package
10278 verbose lock /home/lerenzo/.npm/aws-sign/0.2.0/package /home/lerenzo/.npm/3bb6027d-renzo-npm-aws-sign-0-2-0-package.lock
10279 silly lockFile 3bb6027d-renzo-npm-aws-sign-0-2-0-package /home/lerenzo/.npm/aws-sign/0.2.0/package
10280 silly lockFile 3bb6027d-renzo-npm-aws-sign-0-2-0-package /home/lerenzo/.npm/aws-sign/0.2.0/package
10281 verbose tar unpack /home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10282 silly lockFile 677e3302-renzo-npm-aws-sign-0-2-0-package tar:///home/lerenzo/.npm/aws-sign/0.2.0/package
10283 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.2.0/package /home/lerenzo/.npm/677e3302-renzo-npm-aws-sign-0-2-0-package.lock
10284 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10285 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz /home/lerenzo/.npm/cbb60012-o-npm-aws-sign-0-2-0-package-tgz.lock
10286 silly gunzTarPerm modes [ '755', '644' ]
10287 silly gunzTarPerm extractEntry package.json
10288 silly gunzTarPerm extractEntry index.js
10289 silly lockFile 677e3302-renzo-npm-aws-sign-0-2-0-package tar:///home/lerenzo/.npm/aws-sign/0.2.0/package
10290 silly lockFile 677e3302-renzo-npm-aws-sign-0-2-0-package tar:///home/lerenzo/.npm/aws-sign/0.2.0/package
10291 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10292 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
10293 verbose chmod /home/lerenzo/.npm/aws-sign/0.2.0/package.tgz 644
10294 verbose chown /home/lerenzo/.npm/aws-sign/0.2.0/package.tgz [ 1000, 1000 ]
10295 silly lockFile b948df4b--org-aws-sign-aws-sign-0-2-0-tgz https://registry.npmjs.org/aws-sign/-/aws-sign-0.2.0.tgz
10296 silly lockFile b948df4b--org-aws-sign-aws-sign-0-2-0-tgz https://registry.npmjs.org/aws-sign/-/aws-sign-0.2.0.tgz
10297 silly lockFile 166e4cb0-aws-sign-0-2-0 aws-sign@0.2.0
10298 silly lockFile 166e4cb0-aws-sign-0-2-0 aws-sign@0.2.0
10299 silly lockFile b6564d90-aws-sign-0-2-0 aws-sign@~0.2.0
10300 silly lockFile b6564d90-aws-sign-0-2-0 aws-sign@~0.2.0
10301 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/tmp.tgz
10302 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10303 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package /home/lerenzo/.npm/3f2291d8-93628-0-1436786714475602-package.lock
10304 silly lockFile 98153fac-93628-0-1436786714475602-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/tmp.tgz
10305 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/tmp.tgz /home/lerenzo/.npm/98153fac-93628-0-1436786714475602-tmp-tgz.lock
10306 silly gunzTarPerm modes [ '755', '644' ]
10307 silly gunzTarPerm extractEntry package.json
10308 silly gunzTarPerm extractEntry .npmignore
10309 silly gunzTarPerm extractEntry README.md
10310 silly gunzTarPerm extractEntry LICENSE
10311 silly gunzTarPerm extractEntry examples/http.js
10312 silly gunzTarPerm extractEntry .travis.yml
10313 silly gunzTarPerm extractEntry lib/director.js
10314 silly gunzTarPerm extractEntry lib/director/browser.js
10315 silly gunzTarPerm extractEntry lib/director/cli.js
10316 silly gunzTarPerm extractEntry lib/director/router.js
10317 silly gunzTarPerm extractEntry lib/director/http/index.js
10318 silly gunzTarPerm extractEntry lib/director/http/methods.js
10319 silly gunzTarPerm extractEntry lib/director/http/responses.js
10320 silly gunzTarPerm extractEntry test/browser/html5-routes-test.js
10321 silly gunzTarPerm extractEntry test/browser/routes-test.js
10322 silly gunzTarPerm extractEntry test/browser/backend/backend.js
10323 silly gunzTarPerm extractEntry test/browser/browserify-harness.html
10324 silly gunzTarPerm extractEntry test/browser/helpers/api.js
10325 silly gunzTarPerm extractEntry test/browser/html5-routes-harness.html
10326 silly gunzTarPerm extractEntry test/browser/routes-harness.html
10327 silly gunzTarPerm extractEntry test/server/cli/dispatch-test.js
10328 silly gunzTarPerm extractEntry test/server/cli/mount-test.js
10329 silly gunzTarPerm extractEntry test/server/cli/path-test.js
10330 silly gunzTarPerm extractEntry test/server/core/dispatch-test.js
10331 silly gunzTarPerm extractEntry test/server/core/insert-test.js
10332 silly gunzTarPerm extractEntry test/server/core/mount-test.js
10333 silly gunzTarPerm extractEntry test/server/core/on-test.js
10334 silly gunzTarPerm extractEntry test/server/core/path-test.js
10335 silly gunzTarPerm extractEntry test/server/core/regifystring-test.js
10336 silly gunzTarPerm extractEntry test/server/helpers/index.js
10337 silly gunzTarPerm extractEntry test/server/helpers/macros.js
10338 silly gunzTarPerm extractEntry test/server/http/accept-test.js
10339 silly gunzTarPerm extractEntry test/server/http/attach-test.js
10340 silly gunzTarPerm extractEntry test/server/http/before-test.js
10341 silly gunzTarPerm extractEntry test/server/http/http-test.js
10342 silly gunzTarPerm extractEntry test/server/http/methods-test.js
10343 silly gunzTarPerm extractEntry test/server/http/responses-test.js
10344 silly gunzTarPerm extractEntry test/server/http/stream-test.js
10345 silly gunzTarPerm extractEntry bin/build
10346 silly gunzTarPerm extractEntry build/director.js
10347 silly gunzTarPerm extractEntry build/director.min.js
10348 silly gunzTarPerm extractEntry build/ender.js
10349 silly gunzTarPerm extractEntry img/director.png
10350 silly gunzTarPerm extractEntry img/hashRoute.png
10351 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10352 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10353 silly lockFile 98153fac-93628-0-1436786714475602-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/tmp.tgz
10354 silly lockFile 98153fac-93628-0-1436786714475602-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/tmp.tgz
10355 verbose tar pack [ '/home/lerenzo/.npm/director/1.1.10/package.tgz',
10355 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package' ]
10356 verbose tarball /home/lerenzo/.npm/director/1.1.10/package.tgz
10357 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10358 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10359 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package /home/lerenzo/.npm/3f2291d8-93628-0-1436786714475602-package.lock
10360 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10361 verbose lock tar:///home/lerenzo/.npm/director/1.1.10/package.tgz /home/lerenzo/.npm/ccb21f37--npm-director-1-1-10-package-tgz.lock
10362 http 200 https://registry.npmjs.org/detective/-/detective-0.0.4.tgz
10363 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10364 silly lockFile 3f2291d8-93628-0-1436786714475602-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572293628-0.1436786714475602/package
10365 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10366 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10367 silly lockFile ded90440-enzo-npm-director-1-1-10-package /home/lerenzo/.npm/director/1.1.10/package
10368 verbose lock /home/lerenzo/.npm/director/1.1.10/package /home/lerenzo/.npm/ded90440-enzo-npm-director-1-1-10-package.lock
10369 silly lockFile ded90440-enzo-npm-director-1-1-10-package /home/lerenzo/.npm/director/1.1.10/package
10370 silly lockFile ded90440-enzo-npm-director-1-1-10-package /home/lerenzo/.npm/director/1.1.10/package
10371 verbose tar unpack /home/lerenzo/.npm/director/1.1.10/package.tgz
10372 silly lockFile 9867524c-enzo-npm-director-1-1-10-package tar:///home/lerenzo/.npm/director/1.1.10/package
10373 verbose lock tar:///home/lerenzo/.npm/director/1.1.10/package /home/lerenzo/.npm/9867524c-enzo-npm-director-1-1-10-package.lock
10374 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10375 verbose lock tar:///home/lerenzo/.npm/director/1.1.10/package.tgz /home/lerenzo/.npm/ccb21f37--npm-director-1-1-10-package-tgz.lock
10376 silly gunzTarPerm modes [ '755', '644' ]
10377 silly gunzTarPerm extractEntry package.json
10378 silly gunzTarPerm extractEntry .npmignore
10379 silly gunzTarPerm extractEntry README.md
10380 silly gunzTarPerm extractEntry LICENSE
10381 silly gunzTarPerm extractEntry bin/build
10382 silly gunzTarPerm extractEntry .travis.yml
10383 silly gunzTarPerm extractEntry examples/http.js
10384 silly gunzTarPerm extractEntry img/director.png
10385 silly gunzTarPerm extractEntry img/hashRoute.png
10386 silly gunzTarPerm extractEntry lib/director.js
10387 silly gunzTarPerm extractEntry lib/director/browser.js
10388 silly gunzTarPerm extractEntry lib/director/cli.js
10389 silly gunzTarPerm extractEntry lib/director/router.js
10390 silly gunzTarPerm extractEntry lib/director/http/index.js
10391 silly gunzTarPerm extractEntry lib/director/http/methods.js
10392 silly gunzTarPerm extractEntry lib/director/http/responses.js
10393 silly gunzTarPerm extractEntry test/browser/html5-routes-test.js
10394 silly gunzTarPerm extractEntry test/browser/routes-test.js
10395 silly gunzTarPerm extractEntry test/browser/backend/backend.js
10396 silly gunzTarPerm extractEntry test/browser/browserify-harness.html
10397 silly gunzTarPerm extractEntry test/browser/helpers/api.js
10398 silly gunzTarPerm extractEntry test/browser/html5-routes-harness.html
10399 silly gunzTarPerm extractEntry test/browser/routes-harness.html
10400 silly gunzTarPerm extractEntry test/server/cli/dispatch-test.js
10401 silly gunzTarPerm extractEntry test/server/cli/mount-test.js
10402 silly gunzTarPerm extractEntry test/server/cli/path-test.js
10403 silly gunzTarPerm extractEntry test/server/core/dispatch-test.js
10404 silly gunzTarPerm extractEntry test/server/core/insert-test.js
10405 silly gunzTarPerm extractEntry test/server/core/mount-test.js
10406 silly gunzTarPerm extractEntry test/server/core/on-test.js
10407 silly gunzTarPerm extractEntry test/server/core/path-test.js
10408 silly gunzTarPerm extractEntry test/server/core/regifystring-test.js
10409 silly gunzTarPerm extractEntry test/server/helpers/index.js
10410 silly gunzTarPerm extractEntry test/server/helpers/macros.js
10411 silly gunzTarPerm extractEntry test/server/http/accept-test.js
10412 silly gunzTarPerm extractEntry test/server/http/attach-test.js
10413 silly gunzTarPerm extractEntry test/server/http/before-test.js
10414 silly gunzTarPerm extractEntry test/server/http/http-test.js
10415 silly gunzTarPerm extractEntry test/server/http/methods-test.js
10416 silly gunzTarPerm extractEntry test/server/http/responses-test.js
10417 silly gunzTarPerm extractEntry test/server/http/stream-test.js
10418 silly gunzTarPerm extractEntry build/director.js
10419 silly gunzTarPerm extractEntry build/director.min.js
10420 silly gunzTarPerm extractEntry build/ender.js
10421 silly lockFile 9867524c-enzo-npm-director-1-1-10-package tar:///home/lerenzo/.npm/director/1.1.10/package
10422 silly lockFile 9867524c-enzo-npm-director-1-1-10-package tar:///home/lerenzo/.npm/director/1.1.10/package
10423 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10424 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10425 verbose chmod /home/lerenzo/.npm/director/1.1.10/package.tgz 644
10426 verbose chown /home/lerenzo/.npm/director/1.1.10/package.tgz [ 1000, 1000 ]
10427 silly lockFile c6dbffac-org-director-director-1-1-10-tgz https://registry.npmjs.org/director/-/director-1.1.10.tgz
10428 silly lockFile c6dbffac-org-director-director-1-1-10-tgz https://registry.npmjs.org/director/-/director-1.1.10.tgz
10429 silly lockFile f33fb291-director-1-1-10 director@1.1.10
10430 silly lockFile f33fb291-director-1-1-10 director@1.1.10
10431 silly resolved [ { name: 'broadway',
10431 silly resolved     description: 'Lightweight application extensibility and composition with a twist of feature reflection.',
10431 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
10431 silly resolved     version: '0.2.7',
10431 silly resolved     maintainers: [ [Object], [Object], [Object] ],
10431 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/broadway.git' },
10431 silly resolved     dependencies:
10431 silly resolved      { cliff: '0.1.8',
10431 silly resolved        eventemitter2: '0.4.11',
10431 silly resolved        nconf: '0.6.7',
10431 silly resolved        winston: '0.6.2',
10431 silly resolved        utile: '0.1.7' },
10431 silly resolved     devDependencies: { codesurgeon: '0.3.x', 'uglify-js': '1.0.6', vows: '0.7.x' },
10431 silly resolved     scripts: { test: 'vows test/**/*-test.js --spec' },
10431 silly resolved     main: './lib/broadway',
10431 silly resolved     engines: { node: '>= 0.6.4' },
10431 silly resolved     readme: '# broadway [![Build Status](https://secure.travis-ci.org/flatiron/broadway.png)](http://travis-ci.org/flatiron/broadway)\n\n*Lightweight application extensibility and composition with a twist of feature\nreflection.*\n\n## Example\n\n### app.js\n```js\nvar broadway = require("broadway");\n\nvar app = new broadway.App();\n\n// Passes the second argument to `helloworld.attach`.\napp.use(require("./plugins/helloworld"), { "delimiter": "!" } );\n\napp.init(function (err) {\n  if (err) {\n    console.log(err);\n  }\n});\n\napp.hello("world");\n```\n\n### plugins/helloworld.js\n\n```js\n// `exports.attach` gets called by broadway on `app.use`\nexports.attach = function (options) {\n\n  this.hello = function (world) {\n    console.log("Hello "+ world + options.delimiter || ".");\n  };\n\n};\n\n// `exports.init` gets called by broadway on `app.init`.\nexports.init = function (done) {\n\n  // This plugin doesn\'t require any initialization step.\n  return done();\n\n};\n```\n\n### run it!\n\n```bash\njosh@onix:~/dev/broadway/examples$ node simple/app.js \nHello world!\njosh@onix:~/dev/broadway/examples$ \n```\n\n## Installation\n\n### Installing npm (node package manager)\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing broadway\n``` bash \n  $ [sudo] npm install broadway\n```\n\n## API\n\n### App#init(callback)\n\nInitialize application and it\'s plugins, `callback` will be called with null or\ninitialization error as first argument.\n\n### App#use(plugin, options)\n\nAttach plugin to application. `plugin` should conform to following interface:\n\n```javascript\nvar plugin = {\n  "name": "example-plugin", // Plugin\'s name\n\n  "attach": function attach(options) {\n    // Called with plugin options once plugin attached to application\n    // `this` - is a reference to application\n  },\n\n  "detach": function detach() {\n    // Called when plugin detached from application\n    // (Only if plugin with same name was attached)\n    // `this` - is a reference to application\n  },\n\n  "init": function init(callback) {\n    // Called on application initialization\n    // App#init(callback) will be called once every plugin will call `callback`\n    // `this` - is a reference to application\n  }\n};\n```\n\n### App#on(event, callback) and App#emit(event, data)\n\nApp inherits from [EventEmitter2][2], and many plugins build on this\nfunctionality.\n\n#### Built-In Events:\n\n* `error:init`: Broadway emits this event when it throws an error while attempting to initialize.\n\nRead the [EventEmitter2][2] documentation for more information.\n\n## Tests\nAll tests are written with [vows][0] and should be run with [npm][1]:\n\n``` bash\n  $ npm test\n```\n\n#### [Charlie Robbins](http://nodejitsu.com)\n#### License: MIT\n\n[0]: http://vowsjs.org\n[1]: http://npmjs.org\n[2]: https://github.com/hij1nx/EventEmitter2\n',
10431 silly resolved     readmeFilename: 'README.md',
10431 silly resolved     bugs: { url: 'https://github.com/flatiron/broadway/issues' },
10431 silly resolved     homepage: 'https://github.com/flatiron/broadway',
10431 silly resolved     _id: 'broadway@0.2.7',
10431 silly resolved     dist: { shasum: '0fc619e0b97724c229905460cf567c5d71934997' },
10431 silly resolved     _from: 'broadway@0.2.7',
10431 silly resolved     _resolved: 'https://registry.npmjs.org/broadway/-/broadway-0.2.7.tgz' },
10431 silly resolved   { name: 'optimist',
10431 silly resolved     version: '0.3.5',
10431 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
10431 silly resolved     main: './index.js',
10431 silly resolved     directories: { lib: '.', test: 'test', example: 'example' },
10431 silly resolved     dependencies: { wordwrap: '~0.0.2' },
10431 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.2.4' },
10431 silly resolved     scripts: { test: 'tap ./test/*.js' },
10431 silly resolved     repository:
10431 silly resolved      { type: 'git',
10431 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
10431 silly resolved     keywords:
10431 silly resolved      [ 'argument',
10431 silly resolved        'args',
10431 silly resolved        'option',
10431 silly resolved        'parser',
10431 silly resolved        'parsing',
10431 silly resolved        'cli',
10431 silly resolved        'command' ],
10431 silly resolved     author:
10431 silly resolved      { name: 'James Halliday',
10431 silly resolved        email: 'mail@substack.net',
10431 silly resolved        url: 'http://substack.net' },
10431 silly resolved     license: 'MIT/X11',
10431 silly resolved     engine: { node: '>=0.4' },
10431 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
10431 silly resolved     readmeFilename: 'README.markdown',
10431 silly resolved     bugs: { url: 'https://github.com/substack/node-optimist/issues' },
10431 silly resolved     homepage: 'https://github.com/substack/node-optimist',
10431 silly resolved     _id: 'optimist@0.3.5',
10431 silly resolved     dist: { shasum: '0cbbcdaa96219e43a94d2ebe46934bc83a9c6933' },
10431 silly resolved     _from: 'optimist@0.3.5',
10431 silly resolved     _resolved: 'https://registry.npmjs.org/optimist/-/optimist-0.3.5.tgz' },
10431 silly resolved   { name: 'prompt',
10431 silly resolved     description: 'A beautiful command-line prompt for node.js',
10431 silly resolved     version: '0.2.9',
10431 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
10431 silly resolved     maintainers: [ [Object], [Object] ],
10431 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/prompt.git' },
10431 silly resolved     dependencies:
10431 silly resolved      { pkginfo: '0.x.x',
10431 silly resolved        read: '1.0.x',
10431 silly resolved        revalidator: '0.1.x',
10431 silly resolved        utile: '0.1.x',
10431 silly resolved        winston: '0.6.x' },
10431 silly resolved     devDependencies: { vows: '0.7.0' },
10431 silly resolved     main: './lib/prompt',
10431 silly resolved     scripts:
10431 silly resolved      { test: 'vows test/prompt-test.js --spec',
10431 silly resolved        'test-all': 'vows --spec' },
10431 silly resolved     engines: { node: '>= 0.6.6' },
10431 silly resolved     readme: '# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require(\'prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here\'s a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: \'Name must be only letters, spaces, or dashes\',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  name: \' + result.name);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere\'s an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: \'Enter your password\',     // Prompt displayed to the user. If not supplied name will be used.\n    type: \'string\',                 // Specify the type of input to expect.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: \'Password must be letters\', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: \'lamepassword\',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n    before: function(value) { return \'v\' + value; } // Runs before node-prompt callbacks. It modifies user\'s input\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\nUsing `type: \'array\'` has some special cases.\n\n- `description` will not work in the schema if `type: \'array\'` is defined.\n- `maxItems` takes precedence over `minItems`.\n- Arrays that do not have `maxItems` defined will require users to `SIGINT` (`^C`) before the array is ended.\n- If `SIGINT` (`^C`) is triggered before `minItems` is met, a validation error will appear. This will require users to `SIGEOF` (`^D`) to end the input.\n\nFor more information on things such as `maxItems` and `minItems`, refer to the [revalidator](https://github.com/flatiron/revalidator) repository.\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra \'name\' property:\n\n```js\n  var prompt = require(\'../lib/prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: \'username\',\n      required: true\n    }, {\n      name: \'password\',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require(\'prompt\'),\n      optimist = require(\'optimist\')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: \'lamepassword\',\n    mindset: \'NY\'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log(\'Initial object to be extended:\');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, [\'username\', \'email\'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log(\'Updated object received:\');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is "prompt," the default `prompt.delimiter` is\n": ", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require("prompt");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = "Question!".rainbow;\n  prompt.delimiter = "><".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: "What is your name?".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log("You said your name is: ".cyan + result.name.cyan);\n  });\n```\n\nIf you don\'t want colors, you can set\n\n```js\nvar prompt = require(\'prompt\');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n',
10431 silly resolved     readmeFilename: 'README.md',
10431 silly resolved     bugs: { url: 'https://github.com/flatiron/prompt/issues' },
10431 silly resolved     homepage: 'https://github.com/flatiron/prompt',
10431 silly resolved     _id: 'prompt@0.2.9',
10431 silly resolved     dist: { shasum: 'dfa95abc8660ac66917a3f20c94eee6837978226' },
10431 silly resolved     _from: 'prompt@0.2.9',
10431 silly resolved     _resolved: 'https://registry.npmjs.org/prompt/-/prompt-0.2.9.tgz' },
10431 silly resolved   { name: 'director',
10431 silly resolved     description: 'A client Side/Server Side Router',
10431 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
10431 silly resolved     version: '1.1.10',
10431 silly resolved     maintainers: [ [Object], [Object] ],
10431 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/director.git' },
10431 silly resolved     keywords:
10431 silly resolved      [ 'URL',
10431 silly resolved        'router',
10431 silly resolved        'http',
10431 silly resolved        'cli',
10431 silly resolved        'flatiron',
10431 silly resolved        'client side',
10431 silly resolved        'ender' ],
10431 silly resolved     devDependencies:
10431 silly resolved      { codesurgeon: 'https://github.com/hij1nx/codesurgeon/tarball/master',
10431 silly resolved        colors: '0.5.x',
10431 silly resolved        'api-easy': '0.3.x',
10431 silly resolved        'uglify-js': '1.0.6',
10431 silly resolved        request: '2.9.x',
10431 silly resolved        qunitjs: '1.9.x',
10431 silly resolved        vows: '0.6.x' },
10431 silly resolved     ender: './build/ender.js',
10431 silly resolved     browserify: './build/director',
10431 silly resolved     main: './lib/director',
10431 silly resolved     engines: { node: '>= 0.4.0' },
10431 silly resolved     scripts: { test: 'vows test/server/*/*-test.js --spec' },
10431 silly resolved     readme: '<img src="https://github.com/flatiron/director/raw/master/img/director.png" />\n\n# Synopsis\nDirector is a router. Routing is the process of determining what code to run when a URL is requested.\n\n# Motivation\nA routing library that works in both the browser and node.js environments with as few differences as possible. Simplifies the development of Single Page Apps and Node.js applications. Dependency free (doesn\'t require jQuery or Express, etc).\n\n# Status\n[![Build Status](https://secure.travis-ci.org/flatiron/director.png?branch=master)](http://travis-ci.org/flatiron/director)\n\n# Features\n* [Client-Side Routing](#client-side)\n* [Server-Side HTTP Routing](#http-routing)\n* [Server-Side CLI Routing](#cli-routing)\n\n\n# Usage\n* [API Documentation](#api-documentation)\n* [Frequently Asked Questions](#faq)\n\n<a name="client-side"></a>\n## Client-side Routing\nIt simply watches the hash of the URL to determine what to do, for example:\n\n```\nhttp://foo.com/#/bar\n```\n\nClient-side routing (aka hash-routing) allows you to specify some information about the state of the application using the URL. So that when the user visits a specific URL, the application can be transformed accordingly.\n\n<img src="https://github.com/flatiron/director/raw/master/img/hashRoute.png" />\n\nHere is a simple example:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>A Gentle Introduction</title>\n    <script src="https://raw.github.com/flatiron/director/master/build/director.min.js"></script>\n    <script>\n\n      var author = function () { console.log("author"); },\n          books = function () { console.log("books"); },\n          viewBook = function(bookId) { console.log("viewBook: bookId is populated: " + bookId); };\n\n      var routes = {\n        \'/author\': author,\n        \'/books\': [books, function() { console.log("An inline route handler."); }],\n        \'/books/view/:bookId\': viewBook\n      };\n\n      var router = Router(routes);\n      router.init();\n\n    </script>\n  </head>\n  <body>\n    <ul>\n      <li><a href="#/author">#/author</a></li>\n      <li><a href="#/books">#/books</a></li>\n      <li><a href="#/books/view/1">#/books/view/1</a></li>\n    </ul>\n  </body>\n</html>\n```\n\nDirector works great with your favorite DOM library, such as jQuery.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>A Gentle Introduction 2</title>\n    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>\n    <script src="https://raw.github.com/flatiron/director/master/build/director.min.js"></script>\n    <script>\n    $(\'document\').ready(function(){\n      //\n      // create some functions to be executed when\n      // the correct route is issued by the user.\n      //\n      var showAuthorInfo = function () { console.log("showAuthorInfo"); },\n          listBooks = function () { console.log("listBooks"); },\n          allroutes = function() {\n            var route = window.location.hash.slice(2),\n                sections = $(\'section\'),\n                section;\n            if ((section = sections.filter(\'[data-route=\' + route + \']\')).length) {\n              sections.hide(250);\n              section.show(250);\n            }\n          };\n\n      //\n      // define the routing table.\n      //\n      var routes = {\n        \'/author\': showAuthorInfo,\n        \'/books\': listBooks\n      };\n\n      //\n      // instantiate the router.\n      //\n      var router = Router(routes);\n\n      //\n      // a global configuration setting.\n      //\n      router.configure({\n        on: allroutes\n      });\n      router.init();\n    });\n    </script>\n  </head>\n  <body>\n    <section data-route="author">Author Name</section>\n    <section data-route="books">Book1, Book2, Book3</section>\n    <ul>\n      <li><a href="#/author">#/author</a></li>\n      <li><a href="#/books">#/books</a></li>\n    </ul>\n  </body>\n</html>\n```\n\nYou can find a browser-specific build of `director` [here][1] which has all of the server code stripped away.\n\n<a name="http-routing"></a>\n## Server-Side HTTP Routing\n\nDirector handles routing for HTTP requests similar to `journey` or `express`:\n\n```js\n  //\n  // require the native http module, as well as director.\n  //\n  var http = require(\'http\'),\n      director = require(\'director\');\n\n  //\n  // create some logic to be routed to.\n  //\n  function helloWorld() {\n    this.res.writeHead(200, { \'Content-Type\': \'text/plain\' })\n    this.res.end(\'hello world\');\n  }\n\n  //\n  // define a routing table.\n  //\n  var router = new director.http.Router({\n    \'/hello\': {\n      get: helloWorld\n    }\n  });\n\n  //\n  // setup a server and when there is a request, dispatch the\n  // route that was requested in the request object.\n  //\n  var server = http.createServer(function (req, res) {\n    router.dispatch(req, res, function (err) {\n      if (err) {\n        res.writeHead(404);\n        res.end();\n      }\n    });\n  });\n\n  //\n  // You can also do ad-hoc routing, similar to `journey` or `express`.\n  // This can be done with a string or a regexp.\n  //\n  router.get(\'/bonjour\', helloWorld);\n  router.get(/hola/, helloWorld);\n\n  //\n  // set the server to listen on port `8080`.\n  //\n  server.listen(8080);\n```\n\n### See Also:\n\n - Auto-generated Node.js API Clients for routers using [Director-Reflector](http://github.com/flatiron/director-reflector)\n - RESTful Resource routing using [restful](http://github.com/flatiron/restful)\n - HTML / Plain Text views of routers using [Director-Explorer](http://github.com/flatiron/director-explorer)\n\n<a name="cli-routing"></a>\n## CLI Routing\n\nDirector supports Command Line Interface routing. Routes for cli options are based on command line input (i.e. `process.argv`) instead of a URL.\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.cli.Router();\n\n  router.on(\'create\', function () {\n    console.log(\'create something\');\n  });\n\n  router.on(/destroy/, function () {\n    console.log(\'destroy something\');\n  });\n\n  // You will need to dispatch the cli arguments yourself\n  router.dispatch(\'on\', process.argv.slice(2).join(\' \'));\n```\n\nUsing the cli router, you can dispatch commands by passing them as a string. For example, if this example is in a file called `foo.js`:\n\n``` bash\n$ node foo.js create\ncreate something\n$ node foo.js destroy\ndestroy something\n```\n\n<a name="api-documentation"></a>\n# API Documentation\n\n* [Constructor](#constructor)\n* [Routing Table](#routing-table)\n* [Adhoc Routing](#adhoc-routing)\n* [Scoped Routing](#scoped-routing)\n* [Routing Events](#routing-events)\n* [Configuration](#configuration)\n* [URL Matching](#url-matching)\n* [URL Params](#url-params)\n* [Route Recursion](#route-recursion)\n* [Async Routing](#async-routing)\n* [Resources](#resources)\n* [History API](#history-api)\n* [Instance Methods](#instance-methods)\n* [Attach Properties to `this`](#attach-to-this)\n* [HTTP Streaming and Body Parsing](#http-streaming-body-parsing)\n\n<a name="constructor"></a>\n## Constructor\n\n``` js\n  var router = Router(routes);\n```\n\n<a name="routing-table"></a>\n## Routing Table\n\nAn object literal that contains nested route definitions. A potentially nested set of key/value pairs. The keys in the object literal represent each potential part of the URL. The values in the object literal contain references to the functions that should be associated with them. *bark* and *meow* are two functions that you have defined in your code.\n\n``` js\n  //\n  // Assign routes to an object literal.\n  //\n  var routes = {\n    //\n    // a route which assigns the function `bark`.\n    //\n    \'/dog\': bark,\n    //\n    // a route which assigns the functions `meow` and `scratch`.\n    //\n    \'/cat\': [meow, scratch]\n  };\n\n  //\n  // Instantiate the router.\n  //\n  var router = Router(routes);\n```\n\n<a name="adhoc-routing"></a>\n## Adhoc Routing\n\nWhen developing large client-side or server-side applications it is not always possible to define routes in one location. Usually individual decoupled components register their own routes with the application router. We refer to this as _Adhoc Routing._ Lets take a look at the API `director` exposes for adhoc routing:\n\n**Client-side Routing**\n\n``` js\n  var router = new Router().init();\n\n  router.on(\'/some/resource\', function () {\n    //\n    // Do something on `/#/some/resource`\n    //\n  });\n```\n\n**HTTP Routing**\n\n``` js\n  var router = new director.http.Router();\n\n  router.get(/\\/some\\/resource/, function () {\n    //\n    // Do something on an GET to `/some/resource`\n    //\n  });\n```\n\n<a name="scoped-routing"></a>\n## Scoped Routing\n\nIn large web appliations, both [Client-side](#client-side) and [Server-side](#http-routing), routes are often scoped within a few individual resources. Director exposes a simple way to do this for [Adhoc Routing](#adhoc-routing) scenarios:\n\n``` js\n  var router = new director.http.Router();\n\n  //\n  // Create routes inside the `/users` scope.\n  //\n  router.path(/\\/users\\/(\\w+)/, function () {\n    //\n    // The `this` context of the function passed to `.path()`\n    // is the Router itself.\n    //\n\n    this.post(function (id) {\n      //\n      // Create the user with the specified `id`.\n      //\n    });\n\n    this.get(function (id) {\n      //\n      // Retreive the user with the specified `id`.\n      //\n    });\n\n    this.get(/\\/friends/, function (id) {\n      //\n      // Get the friends for the user with the specified `id`.\n      //\n    });\n  });\n```\n\n<a name="routing-events"></a>\n## Routing Events\n\nIn `director`, a "routing event" is a named property in the [Routing Table](#routing-table) which can be assigned to a function or an Array of functions to be called when a route is matched in a call to `router.dispatch()`.\n\n* **on:** A function or Array of functions to execute when the route is matched.\n* **before:** A function or Array of functions to execute before calling the `on` method(s).\n\n**Client-side only**\n\n* **after:** A function or Array of functions to execute when leaving a particular route.\n* **once:** A function or Array of functions to execute only once for a particular route.\n\n<a name="configuration"></a>\n## Configuration\n\nGiven the flexible nature of `director` there are several options available for both the [Client-side](#client-side) and [Server-side](#http-routing). These options can be set using the `.configure()` method:\n\n``` js\n  var router = new director.Router(routes).configure(options);\n```\n\nThe `options` are:\n\n* **recurse:** Controls [route recursion](#route-recursion). Use `forward`, `backward`, or `false`. Default is `false` Client-side, and `backward` Server-side.\n* **strict:** If set to `false`, then trailing slashes (or other delimiters) are allowed in routes. Default is `true`.\n* **async:** Controls [async routing](#async-routing). Use `true` or `false`. Default is `false`.\n* **delimiter:** Character separator between route fragments. Default is `/`.\n* **notfound:** A function to call if no route is found on a call to `router.dispatch()`.\n* **on:** A function (or list of functions) to call on every call to `router.dispatch()` when a route is found.\n* **before:** A function (or list of functions) to call before every call to `router.dispatch()` when a route is found.\n\n**Client-side only**\n\n* **resource:** An object to which string-based routes will be bound. This can be especially useful for late-binding to route functions (such as async client-side requires).\n* **after:** A function (or list of functions) to call when a given route is no longer the active route.\n* **html5history:** If set to `true` and client supports `pushState()`, then uses HTML5 History API instead of hash fragments. See [History API](#history-api) for more information.\n* **run_handler_in_init:** If `html5history` is enabled, the route handler by default is executed upon `Router.init()` since with real URIs the router can not know if it should call a route handler or not. Setting this to `false` disables the route handler initial execution.\n\n<a name="url-matching"></a>\n## URL Matching\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/dog/yella\'.\n    //\n    \'/dog\': {\n      \'/:color\': {\n        //\n        // this function will return the value \'yella\'.\n        //\n        on: function (color) { console.log(color) }\n      }\n    }\n  });\n```\n\nRoutes can sometimes become very complex, `simple/:tokens` don\'t always suffice. Director supports regular expressions inside the route names. The values captured from the regular expressions are passed to your listener function.\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/hello/world\'.\n    //\n    \'/hello\': {\n      \'/(\\\\w+)\': {\n        //\n        // this function will return the value \'world\'.\n        //\n        on: function (who) { console.log(who) }\n      }\n    }\n  });\n```\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/hello/world/johny/appleseed\'.\n    //\n    \'/hello\': {\n      \'/world/?([^\\/]*)\\/([^\\/]*)/?\': function (a, b) {\n        console.log(a, b);\n      }\n    }\n  });\n```\n\n<a name="url-params"></a>\n## URL Parameters\n\nWhen you are using the same route fragments it is more descriptive to define these fragments by name and then use them in your [Routing Table](#routing-table) or [Adhoc Routes](#adhoc-routing). Consider a simple example where a `userId` is used repeatedly.\n\n``` js\n  //\n  // Create a router. This could also be director.cli.Router() or\n  // director.http.Router().\n  //\n  var router = new director.Router();\n\n  //\n  // A route could be defined using the `userId` explicitly.\n  //\n  router.on(/([\\w-_]+)/, function (userId) { });\n\n  //\n  // Define a shorthand for this fragment called `userId`.\n  //\n  router.param(\'userId\', /([\\\\w\\\\-]+)/);\n\n  //\n  // Now multiple routes can be defined with the same\n  // regular expression.\n  //\n  router.on(\'/anything/:userId\', function (userId) { });\n  router.on(\'/something-else/:userId\', function (userId) { });\n```\n\n<a name="route-recursion"></a>\n## Route Recursion\n\nCan be assigned the value of `forward` or `backward`. The recurse option will determine the order in which to fire the listeners that are associated with your routes. If this option is NOT specified or set to null, then only the listeners associated with an exact match will be fired.\n\n### No recursion, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // Only this method will be fired.\n        //\n        on: growl\n      },\n      on: bark\n    }\n  };\n\n  var router = Router(routes);\n```\n\n### Recursion set to `backward`, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired first.\n        //\n        on: growl\n      },\n      //\n      // This method will be fired second.\n      //\n      on: bark\n    }\n  };\n\n  var router = Router(routes).configure({ recurse: \'backward\' });\n```\n\n### Recursion set to `forward`, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired second.\n        //\n        on: growl\n      },\n      //\n      // This method will be fired first.\n      //\n      on: bark\n    }\n  };\n\n  var router = Router(routes).configure({ recurse: \'forward\' });\n```\n\n### Breaking out of recursion, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired first.\n        //\n        on: function() { return false; }\n      },\n      //\n      // This method will not be fired.\n      //\n      on: bark\n    }\n  };\n\n  //\n  // This feature works in reverse with recursion set to true.\n  //\n  var router = Router(routes).configure({ recurse: \'backward\' });\n```\n\n<a name="async-routing"></a>\n## Async Routing\n\nBefore diving into how Director exposes async routing, you should understand [Route Recursion](#route-recursion). At it\'s core route recursion is about evaluating a series of functions gathered when traversing the [Routing Table](#routing-table).\n\nNormally this series of functions is evaluated synchronously. In async routing, these functions are evaluated asynchronously. Async routing can be extremely useful both on the client-side and the server-side:\n\n* **Client-side:** To ensure an animation or other async operations (such as HTTP requests for authentication) have completed before continuing evaluation of a route.\n* **Server-side:** To ensure arbitrary async operations (such as performing authentication) have completed before continuing the evaluation of a route.\n\nThe method signatures for route functions in synchronous and asynchronous evaluation are different: async route functions take an additional `next()` callback.\n\n### Synchronous route functions\n\n``` js\n  var router = new director.Router();\n\n  router.on(\'/:foo/:bar/:bazz\', function (foo, bar, bazz) {\n    //\n    // Do something asynchronous with `foo`, `bar`, and `bazz`.\n    //\n  });\n```\n\n### Asynchronous route functions\n\n``` js\n  var router = new director.http.Router().configure({ async: true });\n\n  router.on(\'/:foo/:bar/:bazz\', function (foo, bar, bazz, next) {\n    //\n    // Go do something async, and determine that routing should stop\n    //\n    next(false);\n  });\n```\n\n<a name="resources"></a>\n## Resources\n\n**Available on the Client-side only.** An object literal containing functions. If a host object is specified, your route definitions can provide string literals that represent the function names inside the host object. A host object can provide the means for better encapsulation and design.\n\n``` js\n\n  var router = Router({\n\n    \'/hello\': {\n      \'/usa\': \'americas\',\n      \'/china\': \'asia\'\n    }\n\n  }).configure({ resource: container }).init();\n\n  var container = {\n    americas: function() { return true; },\n    china: function() { return true; }\n  };\n\n```\n\n<a name="history-api"></a>\n## History API\n\n**Available on the Client-side only.** Director supports using HTML5 History API instead of hash fragments for navigation. To use the API, pass `{html5history: true}` to `configure()`. Use of the API is enabled only if the client supports `pushState()`.\n\nUsing the API gives you cleaner URIs but they come with a cost. Unlike with hash fragments your route URIs must exist. When the client enters a page, say http://foo.com/bar/baz, the web server must respond with something meaningful. Usually this means that your web server checks the URI points to something that, in a sense, exists, and then serves the client the JavaScript application.\n\nIf you\'re after a single-page application you can not use plain old `<a href="/bar/baz">` tags for navigation anymore. When such link is clicked, web browsers try to ask for the resource from server which is not of course desired for a single-page application. Instead you need to use e.g. click handlers and call the `setRoute()` method yourself.\n\n<a name="attach-to-this"></a>\n## Attach Properties To `this`\n\nGenerally, the `this` object bound to route handlers, will contain the request in `this.req` and the response in `this.res`. One may attach additional properties to `this` with the `router.attach` method:\n\n```js\n  var director = require(\'director\');\n\n  var router = new director.http.Router().configure(options);\n\n  //\n  // Attach properties to `this`\n  //\n  router.attach(function () {\n    this.data = [1,2,3];\n  });\n\n  //\n  // Access properties attached to `this` in your routes!\n  //\n  router.get(\'/hello\', function () {\n    this.res.writeHead(200, { \'content-type\': \'text/plain\' });\n\n    //\n    // Response will be `[1,2,3]`!\n    //\n    this.res.end(this.data);\n  });\n```\n\nThis API may be used to attach convenience methods to the `this` context of route handlers.\n\n<a name="http-streaming-body-parsing">\n## HTTP Streaming and Body Parsing\n\nWhen you are performing HTTP routing there are two common scenarios:\n\n* Buffer the request body and parse it according to the `Content-Type` header (usually `application/json` or `application/x-www-form-urlencoded`).\n* Stream the request body by manually calling `.pipe` or listening to the `data` and `end` events.\n\nBy default `director.http.Router()` will attempt to parse either the `.chunks` or `.body` properties set on the request parameter passed to `router.dispatch(request, response, callback)`. The router instance will also wait for the `end` event before firing any routes.\n\n**Default Behavior**\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  router.get(\'/\', function () {\n    //\n    // This will not work, because all of the data\n    // events and the end event have already fired.\n    //\n    this.req.on(\'data\', function (chunk) {\n      console.log(chunk)\n    });\n  });\n```\n\nIn [flatiron][2], `director` is used in conjunction with [union][3] which uses a `BufferedStream` proxy to the raw `http.Request` instance. [union][3] will set the `req.chunks` property for you and director will automatically parse the body. If you wish to perform this buffering yourself directly with `director` you can use a simple request handler in your http server:\n\n``` js\n  var http = require(\'http\'),\n      director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  var server = http.createServer(function (req, res) {\n    req.chunks = [];\n    req.on(\'data\', function (chunk) {\n      req.chunks.push(chunk.toString());\n    });\n\n    router.dispatch(req, res, function (err) {\n      if (err) {\n        res.writeHead(404);\n        res.end();\n      }\n\n      console.log(\'Served \' + req.url);\n    });\n  });\n\n  router.post(\'/\', function () {\n    this.res.writeHead(200, { \'Content-Type\': \'application/json\' })\n    this.res.end(JSON.stringify(this.req.body));\n  });\n```\n\n**Streaming Support**\n\nIf you wish to get access to the request stream before the `end` event is fired, you can pass the `{ stream: true }` options to the route.\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  router.get(\'/\', { stream: true }, function () {\n    //\n    // This will work because the route handler is invoked\n    // immediately without waiting for the `end` event.\n    //\n    this.req.on(\'data\', function (chunk) {\n      console.log(chunk);\n    });\n  });\n```\n\n<a name="instance-methods"></a>\n## Instance methods\n\n### configure(options)\n* `options` {Object}: Options to configure this instance with.\n\nConfigures the Router instance with the specified `options`. See [Configuration](#configuration) for more documentation.\n\n### param(token, matcher)\n* token {string}: Named parameter token to set to the specified `matcher`\n* matcher {string|Regexp}: Matcher for the specified `token`.\n\nAdds a route fragment for the given string `token` to the specified regex `matcher` to this Router instance. See [URL Parameters](#url-params) for more documentation.\n\n### on(method, path, route)\n* `method` {string}: Method to insert within the Routing Table (e.g. `on`, `get`, etc.).\n* `path` {string}: Path within the Routing Table to set the `route` to.\n* `route` {function|Array}: Route handler to invoke for the `method` and `path`.\n\nAdds the `route` handler for the specified `method` and `path` within the [Routing Table](#routing-table).\n\n### path(path, routesFn)\n* `path` {string|Regexp}: Scope within the Routing Table to invoke the `routesFn` within.\n* `routesFn` {function}: Adhoc Routing function with calls to `this.on()`, `this.get()` etc.\n\nInvokes the `routesFn` within the scope of the specified `path` for this Router instance.\n\n### dispatch(method, path[, callback])\n* method {string}: Method to invoke handlers for within the Routing Table\n* path {string}: Path within the Routing Table to match\n* callback {function}: Invoked once all route handlers have been called.\n\nDispatches the route handlers matched within the [Routing Table](#routing-table) for this instance for the specified `method` and `path`.\n\n### mount(routes, path)\n* routes {object}: Partial routing table to insert into this instance.\n* path {string|Regexp}: Path within the Routing Table to insert the `routes` into.\n\nInserts the partial [Routing Table](#routing-table), `routes`, into the Routing Table for this Router instance at the specified `path`.\n\n## Instance methods (Client-side only)\n\n### init([redirect])\n* `redirect` {String}: This value will be used if \'/#/\' is not found in the URL. (e.g., init(\'/\') will resolve to \'/#/\', init(\'foo\') will resolve to \'/#foo\').\n\nInitialize the router, start listening for changes to the URL.\n\n### getRoute([index])\n* `index` {Number}: The hash value is divided by forward slashes, each section then has an index, if this is provided, only that section of the route will be returned.\n\nReturns the entire route or just a section of it.\n\n### setRoute(route)\n* `route` {String}: Supply a route value, such as `home/stats`.\n\nSet the current route.\n\n### setRoute(start, length)\n* `start` {Number} - The position at which to start removing items.\n* `length` {Number} - The number of items to remove from the route.\n\nRemove a segment from the current route.\n\n### setRoute(index, value)\n* `index` {Number} - The hash value is divided by forward slashes, each section then has an index.\n* `value` {String} - The new value to assign the the position indicated by the first parameter.\n\nSet a segment of the current route.\n\n<a name="faq"></a>\n# Frequently Asked Questions\n\n## What About SEO?\n\nIs using a Client-side router a problem for SEO? Yes. If advertising is a requirement, you are probably building a "Web Page" and not a "Web Application". Director on the client is meant for script-heavy Web Applications.\n\n# Licence\n\n(The MIT License)\n\nCopyright (c) 2010 Nodejitsu Inc. <http://www.twitter.com/nodejitsu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \'Software\'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://github.com/flatiron/director\n[1]: https://github.com/flatiron/director/blob/master/build/director.min.js\n[2]: http://github.com/flatiron/flatiron\n[3]: http://github.com/flatiron/union\n',
10431 silly resolved     readmeFilename: 'README.md',
10431 silly resolved     bugs: { url: 'https://github.com/flatiron/director/issues' },
10431 silly resolved     homepage: 'https://github.com/flatiron/director',
10431 silly resolved     _id: 'director@1.1.10',
10431 silly resolved     dist: { shasum: 'd7f21d72b980068d5401a612e0ea3bd14801b1cd' },
10431 silly resolved     _from: 'director@1.1.10',
10431 silly resolved     _resolved: 'https://registry.npmjs.org/director/-/director-1.1.10.tgz' } ]
10432 info install broadway@0.2.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron
10433 info install optimist@0.3.5 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron
10434 info install prompt@0.2.9 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron
10435 info install director@1.1.10 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron
10436 info installOne broadway@0.2.7
10437 info installOne optimist@0.3.5
10438 info installOne prompt@0.2.9
10439 info installOne director@1.1.10
10440 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway unbuild
10441 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist unbuild
10442 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt unbuild
10443 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director unbuild
10444 verbose tar unpack /home/lerenzo/.npm/broadway/0.2.7/package.tgz
10445 silly lockFile 8c65cc5c-s-flatiron-node-modules-broadway tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
10446 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway /home/lerenzo/.npm/8c65cc5c-s-flatiron-node-modules-broadway.lock
10447 silly lockFile 6dac2c1f-o-npm-broadway-0-2-7-package-tgz tar:///home/lerenzo/.npm/broadway/0.2.7/package.tgz
10448 verbose lock tar:///home/lerenzo/.npm/broadway/0.2.7/package.tgz /home/lerenzo/.npm/6dac2c1f-o-npm-broadway-0-2-7-package-tgz.lock
10449 verbose tar unpack /home/lerenzo/.npm/optimist/0.3.5/package.tgz
10450 silly lockFile 7b449d9d-s-flatiron-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
10451 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist /home/lerenzo/.npm/7b449d9d-s-flatiron-node-modules-optimist.lock
10452 silly lockFile d3955b78-o-npm-optimist-0-3-5-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.5/package.tgz
10453 verbose lock tar:///home/lerenzo/.npm/optimist/0.3.5/package.tgz /home/lerenzo/.npm/d3955b78-o-npm-optimist-0-3-5-package-tgz.lock
10454 verbose tar unpack /home/lerenzo/.npm/prompt/0.2.9/package.tgz
10455 silly lockFile a7ee75d5-les-flatiron-node-modules-prompt tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
10456 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt /home/lerenzo/.npm/a7ee75d5-les-flatiron-node-modules-prompt.lock
10457 silly lockFile e90ea4b1-nzo-npm-prompt-0-2-9-package-tgz tar:///home/lerenzo/.npm/prompt/0.2.9/package.tgz
10458 verbose lock tar:///home/lerenzo/.npm/prompt/0.2.9/package.tgz /home/lerenzo/.npm/e90ea4b1-nzo-npm-prompt-0-2-9-package-tgz.lock
10459 verbose tar unpack /home/lerenzo/.npm/director/1.1.10/package.tgz
10460 silly lockFile 307f429a-s-flatiron-node-modules-director tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director
10461 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director /home/lerenzo/.npm/307f429a-s-flatiron-node-modules-director.lock
10462 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10463 verbose lock tar:///home/lerenzo/.npm/director/1.1.10/package.tgz /home/lerenzo/.npm/ccb21f37--npm-director-1-1-10-package-tgz.lock
10464 silly gunzTarPerm modes [ '755', '644' ]
10465 silly gunzTarPerm modes [ '755', '644' ]
10466 silly gunzTarPerm modes [ '755', '644' ]
10467 silly gunzTarPerm modes [ '755', '644' ]
10468 silly gunzTarPerm extractEntry package.json
10469 silly gunzTarPerm extractEntry package.json
10470 silly gunzTarPerm extractEntry package.json
10471 silly gunzTarPerm extractEntry package.json
10472 silly gunzTarPerm extractEntry .npmignore
10473 silly gunzTarPerm extractEntry README.md
10474 silly gunzTarPerm extractEntry LICENSE
10475 silly gunzTarPerm extractEntry index.js
10476 silly gunzTarPerm extractEntry .npmignore
10477 silly gunzTarPerm extractEntry README.md
10478 silly gunzTarPerm extractEntry .npmignore
10479 silly gunzTarPerm extractEntry README.md
10480 silly gunzTarPerm extractEntry LICENSE
10481 silly gunzTarPerm extractEntry .travis.yml
10482 silly gunzTarPerm extractEntry x.js
10483 silly gunzTarPerm extractEntry LICENSE
10484 silly gunzTarPerm extractEntry .jshintrc
10485 silly gunzTarPerm extractEntry LICENSE
10486 silly gunzTarPerm extractEntry bin/build
10487 silly gunzTarPerm extractEntry examples/browser/app.js
10488 silly gunzTarPerm extractEntry .travis.yml
10489 silly gunzTarPerm extractEntry docs/docco.css
10490 silly gunzTarPerm extractEntry docs/prompt.html
10491 silly gunzTarPerm extractEntry examples/add-properties.js
10492 silly gunzTarPerm extractEntry examples/history.js
10493 silly gunzTarPerm extractEntry examples/nested-properties-prompt.js
10494 silly gunzTarPerm extractEntry examples/old-schema.js
10495 silly gunzTarPerm extractEntry examples/existing-properties.js
10496 silly gunzTarPerm extractEntry examples/password.js
10497 silly gunzTarPerm extractEntry examples/prompt-override.js
10498 silly gunzTarPerm extractEntry examples/property-prompt.js
10499 silly gunzTarPerm extractEntry examples/simple-prompt.js
10500 silly gunzTarPerm extractEntry examples/yes-or-no-prompt.js
10501 silly gunzTarPerm extractEntry examples/override-validation.js
10502 silly gunzTarPerm extractEntry lib/prompt.js
10503 silly gunzTarPerm extractEntry CHANGELOG.md
10504 silly gunzTarPerm extractEntry test/helpers.js
10505 silly gunzTarPerm extractEntry test/interactive-prompt-test.js
10506 silly gunzTarPerm extractEntry test/macros.js
10507 silly gunzTarPerm extractEntry test/prompt-test.js
10508 silly gunzTarPerm extractEntry bin/build
10509 silly gunzTarPerm extractEntry .travis.yml
10510 silly gunzTarPerm extractEntry .travis.yml
10511 silly gunzTarPerm extractEntry README.markdown
10512 silly gunzTarPerm extractEntry examples/browser/index.html
10513 silly gunzTarPerm extractEntry examples/browser/plugins/helloworld.js
10514 silly gunzTarPerm extractEntry examples/nodejs/app.js
10515 silly gunzTarPerm extractEntry examples/nodejs/plugins/helloworld.js
10516 silly gunzTarPerm extractEntry lib/broadway.js
10517 silly gunzTarPerm extractEntry example/bool.js
10518 silly gunzTarPerm extractEntry example/default_singles.js
10519 silly gunzTarPerm extractEntry lib/broadway/app.js
10520 silly gunzTarPerm extractEntry lib/broadway/bootstrapper.js
10521 silly gunzTarPerm extractEntry example/divide.js
10522 silly gunzTarPerm extractEntry example/line_count.js
10523 silly gunzTarPerm extractEntry example/default_hash.js
10524 silly gunzTarPerm extractEntry example/line_count_wrap.js
10525 silly gunzTarPerm extractEntry lib/broadway/browser.js
10526 silly gunzTarPerm extractEntry lib/broadway/common/directories.js
10527 silly gunzTarPerm extractEntry examples/http.js
10528 silly gunzTarPerm extractEntry img/director.png
10529 silly gunzTarPerm extractEntry lib/broadway/common/index.js
10530 silly gunzTarPerm extractEntry lib/broadway/features/index.js
10531 silly gunzTarPerm extractEntry img/hashRoute.png
10532 silly gunzTarPerm extractEntry lib/director.js
10533 silly gunzTarPerm extractEntry lib/broadway/plugins/config.js
10534 silly gunzTarPerm extractEntry lib/broadway/plugins/directories.js
10535 silly gunzTarPerm extractEntry example/nonopt.js
10536 silly gunzTarPerm extractEntry example/reflect.js
10537 silly gunzTarPerm extractEntry lib/broadway/plugins/exceptions.js
10538 silly gunzTarPerm extractEntry lib/broadway/plugins/inspect.js
10539 silly gunzTarPerm extractEntry lib/director/browser.js
10540 silly gunzTarPerm extractEntry lib/director/cli.js
10541 silly gunzTarPerm extractEntry example/short.js
10542 silly gunzTarPerm extractEntry example/string.js
10543 silly gunzTarPerm extractEntry lib/director/router.js
10544 silly gunzTarPerm extractEntry lib/director/http/index.js
10545 silly gunzTarPerm extractEntry lib/broadway/plugins/log.js
10546 silly gunzTarPerm extractEntry test/common/directories-test.js
10547 silly gunzTarPerm extractEntry example/boolean_single.js
10548 silly gunzTarPerm extractEntry example/usage-options.js
10549 silly gunzTarPerm extractEntry lib/director/http/methods.js
10550 silly gunzTarPerm extractEntry lib/director/http/responses.js
10551 silly gunzTarPerm extractEntry test/core/app-init-test.js
10552 silly gunzTarPerm extractEntry test/core/app-test.js
10553 silly gunzTarPerm extractEntry test/core/broadway-test.js
10554 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
10555 silly gunzTarPerm extractEntry example/boolean_double.js
10556 silly gunzTarPerm extractEntry example/xup.js
10557 silly gunzTarPerm extractEntry test/browser/html5-routes-test.js
10558 silly gunzTarPerm extractEntry test/browser/routes-test.js
10559 silly gunzTarPerm extractEntry example/line_count_options.js
10560 silly gunzTarPerm extractEntry test/_.js
10561 silly gunzTarPerm extractEntry test/fixtures/empty-app/.gitkeep
10562 silly gunzTarPerm extractEntry test/fixtures/sample-app/app/index.js
10563 silly gunzTarPerm extractEntry test/parse.js
10564 silly gunzTarPerm extractEntry test/usage.js
10565 silly gunzTarPerm extractEntry test/fixtures/sample-app/config/topics.json
10566 silly gunzTarPerm extractEntry test/fixtures/sample-app.json
10567 silly gunzTarPerm extractEntry test/_/argv.js
10568 silly gunzTarPerm extractEntry test/_/bin.js
10569 silly gunzTarPerm extractEntry test/browser/backend/backend.js
10570 silly gunzTarPerm extractEntry test/browser/browserify-harness.html
10571 silly gunzTarPerm extractEntry test/helpers/assert.js
10572 silly gunzTarPerm extractEntry test/helpers/helpers.js
10573 silly gunzTarPerm extractEntry test/browser/helpers/api.js
10574 silly gunzTarPerm extractEntry test/browser/html5-routes-harness.html
10575 silly gunzTarPerm extractEntry test/helpers/macros.js
10576 silly gunzTarPerm extractEntry test/plugins/config-test.js
10577 silly gunzTarPerm extractEntry test/browser/routes-harness.html
10578 silly gunzTarPerm extractEntry test/server/cli/dispatch-test.js
10579 silly gunzTarPerm extractEntry test/plugins/directories-test.js
10580 silly gunzTarPerm extractEntry test/plugins/log-test.js
10581 silly gunzTarPerm extractEntry test/server/cli/mount-test.js
10582 silly gunzTarPerm extractEntry test/server/cli/path-test.js
10583 silly gunzTarPerm extractEntry test/server/core/dispatch-test.js
10584 silly gunzTarPerm extractEntry test/server/core/insert-test.js
10585 silly gunzTarPerm extractEntry test/server/core/mount-test.js
10586 silly gunzTarPerm extractEntry test/server/core/on-test.js
10587 silly gunzTarPerm extractEntry test/server/core/path-test.js
10588 silly gunzTarPerm extractEntry test/server/core/regifystring-test.js
10589 silly gunzTarPerm extractEntry test/server/helpers/index.js
10590 silly gunzTarPerm extractEntry test/server/helpers/macros.js
10591 silly lockFile 7b449d9d-s-flatiron-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
10592 silly lockFile 7b449d9d-s-flatiron-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
10593 silly lockFile d3955b78-o-npm-optimist-0-3-5-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.5/package.tgz
10594 silly lockFile d3955b78-o-npm-optimist-0-3-5-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.5/package.tgz
10595 info preinstall optimist@0.3.5
10596 verbose readDependencies using package.json deps
10597 verbose readDependencies using package.json deps
10598 verbose cache add [ 'wordwrap@~0.0.2', null ]
10599 verbose cache add name=undefined spec="wordwrap@~0.0.2" args=["wordwrap@~0.0.2",null]
10600 verbose parsed url { protocol: null,
10600 verbose parsed url   slashes: null,
10600 verbose parsed url   auth: null,
10600 verbose parsed url   host: null,
10600 verbose parsed url   port: null,
10600 verbose parsed url   hostname: null,
10600 verbose parsed url   hash: null,
10600 verbose parsed url   search: null,
10600 verbose parsed url   query: null,
10600 verbose parsed url   pathname: 'wordwrap@~0.0.2',
10600 verbose parsed url   path: 'wordwrap@~0.0.2',
10600 verbose parsed url   href: 'wordwrap@~0.0.2' }
10601 verbose cache add name="wordwrap" spec="~0.0.2" args=["wordwrap","~0.0.2"]
10602 verbose parsed url { protocol: null,
10602 verbose parsed url   slashes: null,
10602 verbose parsed url   auth: null,
10602 verbose parsed url   host: null,
10602 verbose parsed url   port: null,
10602 verbose parsed url   hostname: null,
10602 verbose parsed url   hash: null,
10602 verbose parsed url   search: null,
10602 verbose parsed url   query: null,
10602 verbose parsed url   pathname: '~0.0.2',
10602 verbose parsed url   path: '~0.0.2',
10602 verbose parsed url   href: '~0.0.2' }
10603 verbose addNamed [ 'wordwrap', '~0.0.2' ]
10604 verbose addNamed [ null, '>=0.0.2-0 <0.1.0-0' ]
10605 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
10606 verbose lock wordwrap@~0.0.2 /home/lerenzo/.npm/8bd42136-wordwrap-0-0-2.lock
10607 silly addNameRange { name: 'wordwrap', range: '>=0.0.2-0 <0.1.0-0', hasData: false }
10608 verbose url raw wordwrap
10609 verbose url resolving [ 'https://registry.npmjs.org/', './wordwrap' ]
10610 verbose url resolved https://registry.npmjs.org/wordwrap
10611 info trying registry request attempt 1 at 14:11:48
10612 http GET https://registry.npmjs.org/wordwrap
10613 silly gunzTarPerm extractEntry test/server/http/accept-test.js
10614 silly gunzTarPerm extractEntry test/server/http/attach-test.js
10615 silly lockFile a7ee75d5-les-flatiron-node-modules-prompt tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
10616 silly lockFile a7ee75d5-les-flatiron-node-modules-prompt tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
10617 silly lockFile e90ea4b1-nzo-npm-prompt-0-2-9-package-tgz tar:///home/lerenzo/.npm/prompt/0.2.9/package.tgz
10618 silly lockFile e90ea4b1-nzo-npm-prompt-0-2-9-package-tgz tar:///home/lerenzo/.npm/prompt/0.2.9/package.tgz
10619 info preinstall prompt@0.2.9
10620 verbose readDependencies using package.json deps
10621 verbose readDependencies using package.json deps
10622 silly gunzTarPerm extractEntry test/server/http/before-test.js
10623 silly gunzTarPerm extractEntry test/server/http/http-test.js
10624 verbose cache add [ 'utile@0.1.x', null ]
10625 verbose cache add name=undefined spec="utile@0.1.x" args=["utile@0.1.x",null]
10626 verbose parsed url { protocol: null,
10626 verbose parsed url   slashes: null,
10626 verbose parsed url   auth: null,
10626 verbose parsed url   host: null,
10626 verbose parsed url   port: null,
10626 verbose parsed url   hostname: null,
10626 verbose parsed url   hash: null,
10626 verbose parsed url   search: null,
10626 verbose parsed url   query: null,
10626 verbose parsed url   pathname: 'utile@0.1.x',
10626 verbose parsed url   path: 'utile@0.1.x',
10626 verbose parsed url   href: 'utile@0.1.x' }
10627 verbose cache add name="utile" spec="0.1.x" args=["utile","0.1.x"]
10628 verbose parsed url { protocol: null,
10628 verbose parsed url   slashes: null,
10628 verbose parsed url   auth: null,
10628 verbose parsed url   host: null,
10628 verbose parsed url   port: null,
10628 verbose parsed url   hostname: null,
10628 verbose parsed url   hash: null,
10628 verbose parsed url   search: null,
10628 verbose parsed url   query: null,
10628 verbose parsed url   pathname: '0.1.x',
10628 verbose parsed url   path: '0.1.x',
10628 verbose parsed url   href: '0.1.x' }
10629 verbose addNamed [ 'utile', '0.1.x' ]
10630 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
10631 silly lockFile 67dcb77e-utile-0-1-x utile@0.1.x
10632 verbose lock utile@0.1.x /home/lerenzo/.npm/67dcb77e-utile-0-1-x.lock
10633 verbose cache add [ 'read@1.0.x', null ]
10634 verbose cache add name=undefined spec="read@1.0.x" args=["read@1.0.x",null]
10635 verbose parsed url { protocol: null,
10635 verbose parsed url   slashes: null,
10635 verbose parsed url   auth: null,
10635 verbose parsed url   host: null,
10635 verbose parsed url   port: null,
10635 verbose parsed url   hostname: null,
10635 verbose parsed url   hash: null,
10635 verbose parsed url   search: null,
10635 verbose parsed url   query: null,
10635 verbose parsed url   pathname: 'read@1.0.x',
10635 verbose parsed url   path: 'read@1.0.x',
10635 verbose parsed url   href: 'read@1.0.x' }
10636 verbose cache add name="read" spec="1.0.x" args=["read","1.0.x"]
10637 verbose parsed url { protocol: null,
10637 verbose parsed url   slashes: null,
10637 verbose parsed url   auth: null,
10637 verbose parsed url   host: null,
10637 verbose parsed url   port: null,
10637 verbose parsed url   hostname: null,
10637 verbose parsed url   hash: null,
10637 verbose parsed url   search: null,
10637 verbose parsed url   query: null,
10637 verbose parsed url   pathname: '1.0.x',
10637 verbose parsed url   path: '1.0.x',
10637 verbose parsed url   href: '1.0.x' }
10638 verbose addNamed [ 'read', '1.0.x' ]
10639 verbose cache add [ 'revalidator@0.1.x', null ]
10640 verbose cache add name=undefined spec="revalidator@0.1.x" args=["revalidator@0.1.x",null]
10641 verbose parsed url { protocol: null,
10641 verbose parsed url   slashes: null,
10641 verbose parsed url   auth: null,
10641 verbose parsed url   host: null,
10641 verbose parsed url   port: null,
10641 verbose parsed url   hostname: null,
10641 verbose parsed url   hash: null,
10641 verbose parsed url   search: null,
10641 verbose parsed url   query: null,
10641 verbose parsed url   pathname: 'revalidator@0.1.x',
10641 verbose parsed url   path: 'revalidator@0.1.x',
10641 verbose parsed url   href: 'revalidator@0.1.x' }
10642 verbose cache add name="revalidator" spec="0.1.x" args=["revalidator","0.1.x"]
10643 verbose parsed url { protocol: null,
10643 verbose parsed url   slashes: null,
10643 verbose parsed url   auth: null,
10643 verbose parsed url   host: null,
10643 verbose parsed url   port: null,
10643 verbose parsed url   hostname: null,
10643 verbose parsed url   hash: null,
10643 verbose parsed url   search: null,
10643 verbose parsed url   query: null,
10643 verbose parsed url   pathname: '0.1.x',
10643 verbose parsed url   path: '0.1.x',
10643 verbose parsed url   href: '0.1.x' }
10644 verbose addNamed [ 'revalidator', '0.1.x' ]
10645 verbose cache add [ 'winston@0.6.x', null ]
10646 verbose cache add name=undefined spec="winston@0.6.x" args=["winston@0.6.x",null]
10647 verbose parsed url { protocol: null,
10647 verbose parsed url   slashes: null,
10647 verbose parsed url   auth: null,
10647 verbose parsed url   host: null,
10647 verbose parsed url   port: null,
10647 verbose parsed url   hostname: null,
10647 verbose parsed url   hash: null,
10647 verbose parsed url   search: null,
10647 verbose parsed url   query: null,
10647 verbose parsed url   pathname: 'winston@0.6.x',
10647 verbose parsed url   path: 'winston@0.6.x',
10647 verbose parsed url   href: 'winston@0.6.x' }
10648 verbose cache add name="winston" spec="0.6.x" args=["winston","0.6.x"]
10649 verbose parsed url { protocol: null,
10649 verbose parsed url   slashes: null,
10649 verbose parsed url   auth: null,
10649 verbose parsed url   host: null,
10649 verbose parsed url   port: null,
10649 verbose parsed url   hostname: null,
10649 verbose parsed url   hash: null,
10649 verbose parsed url   search: null,
10649 verbose parsed url   query: null,
10649 verbose parsed url   pathname: '0.6.x',
10649 verbose parsed url   path: '0.6.x',
10649 verbose parsed url   href: '0.6.x' }
10650 verbose addNamed [ 'winston', '0.6.x' ]
10651 silly addNameRange { name: 'utile', range: '>=0.1.0-0 <0.2.0-0', hasData: false }
10652 verbose url raw utile
10653 verbose url resolving [ 'https://registry.npmjs.org/', './utile' ]
10654 verbose url resolved https://registry.npmjs.org/utile
10655 info trying registry request attempt 1 at 14:11:48
10656 http GET https://registry.npmjs.org/utile
10657 silly gunzTarPerm extractEntry test/server/http/methods-test.js
10658 silly gunzTarPerm extractEntry test/server/http/responses-test.js
10659 silly gunzTarPerm extractEntry test/server/http/stream-test.js
10660 silly gunzTarPerm extractEntry build/director.js
10661 silly gunzTarPerm extractEntry build/director.min.js
10662 silly gunzTarPerm extractEntry build/ender.js
10663 silly lockFile 8c65cc5c-s-flatiron-node-modules-broadway tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
10664 silly lockFile 8c65cc5c-s-flatiron-node-modules-broadway tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
10665 silly lockFile 6dac2c1f-o-npm-broadway-0-2-7-package-tgz tar:///home/lerenzo/.npm/broadway/0.2.7/package.tgz
10666 silly lockFile 6dac2c1f-o-npm-broadway-0-2-7-package-tgz tar:///home/lerenzo/.npm/broadway/0.2.7/package.tgz
10667 info preinstall broadway@0.2.7
10668 verbose readDependencies using package.json deps
10669 verbose readDependencies using package.json deps
10670 verbose cache add [ 'cliff@0.1.8', null ]
10671 verbose cache add name=undefined spec="cliff@0.1.8" args=["cliff@0.1.8",null]
10672 verbose parsed url { protocol: null,
10672 verbose parsed url   slashes: null,
10672 verbose parsed url   auth: null,
10672 verbose parsed url   host: null,
10672 verbose parsed url   port: null,
10672 verbose parsed url   hostname: null,
10672 verbose parsed url   hash: null,
10672 verbose parsed url   search: null,
10672 verbose parsed url   query: null,
10672 verbose parsed url   pathname: 'cliff@0.1.8',
10672 verbose parsed url   path: 'cliff@0.1.8',
10672 verbose parsed url   href: 'cliff@0.1.8' }
10673 verbose cache add name="cliff" spec="0.1.8" args=["cliff","0.1.8"]
10674 verbose parsed url { protocol: null,
10674 verbose parsed url   slashes: null,
10674 verbose parsed url   auth: null,
10674 verbose parsed url   host: null,
10674 verbose parsed url   port: null,
10674 verbose parsed url   hostname: null,
10674 verbose parsed url   hash: null,
10674 verbose parsed url   search: null,
10674 verbose parsed url   query: null,
10674 verbose parsed url   pathname: '0.1.8',
10674 verbose parsed url   path: '0.1.8',
10674 verbose parsed url   href: '0.1.8' }
10675 verbose addNamed [ 'cliff', '0.1.8' ]
10676 verbose addNamed [ '0.1.8', '0.1.8' ]
10677 silly lockFile a0c35da7-cliff-0-1-8 cliff@0.1.8
10678 verbose lock cliff@0.1.8 /home/lerenzo/.npm/a0c35da7-cliff-0-1-8.lock
10679 verbose cache add [ 'eventemitter2@0.4.11', null ]
10680 verbose cache add name=undefined spec="eventemitter2@0.4.11" args=["eventemitter2@0.4.11",null]
10681 verbose parsed url { protocol: null,
10681 verbose parsed url   slashes: null,
10681 verbose parsed url   auth: null,
10681 verbose parsed url   host: null,
10681 verbose parsed url   port: null,
10681 verbose parsed url   hostname: null,
10681 verbose parsed url   hash: null,
10681 verbose parsed url   search: null,
10681 verbose parsed url   query: null,
10681 verbose parsed url   pathname: 'eventemitter2@0.4.11',
10681 verbose parsed url   path: 'eventemitter2@0.4.11',
10681 verbose parsed url   href: 'eventemitter2@0.4.11' }
10682 verbose cache add name="eventemitter2" spec="0.4.11" args=["eventemitter2","0.4.11"]
10683 verbose parsed url { protocol: null,
10683 verbose parsed url   slashes: null,
10683 verbose parsed url   auth: null,
10683 verbose parsed url   host: null,
10683 verbose parsed url   port: null,
10683 verbose parsed url   hostname: null,
10683 verbose parsed url   hash: null,
10683 verbose parsed url   search: null,
10683 verbose parsed url   query: null,
10683 verbose parsed url   pathname: '0.4.11',
10683 verbose parsed url   path: '0.4.11',
10683 verbose parsed url   href: '0.4.11' }
10684 verbose addNamed [ 'eventemitter2', '0.4.11' ]
10685 verbose addNamed [ '0.4.11', '0.4.11' ]
10686 silly lockFile 1047a589-eventemitter2-0-4-11 eventemitter2@0.4.11
10687 verbose lock eventemitter2@0.4.11 /home/lerenzo/.npm/1047a589-eventemitter2-0-4-11.lock
10688 verbose cache add [ 'nconf@0.6.7', null ]
10689 verbose cache add name=undefined spec="nconf@0.6.7" args=["nconf@0.6.7",null]
10690 verbose parsed url { protocol: null,
10690 verbose parsed url   slashes: null,
10690 verbose parsed url   auth: null,
10690 verbose parsed url   host: null,
10690 verbose parsed url   port: null,
10690 verbose parsed url   hostname: null,
10690 verbose parsed url   hash: null,
10690 verbose parsed url   search: null,
10690 verbose parsed url   query: null,
10690 verbose parsed url   pathname: 'nconf@0.6.7',
10690 verbose parsed url   path: 'nconf@0.6.7',
10690 verbose parsed url   href: 'nconf@0.6.7' }
10691 verbose cache add name="nconf" spec="0.6.7" args=["nconf","0.6.7"]
10692 verbose parsed url { protocol: null,
10692 verbose parsed url   slashes: null,
10692 verbose parsed url   auth: null,
10692 verbose parsed url   host: null,
10692 verbose parsed url   port: null,
10692 verbose parsed url   hostname: null,
10692 verbose parsed url   hash: null,
10692 verbose parsed url   search: null,
10692 verbose parsed url   query: null,
10692 verbose parsed url   pathname: '0.6.7',
10692 verbose parsed url   path: '0.6.7',
10692 verbose parsed url   href: '0.6.7' }
10693 verbose addNamed [ 'nconf', '0.6.7' ]
10694 verbose addNamed [ '0.6.7', '0.6.7' ]
10695 silly lockFile 9482211e-nconf-0-6-7 nconf@0.6.7
10696 verbose lock nconf@0.6.7 /home/lerenzo/.npm/9482211e-nconf-0-6-7.lock
10697 verbose cache add [ 'winston@0.6.2', null ]
10698 verbose cache add name=undefined spec="winston@0.6.2" args=["winston@0.6.2",null]
10699 verbose parsed url { protocol: null,
10699 verbose parsed url   slashes: null,
10699 verbose parsed url   auth: null,
10699 verbose parsed url   host: null,
10699 verbose parsed url   port: null,
10699 verbose parsed url   hostname: null,
10699 verbose parsed url   hash: null,
10699 verbose parsed url   search: null,
10699 verbose parsed url   query: null,
10699 verbose parsed url   pathname: 'winston@0.6.2',
10699 verbose parsed url   path: 'winston@0.6.2',
10699 verbose parsed url   href: 'winston@0.6.2' }
10700 verbose cache add name="winston" spec="0.6.2" args=["winston","0.6.2"]
10701 verbose parsed url { protocol: null,
10701 verbose parsed url   slashes: null,
10701 verbose parsed url   auth: null,
10701 verbose parsed url   host: null,
10701 verbose parsed url   port: null,
10701 verbose parsed url   hostname: null,
10701 verbose parsed url   hash: null,
10701 verbose parsed url   search: null,
10701 verbose parsed url   query: null,
10701 verbose parsed url   pathname: '0.6.2',
10701 verbose parsed url   path: '0.6.2',
10701 verbose parsed url   href: '0.6.2' }
10702 verbose addNamed [ 'winston', '0.6.2' ]
10703 verbose addNamed [ '0.6.2', '0.6.2' ]
10704 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
10705 verbose lock winston@0.6.2 /home/lerenzo/.npm/6b025e09-winston-0-6-2.lock
10706 verbose url raw cliff/0.1.8
10707 verbose url resolving [ 'https://registry.npmjs.org/', './cliff/0.1.8' ]
10708 verbose url resolved https://registry.npmjs.org/cliff/0.1.8
10709 info trying registry request attempt 1 at 14:11:48
10710 http GET https://registry.npmjs.org/cliff/0.1.8
10711 verbose cache add [ 'utile@0.1.7', null ]
10712 verbose cache add name=undefined spec="utile@0.1.7" args=["utile@0.1.7",null]
10713 verbose parsed url { protocol: null,
10713 verbose parsed url   slashes: null,
10713 verbose parsed url   auth: null,
10713 verbose parsed url   host: null,
10713 verbose parsed url   port: null,
10713 verbose parsed url   hostname: null,
10713 verbose parsed url   hash: null,
10713 verbose parsed url   search: null,
10713 verbose parsed url   query: null,
10713 verbose parsed url   pathname: 'utile@0.1.7',
10713 verbose parsed url   path: 'utile@0.1.7',
10713 verbose parsed url   href: 'utile@0.1.7' }
10714 verbose cache add name="utile" spec="0.1.7" args=["utile","0.1.7"]
10715 verbose parsed url { protocol: null,
10715 verbose parsed url   slashes: null,
10715 verbose parsed url   auth: null,
10715 verbose parsed url   host: null,
10715 verbose parsed url   port: null,
10715 verbose parsed url   hostname: null,
10715 verbose parsed url   hash: null,
10715 verbose parsed url   search: null,
10715 verbose parsed url   query: null,
10715 verbose parsed url   pathname: '0.1.7',
10715 verbose parsed url   path: '0.1.7',
10715 verbose parsed url   href: '0.1.7' }
10716 verbose addNamed [ 'utile', '0.1.7' ]
10717 verbose addNamed [ '0.1.7', '0.1.7' ]
10718 silly lockFile 78905450-utile-0-1-7 utile@0.1.7
10719 verbose lock utile@0.1.7 /home/lerenzo/.npm/78905450-utile-0-1-7.lock
10720 verbose url raw eventemitter2/0.4.11
10721 verbose url resolving [ 'https://registry.npmjs.org/', './eventemitter2/0.4.11' ]
10722 verbose url resolved https://registry.npmjs.org/eventemitter2/0.4.11
10723 info trying registry request attempt 1 at 14:11:48
10724 http GET https://registry.npmjs.org/eventemitter2/0.4.11
10725 verbose url raw nconf/0.6.7
10726 verbose url resolving [ 'https://registry.npmjs.org/', './nconf/0.6.7' ]
10727 verbose url resolved https://registry.npmjs.org/nconf/0.6.7
10728 info trying registry request attempt 1 at 14:11:48
10729 http GET https://registry.npmjs.org/nconf/0.6.7
10730 verbose url raw winston/0.6.2
10731 verbose url resolving [ 'https://registry.npmjs.org/', './winston/0.6.2' ]
10732 verbose url resolved https://registry.npmjs.org/winston/0.6.2
10733 info trying registry request attempt 1 at 14:11:48
10734 http GET https://registry.npmjs.org/winston/0.6.2
10735 verbose url raw utile/0.1.7
10736 verbose url resolving [ 'https://registry.npmjs.org/', './utile/0.1.7' ]
10737 verbose url resolved https://registry.npmjs.org/utile/0.1.7
10738 info trying registry request attempt 1 at 14:11:48
10739 http GET https://registry.npmjs.org/utile/0.1.7
10740 silly lockFile 307f429a-s-flatiron-node-modules-director tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director
10741 silly lockFile 307f429a-s-flatiron-node-modules-director tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director
10742 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10743 silly lockFile ccb21f37--npm-director-1-1-10-package-tgz tar:///home/lerenzo/.npm/director/1.1.10/package.tgz
10744 info preinstall director@1.1.10
10745 verbose readDependencies using package.json deps
10746 verbose readDependencies using package.json deps
10747 silly resolved []
10748 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director
10749 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/director
10750 verbose linkStuff [ true,
10750 verbose linkStuff   '/usr/local/lib/node_modules',
10750 verbose linkStuff   false,
10750 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules' ]
10751 info linkStuff director@1.1.10
10752 verbose linkBins director@1.1.10
10753 verbose linkMans director@1.1.10
10754 verbose rebuildBundles director@1.1.10
10755 info install director@1.1.10
10756 info postinstall director@1.1.10
10757 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz
10758 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10759 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package /home/lerenzo/.npm/67adbfea-7805-0-48960505286231637-package.lock
10760 silly lockFile 75fe1580-7805-0-48960505286231637-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz
10761 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz /home/lerenzo/.npm/75fe1580-7805-0-48960505286231637-tmp-tgz.lock
10762 silly gunzTarPerm modes [ '755', '644' ]
10763 silly gunzTarPerm extractEntry index.js
10764 silly gunzTarPerm extractEntry package.json
10765 silly gunzTarPerm extractEntry README.markdown
10766 silly gunzTarPerm extractEntry example/strings_src.js
10767 silly gunzTarPerm extractEntry example/strings.js
10768 silly gunzTarPerm extractEntry test/word.js
10769 silly gunzTarPerm extractEntry test/strings.js
10770 silly gunzTarPerm extractEntry test/both.js
10771 silly gunzTarPerm extractEntry test/nested.js
10772 silly gunzTarPerm extractEntry test/files/word.js
10773 silly gunzTarPerm extractEntry test/files/strings.js
10774 silly gunzTarPerm extractEntry test/files/both.js
10775 silly gunzTarPerm extractEntry test/files/nested.js
10776 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10777 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10778 silly lockFile 75fe1580-7805-0-48960505286231637-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz
10779 silly lockFile 75fe1580-7805-0-48960505286231637-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/tmp.tgz
10780 verbose tar pack [ '/home/lerenzo/.npm/detective/0.0.4/package.tgz',
10780 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package' ]
10781 verbose tarball /home/lerenzo/.npm/detective/0.0.4/package.tgz
10782 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10783 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10784 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package /home/lerenzo/.npm/67adbfea-7805-0-48960505286231637-package.lock
10785 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10786 verbose lock tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz /home/lerenzo/.npm/cea1a593--npm-detective-0-0-4-package-tgz.lock
10787 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10788 silly lockFile 67adbfea-7805-0-48960505286231637-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307805-0.48960505286231637/package
10789 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10790 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10791 silly lockFile 2200a7fc-enzo-npm-detective-0-0-4-package /home/lerenzo/.npm/detective/0.0.4/package
10792 verbose lock /home/lerenzo/.npm/detective/0.0.4/package /home/lerenzo/.npm/2200a7fc-enzo-npm-detective-0-0-4-package.lock
10793 silly lockFile 2200a7fc-enzo-npm-detective-0-0-4-package /home/lerenzo/.npm/detective/0.0.4/package
10794 silly lockFile 2200a7fc-enzo-npm-detective-0-0-4-package /home/lerenzo/.npm/detective/0.0.4/package
10795 verbose tar unpack /home/lerenzo/.npm/detective/0.0.4/package.tgz
10796 silly lockFile d73a9a00-enzo-npm-detective-0-0-4-package tar:///home/lerenzo/.npm/detective/0.0.4/package
10797 verbose lock tar:///home/lerenzo/.npm/detective/0.0.4/package /home/lerenzo/.npm/d73a9a00-enzo-npm-detective-0-0-4-package.lock
10798 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10799 verbose lock tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz /home/lerenzo/.npm/cea1a593--npm-detective-0-0-4-package-tgz.lock
10800 silly gunzTarPerm modes [ '755', '644' ]
10801 silly gunzTarPerm extractEntry package.json
10802 silly gunzTarPerm extractEntry index.js
10803 silly gunzTarPerm extractEntry README.markdown
10804 silly gunzTarPerm extractEntry example/strings.js
10805 silly gunzTarPerm extractEntry example/strings_src.js
10806 silly gunzTarPerm extractEntry test/both.js
10807 silly gunzTarPerm extractEntry test/nested.js
10808 silly gunzTarPerm extractEntry test/strings.js
10809 silly gunzTarPerm extractEntry test/word.js
10810 silly gunzTarPerm extractEntry test/files/both.js
10811 silly gunzTarPerm extractEntry test/files/nested.js
10812 silly gunzTarPerm extractEntry test/files/strings.js
10813 silly gunzTarPerm extractEntry test/files/word.js
10814 silly lockFile d73a9a00-enzo-npm-detective-0-0-4-package tar:///home/lerenzo/.npm/detective/0.0.4/package
10815 silly lockFile d73a9a00-enzo-npm-detective-0-0-4-package tar:///home/lerenzo/.npm/detective/0.0.4/package
10816 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10817 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
10818 verbose chmod /home/lerenzo/.npm/detective/0.0.4/package.tgz 644
10819 verbose chown /home/lerenzo/.npm/detective/0.0.4/package.tgz [ 1000, 1000 ]
10820 silly lockFile 37c6669d-rg-detective-detective-0-0-4-tgz https://registry.npmjs.org/detective/-/detective-0.0.4.tgz
10821 silly lockFile 37c6669d-rg-detective-detective-0-0-4-tgz https://registry.npmjs.org/detective/-/detective-0.0.4.tgz
10822 silly lockFile 0b6602ae-detective-0-0-4 detective@0.0.4
10823 silly lockFile 0b6602ae-detective-0-0-4 detective@0.0.4
10824 silly lockFile d4bfd415-detective-0-0-x detective@0.0.x
10825 silly lockFile d4bfd415-detective-0-0-x detective@0.0.x
10826 http 200 https://registry.npmjs.org/form-data
10827 silly registry.get cb [ 200,
10827 silly registry.get   { vary: 'Accept',
10827 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
10827 silly registry.get     etag: '"50FQQWRSDCFZN0QJ5BQTAMRYA"',
10827 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:38 GMT',
10827 silly registry.get     'content-type': 'application/json',
10827 silly registry.get     'content-length': '56004' } ]
10828 silly addNameRange number 2 { name: 'form-data', range: '>=0.0.3-0 <0.1.0-0', hasData: true }
10829 silly addNameRange versions [ 'form-data',
10829 silly addNameRange   [ '0.0.0',
10829 silly addNameRange     '0.0.2',
10829 silly addNameRange     '0.0.3',
10829 silly addNameRange     '0.0.4',
10829 silly addNameRange     '0.0.5',
10829 silly addNameRange     '0.0.6',
10829 silly addNameRange     '0.0.7',
10829 silly addNameRange     '0.0.8',
10829 silly addNameRange     '0.0.9',
10829 silly addNameRange     '0.0.10',
10829 silly addNameRange     '0.1.0',
10829 silly addNameRange     '0.1.1',
10829 silly addNameRange     '0.1.2' ] ]
10830 verbose addNamed [ 'form-data', '0.0.10' ]
10831 verbose addNamed [ '0.0.10', '0.0.10' ]
10832 silly lockFile db20d55d-form-data-0-0-10 form-data@0.0.10
10833 verbose lock form-data@0.0.10 /home/lerenzo/.npm/db20d55d-form-data-0-0-10.lock
10834 silly lockFile f644788f-g-form-data-form-data-0-0-10-tgz https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz
10835 verbose lock https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz /home/lerenzo/.npm/f644788f-g-form-data-form-data-0-0-10-tgz.lock
10836 verbose addRemoteTarball [ 'https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz',
10836 verbose addRemoteTarball   'db345a5378d86aeeb1ed5d553b869ac192d2f5ed' ]
10837 info retry fetch attempt 1 at 14:11:52
10838 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz
10839 http GET https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz
10840 http 200 https://registry.npmjs.org/tunnel-agent
10841 silly registry.get cb [ 200,
10841 silly registry.get   { vary: 'Accept',
10841 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
10841 silly registry.get     etag: '"D3JCRSD8BFKXL62KVXWMIS7WS"',
10841 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:48 GMT',
10841 silly registry.get     'content-type': 'application/json',
10841 silly registry.get     'content-length': '2636' } ]
10842 silly addNameRange number 2 { name: 'tunnel-agent',
10842 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
10842 silly addNameRange   hasData: true }
10843 silly addNameRange versions [ 'tunnel-agent', [ '0.2.0', '0.3.0' ] ]
10844 verbose addNamed [ 'tunnel-agent', '0.2.0' ]
10845 verbose addNamed [ '0.2.0', '0.2.0' ]
10846 silly lockFile ba879b4f-tunnel-agent-0-2-0 tunnel-agent@0.2.0
10847 verbose lock tunnel-agent@0.2.0 /home/lerenzo/.npm/ba879b4f-tunnel-agent-0-2-0.lock
10848 silly lockFile 173e23d1-nel-agent-tunnel-agent-0-2-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz
10849 verbose lock https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz /home/lerenzo/.npm/173e23d1-nel-agent-tunnel-agent-0-2-0-tgz.lock
10850 verbose addRemoteTarball [ 'https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz',
10850 verbose addRemoteTarball   '6853c2afb1b2109e45629e492bde35f459ea69e8' ]
10851 info retry fetch attempt 1 at 14:11:52
10852 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz
10853 http GET https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz
10854 http 200 https://registry.npmjs.org/forever-agent
10855 silly registry.get cb [ 200,
10855 silly registry.get   { vary: 'Accept',
10855 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10855 silly registry.get     etag: '"3UGXS4GVMPIYP8ZN3YM36NV58"',
10855 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:47 GMT',
10855 silly registry.get     'content-type': 'application/json',
10855 silly registry.get     'content-length': '4941' } ]
10856 silly addNameRange number 2 { name: 'forever-agent',
10856 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
10856 silly addNameRange   hasData: true }
10857 silly addNameRange versions [ 'forever-agent', [ '0.2.0', '0.3.0', '0.4.0', '0.5.0' ] ]
10858 verbose addNamed [ 'forever-agent', '0.2.0' ]
10859 verbose addNamed [ '0.2.0', '0.2.0' ]
10860 silly lockFile 88b53d74-forever-agent-0-2-0 forever-agent@0.2.0
10861 verbose lock forever-agent@0.2.0 /home/lerenzo/.npm/88b53d74-forever-agent-0-2-0.lock
10862 silly lockFile b38452d6-er-agent-forever-agent-0-2-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz
10863 verbose lock https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz /home/lerenzo/.npm/b38452d6-er-agent-forever-agent-0-2-0-tgz.lock
10864 verbose addRemoteTarball [ 'https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz',
10864 verbose addRemoteTarball   'e1c25c7ad44e09c38f233876c76fcc24ff843b1f' ]
10865 info retry fetch attempt 1 at 14:11:52
10866 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz
10867 http GET https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz
10868 http 304 https://registry.npmjs.org/mime
10869 silly registry.get cb [ 304,
10869 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10869 silly registry.get     etag: '"7EO2K9LTTTQE0CBK2EEXXT9R"',
10869 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:52 GMT',
10869 silly registry.get     'content-length': '0' } ]
10870 verbose etag mime from cache
10871 silly addNameRange number 2 { name: 'mime', range: '>=1.2.7-0 <1.3.0-0', hasData: true }
10872 silly addNameRange versions [ 'mime',
10872 silly addNameRange   [ '1.0.0',
10872 silly addNameRange     '1.1.0',
10872 silly addNameRange     '1.2.1',
10872 silly addNameRange     '1.2.2',
10872 silly addNameRange     '1.2.3',
10872 silly addNameRange     '1.2.4',
10872 silly addNameRange     '1.2.5',
10872 silly addNameRange     '1.2.6',
10872 silly addNameRange     '1.2.7',
10872 silly addNameRange     '1.2.8',
10872 silly addNameRange     '1.2.9',
10872 silly addNameRange     '1.2.10',
10872 silly addNameRange     '1.2.11' ] ]
10873 verbose addNamed [ 'mime', '1.2.11' ]
10874 verbose addNamed [ '1.2.11', '1.2.11' ]
10875 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10876 verbose lock mime@1.2.11 /home/lerenzo/.npm/c4b0741f-mime-1-2-11.lock
10877 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10878 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10879 silly lockFile 3725bc70-mime-1-2-7 mime@~1.2.7
10880 silly lockFile 3725bc70-mime-1-2-7 mime@~1.2.7
10881 http 200 https://registry.npmjs.org/json-stringify-safe
10882 silly registry.get cb [ 200,
10882 silly registry.get   { vary: 'Accept',
10882 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
10882 silly registry.get     etag: '"8A56ZXGKTYZBW8EKLRT53TG0G"',
10882 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:52 GMT',
10882 silly registry.get     'content-type': 'application/json',
10882 silly registry.get     'content-length': '7781' } ]
10883 silly addNameRange number 2 { name: 'json-stringify-safe',
10883 silly addNameRange   range: '>=3.0.0-0 <3.1.0-0',
10883 silly addNameRange   hasData: true }
10884 silly addNameRange versions [ 'json-stringify-safe',
10884 silly addNameRange   [ '2.0.0', '3.0.0', '4.0.0', '5.0.0' ] ]
10885 verbose addNamed [ 'json-stringify-safe', '3.0.0' ]
10886 verbose addNamed [ '3.0.0', '3.0.0' ]
10887 silly lockFile f18d29ee-json-stringify-safe-3-0-0 json-stringify-safe@3.0.0
10888 verbose lock json-stringify-safe@3.0.0 /home/lerenzo/.npm/f18d29ee-json-stringify-safe-3-0-0.lock
10889 silly lockFile fe362497-fe-json-stringify-safe-3-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz
10890 verbose lock https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz /home/lerenzo/.npm/fe362497-fe-json-stringify-safe-3-0-0-tgz.lock
10891 verbose addRemoteTarball [ 'https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz',
10891 verbose addRemoteTarball   '9db7b0e530c7f289c5e8c8432af191c2ff75a5b3' ]
10892 info retry fetch attempt 1 at 14:11:53
10893 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz
10894 http GET https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz
10895 http 200 https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz
10896 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz
10897 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10898 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package /home/lerenzo/.npm/725a35ff-07548-0-6864590756595135-package.lock
10899 silly lockFile 388d74bd-07548-0-6864590756595135-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz
10900 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz /home/lerenzo/.npm/388d74bd-07548-0-6864590756595135-tmp-tgz.lock
10901 silly gunzTarPerm modes [ '755', '644' ]
10902 silly gunzTarPerm extractEntry package.json
10903 silly gunzTarPerm extractEntry index.js
10904 silly gunzTarPerm extractEntry test.js
10905 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10906 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10907 silly lockFile 388d74bd-07548-0-6864590756595135-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz
10908 silly lockFile 388d74bd-07548-0-6864590756595135-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/tmp.tgz
10909 verbose tar pack [ '/home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz',
10909 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package' ]
10910 verbose tarball /home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10911 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10912 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10913 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package /home/lerenzo/.npm/725a35ff-07548-0-6864590756595135-package.lock
10914 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10915 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz /home/lerenzo/.npm/600f978d-npm-oauth-sign-0-2-0-package-tgz.lock
10916 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10917 silly lockFile 725a35ff-07548-0-6864590756595135-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572307548-0.6864590756595135/package
10918 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10919 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10920 silly lockFile 2a27897f-nzo-npm-oauth-sign-0-2-0-package /home/lerenzo/.npm/oauth-sign/0.2.0/package
10921 verbose lock /home/lerenzo/.npm/oauth-sign/0.2.0/package /home/lerenzo/.npm/2a27897f-nzo-npm-oauth-sign-0-2-0-package.lock
10922 silly lockFile 2a27897f-nzo-npm-oauth-sign-0-2-0-package /home/lerenzo/.npm/oauth-sign/0.2.0/package
10923 silly lockFile 2a27897f-nzo-npm-oauth-sign-0-2-0-package /home/lerenzo/.npm/oauth-sign/0.2.0/package
10924 verbose tar unpack /home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10925 silly lockFile 4ab923c3-nzo-npm-oauth-sign-0-2-0-package tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package
10926 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package /home/lerenzo/.npm/4ab923c3-nzo-npm-oauth-sign-0-2-0-package.lock
10927 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10928 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz /home/lerenzo/.npm/600f978d-npm-oauth-sign-0-2-0-package-tgz.lock
10929 silly gunzTarPerm modes [ '755', '644' ]
10930 silly gunzTarPerm extractEntry package.json
10931 silly gunzTarPerm extractEntry index.js
10932 silly gunzTarPerm extractEntry test.js
10933 silly lockFile 4ab923c3-nzo-npm-oauth-sign-0-2-0-package tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package
10934 silly lockFile 4ab923c3-nzo-npm-oauth-sign-0-2-0-package tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package
10935 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10936 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
10937 verbose chmod /home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz 644
10938 verbose chown /home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz [ 1000, 1000 ]
10939 silly lockFile 2ed0640a--oauth-sign-oauth-sign-0-2-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz
10940 silly lockFile 2ed0640a--oauth-sign-oauth-sign-0-2-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz
10941 silly lockFile 5137425d-oauth-sign-0-2-0 oauth-sign@0.2.0
10942 silly lockFile 5137425d-oauth-sign-0-2-0 oauth-sign@0.2.0
10943 silly lockFile d6e8c101-oauth-sign-0-2-0 oauth-sign@~0.2.0
10944 silly lockFile d6e8c101-oauth-sign-0-2-0 oauth-sign@~0.2.0
10945 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/tmp.tgz
10946 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
10947 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package /home/lerenzo/.npm/60c55be4-2886-0-24620776902884245-package.lock
10948 silly lockFile 4ff998b0-2886-0-24620776902884245-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/tmp.tgz
10949 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/tmp.tgz /home/lerenzo/.npm/4ff998b0-2886-0-24620776902884245-tmp-tgz.lock
10950 silly gunzTarPerm modes [ '755', '644' ]
10951 silly gunzTarPerm extractEntry package.json
10952 silly gunzTarPerm extractEntry .npmignore
10953 silly gunzTarPerm extractEntry README.md
10954 silly gunzTarPerm extractEntry LICENSE
10955 silly gunzTarPerm extractEntry index.js
10956 silly gunzTarPerm extractEntry tests/test-httpModule.js
10957 silly gunzTarPerm extractEntry tests/test-headers.js
10958 silly gunzTarPerm extractEntry tests/test-http-signature.js
10959 silly gunzTarPerm extractEntry tests/run.js
10960 silly gunzTarPerm extractEntry tests/test-hawk.js
10961 silly gunzTarPerm extractEntry tests/test-https.js
10962 silly gunzTarPerm extractEntry tests/test-localAddress.js
10963 silly gunzTarPerm extractEntry tests/test-oauth.js
10964 silly gunzTarPerm extractEntry tests/test-onelineproxy.js
10965 silly gunzTarPerm extractEntry tests/test-params.js
10966 silly gunzTarPerm extractEntry tests/test-form.js
10967 silly gunzTarPerm extractEntry tests/test-piped-redirect.js
10968 silly gunzTarPerm extractEntry tests/test-follow-all.js
10969 silly gunzTarPerm extractEntry tests/test-pipes.js
10970 silly gunzTarPerm extractEntry tests/test-follow-all-303.js
10971 silly gunzTarPerm extractEntry tests/test-pool.js
10972 silly gunzTarPerm extractEntry tests/test-errors.js
10973 silly gunzTarPerm extractEntry tests/test-protocol-changing-redirect.js
10974 silly gunzTarPerm extractEntry tests/test-emptyBody.js
10975 silly gunzTarPerm extractEntry tests/test-proxy.js
10976 silly gunzTarPerm extractEntry tests/test-digest-auth.js
10977 silly gunzTarPerm extractEntry tests/test-qs.js
10978 silly gunzTarPerm extractEntry tests/test-defaults.js
10979 silly gunzTarPerm extractEntry tests/test-redirect.js
10980 silly gunzTarPerm extractEntry tests/test-body.js
10981 silly gunzTarPerm extractEntry tests/test-s3.js
10982 silly gunzTarPerm extractEntry tests/test-basic-auth.js
10983 silly gunzTarPerm extractEntry tests/test-timeout.js
10984 silly gunzTarPerm extractEntry tests/test-agentOptions.js
10985 silly gunzTarPerm extractEntry tests/test-toJSON.js
10986 silly gunzTarPerm extractEntry tests/server.js
10987 silly gunzTarPerm extractEntry tests/test-tunnel.js
10988 silly gunzTarPerm extractEntry tests/test-https-strict.js
10989 silly gunzTarPerm extractEntry tests/squid.conf
10990 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
10991 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
10992 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
10993 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
10994 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
10995 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
10996 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
10997 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
10998 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
10999 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
11000 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
11001 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
11002 silly gunzTarPerm extractEntry tests/ssl/test.crt
11003 silly gunzTarPerm extractEntry tests/ssl/test.key
11004 silly gunzTarPerm extractEntry tests/googledoodle.jpg
11005 silly gunzTarPerm extractEntry tests/unicycle.jpg
11006 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11007 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11008 silly lockFile 4ff998b0-2886-0-24620776902884245-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/tmp.tgz
11009 silly lockFile 4ff998b0-2886-0-24620776902884245-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/tmp.tgz
11010 verbose tar pack [ '/home/lerenzo/.npm/request/2.25.0/package.tgz',
11010 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package' ]
11011 verbose tarball /home/lerenzo/.npm/request/2.25.0/package.tgz
11012 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11013 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11014 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package /home/lerenzo/.npm/60c55be4-2886-0-24620776902884245-package.lock
11015 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11016 verbose lock tar:///home/lerenzo/.npm/request/2.25.0/package.tgz /home/lerenzo/.npm/99ca1037-o-npm-request-2-25-0-package-tgz.lock
11017 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11018 silly lockFile 60c55be4-2886-0-24620776902884245-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572292886-0.24620776902884245/package
11019 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11020 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11021 silly lockFile 12bb9847-renzo-npm-request-2-25-0-package /home/lerenzo/.npm/request/2.25.0/package
11022 verbose lock /home/lerenzo/.npm/request/2.25.0/package /home/lerenzo/.npm/12bb9847-renzo-npm-request-2-25-0-package.lock
11023 silly lockFile 12bb9847-renzo-npm-request-2-25-0-package /home/lerenzo/.npm/request/2.25.0/package
11024 silly lockFile 12bb9847-renzo-npm-request-2-25-0-package /home/lerenzo/.npm/request/2.25.0/package
11025 verbose tar unpack /home/lerenzo/.npm/request/2.25.0/package.tgz
11026 silly lockFile 05541c5c-renzo-npm-request-2-25-0-package tar:///home/lerenzo/.npm/request/2.25.0/package
11027 verbose lock tar:///home/lerenzo/.npm/request/2.25.0/package /home/lerenzo/.npm/05541c5c-renzo-npm-request-2-25-0-package.lock
11028 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11029 verbose lock tar:///home/lerenzo/.npm/request/2.25.0/package.tgz /home/lerenzo/.npm/99ca1037-o-npm-request-2-25-0-package-tgz.lock
11030 silly gunzTarPerm modes [ '755', '644' ]
11031 silly gunzTarPerm extractEntry package.json
11032 silly gunzTarPerm extractEntry .npmignore
11033 silly gunzTarPerm extractEntry README.md
11034 silly gunzTarPerm extractEntry LICENSE
11035 silly gunzTarPerm extractEntry index.js
11036 silly gunzTarPerm extractEntry tests/test-httpModule.js
11037 silly gunzTarPerm extractEntry tests/test-headers.js
11038 silly gunzTarPerm extractEntry tests/test-http-signature.js
11039 silly gunzTarPerm extractEntry tests/run.js
11040 silly gunzTarPerm extractEntry tests/test-hawk.js
11041 silly gunzTarPerm extractEntry tests/test-https.js
11042 silly gunzTarPerm extractEntry tests/test-localAddress.js
11043 silly gunzTarPerm extractEntry tests/test-oauth.js
11044 silly gunzTarPerm extractEntry tests/test-onelineproxy.js
11045 silly gunzTarPerm extractEntry tests/test-params.js
11046 silly gunzTarPerm extractEntry tests/test-form.js
11047 silly gunzTarPerm extractEntry tests/test-piped-redirect.js
11048 silly gunzTarPerm extractEntry tests/test-follow-all.js
11049 silly gunzTarPerm extractEntry tests/test-pipes.js
11050 silly gunzTarPerm extractEntry tests/test-follow-all-303.js
11051 silly gunzTarPerm extractEntry tests/test-pool.js
11052 silly gunzTarPerm extractEntry tests/test-errors.js
11053 silly gunzTarPerm extractEntry tests/test-protocol-changing-redirect.js
11054 silly gunzTarPerm extractEntry tests/test-emptyBody.js
11055 silly gunzTarPerm extractEntry tests/test-proxy.js
11056 silly gunzTarPerm extractEntry tests/test-digest-auth.js
11057 silly gunzTarPerm extractEntry tests/test-qs.js
11058 silly gunzTarPerm extractEntry tests/test-defaults.js
11059 silly gunzTarPerm extractEntry tests/test-redirect.js
11060 silly gunzTarPerm extractEntry tests/test-body.js
11061 silly gunzTarPerm extractEntry tests/test-s3.js
11062 silly gunzTarPerm extractEntry tests/test-basic-auth.js
11063 silly gunzTarPerm extractEntry tests/test-timeout.js
11064 silly gunzTarPerm extractEntry tests/test-agentOptions.js
11065 silly gunzTarPerm extractEntry tests/test-toJSON.js
11066 silly gunzTarPerm extractEntry tests/server.js
11067 silly gunzTarPerm extractEntry tests/test-tunnel.js
11068 silly gunzTarPerm extractEntry tests/test-https-strict.js
11069 silly gunzTarPerm extractEntry tests/squid.conf
11070 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
11071 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
11072 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
11073 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
11074 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
11075 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
11076 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
11077 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
11078 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
11079 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
11080 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
11081 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
11082 silly gunzTarPerm extractEntry tests/ssl/test.crt
11083 silly gunzTarPerm extractEntry tests/ssl/test.key
11084 silly gunzTarPerm extractEntry tests/googledoodle.jpg
11085 silly gunzTarPerm extractEntry tests/unicycle.jpg
11086 silly lockFile 05541c5c-renzo-npm-request-2-25-0-package tar:///home/lerenzo/.npm/request/2.25.0/package
11087 silly lockFile 05541c5c-renzo-npm-request-2-25-0-package tar:///home/lerenzo/.npm/request/2.25.0/package
11088 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11089 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11090 verbose chmod /home/lerenzo/.npm/request/2.25.0/package.tgz 644
11091 verbose chown /home/lerenzo/.npm/request/2.25.0/package.tgz [ 1000, 1000 ]
11092 silly lockFile d7b7c58a-s-org-request-request-2-25-0-tgz https://registry.npmjs.org/request/-/request-2.25.0.tgz
11093 silly lockFile d7b7c58a-s-org-request-request-2-25-0-tgz https://registry.npmjs.org/request/-/request-2.25.0.tgz
11094 silly lockFile 7f4d00a1-request-2-25-0 request@2.25.0
11095 silly lockFile 7f4d00a1-request-2-25-0 request@2.25.0
11096 silly resolved [ { name: 'preacher-api',
11096 silly resolved     version: '0.1.7',
11096 silly resolved     description: 'Nodejitsu Preacher API client wrapper',
11096 silly resolved     main: './lib/client.js',
11096 silly resolved     scripts: { test: 'vows --spec -i ./test/client/*-test.js' },
11096 silly resolved     author: { name: 'Nodejitsu Inc' },
11096 silly resolved     license: 'MIT',
11096 silly resolved     devDependencies: { vows: '~0.7.0', nock: '~0.22.1' },
11096 silly resolved     dependencies: { request: '~2.25.0', primus: '~1.4.0', ws: '~0.4.28' },
11096 silly resolved     readme: '# preacher-api\n\nNodejitsu Preacher API client wrapper\n\n\n#### (C) Copyright 2010 - 2013, [Nodejitsu](http://nodejitsu.com) Inc.\n',
11096 silly resolved     readmeFilename: 'README.md',
11096 silly resolved     _id: 'preacher-api@0.1.7',
11096 silly resolved     dist: { shasum: 'c81ee0e27cce0cdf23acd1f096baebe6b03a8be4' },
11096 silly resolved     _from: 'preacher-api@0.1.x',
11096 silly resolved     _resolved: 'https://registry.npmjs.org/preacher-api/-/preacher-api-0.1.7.tgz' },
11096 silly resolved   { name: 'request',
11096 silly resolved     description: 'Simplified HTTP request client.',
11096 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
11096 silly resolved     version: '2.25.0',
11096 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
11096 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
11096 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
11096 silly resolved     engines: [ 'node >= 0.8.0' ],
11096 silly resolved     main: 'index.js',
11096 silly resolved     dependencies:
11096 silly resolved      { qs: '~0.6.0',
11096 silly resolved        'json-stringify-safe': '~5.0.0',
11096 silly resolved        'forever-agent': '~0.5.0',
11096 silly resolved        'tunnel-agent': '~0.3.0',
11096 silly resolved        'http-signature': '~0.10.0',
11096 silly resolved        hawk: '~1.0.0',
11096 silly resolved        'aws-sign': '~0.3.0',
11096 silly resolved        'oauth-sign': '~0.3.0',
11096 silly resolved        'cookie-jar': '~0.3.0',
11096 silly resolved        'node-uuid': '~1.4.0',
11096 silly resolved        mime: '~1.2.9',
11096 silly resolved        'form-data': '~0.1.0' },
11096 silly resolved     scripts: { test: 'node tests/run.js' },
11096 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\nUrl encoded forms are simple\n\n```javascript\nrequest.post(\'http://service.com/upload\', {form:{key:\'value\'}})\n// or\nrequest.post(\'http://service.com/upload\').form({key:\'value\'})\n```\n\nFor `multipart/form-data` we use the [form-data](https://github.com/felixge/node-form-data) library by [@felixge](https://github.com/felixge). You don\'t need to worry about piping the form object or setting the headers, `request` will handle that for you.\n\n```javascript\nvar r = request.post(\'http://service.com/upload\')\nvar form = r.form()\nform.append(\'my_field\', \'my_value\')\nform.append(\'my_buffer\', new Buffer([1, 2, 3]))\nform.append(\'my_file\', fs.createReadStream(path.join(__dirname, \'doodle.png\'))\nform.append(\'remote_file\', request(\'http://google.com/doodle.png\'))\n```\n\n## HTTP Authentication\n\n```javascript\nrequest.get(\'http://some.server.com/\').auth(\'username\', \'password\', false);\n// or\nrequest.get(\'http://some.server.com/\', {\n  \'auth\': {\n    \'user\': \'username\',\n    \'pass\': \'password\',\n    \'sendImmediately\': false\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  The method form takes parameters `auth(username, password, sendImmediately)`.\n\n`sendImmediately` defaults to true, which will cause a basic authentication header to be sent.  If `sendImmediately` is `false`, then `request` will retry with a proper authentication header after receiving a 401 response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method).\n\nDigest authentication is supported, but it only works with `sendImmediately` set to `false` (otherwise `request` will send basic authentication on the initial request, which will probably cause the request to fail).\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has \n  // verified with twitter that they are authorizing your app.\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: access_token.oauth_verifier\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for PATCH, POST and PUT requests. Must be buffer or string.\n* `form` - when passed an object this will set `body` but to a querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no option a FormData instance is returned that will be piped to request.\n* `auth` - A hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  See documentation above.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as json.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `true` if you want cookies to be remembered for future use, or define your custom cookie jar (see examples section)\n* `aws` - object containing aws signing information, should have the properties `key` and `secret` as well as `bucket` unless you\'re specifying your bucket as part of the path, or you are making a request that doesn\'t use a bucket (i.e. GET Services)\n* `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent\'s library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\n* `localAddress` - Local interface to bind for network connections.\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second is an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.patch\n\nSame as request() but defaults to `method: "PATCH"`.\n\n```javascript\nrequest.patch(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies set jar to true (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: true})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
11096 silly resolved     readmeFilename: 'README.md',
11096 silly resolved     homepage: 'https://github.com/mikeal/request',
11096 silly resolved     _id: 'request@2.25.0',
11096 silly resolved     dist: { shasum: 'ee1bd08f66c332ad8e65eb694cd71e4111e4c1f2' },
11096 silly resolved     _from: 'request@2.25.0',
11096 silly resolved     _resolved: 'https://registry.npmjs.org/request/-/request-2.25.0.tgz' } ]
11097 info install preacher-api@0.1.7 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api
11098 info install request@2.25.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api
11099 info installOne preacher-api@0.1.7
11100 info installOne request@2.25.0
11101 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api unbuild
11102 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request unbuild
11103 verbose tar unpack /home/lerenzo/.npm/preacher-api/0.1.7/package.tgz
11104 silly lockFile b3d10178-su-api-node-modules-preacher-api tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api
11105 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api /home/lerenzo/.npm/b3d10178-su-api-node-modules-preacher-api.lock
11106 silly lockFile 81ddaafb-m-preacher-api-0-1-7-package-tgz tar:///home/lerenzo/.npm/preacher-api/0.1.7/package.tgz
11107 verbose lock tar:///home/lerenzo/.npm/preacher-api/0.1.7/package.tgz /home/lerenzo/.npm/81ddaafb-m-preacher-api-0-1-7-package-tgz.lock
11108 verbose tar unpack /home/lerenzo/.npm/request/2.25.0/package.tgz
11109 silly lockFile 0ef9315c-dejitsu-api-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
11110 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request /home/lerenzo/.npm/0ef9315c-dejitsu-api-node-modules-request.lock
11111 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11112 verbose lock tar:///home/lerenzo/.npm/request/2.25.0/package.tgz /home/lerenzo/.npm/99ca1037-o-npm-request-2-25-0-package-tgz.lock
11113 silly gunzTarPerm modes [ '755', '644' ]
11114 silly gunzTarPerm modes [ '755', '644' ]
11115 silly gunzTarPerm extractEntry package.json
11116 silly gunzTarPerm extractEntry package.json
11117 silly gunzTarPerm extractEntry .npmignore
11118 silly gunzTarPerm extractEntry README.md
11119 silly gunzTarPerm extractEntry .npmignore
11120 silly gunzTarPerm extractEntry README.md
11121 silly gunzTarPerm extractEntry lib/client.js
11122 silly gunzTarPerm extractEntry lib/client/client.js
11123 silly gunzTarPerm extractEntry LICENSE
11124 silly gunzTarPerm extractEntry index.js
11125 silly gunzTarPerm extractEntry lib/client/logs.js
11126 silly gunzTarPerm extractEntry test/macros.js
11127 silly gunzTarPerm extractEntry tests/test-httpModule.js
11128 silly gunzTarPerm extractEntry tests/test-headers.js
11129 silly gunzTarPerm extractEntry test/client/logs-test.js
11130 silly gunzTarPerm extractEntry tests/test-http-signature.js
11131 silly gunzTarPerm extractEntry tests/run.js
11132 silly gunzTarPerm extractEntry tests/test-hawk.js
11133 silly gunzTarPerm extractEntry tests/test-https.js
11134 silly lockFile b3d10178-su-api-node-modules-preacher-api tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api
11135 silly lockFile b3d10178-su-api-node-modules-preacher-api tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api
11136 silly lockFile 81ddaafb-m-preacher-api-0-1-7-package-tgz tar:///home/lerenzo/.npm/preacher-api/0.1.7/package.tgz
11137 silly lockFile 81ddaafb-m-preacher-api-0-1-7-package-tgz tar:///home/lerenzo/.npm/preacher-api/0.1.7/package.tgz
11138 info preinstall preacher-api@0.1.7
11139 verbose readDependencies using package.json deps
11140 verbose readDependencies using package.json deps
11141 silly gunzTarPerm extractEntry tests/test-localAddress.js
11142 silly gunzTarPerm extractEntry tests/test-oauth.js
11143 verbose cache add [ 'primus@~1.4.0', null ]
11144 verbose cache add name=undefined spec="primus@~1.4.0" args=["primus@~1.4.0",null]
11145 verbose parsed url { protocol: null,
11145 verbose parsed url   slashes: null,
11145 verbose parsed url   auth: null,
11145 verbose parsed url   host: null,
11145 verbose parsed url   port: null,
11145 verbose parsed url   hostname: null,
11145 verbose parsed url   hash: null,
11145 verbose parsed url   search: null,
11145 verbose parsed url   query: null,
11145 verbose parsed url   pathname: 'primus@~1.4.0',
11145 verbose parsed url   path: 'primus@~1.4.0',
11145 verbose parsed url   href: 'primus@~1.4.0' }
11146 verbose cache add name="primus" spec="~1.4.0" args=["primus","~1.4.0"]
11147 verbose parsed url { protocol: null,
11147 verbose parsed url   slashes: null,
11147 verbose parsed url   auth: null,
11147 verbose parsed url   host: null,
11147 verbose parsed url   port: null,
11147 verbose parsed url   hostname: null,
11147 verbose parsed url   hash: null,
11147 verbose parsed url   search: null,
11147 verbose parsed url   query: null,
11147 verbose parsed url   pathname: '~1.4.0',
11147 verbose parsed url   path: '~1.4.0',
11147 verbose parsed url   href: '~1.4.0' }
11148 verbose addNamed [ 'primus', '~1.4.0' ]
11149 verbose addNamed [ null, '>=1.4.0-0 <1.5.0-0' ]
11150 silly lockFile 13c3ee02-primus-1-4-0 primus@~1.4.0
11151 verbose lock primus@~1.4.0 /home/lerenzo/.npm/13c3ee02-primus-1-4-0.lock
11152 verbose cache add [ 'ws@~0.4.28', null ]
11153 verbose cache add name=undefined spec="ws@~0.4.28" args=["ws@~0.4.28",null]
11154 verbose parsed url { protocol: null,
11154 verbose parsed url   slashes: null,
11154 verbose parsed url   auth: null,
11154 verbose parsed url   host: null,
11154 verbose parsed url   port: null,
11154 verbose parsed url   hostname: null,
11154 verbose parsed url   hash: null,
11154 verbose parsed url   search: null,
11154 verbose parsed url   query: null,
11154 verbose parsed url   pathname: 'ws@~0.4.28',
11154 verbose parsed url   path: 'ws@~0.4.28',
11154 verbose parsed url   href: 'ws@~0.4.28' }
11155 verbose cache add name="ws" spec="~0.4.28" args=["ws","~0.4.28"]
11156 verbose parsed url { protocol: null,
11156 verbose parsed url   slashes: null,
11156 verbose parsed url   auth: null,
11156 verbose parsed url   host: null,
11156 verbose parsed url   port: null,
11156 verbose parsed url   hostname: null,
11156 verbose parsed url   hash: null,
11156 verbose parsed url   search: null,
11156 verbose parsed url   query: null,
11156 verbose parsed url   pathname: '~0.4.28',
11156 verbose parsed url   path: '~0.4.28',
11156 verbose parsed url   href: '~0.4.28' }
11157 verbose addNamed [ 'ws', '~0.4.28' ]
11158 verbose addNamed [ null, '>=0.4.28-0 <0.5.0-0' ]
11159 silly lockFile 1ef0d92d-ws-0-4-28 ws@~0.4.28
11160 verbose lock ws@~0.4.28 /home/lerenzo/.npm/1ef0d92d-ws-0-4-28.lock
11161 silly addNameRange { name: 'primus', range: '>=1.4.0-0 <1.5.0-0', hasData: false }
11162 silly addNameRange { name: 'ws', range: '>=0.4.28-0 <0.5.0-0', hasData: false }
11163 verbose url raw primus
11164 verbose url resolving [ 'https://registry.npmjs.org/', './primus' ]
11165 verbose url resolved https://registry.npmjs.org/primus
11166 info trying registry request attempt 1 at 14:11:53
11167 http GET https://registry.npmjs.org/primus
11168 silly gunzTarPerm extractEntry tests/test-onelineproxy.js
11169 silly gunzTarPerm extractEntry tests/test-params.js
11170 silly gunzTarPerm extractEntry tests/test-form.js
11171 silly gunzTarPerm extractEntry tests/test-piped-redirect.js
11172 silly gunzTarPerm extractEntry tests/test-follow-all.js
11173 silly gunzTarPerm extractEntry tests/test-pipes.js
11174 silly gunzTarPerm extractEntry tests/test-follow-all-303.js
11175 silly gunzTarPerm extractEntry tests/test-pool.js
11176 silly gunzTarPerm extractEntry tests/test-errors.js
11177 silly gunzTarPerm extractEntry tests/test-protocol-changing-redirect.js
11178 silly gunzTarPerm extractEntry tests/test-emptyBody.js
11179 silly gunzTarPerm extractEntry tests/test-proxy.js
11180 silly gunzTarPerm extractEntry tests/test-digest-auth.js
11181 silly gunzTarPerm extractEntry tests/test-qs.js
11182 silly gunzTarPerm extractEntry tests/test-defaults.js
11183 silly gunzTarPerm extractEntry tests/test-redirect.js
11184 silly gunzTarPerm extractEntry tests/test-body.js
11185 silly gunzTarPerm extractEntry tests/test-s3.js
11186 silly gunzTarPerm extractEntry tests/test-basic-auth.js
11187 silly gunzTarPerm extractEntry tests/test-timeout.js
11188 silly gunzTarPerm extractEntry tests/test-agentOptions.js
11189 silly gunzTarPerm extractEntry tests/test-toJSON.js
11190 silly gunzTarPerm extractEntry tests/server.js
11191 silly gunzTarPerm extractEntry tests/test-tunnel.js
11192 silly gunzTarPerm extractEntry tests/test-https-strict.js
11193 silly gunzTarPerm extractEntry tests/squid.conf
11194 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
11195 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
11196 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
11197 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
11198 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
11199 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
11200 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
11201 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
11202 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
11203 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
11204 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
11205 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
11206 silly gunzTarPerm extractEntry tests/ssl/test.crt
11207 silly gunzTarPerm extractEntry tests/ssl/test.key
11208 silly gunzTarPerm extractEntry tests/googledoodle.jpg
11209 silly gunzTarPerm extractEntry tests/unicycle.jpg
11210 verbose url raw ws
11211 verbose url resolving [ 'https://registry.npmjs.org/', './ws' ]
11212 verbose url resolved https://registry.npmjs.org/ws
11213 info trying registry request attempt 1 at 14:11:54
11214 verbose etag "E12YI8VJ4M8JMCAI08FISWC04"
11215 http GET https://registry.npmjs.org/ws
11216 silly lockFile 0ef9315c-dejitsu-api-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
11217 silly lockFile 0ef9315c-dejitsu-api-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
11218 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11219 silly lockFile 99ca1037-o-npm-request-2-25-0-package-tgz tar:///home/lerenzo/.npm/request/2.25.0/package.tgz
11220 info preinstall request@2.25.0
11221 verbose readDependencies using package.json deps
11222 verbose readDependencies using package.json deps
11223 verbose cache add [ 'qs@~0.6.0', null ]
11224 verbose cache add name=undefined spec="qs@~0.6.0" args=["qs@~0.6.0",null]
11225 verbose parsed url { protocol: null,
11225 verbose parsed url   slashes: null,
11225 verbose parsed url   auth: null,
11225 verbose parsed url   host: null,
11225 verbose parsed url   port: null,
11225 verbose parsed url   hostname: null,
11225 verbose parsed url   hash: null,
11225 verbose parsed url   search: null,
11225 verbose parsed url   query: null,
11225 verbose parsed url   pathname: 'qs@~0.6.0',
11225 verbose parsed url   path: 'qs@~0.6.0',
11225 verbose parsed url   href: 'qs@~0.6.0' }
11226 verbose cache add name="qs" spec="~0.6.0" args=["qs","~0.6.0"]
11227 verbose parsed url { protocol: null,
11227 verbose parsed url   slashes: null,
11227 verbose parsed url   auth: null,
11227 verbose parsed url   host: null,
11227 verbose parsed url   port: null,
11227 verbose parsed url   hostname: null,
11227 verbose parsed url   hash: null,
11227 verbose parsed url   search: null,
11227 verbose parsed url   query: null,
11227 verbose parsed url   pathname: '~0.6.0',
11227 verbose parsed url   path: '~0.6.0',
11227 verbose parsed url   href: '~0.6.0' }
11228 verbose addNamed [ 'qs', '~0.6.0' ]
11229 verbose addNamed [ null, '>=0.6.0-0 <0.7.0-0' ]
11230 silly lockFile 222bee9e-qs-0-6-0 qs@~0.6.0
11231 verbose lock qs@~0.6.0 /home/lerenzo/.npm/222bee9e-qs-0-6-0.lock
11232 verbose cache add [ 'json-stringify-safe@~5.0.0', null ]
11233 verbose cache add name=undefined spec="json-stringify-safe@~5.0.0" args=["json-stringify-safe@~5.0.0",null]
11234 verbose parsed url { protocol: null,
11234 verbose parsed url   slashes: null,
11234 verbose parsed url   auth: null,
11234 verbose parsed url   host: null,
11234 verbose parsed url   port: null,
11234 verbose parsed url   hostname: null,
11234 verbose parsed url   hash: null,
11234 verbose parsed url   search: null,
11234 verbose parsed url   query: null,
11234 verbose parsed url   pathname: 'json-stringify-safe@~5.0.0',
11234 verbose parsed url   path: 'json-stringify-safe@~5.0.0',
11234 verbose parsed url   href: 'json-stringify-safe@~5.0.0' }
11235 verbose cache add name="json-stringify-safe" spec="~5.0.0" args=["json-stringify-safe","~5.0.0"]
11236 verbose parsed url { protocol: null,
11236 verbose parsed url   slashes: null,
11236 verbose parsed url   auth: null,
11236 verbose parsed url   host: null,
11236 verbose parsed url   port: null,
11236 verbose parsed url   hostname: null,
11236 verbose parsed url   hash: null,
11236 verbose parsed url   search: null,
11236 verbose parsed url   query: null,
11236 verbose parsed url   pathname: '~5.0.0',
11236 verbose parsed url   path: '~5.0.0',
11236 verbose parsed url   href: '~5.0.0' }
11237 verbose addNamed [ 'json-stringify-safe', '~5.0.0' ]
11238 verbose addNamed [ null, '>=5.0.0-0 <5.1.0-0' ]
11239 silly lockFile 063b1a01-json-stringify-safe-5-0-0 json-stringify-safe@~5.0.0
11240 verbose lock json-stringify-safe@~5.0.0 /home/lerenzo/.npm/063b1a01-json-stringify-safe-5-0-0.lock
11241 verbose cache add [ 'forever-agent@~0.5.0', null ]
11242 verbose cache add name=undefined spec="forever-agent@~0.5.0" args=["forever-agent@~0.5.0",null]
11243 verbose parsed url { protocol: null,
11243 verbose parsed url   slashes: null,
11243 verbose parsed url   auth: null,
11243 verbose parsed url   host: null,
11243 verbose parsed url   port: null,
11243 verbose parsed url   hostname: null,
11243 verbose parsed url   hash: null,
11243 verbose parsed url   search: null,
11243 verbose parsed url   query: null,
11243 verbose parsed url   pathname: 'forever-agent@~0.5.0',
11243 verbose parsed url   path: 'forever-agent@~0.5.0',
11243 verbose parsed url   href: 'forever-agent@~0.5.0' }
11244 verbose cache add name="forever-agent" spec="~0.5.0" args=["forever-agent","~0.5.0"]
11245 verbose parsed url { protocol: null,
11245 verbose parsed url   slashes: null,
11245 verbose parsed url   auth: null,
11245 verbose parsed url   host: null,
11245 verbose parsed url   port: null,
11245 verbose parsed url   hostname: null,
11245 verbose parsed url   hash: null,
11245 verbose parsed url   search: null,
11245 verbose parsed url   query: null,
11245 verbose parsed url   pathname: '~0.5.0',
11245 verbose parsed url   path: '~0.5.0',
11245 verbose parsed url   href: '~0.5.0' }
11246 verbose addNamed [ 'forever-agent', '~0.5.0' ]
11247 verbose addNamed [ null, '>=0.5.0-0 <0.6.0-0' ]
11248 silly lockFile fa463915-forever-agent-0-5-0 forever-agent@~0.5.0
11249 verbose lock forever-agent@~0.5.0 /home/lerenzo/.npm/fa463915-forever-agent-0-5-0.lock
11250 silly addNameRange { name: 'qs', range: '>=0.6.0-0 <0.7.0-0', hasData: false }
11251 silly addNameRange { name: 'json-stringify-safe',
11251 silly addNameRange   range: '>=5.0.0-0 <5.1.0-0',
11251 silly addNameRange   hasData: false }
11252 verbose url raw qs
11253 verbose url resolving [ 'https://registry.npmjs.org/', './qs' ]
11254 verbose url resolved https://registry.npmjs.org/qs
11255 info trying registry request attempt 1 at 14:11:54
11256 http GET https://registry.npmjs.org/qs
11257 verbose cache add [ 'tunnel-agent@~0.3.0', null ]
11258 verbose cache add name=undefined spec="tunnel-agent@~0.3.0" args=["tunnel-agent@~0.3.0",null]
11259 verbose parsed url { protocol: null,
11259 verbose parsed url   slashes: null,
11259 verbose parsed url   auth: null,
11259 verbose parsed url   host: null,
11259 verbose parsed url   port: null,
11259 verbose parsed url   hostname: null,
11259 verbose parsed url   hash: null,
11259 verbose parsed url   search: null,
11259 verbose parsed url   query: null,
11259 verbose parsed url   pathname: 'tunnel-agent@~0.3.0',
11259 verbose parsed url   path: 'tunnel-agent@~0.3.0',
11259 verbose parsed url   href: 'tunnel-agent@~0.3.0' }
11260 verbose cache add name="tunnel-agent" spec="~0.3.0" args=["tunnel-agent","~0.3.0"]
11261 verbose parsed url { protocol: null,
11261 verbose parsed url   slashes: null,
11261 verbose parsed url   auth: null,
11261 verbose parsed url   host: null,
11261 verbose parsed url   port: null,
11261 verbose parsed url   hostname: null,
11261 verbose parsed url   hash: null,
11261 verbose parsed url   search: null,
11261 verbose parsed url   query: null,
11261 verbose parsed url   pathname: '~0.3.0',
11261 verbose parsed url   path: '~0.3.0',
11261 verbose parsed url   href: '~0.3.0' }
11262 verbose addNamed [ 'tunnel-agent', '~0.3.0' ]
11263 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
11264 silly lockFile e5681eda-tunnel-agent-0-3-0 tunnel-agent@~0.3.0
11265 verbose lock tunnel-agent@~0.3.0 /home/lerenzo/.npm/e5681eda-tunnel-agent-0-3-0.lock
11266 silly addNameRange { name: 'forever-agent',
11266 silly addNameRange   range: '>=0.5.0-0 <0.6.0-0',
11266 silly addNameRange   hasData: false }
11267 silly addNameRange { name: 'tunnel-agent',
11267 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11267 silly addNameRange   hasData: false }
11268 verbose cache add [ 'http-signature@~0.10.0', null ]
11269 verbose cache add name=undefined spec="http-signature@~0.10.0" args=["http-signature@~0.10.0",null]
11270 verbose parsed url { protocol: null,
11270 verbose parsed url   slashes: null,
11270 verbose parsed url   auth: null,
11270 verbose parsed url   host: null,
11270 verbose parsed url   port: null,
11270 verbose parsed url   hostname: null,
11270 verbose parsed url   hash: null,
11270 verbose parsed url   search: null,
11270 verbose parsed url   query: null,
11270 verbose parsed url   pathname: 'http-signature@~0.10.0',
11270 verbose parsed url   path: 'http-signature@~0.10.0',
11270 verbose parsed url   href: 'http-signature@~0.10.0' }
11271 verbose cache add name="http-signature" spec="~0.10.0" args=["http-signature","~0.10.0"]
11272 verbose parsed url { protocol: null,
11272 verbose parsed url   slashes: null,
11272 verbose parsed url   auth: null,
11272 verbose parsed url   host: null,
11272 verbose parsed url   port: null,
11272 verbose parsed url   hostname: null,
11272 verbose parsed url   hash: null,
11272 verbose parsed url   search: null,
11272 verbose parsed url   query: null,
11272 verbose parsed url   pathname: '~0.10.0',
11272 verbose parsed url   path: '~0.10.0',
11272 verbose parsed url   href: '~0.10.0' }
11273 verbose addNamed [ 'http-signature', '~0.10.0' ]
11274 verbose addNamed [ null, '>=0.10.0-0 <0.11.0-0' ]
11275 silly lockFile 8170f292-http-signature-0-10-0 http-signature@~0.10.0
11276 verbose lock http-signature@~0.10.0 /home/lerenzo/.npm/8170f292-http-signature-0-10-0.lock
11277 verbose registry.get json-stringify-safe not expired, no request
11278 silly addNameRange number 2 { name: 'json-stringify-safe',
11278 silly addNameRange   range: '>=5.0.0-0 <5.1.0-0',
11278 silly addNameRange   hasData: true }
11279 silly addNameRange versions [ 'json-stringify-safe',
11279 silly addNameRange   [ '2.0.0', '3.0.0', '4.0.0', '5.0.0' ] ]
11280 verbose addNamed [ 'json-stringify-safe', '5.0.0' ]
11281 verbose addNamed [ '5.0.0', '5.0.0' ]
11282 silly lockFile 1d9ebe76-json-stringify-safe-5-0-0 json-stringify-safe@5.0.0
11283 verbose lock json-stringify-safe@5.0.0 /home/lerenzo/.npm/1d9ebe76-json-stringify-safe-5-0-0.lock
11284 verbose cache add [ 'hawk@~1.0.0', null ]
11285 verbose cache add name=undefined spec="hawk@~1.0.0" args=["hawk@~1.0.0",null]
11286 verbose parsed url { protocol: null,
11286 verbose parsed url   slashes: null,
11286 verbose parsed url   auth: null,
11286 verbose parsed url   host: null,
11286 verbose parsed url   port: null,
11286 verbose parsed url   hostname: null,
11286 verbose parsed url   hash: null,
11286 verbose parsed url   search: null,
11286 verbose parsed url   query: null,
11286 verbose parsed url   pathname: 'hawk@~1.0.0',
11286 verbose parsed url   path: 'hawk@~1.0.0',
11286 verbose parsed url   href: 'hawk@~1.0.0' }
11287 verbose cache add name="hawk" spec="~1.0.0" args=["hawk","~1.0.0"]
11288 verbose parsed url { protocol: null,
11288 verbose parsed url   slashes: null,
11288 verbose parsed url   auth: null,
11288 verbose parsed url   host: null,
11288 verbose parsed url   port: null,
11288 verbose parsed url   hostname: null,
11288 verbose parsed url   hash: null,
11288 verbose parsed url   search: null,
11288 verbose parsed url   query: null,
11288 verbose parsed url   pathname: '~1.0.0',
11288 verbose parsed url   path: '~1.0.0',
11288 verbose parsed url   href: '~1.0.0' }
11289 verbose addNamed [ 'hawk', '~1.0.0' ]
11290 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
11291 silly lockFile 327094b8-hawk-1-0-0 hawk@~1.0.0
11292 verbose lock hawk@~1.0.0 /home/lerenzo/.npm/327094b8-hawk-1-0-0.lock
11293 silly addNameRange { name: 'http-signature',
11293 silly addNameRange   range: '>=0.10.0-0 <0.11.0-0',
11293 silly addNameRange   hasData: false }
11294 verbose registry.get forever-agent not expired, no request
11295 silly addNameRange number 2 { name: 'forever-agent',
11295 silly addNameRange   range: '>=0.5.0-0 <0.6.0-0',
11295 silly addNameRange   hasData: true }
11296 silly addNameRange versions [ 'forever-agent', [ '0.2.0', '0.3.0', '0.4.0', '0.5.0' ] ]
11297 verbose addNamed [ 'forever-agent', '0.5.0' ]
11298 verbose addNamed [ '0.5.0', '0.5.0' ]
11299 silly lockFile 4bf1555c-forever-agent-0-5-0 forever-agent@0.5.0
11300 verbose lock forever-agent@0.5.0 /home/lerenzo/.npm/4bf1555c-forever-agent-0-5-0.lock
11301 verbose url raw http-signature
11302 verbose url resolving [ 'https://registry.npmjs.org/', './http-signature' ]
11303 verbose url resolved https://registry.npmjs.org/http-signature
11304 info trying registry request attempt 1 at 14:11:54
11305 http GET https://registry.npmjs.org/http-signature
11306 verbose cache add [ 'oauth-sign@~0.3.0', null ]
11307 verbose cache add name=undefined spec="oauth-sign@~0.3.0" args=["oauth-sign@~0.3.0",null]
11308 verbose parsed url { protocol: null,
11308 verbose parsed url   slashes: null,
11308 verbose parsed url   auth: null,
11308 verbose parsed url   host: null,
11308 verbose parsed url   port: null,
11308 verbose parsed url   hostname: null,
11308 verbose parsed url   hash: null,
11308 verbose parsed url   search: null,
11308 verbose parsed url   query: null,
11308 verbose parsed url   pathname: 'oauth-sign@~0.3.0',
11308 verbose parsed url   path: 'oauth-sign@~0.3.0',
11308 verbose parsed url   href: 'oauth-sign@~0.3.0' }
11309 verbose cache add name="oauth-sign" spec="~0.3.0" args=["oauth-sign","~0.3.0"]
11310 verbose parsed url { protocol: null,
11310 verbose parsed url   slashes: null,
11310 verbose parsed url   auth: null,
11310 verbose parsed url   host: null,
11310 verbose parsed url   port: null,
11310 verbose parsed url   hostname: null,
11310 verbose parsed url   hash: null,
11310 verbose parsed url   search: null,
11310 verbose parsed url   query: null,
11310 verbose parsed url   pathname: '~0.3.0',
11310 verbose parsed url   path: '~0.3.0',
11310 verbose parsed url   href: '~0.3.0' }
11311 verbose addNamed [ 'oauth-sign', '~0.3.0' ]
11312 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
11313 silly lockFile 7fb5c7f1-oauth-sign-0-3-0 oauth-sign@~0.3.0
11314 verbose lock oauth-sign@~0.3.0 /home/lerenzo/.npm/7fb5c7f1-oauth-sign-0-3-0.lock
11315 verbose cache add [ 'aws-sign@~0.3.0', null ]
11316 verbose cache add name=undefined spec="aws-sign@~0.3.0" args=["aws-sign@~0.3.0",null]
11317 verbose parsed url { protocol: null,
11317 verbose parsed url   slashes: null,
11317 verbose parsed url   auth: null,
11317 verbose parsed url   host: null,
11317 verbose parsed url   port: null,
11317 verbose parsed url   hostname: null,
11317 verbose parsed url   hash: null,
11317 verbose parsed url   search: null,
11317 verbose parsed url   query: null,
11317 verbose parsed url   pathname: 'aws-sign@~0.3.0',
11317 verbose parsed url   path: 'aws-sign@~0.3.0',
11317 verbose parsed url   href: 'aws-sign@~0.3.0' }
11318 verbose cache add name="aws-sign" spec="~0.3.0" args=["aws-sign","~0.3.0"]
11319 verbose parsed url { protocol: null,
11319 verbose parsed url   slashes: null,
11319 verbose parsed url   auth: null,
11319 verbose parsed url   host: null,
11319 verbose parsed url   port: null,
11319 verbose parsed url   hostname: null,
11319 verbose parsed url   hash: null,
11319 verbose parsed url   search: null,
11319 verbose parsed url   query: null,
11319 verbose parsed url   pathname: '~0.3.0',
11319 verbose parsed url   path: '~0.3.0',
11319 verbose parsed url   href: '~0.3.0' }
11320 verbose addNamed [ 'aws-sign', '~0.3.0' ]
11321 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
11322 silly lockFile 514b1d97-aws-sign-0-3-0 aws-sign@~0.3.0
11323 verbose lock aws-sign@~0.3.0 /home/lerenzo/.npm/514b1d97-aws-sign-0-3-0.lock
11324 verbose cache add [ 'cookie-jar@~0.3.0', null ]
11325 verbose cache add name=undefined spec="cookie-jar@~0.3.0" args=["cookie-jar@~0.3.0",null]
11326 verbose parsed url { protocol: null,
11326 verbose parsed url   slashes: null,
11326 verbose parsed url   auth: null,
11326 verbose parsed url   host: null,
11326 verbose parsed url   port: null,
11326 verbose parsed url   hostname: null,
11326 verbose parsed url   hash: null,
11326 verbose parsed url   search: null,
11326 verbose parsed url   query: null,
11326 verbose parsed url   pathname: 'cookie-jar@~0.3.0',
11326 verbose parsed url   path: 'cookie-jar@~0.3.0',
11326 verbose parsed url   href: 'cookie-jar@~0.3.0' }
11327 verbose cache add name="cookie-jar" spec="~0.3.0" args=["cookie-jar","~0.3.0"]
11328 verbose parsed url { protocol: null,
11328 verbose parsed url   slashes: null,
11328 verbose parsed url   auth: null,
11328 verbose parsed url   host: null,
11328 verbose parsed url   port: null,
11328 verbose parsed url   hostname: null,
11328 verbose parsed url   hash: null,
11328 verbose parsed url   search: null,
11328 verbose parsed url   query: null,
11328 verbose parsed url   pathname: '~0.3.0',
11328 verbose parsed url   path: '~0.3.0',
11328 verbose parsed url   href: '~0.3.0' }
11329 verbose addNamed [ 'cookie-jar', '~0.3.0' ]
11330 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
11331 silly lockFile 4c61eb43-cookie-jar-0-3-0 cookie-jar@~0.3.0
11332 verbose lock cookie-jar@~0.3.0 /home/lerenzo/.npm/4c61eb43-cookie-jar-0-3-0.lock
11333 silly addNameRange { name: 'hawk', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
11334 silly lockFile 830a0d02-fe-json-stringify-safe-5-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz
11335 verbose lock https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz /home/lerenzo/.npm/830a0d02-fe-json-stringify-safe-5-0-0-tgz.lock
11336 verbose cache add [ 'node-uuid@~1.4.0', null ]
11337 verbose cache add name=undefined spec="node-uuid@~1.4.0" args=["node-uuid@~1.4.0",null]
11338 verbose parsed url { protocol: null,
11338 verbose parsed url   slashes: null,
11338 verbose parsed url   auth: null,
11338 verbose parsed url   host: null,
11338 verbose parsed url   port: null,
11338 verbose parsed url   hostname: null,
11338 verbose parsed url   hash: null,
11338 verbose parsed url   search: null,
11338 verbose parsed url   query: null,
11338 verbose parsed url   pathname: 'node-uuid@~1.4.0',
11338 verbose parsed url   path: 'node-uuid@~1.4.0',
11338 verbose parsed url   href: 'node-uuid@~1.4.0' }
11339 verbose cache add name="node-uuid" spec="~1.4.0" args=["node-uuid","~1.4.0"]
11340 verbose parsed url { protocol: null,
11340 verbose parsed url   slashes: null,
11340 verbose parsed url   auth: null,
11340 verbose parsed url   host: null,
11340 verbose parsed url   port: null,
11340 verbose parsed url   hostname: null,
11340 verbose parsed url   hash: null,
11340 verbose parsed url   search: null,
11340 verbose parsed url   query: null,
11340 verbose parsed url   pathname: '~1.4.0',
11340 verbose parsed url   path: '~1.4.0',
11340 verbose parsed url   href: '~1.4.0' }
11341 verbose addNamed [ 'node-uuid', '~1.4.0' ]
11342 verbose addNamed [ null, '>=1.4.0-0 <1.5.0-0' ]
11343 silly lockFile f662725f-node-uuid-1-4-0 node-uuid@~1.4.0
11344 verbose lock node-uuid@~1.4.0 /home/lerenzo/.npm/f662725f-node-uuid-1-4-0.lock
11345 verbose cache add [ 'mime@~1.2.9', null ]
11346 verbose cache add name=undefined spec="mime@~1.2.9" args=["mime@~1.2.9",null]
11347 verbose parsed url { protocol: null,
11347 verbose parsed url   slashes: null,
11347 verbose parsed url   auth: null,
11347 verbose parsed url   host: null,
11347 verbose parsed url   port: null,
11347 verbose parsed url   hostname: null,
11347 verbose parsed url   hash: null,
11347 verbose parsed url   search: null,
11347 verbose parsed url   query: null,
11347 verbose parsed url   pathname: 'mime@~1.2.9',
11347 verbose parsed url   path: 'mime@~1.2.9',
11347 verbose parsed url   href: 'mime@~1.2.9' }
11348 verbose cache add name="mime" spec="~1.2.9" args=["mime","~1.2.9"]
11349 verbose parsed url { protocol: null,
11349 verbose parsed url   slashes: null,
11349 verbose parsed url   auth: null,
11349 verbose parsed url   host: null,
11349 verbose parsed url   port: null,
11349 verbose parsed url   hostname: null,
11349 verbose parsed url   hash: null,
11349 verbose parsed url   search: null,
11349 verbose parsed url   query: null,
11349 verbose parsed url   pathname: '~1.2.9',
11349 verbose parsed url   path: '~1.2.9',
11349 verbose parsed url   href: '~1.2.9' }
11350 verbose addNamed [ 'mime', '~1.2.9' ]
11351 verbose addNamed [ null, '>=1.2.9-0 <1.3.0-0' ]
11352 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
11353 verbose lock mime@~1.2.9 /home/lerenzo/.npm/ccf24a67-mime-1-2-9.lock
11354 verbose url raw hawk
11355 verbose url resolving [ 'https://registry.npmjs.org/', './hawk' ]
11356 verbose url resolved https://registry.npmjs.org/hawk
11357 info trying registry request attempt 1 at 14:11:54
11358 http GET https://registry.npmjs.org/hawk
11359 verbose registry.get tunnel-agent not expired, no request
11360 silly addNameRange number 2 { name: 'tunnel-agent',
11360 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11360 silly addNameRange   hasData: true }
11361 silly addNameRange versions [ 'tunnel-agent', [ '0.2.0', '0.3.0' ] ]
11362 verbose addNamed [ 'tunnel-agent', '0.3.0' ]
11363 verbose addNamed [ '0.3.0', '0.3.0' ]
11364 silly lockFile d054959a-tunnel-agent-0-3-0 tunnel-agent@0.3.0
11365 verbose lock tunnel-agent@0.3.0 /home/lerenzo/.npm/d054959a-tunnel-agent-0-3-0.lock
11366 silly addNameRange { name: 'oauth-sign',
11366 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11366 silly addNameRange   hasData: false }
11367 silly addNameRange { name: 'aws-sign', range: '>=0.3.0-0 <0.4.0-0', hasData: false }
11368 silly addNameRange { name: 'cookie-jar',
11368 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11368 silly addNameRange   hasData: false }
11369 verbose cache add [ 'form-data@~0.1.0', null ]
11370 verbose cache add name=undefined spec="form-data@~0.1.0" args=["form-data@~0.1.0",null]
11371 verbose parsed url { protocol: null,
11371 verbose parsed url   slashes: null,
11371 verbose parsed url   auth: null,
11371 verbose parsed url   host: null,
11371 verbose parsed url   port: null,
11371 verbose parsed url   hostname: null,
11371 verbose parsed url   hash: null,
11371 verbose parsed url   search: null,
11371 verbose parsed url   query: null,
11371 verbose parsed url   pathname: 'form-data@~0.1.0',
11371 verbose parsed url   path: 'form-data@~0.1.0',
11371 verbose parsed url   href: 'form-data@~0.1.0' }
11372 verbose cache add name="form-data" spec="~0.1.0" args=["form-data","~0.1.0"]
11373 verbose parsed url { protocol: null,
11373 verbose parsed url   slashes: null,
11373 verbose parsed url   auth: null,
11373 verbose parsed url   host: null,
11373 verbose parsed url   port: null,
11373 verbose parsed url   hostname: null,
11373 verbose parsed url   hash: null,
11373 verbose parsed url   search: null,
11373 verbose parsed url   query: null,
11373 verbose parsed url   pathname: '~0.1.0',
11373 verbose parsed url   path: '~0.1.0',
11373 verbose parsed url   href: '~0.1.0' }
11374 verbose addNamed [ 'form-data', '~0.1.0' ]
11375 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
11376 silly lockFile 26aa13f4-form-data-0-1-0 form-data@~0.1.0
11377 verbose lock form-data@~0.1.0 /home/lerenzo/.npm/26aa13f4-form-data-0-1-0.lock
11378 silly lockFile e26cb0e6-er-agent-forever-agent-0-5-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz
11379 verbose lock https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz /home/lerenzo/.npm/e26cb0e6-er-agent-forever-agent-0-5-0-tgz.lock
11380 verbose addRemoteTarball [ 'https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz',
11380 verbose addRemoteTarball   '4c1f228b5050837eba9d21f50c2e6e320624566e' ]
11381 silly addNameRange { name: 'node-uuid',
11381 silly addNameRange   range: '>=1.4.0-0 <1.5.0-0',
11381 silly addNameRange   hasData: false }
11382 silly addNameRange { name: 'mime', range: '>=1.2.9-0 <1.3.0-0', hasData: false }
11383 info retry fetch attempt 1 at 14:11:54
11384 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz
11385 silly addNameRange { name: 'form-data',
11385 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
11385 silly addNameRange   hasData: false }
11386 silly lockFile 8e175ebc-nel-agent-tunnel-agent-0-3-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz
11387 verbose lock https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz /home/lerenzo/.npm/8e175ebc-nel-agent-tunnel-agent-0-3-0-tgz.lock
11388 verbose addRemoteTarball [ 'https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz',
11388 verbose addRemoteTarball   '0c1647a74f3af12d76a07a99490ade7c7249c8f0' ]
11389 info retry fetch attempt 1 at 14:11:54
11390 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz
11391 http GET https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz
11392 verbose addRemoteTarball [ 'https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz',
11392 verbose addRemoteTarball   'ad681b68f5321ad2827c4cfb1b7d5df2cfe942ee' ]
11393 verbose registry.get oauth-sign not expired, no request
11394 silly addNameRange number 2 { name: 'oauth-sign',
11394 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11394 silly addNameRange   hasData: true }
11395 silly addNameRange versions [ 'oauth-sign', [ '0.2.0', '0.3.0', '0.4.0' ] ]
11396 verbose addNamed [ 'oauth-sign', '0.3.0' ]
11397 verbose addNamed [ '0.3.0', '0.3.0' ]
11398 silly lockFile ae61e7c5-oauth-sign-0-3-0 oauth-sign@0.3.0
11399 verbose lock oauth-sign@0.3.0 /home/lerenzo/.npm/ae61e7c5-oauth-sign-0-3-0.lock
11400 verbose registry.get aws-sign not expired, no request
11401 silly addNameRange number 2 { name: 'aws-sign', range: '>=0.3.0-0 <0.4.0-0', hasData: true }
11402 silly addNameRange versions [ 'aws-sign',
11402 silly addNameRange   [ '0.0.1', '0.0.2', '0.1.0', '0.1.1', '0.2.0', '0.3.0' ] ]
11403 verbose addNamed [ 'aws-sign', '0.3.0' ]
11404 verbose addNamed [ '0.3.0', '0.3.0' ]
11405 silly lockFile 503c0a27-aws-sign-0-3-0 aws-sign@0.3.0
11406 verbose lock aws-sign@0.3.0 /home/lerenzo/.npm/503c0a27-aws-sign-0-3-0.lock
11407 verbose registry.get cookie-jar not expired, no request
11408 silly addNameRange number 2 { name: 'cookie-jar',
11408 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
11408 silly addNameRange   hasData: true }
11409 silly addNameRange versions [ 'cookie-jar', [ '0.2.0', '0.3.0' ] ]
11410 verbose addNamed [ 'cookie-jar', '0.3.0' ]
11411 verbose addNamed [ '0.3.0', '0.3.0' ]
11412 silly lockFile 46e83fc0-cookie-jar-0-3-0 cookie-jar@0.3.0
11413 verbose lock cookie-jar@0.3.0 /home/lerenzo/.npm/46e83fc0-cookie-jar-0-3-0.lock
11414 info retry fetch attempt 1 at 14:11:54
11415 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz
11416 http GET https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz
11417 verbose url raw node-uuid
11418 verbose url resolving [ 'https://registry.npmjs.org/', './node-uuid' ]
11419 verbose url resolved https://registry.npmjs.org/node-uuid
11420 info trying registry request attempt 1 at 14:11:54
11421 verbose etag "8PN2L4O4M1R9JG0GTAR15W35E"
11422 http GET https://registry.npmjs.org/node-uuid
11423 verbose registry.get mime not expired, no request
11424 silly addNameRange number 2 { name: 'mime', range: '>=1.2.9-0 <1.3.0-0', hasData: true }
11425 silly addNameRange versions [ 'mime',
11425 silly addNameRange   [ '1.0.0',
11425 silly addNameRange     '1.1.0',
11425 silly addNameRange     '1.2.1',
11425 silly addNameRange     '1.2.2',
11425 silly addNameRange     '1.2.3',
11425 silly addNameRange     '1.2.4',
11425 silly addNameRange     '1.2.5',
11425 silly addNameRange     '1.2.6',
11425 silly addNameRange     '1.2.7',
11425 silly addNameRange     '1.2.8',
11425 silly addNameRange     '1.2.9',
11425 silly addNameRange     '1.2.10',
11425 silly addNameRange     '1.2.11' ] ]
11426 verbose addNamed [ 'mime', '1.2.11' ]
11427 verbose addNamed [ '1.2.11', '1.2.11' ]
11428 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
11429 verbose lock mime@1.2.11 /home/lerenzo/.npm/c4b0741f-mime-1-2-11.lock
11430 verbose registry.get form-data not expired, no request
11431 silly addNameRange number 2 { name: 'form-data', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
11432 silly addNameRange versions [ 'form-data',
11432 silly addNameRange   [ '0.0.0',
11432 silly addNameRange     '0.0.2',
11432 silly addNameRange     '0.0.3',
11432 silly addNameRange     '0.0.4',
11432 silly addNameRange     '0.0.5',
11432 silly addNameRange     '0.0.6',
11432 silly addNameRange     '0.0.7',
11432 silly addNameRange     '0.0.8',
11432 silly addNameRange     '0.0.9',
11432 silly addNameRange     '0.0.10',
11432 silly addNameRange     '0.1.0',
11432 silly addNameRange     '0.1.1',
11432 silly addNameRange     '0.1.2' ] ]
11433 verbose addNamed [ 'form-data', '0.1.2' ]
11434 verbose addNamed [ '0.1.2', '0.1.2' ]
11435 silly lockFile 5abf5da9-form-data-0-1-2 form-data@0.1.2
11436 verbose lock form-data@0.1.2 /home/lerenzo/.npm/5abf5da9-form-data-0-1-2.lock
11437 http GET https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz
11438 silly lockFile 5b3f4a1b--oauth-sign-oauth-sign-0-3-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz
11439 verbose lock https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz /home/lerenzo/.npm/5b3f4a1b--oauth-sign-oauth-sign-0-3-0-tgz.lock
11440 silly lockFile 2bf953b3--org-aws-sign-aws-sign-0-3-0-tgz https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz
11441 verbose lock https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz /home/lerenzo/.npm/2bf953b3--org-aws-sign-aws-sign-0-3-0-tgz.lock
11442 silly lockFile e92588d6--cookie-jar-cookie-jar-0-3-0-tgz https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz
11443 verbose lock https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz /home/lerenzo/.npm/e92588d6--cookie-jar-cookie-jar-0-3-0-tgz.lock
11444 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
11445 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
11446 verbose addRemoteTarball [ 'https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz',
11446 verbose addRemoteTarball   'cb540f93bb2b22a7d5941691a288d60e8ea9386e' ]
11447 verbose addRemoteTarball [ 'https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz',
11447 verbose addRemoteTarball   '3d81ca69b474b1e16518728b51c24ff0bbedc6e9' ]
11448 silly lockFile 627c9ba9-rg-form-data-form-data-0-1-2-tgz https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz
11449 verbose lock https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz /home/lerenzo/.npm/627c9ba9-rg-form-data-form-data-0-1-2-tgz.lock
11450 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
11451 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
11452 verbose addRemoteTarball [ 'https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz',
11452 verbose addRemoteTarball   'bc9a27d4e2b97e186cd57c9e2063cb99fa68cccc' ]
11453 info retry fetch attempt 1 at 14:11:54
11454 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz
11455 info retry fetch attempt 1 at 14:11:54
11456 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz
11457 info retry fetch attempt 1 at 14:11:54
11458 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz
11459 verbose addRemoteTarball [ 'https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz',
11459 verbose addRemoteTarball   '1143c21357911a78dd7913b189b4bab5d5d57445' ]
11460 http GET https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz
11461 http GET https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz
11462 info retry fetch attempt 1 at 14:11:54
11463 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz
11464 http GET https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz
11465 http GET https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz
11466 http 200 https://registry.npmjs.org/read
11467 silly registry.get cb [ 200,
11467 silly registry.get   { vary: 'Accept',
11467 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
11467 silly registry.get     etag: '"7FAHB6UXFS3OUW9WQQ4PLX3UR"',
11467 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:53 GMT',
11467 silly registry.get     'content-type': 'application/json',
11467 silly registry.get     'content-length': '21300' } ]
11468 silly addNameRange number 2 { name: 'read', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
11469 silly addNameRange versions [ 'read',
11469 silly addNameRange   [ '0.0.1',
11469 silly addNameRange     '0.0.2',
11469 silly addNameRange     '0.0.3',
11469 silly addNameRange     '0.1.0',
11469 silly addNameRange     '0.1.1',
11469 silly addNameRange     '1.0.0',
11469 silly addNameRange     '1.0.1',
11469 silly addNameRange     '1.0.2',
11469 silly addNameRange     '1.0.3',
11469 silly addNameRange     '1.0.4',
11469 silly addNameRange     '1.0.5' ] ]
11470 verbose addNamed [ 'read', '1.0.5' ]
11471 verbose addNamed [ '1.0.5', '1.0.5' ]
11472 silly lockFile 4450a55a-read-1-0-5 read@1.0.5
11473 verbose lock read@1.0.5 /home/lerenzo/.npm/4450a55a-read-1-0-5.lock
11474 silly lockFile 1cfc710e-ry-npmjs-org-read-read-1-0-5-tgz https://registry.npmjs.org/read/-/read-1.0.5.tgz
11475 verbose lock https://registry.npmjs.org/read/-/read-1.0.5.tgz /home/lerenzo/.npm/1cfc710e-ry-npmjs-org-read-read-1-0-5-tgz.lock
11476 verbose addRemoteTarball [ 'https://registry.npmjs.org/read/-/read-1.0.5.tgz',
11476 verbose addRemoteTarball   '007a3d169478aa710a491727e453effb92e76203' ]
11477 info retry fetch attempt 1 at 14:11:55
11478 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz
11479 http GET https://registry.npmjs.org/read/-/read-1.0.5.tgz
11480 http 200 https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz
11481 http 200 https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz
11482 http 200 https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz
11483 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz
11484 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11485 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package /home/lerenzo/.npm/73d073ec-12084-0-6808455628342927-package.lock
11486 silly lockFile d4397b50-12084-0-6808455628342927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz
11487 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz /home/lerenzo/.npm/d4397b50-12084-0-6808455628342927-tmp-tgz.lock
11488 silly gunzTarPerm modes [ '755', '644' ]
11489 silly gunzTarPerm extractEntry package.json
11490 silly gunzTarPerm extractEntry lib/form_data.js
11491 silly gunzTarPerm extractEntry License
11492 silly gunzTarPerm extractEntry Readme.md
11493 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11494 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11495 silly lockFile d4397b50-12084-0-6808455628342927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz
11496 silly lockFile d4397b50-12084-0-6808455628342927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/tmp.tgz
11497 verbose tar pack [ '/home/lerenzo/.npm/form-data/0.0.10/package.tgz',
11497 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package' ]
11498 verbose tarball /home/lerenzo/.npm/form-data/0.0.10/package.tgz
11499 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11500 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11501 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package /home/lerenzo/.npm/73d073ec-12084-0-6808455628342927-package.lock
11502 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11503 verbose lock tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz /home/lerenzo/.npm/5584112f-npm-form-data-0-0-10-package-tgz.lock
11504 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11505 silly lockFile 73d073ec-12084-0-6808455628342927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312084-0.6808455628342927/package
11506 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11507 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11508 silly lockFile 2079196e-nzo-npm-form-data-0-0-10-package /home/lerenzo/.npm/form-data/0.0.10/package
11509 verbose lock /home/lerenzo/.npm/form-data/0.0.10/package /home/lerenzo/.npm/2079196e-nzo-npm-form-data-0-0-10-package.lock
11510 silly lockFile 2079196e-nzo-npm-form-data-0-0-10-package /home/lerenzo/.npm/form-data/0.0.10/package
11511 silly lockFile 2079196e-nzo-npm-form-data-0-0-10-package /home/lerenzo/.npm/form-data/0.0.10/package
11512 verbose tar unpack /home/lerenzo/.npm/form-data/0.0.10/package.tgz
11513 silly lockFile 94b0fe63-nzo-npm-form-data-0-0-10-package tar:///home/lerenzo/.npm/form-data/0.0.10/package
11514 verbose lock tar:///home/lerenzo/.npm/form-data/0.0.10/package /home/lerenzo/.npm/94b0fe63-nzo-npm-form-data-0-0-10-package.lock
11515 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11516 verbose lock tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz /home/lerenzo/.npm/5584112f-npm-form-data-0-0-10-package-tgz.lock
11517 silly gunzTarPerm modes [ '755', '644' ]
11518 silly gunzTarPerm extractEntry package.json
11519 silly gunzTarPerm extractEntry License
11520 silly gunzTarPerm extractEntry Readme.md
11521 silly gunzTarPerm extractEntry lib/form_data.js
11522 silly lockFile 94b0fe63-nzo-npm-form-data-0-0-10-package tar:///home/lerenzo/.npm/form-data/0.0.10/package
11523 silly lockFile 94b0fe63-nzo-npm-form-data-0-0-10-package tar:///home/lerenzo/.npm/form-data/0.0.10/package
11524 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11525 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
11526 verbose chmod /home/lerenzo/.npm/form-data/0.0.10/package.tgz 644
11527 verbose chown /home/lerenzo/.npm/form-data/0.0.10/package.tgz [ 1000, 1000 ]
11528 silly lockFile f644788f-g-form-data-form-data-0-0-10-tgz https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz
11529 silly lockFile f644788f-g-form-data-form-data-0-0-10-tgz https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz
11530 silly lockFile db20d55d-form-data-0-0-10 form-data@0.0.10
11531 silly lockFile db20d55d-form-data-0-0-10 form-data@0.0.10
11532 silly lockFile 539eee6c-form-data-0-0-3 form-data@~0.0.3
11533 silly lockFile 539eee6c-form-data-0-0-3 form-data@~0.0.3
11534 http 200 https://registry.npmjs.org/winston
11535 silly registry.get cb [ 200,
11535 silly registry.get   { vary: 'Accept',
11535 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11535 silly registry.get     etag: '"BDC2UWGIHRSDEPWASJYB6BQ25"',
11535 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:33 GMT',
11535 silly registry.get     'content-type': 'application/json',
11535 silly registry.get     'content-length': '227344' } ]
11536 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz
11537 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11538 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package /home/lerenzo/.npm/4baa86f1-314095-0-581484628142789-package.lock
11539 silly lockFile bcfdb6de-314095-0-581484628142789-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz
11540 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz /home/lerenzo/.npm/bcfdb6de-314095-0-581484628142789-tmp-tgz.lock
11541 silly gunzTarPerm modes [ '755', '644' ]
11542 silly addNameRange number 2 { name: 'winston', range: '>=0.6.0-0 <0.7.0-0', hasData: true }
11543 silly addNameRange versions [ 'winston',
11543 silly addNameRange   [ '0.2.11',
11543 silly addNameRange     '0.3.3',
11543 silly addNameRange     '0.3.4',
11543 silly addNameRange     '0.3.5',
11543 silly addNameRange     '0.4.0',
11543 silly addNameRange     '0.4.1',
11543 silly addNameRange     '0.5.0',
11543 silly addNameRange     '0.5.1',
11543 silly addNameRange     '0.5.2',
11543 silly addNameRange     '0.5.3',
11543 silly addNameRange     '0.5.4',
11543 silly addNameRange     '0.5.5',
11543 silly addNameRange     '0.5.6',
11543 silly addNameRange     '0.5.7',
11543 silly addNameRange     '0.5.8',
11543 silly addNameRange     '0.5.9',
11543 silly addNameRange     '0.5.10',
11543 silly addNameRange     '0.5.11',
11543 silly addNameRange     '0.6.1',
11543 silly addNameRange     '0.6.2',
11543 silly addNameRange     '0.7.0',
11543 silly addNameRange     '0.7.1',
11543 silly addNameRange     '0.7.2' ] ]
11544 verbose addNamed [ 'winston', '0.6.2' ]
11545 silly gunzTarPerm extractEntry package.json
11546 silly gunzTarPerm extractEntry README.md
11547 silly gunzTarPerm extractEntry LICENSE
11548 silly gunzTarPerm extractEntry stringify.js
11549 silly gunzTarPerm extractEntry test.js
11550 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11551 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11552 silly lockFile bcfdb6de-314095-0-581484628142789-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz
11553 silly lockFile bcfdb6de-314095-0-581484628142789-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/tmp.tgz
11554 verbose tar pack [ '/home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz',
11554 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package' ]
11555 verbose tarball /home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11556 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11557 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11558 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package /home/lerenzo/.npm/4baa86f1-314095-0-581484628142789-package.lock
11559 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11560 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz /home/lerenzo/.npm/413a03be-stringify-safe-5-0-0-package-tgz.lock
11561 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11562 silly lockFile 4baa86f1-314095-0-581484628142789-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314095-0.581484628142789/package
11563 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11564 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11565 silly lockFile 8ae1798d-son-stringify-safe-5-0-0-package /home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11566 verbose lock /home/lerenzo/.npm/json-stringify-safe/5.0.0/package /home/lerenzo/.npm/8ae1798d-son-stringify-safe-5-0-0-package.lock
11567 silly lockFile 8ae1798d-son-stringify-safe-5-0-0-package /home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11568 silly lockFile 8ae1798d-son-stringify-safe-5-0-0-package /home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11569 verbose tar unpack /home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11570 silly lockFile 3bec4b54-son-stringify-safe-5-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11571 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package /home/lerenzo/.npm/3bec4b54-son-stringify-safe-5-0-0-package.lock
11572 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11573 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz /home/lerenzo/.npm/413a03be-stringify-safe-5-0-0-package-tgz.lock
11574 silly gunzTarPerm modes [ '755', '644' ]
11575 silly gunzTarPerm extractEntry package.json
11576 silly gunzTarPerm extractEntry README.md
11577 silly gunzTarPerm extractEntry LICENSE
11578 silly gunzTarPerm extractEntry stringify.js
11579 silly gunzTarPerm extractEntry test.js
11580 silly lockFile 3bec4b54-son-stringify-safe-5-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11581 silly lockFile 3bec4b54-son-stringify-safe-5-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package
11582 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11583 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
11584 verbose chmod /home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz 644
11585 verbose chown /home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz [ 1000, 1000 ]
11586 silly lockFile 830a0d02-fe-json-stringify-safe-5-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz
11587 silly lockFile 830a0d02-fe-json-stringify-safe-5-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz
11588 silly lockFile 1d9ebe76-json-stringify-safe-5-0-0 json-stringify-safe@5.0.0
11589 silly lockFile 1d9ebe76-json-stringify-safe-5-0-0 json-stringify-safe@5.0.0
11590 silly lockFile 063b1a01-json-stringify-safe-5-0-0 json-stringify-safe@~5.0.0
11591 silly lockFile 063b1a01-json-stringify-safe-5-0-0 json-stringify-safe@~5.0.0
11592 http 200 https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz
11593 http 200 https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz
11594 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz
11595 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11596 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package /home/lerenzo/.npm/3f2b0754-14100-0-5238806831184775-package.lock
11597 silly lockFile c67a3971-14100-0-5238806831184775-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz
11598 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz /home/lerenzo/.npm/c67a3971-14100-0-5238806831184775-tmp-tgz.lock
11599 silly gunzTarPerm modes [ '755', '644' ]
11600 silly gunzTarPerm extractEntry package.json
11601 silly gunzTarPerm extractEntry README.md
11602 silly gunzTarPerm extractEntry LICENSE
11603 silly gunzTarPerm extractEntry index.js
11604 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11605 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11606 silly lockFile c67a3971-14100-0-5238806831184775-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz
11607 silly lockFile c67a3971-14100-0-5238806831184775-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/tmp.tgz
11608 verbose tar pack [ '/home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz',
11608 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package' ]
11609 verbose tarball /home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11610 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11611 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11612 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package /home/lerenzo/.npm/3f2b0754-14100-0-5238806831184775-package.lock
11613 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11614 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz /home/lerenzo/.npm/c531b4e3-m-tunnel-agent-0-3-0-package-tgz.lock
11615 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11616 silly lockFile 3f2b0754-14100-0-5238806831184775-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314100-0.5238806831184775/package
11617 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11618 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11619 silly lockFile 09e74151-o-npm-tunnel-agent-0-3-0-package /home/lerenzo/.npm/tunnel-agent/0.3.0/package
11620 verbose lock /home/lerenzo/.npm/tunnel-agent/0.3.0/package /home/lerenzo/.npm/09e74151-o-npm-tunnel-agent-0-3-0-package.lock
11621 silly lockFile 09e74151-o-npm-tunnel-agent-0-3-0-package /home/lerenzo/.npm/tunnel-agent/0.3.0/package
11622 silly lockFile 09e74151-o-npm-tunnel-agent-0-3-0-package /home/lerenzo/.npm/tunnel-agent/0.3.0/package
11623 verbose tar unpack /home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11624 silly lockFile 9c385bee-o-npm-tunnel-agent-0-3-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package
11625 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package /home/lerenzo/.npm/9c385bee-o-npm-tunnel-agent-0-3-0-package.lock
11626 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11627 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz /home/lerenzo/.npm/c531b4e3-m-tunnel-agent-0-3-0-package-tgz.lock
11628 silly gunzTarPerm modes [ '755', '644' ]
11629 silly gunzTarPerm extractEntry package.json
11630 silly gunzTarPerm extractEntry README.md
11631 silly gunzTarPerm extractEntry LICENSE
11632 silly gunzTarPerm extractEntry index.js
11633 silly lockFile 9c385bee-o-npm-tunnel-agent-0-3-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package
11634 silly lockFile 9c385bee-o-npm-tunnel-agent-0-3-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package
11635 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11636 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
11637 verbose chmod /home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz 644
11638 verbose chown /home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz [ 1000, 1000 ]
11639 silly lockFile 8e175ebc-nel-agent-tunnel-agent-0-3-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz
11640 silly lockFile 8e175ebc-nel-agent-tunnel-agent-0-3-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz
11641 silly lockFile d054959a-tunnel-agent-0-3-0 tunnel-agent@0.3.0
11642 silly lockFile d054959a-tunnel-agent-0-3-0 tunnel-agent@0.3.0
11643 silly lockFile e5681eda-tunnel-agent-0-3-0 tunnel-agent@~0.3.0
11644 silly lockFile e5681eda-tunnel-agent-0-3-0 tunnel-agent@~0.3.0
11645 http 200 https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz
11646 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz
11647 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11648 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package /home/lerenzo/.npm/946bedad-4098-0-48447267757728696-package.lock
11649 silly lockFile 47e86deb-4098-0-48447267757728696-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz
11650 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz /home/lerenzo/.npm/47e86deb-4098-0-48447267757728696-tmp-tgz.lock
11651 silly gunzTarPerm modes [ '755', '644' ]
11652 silly gunzTarPerm extractEntry package.json
11653 silly gunzTarPerm extractEntry README.md
11654 silly gunzTarPerm extractEntry LICENSE
11655 silly gunzTarPerm extractEntry index.js
11656 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11657 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11658 silly lockFile 47e86deb-4098-0-48447267757728696-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz
11659 silly lockFile 47e86deb-4098-0-48447267757728696-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/tmp.tgz
11660 verbose tar pack [ '/home/lerenzo/.npm/forever-agent/0.5.0/package.tgz',
11660 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package' ]
11661 verbose tarball /home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11662 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11663 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11664 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package /home/lerenzo/.npm/946bedad-4098-0-48447267757728696-package.lock
11665 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11666 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz /home/lerenzo/.npm/c91d8733--forever-agent-0-5-0-package-tgz.lock
11667 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11668 silly lockFile 946bedad-4098-0-48447267757728696-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314098-0.48447267757728696/package
11669 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11670 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11671 silly lockFile 25f6ba55--npm-forever-agent-0-5-0-package /home/lerenzo/.npm/forever-agent/0.5.0/package
11672 verbose lock /home/lerenzo/.npm/forever-agent/0.5.0/package /home/lerenzo/.npm/25f6ba55--npm-forever-agent-0-5-0-package.lock
11673 silly lockFile 25f6ba55--npm-forever-agent-0-5-0-package /home/lerenzo/.npm/forever-agent/0.5.0/package
11674 silly lockFile 25f6ba55--npm-forever-agent-0-5-0-package /home/lerenzo/.npm/forever-agent/0.5.0/package
11675 verbose tar unpack /home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11676 silly lockFile 88d6ad2e--npm-forever-agent-0-5-0-package tar:///home/lerenzo/.npm/forever-agent/0.5.0/package
11677 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.5.0/package /home/lerenzo/.npm/88d6ad2e--npm-forever-agent-0-5-0-package.lock
11678 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11679 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz /home/lerenzo/.npm/c91d8733--forever-agent-0-5-0-package-tgz.lock
11680 silly gunzTarPerm modes [ '755', '644' ]
11681 silly gunzTarPerm extractEntry package.json
11682 silly gunzTarPerm extractEntry README.md
11683 silly gunzTarPerm extractEntry LICENSE
11684 silly gunzTarPerm extractEntry index.js
11685 silly lockFile 88d6ad2e--npm-forever-agent-0-5-0-package tar:///home/lerenzo/.npm/forever-agent/0.5.0/package
11686 silly lockFile 88d6ad2e--npm-forever-agent-0-5-0-package tar:///home/lerenzo/.npm/forever-agent/0.5.0/package
11687 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11688 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
11689 verbose chmod /home/lerenzo/.npm/forever-agent/0.5.0/package.tgz 644
11690 verbose chown /home/lerenzo/.npm/forever-agent/0.5.0/package.tgz [ 1000, 1000 ]
11691 silly lockFile e26cb0e6-er-agent-forever-agent-0-5-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz
11692 silly lockFile e26cb0e6-er-agent-forever-agent-0-5-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz
11693 silly lockFile 4bf1555c-forever-agent-0-5-0 forever-agent@0.5.0
11694 silly lockFile 4bf1555c-forever-agent-0-5-0 forever-agent@0.5.0
11695 silly lockFile fa463915-forever-agent-0-5-0 forever-agent@~0.5.0
11696 silly lockFile fa463915-forever-agent-0-5-0 forever-agent@~0.5.0
11697 http 200 https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz
11698 http 200 https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz
11699 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz
11700 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11701 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package /home/lerenzo/.npm/8bd97476-12242-0-7861033175140619-package.lock
11702 silly lockFile e08f0a88-12242-0-7861033175140619-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz
11703 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz /home/lerenzo/.npm/e08f0a88-12242-0-7861033175140619-tmp-tgz.lock
11704 silly gunzTarPerm modes [ '755', '644' ]
11705 silly gunzTarPerm extractEntry package.json
11706 silly gunzTarPerm extractEntry index.js
11707 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11708 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11709 silly lockFile e08f0a88-12242-0-7861033175140619-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz
11710 silly lockFile e08f0a88-12242-0-7861033175140619-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/tmp.tgz
11711 verbose tar pack [ '/home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz',
11711 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package' ]
11712 verbose tarball /home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11713 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11714 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11715 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package /home/lerenzo/.npm/8bd97476-12242-0-7861033175140619-package.lock
11716 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11717 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz /home/lerenzo/.npm/d340c51b-m-tunnel-agent-0-2-0-package-tgz.lock
11718 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11719 silly lockFile 8bd97476-12242-0-7861033175140619-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312242-0.7861033175140619/package
11720 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11721 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11722 silly lockFile bc3f6c55-o-npm-tunnel-agent-0-2-0-package /home/lerenzo/.npm/tunnel-agent/0.2.0/package
11723 verbose lock /home/lerenzo/.npm/tunnel-agent/0.2.0/package /home/lerenzo/.npm/bc3f6c55-o-npm-tunnel-agent-0-2-0-package.lock
11724 silly lockFile bc3f6c55-o-npm-tunnel-agent-0-2-0-package /home/lerenzo/.npm/tunnel-agent/0.2.0/package
11725 silly lockFile bc3f6c55-o-npm-tunnel-agent-0-2-0-package /home/lerenzo/.npm/tunnel-agent/0.2.0/package
11726 verbose tar unpack /home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11727 silly lockFile b2dc9c9a-o-npm-tunnel-agent-0-2-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package
11728 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package /home/lerenzo/.npm/b2dc9c9a-o-npm-tunnel-agent-0-2-0-package.lock
11729 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11730 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz /home/lerenzo/.npm/d340c51b-m-tunnel-agent-0-2-0-package-tgz.lock
11731 silly gunzTarPerm modes [ '755', '644' ]
11732 silly gunzTarPerm extractEntry package.json
11733 silly gunzTarPerm extractEntry index.js
11734 silly lockFile b2dc9c9a-o-npm-tunnel-agent-0-2-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package
11735 silly lockFile b2dc9c9a-o-npm-tunnel-agent-0-2-0-package tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package
11736 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11737 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
11738 verbose chmod /home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz 644
11739 verbose chown /home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz [ 1000, 1000 ]
11740 silly lockFile 173e23d1-nel-agent-tunnel-agent-0-2-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz
11741 silly lockFile 173e23d1-nel-agent-tunnel-agent-0-2-0-tgz https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz
11742 silly lockFile ba879b4f-tunnel-agent-0-2-0 tunnel-agent@0.2.0
11743 silly lockFile ba879b4f-tunnel-agent-0-2-0 tunnel-agent@0.2.0
11744 silly lockFile 13cacb1b-tunnel-agent-0-2-0 tunnel-agent@~0.2.0
11745 silly lockFile 13cacb1b-tunnel-agent-0-2-0 tunnel-agent@~0.2.0
11746 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz
11747 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11748 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package /home/lerenzo/.npm/77859a69-13102-0-7774036829359829-package.lock
11749 silly lockFile 3146814b-13102-0-7774036829359829-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz
11750 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz /home/lerenzo/.npm/3146814b-13102-0-7774036829359829-tmp-tgz.lock
11751 silly gunzTarPerm modes [ '755', '644' ]
11752 silly gunzTarPerm extractEntry package.json
11753 silly gunzTarPerm extractEntry README.md
11754 silly gunzTarPerm extractEntry LICENSE
11755 silly gunzTarPerm extractEntry stringify.js
11756 silly gunzTarPerm extractEntry test.js
11757 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11758 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11759 silly lockFile 3146814b-13102-0-7774036829359829-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz
11760 silly lockFile 3146814b-13102-0-7774036829359829-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/tmp.tgz
11761 verbose tar pack [ '/home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz',
11761 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package' ]
11762 verbose tarball /home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11763 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11764 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11765 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package /home/lerenzo/.npm/77859a69-13102-0-7774036829359829-package.lock
11766 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11767 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz /home/lerenzo/.npm/9b21beca-stringify-safe-3-0-0-package-tgz.lock
11768 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11769 silly lockFile 77859a69-13102-0-7774036829359829-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572313102-0.7774036829359829/package
11770 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11771 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11772 silly lockFile a982d4a2-son-stringify-safe-3-0-0-package /home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11773 verbose lock /home/lerenzo/.npm/json-stringify-safe/3.0.0/package /home/lerenzo/.npm/a982d4a2-son-stringify-safe-3-0-0-package.lock
11774 silly lockFile a982d4a2-son-stringify-safe-3-0-0-package /home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11775 silly lockFile a982d4a2-son-stringify-safe-3-0-0-package /home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11776 verbose tar unpack /home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11777 silly lockFile f4c2d045-son-stringify-safe-3-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11778 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package /home/lerenzo/.npm/f4c2d045-son-stringify-safe-3-0-0-package.lock
11779 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11780 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz /home/lerenzo/.npm/9b21beca-stringify-safe-3-0-0-package-tgz.lock
11781 silly gunzTarPerm modes [ '755', '644' ]
11782 silly gunzTarPerm extractEntry package.json
11783 silly gunzTarPerm extractEntry README.md
11784 silly gunzTarPerm extractEntry LICENSE
11785 silly gunzTarPerm extractEntry stringify.js
11786 silly gunzTarPerm extractEntry test.js
11787 silly lockFile f4c2d045-son-stringify-safe-3-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11788 silly lockFile f4c2d045-son-stringify-safe-3-0-0-package tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package
11789 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11790 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
11791 verbose chmod /home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz 644
11792 verbose chown /home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz [ 1000, 1000 ]
11793 silly lockFile fe362497-fe-json-stringify-safe-3-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz
11794 silly lockFile fe362497-fe-json-stringify-safe-3-0-0-tgz https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz
11795 silly lockFile f18d29ee-json-stringify-safe-3-0-0 json-stringify-safe@3.0.0
11796 silly lockFile f18d29ee-json-stringify-safe-3-0-0 json-stringify-safe@3.0.0
11797 silly lockFile a99e72b7-json-stringify-safe-3-0-0 json-stringify-safe@~3.0.0
11798 silly lockFile a99e72b7-json-stringify-safe-3-0-0 json-stringify-safe@~3.0.0
11799 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz
11800 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11801 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package /home/lerenzo/.npm/c06fca3e-14110-0-8670974287670106-package.lock
11802 silly lockFile 1f95083f-14110-0-8670974287670106-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz
11803 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz /home/lerenzo/.npm/1f95083f-14110-0-8670974287670106-tmp-tgz.lock
11804 silly gunzTarPerm modes [ '755', '644' ]
11805 silly gunzTarPerm extractEntry package.json
11806 silly gunzTarPerm extractEntry README.md
11807 silly gunzTarPerm extractEntry LICENSE
11808 silly gunzTarPerm extractEntry index.js
11809 silly gunzTarPerm extractEntry test.js
11810 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11811 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11812 silly lockFile 1f95083f-14110-0-8670974287670106-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz
11813 silly lockFile 1f95083f-14110-0-8670974287670106-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/tmp.tgz
11814 verbose tar pack [ '/home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz',
11814 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package' ]
11815 verbose tarball /home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11816 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11817 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11818 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package /home/lerenzo/.npm/c06fca3e-14110-0-8670974287670106-package.lock
11819 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11820 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz /home/lerenzo/.npm/9da3dad5-npm-oauth-sign-0-3-0-package-tgz.lock
11821 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11822 silly lockFile c06fca3e-14110-0-8670974287670106-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314110-0.8670974287670106/package
11823 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11824 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11825 silly lockFile f8b49d6f-nzo-npm-oauth-sign-0-3-0-package /home/lerenzo/.npm/oauth-sign/0.3.0/package
11826 verbose lock /home/lerenzo/.npm/oauth-sign/0.3.0/package /home/lerenzo/.npm/f8b49d6f-nzo-npm-oauth-sign-0-3-0-package.lock
11827 silly lockFile f8b49d6f-nzo-npm-oauth-sign-0-3-0-package /home/lerenzo/.npm/oauth-sign/0.3.0/package
11828 silly lockFile f8b49d6f-nzo-npm-oauth-sign-0-3-0-package /home/lerenzo/.npm/oauth-sign/0.3.0/package
11829 verbose tar unpack /home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11830 silly lockFile c60b5ebd-nzo-npm-oauth-sign-0-3-0-package tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package
11831 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package /home/lerenzo/.npm/c60b5ebd-nzo-npm-oauth-sign-0-3-0-package.lock
11832 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11833 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz /home/lerenzo/.npm/9da3dad5-npm-oauth-sign-0-3-0-package-tgz.lock
11834 silly gunzTarPerm modes [ '755', '644' ]
11835 silly gunzTarPerm extractEntry package.json
11836 silly gunzTarPerm extractEntry README.md
11837 silly gunzTarPerm extractEntry LICENSE
11838 silly gunzTarPerm extractEntry index.js
11839 silly gunzTarPerm extractEntry test.js
11840 silly lockFile c60b5ebd-nzo-npm-oauth-sign-0-3-0-package tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package
11841 silly lockFile c60b5ebd-nzo-npm-oauth-sign-0-3-0-package tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package
11842 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11843 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
11844 verbose chmod /home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz 644
11845 verbose chown /home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz [ 1000, 1000 ]
11846 silly lockFile 5b3f4a1b--oauth-sign-oauth-sign-0-3-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz
11847 silly lockFile 5b3f4a1b--oauth-sign-oauth-sign-0-3-0-tgz https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz
11848 silly lockFile ae61e7c5-oauth-sign-0-3-0 oauth-sign@0.3.0
11849 silly lockFile ae61e7c5-oauth-sign-0-3-0 oauth-sign@0.3.0
11850 silly lockFile 7fb5c7f1-oauth-sign-0-3-0 oauth-sign@~0.3.0
11851 silly lockFile 7fb5c7f1-oauth-sign-0-3-0 oauth-sign@~0.3.0
11852 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz
11853 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11854 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package /home/lerenzo/.npm/4af353ec-14111-0-7250390197150409-package.lock
11855 silly lockFile af6c3617-14111-0-7250390197150409-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz
11856 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz /home/lerenzo/.npm/af6c3617-14111-0-7250390197150409-tmp-tgz.lock
11857 silly gunzTarPerm modes [ '755', '644' ]
11858 silly gunzTarPerm extractEntry package.json
11859 silly gunzTarPerm extractEntry README.md
11860 silly gunzTarPerm extractEntry LICENSE
11861 silly gunzTarPerm extractEntry index.js
11862 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11863 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11864 silly lockFile af6c3617-14111-0-7250390197150409-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz
11865 silly lockFile af6c3617-14111-0-7250390197150409-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/tmp.tgz
11866 verbose tar pack [ '/home/lerenzo/.npm/aws-sign/0.3.0/package.tgz',
11866 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package' ]
11867 verbose tarball /home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11868 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11869 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11870 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package /home/lerenzo/.npm/4af353ec-14111-0-7250390197150409-package.lock
11871 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11872 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz /home/lerenzo/.npm/ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz.lock
11873 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11874 silly lockFile 4af353ec-14111-0-7250390197150409-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.7250390197150409/package
11875 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11876 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11877 silly lockFile d2bce54e-renzo-npm-aws-sign-0-3-0-package /home/lerenzo/.npm/aws-sign/0.3.0/package
11878 verbose lock /home/lerenzo/.npm/aws-sign/0.3.0/package /home/lerenzo/.npm/d2bce54e-renzo-npm-aws-sign-0-3-0-package.lock
11879 silly lockFile d2bce54e-renzo-npm-aws-sign-0-3-0-package /home/lerenzo/.npm/aws-sign/0.3.0/package
11880 silly lockFile d2bce54e-renzo-npm-aws-sign-0-3-0-package /home/lerenzo/.npm/aws-sign/0.3.0/package
11881 verbose tar unpack /home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11882 silly lockFile 5c043828-renzo-npm-aws-sign-0-3-0-package tar:///home/lerenzo/.npm/aws-sign/0.3.0/package
11883 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.3.0/package /home/lerenzo/.npm/5c043828-renzo-npm-aws-sign-0-3-0-package.lock
11884 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11885 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz /home/lerenzo/.npm/ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz.lock
11886 silly gunzTarPerm modes [ '755', '644' ]
11887 silly gunzTarPerm extractEntry package.json
11888 silly gunzTarPerm extractEntry README.md
11889 silly gunzTarPerm extractEntry LICENSE
11890 silly gunzTarPerm extractEntry index.js
11891 silly lockFile 5c043828-renzo-npm-aws-sign-0-3-0-package tar:///home/lerenzo/.npm/aws-sign/0.3.0/package
11892 silly lockFile 5c043828-renzo-npm-aws-sign-0-3-0-package tar:///home/lerenzo/.npm/aws-sign/0.3.0/package
11893 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11894 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
11895 verbose chmod /home/lerenzo/.npm/aws-sign/0.3.0/package.tgz 644
11896 verbose chown /home/lerenzo/.npm/aws-sign/0.3.0/package.tgz [ 1000, 1000 ]
11897 http 200 https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz
11898 silly lockFile 2bf953b3--org-aws-sign-aws-sign-0-3-0-tgz https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz
11899 silly lockFile 2bf953b3--org-aws-sign-aws-sign-0-3-0-tgz https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz
11900 silly lockFile 503c0a27-aws-sign-0-3-0 aws-sign@0.3.0
11901 silly lockFile 503c0a27-aws-sign-0-3-0 aws-sign@0.3.0
11902 silly lockFile 514b1d97-aws-sign-0-3-0 aws-sign@~0.3.0
11903 silly lockFile 514b1d97-aws-sign-0-3-0 aws-sign@~0.3.0
11904 http 200 https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz
11905 http 200 https://registry.npmjs.org/revalidator
11906 silly registry.get cb [ 200,
11906 silly registry.get   { vary: 'Accept',
11906 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
11906 silly registry.get     etag: '"B2RP3K1UT3IYMENLCB94W4VJ7"',
11906 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:55 GMT',
11906 silly registry.get     'content-type': 'application/json',
11906 silly registry.get     'content-length': '26785' } ]
11907 silly addNameRange number 2 { name: 'revalidator',
11907 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
11907 silly addNameRange   hasData: true }
11908 silly addNameRange versions [ 'revalidator',
11908 silly addNameRange   [ '0.1.0', '0.1.1', '0.1.2', '0.1.3', '0.1.5' ] ]
11909 verbose addNamed [ 'revalidator', '0.1.5' ]
11910 verbose addNamed [ '0.1.5', '0.1.5' ]
11911 silly lockFile abe9e280-revalidator-0-1-5 revalidator@0.1.5
11912 verbose lock revalidator@0.1.5 /home/lerenzo/.npm/abe9e280-revalidator-0-1-5.lock
11913 silly lockFile f7e6fddc-evalidator-revalidator-0-1-5-tgz https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz
11914 verbose lock https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz /home/lerenzo/.npm/f7e6fddc-evalidator-revalidator-0-1-5-tgz.lock
11915 verbose addRemoteTarball [ 'https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz',
11915 verbose addRemoteTarball   '205bc02e4186e63e82a0837498f29ba287be3861' ]
11916 info retry fetch attempt 1 at 14:12:01
11917 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz
11918 http GET https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz
11919 http 200 https://registry.npmjs.org/read/-/read-1.0.5.tgz
11920 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz
11921 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11922 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package /home/lerenzo/.npm/c09adc2d-14111-0-6389040739741176-package.lock
11923 silly lockFile 3290385c-14111-0-6389040739741176-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz
11924 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz /home/lerenzo/.npm/3290385c-14111-0-6389040739741176-tmp-tgz.lock
11925 silly gunzTarPerm modes [ '755', '644' ]
11926 silly gunzTarPerm extractEntry package.json
11927 silly gunzTarPerm extractEntry README.md
11928 silly gunzTarPerm extractEntry LICENSE
11929 silly gunzTarPerm extractEntry index.js
11930 silly gunzTarPerm extractEntry jar.js
11931 silly gunzTarPerm extractEntry tests/run.js
11932 silly gunzTarPerm extractEntry tests/test-cookie.js
11933 silly gunzTarPerm extractEntry tests/test-cookiejar.js
11934 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11935 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11936 silly lockFile 3290385c-14111-0-6389040739741176-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz
11937 silly lockFile 3290385c-14111-0-6389040739741176-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/tmp.tgz
11938 verbose tar pack [ '/home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz',
11938 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package' ]
11939 verbose tarball /home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11940 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11941 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11942 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package /home/lerenzo/.npm/c09adc2d-14111-0-6389040739741176-package.lock
11943 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11944 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz /home/lerenzo/.npm/5a5d76b2-npm-cookie-jar-0-3-0-package-tgz.lock
11945 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11946 silly lockFile c09adc2d-14111-0-6389040739741176-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.6389040739741176/package
11947 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11948 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11949 silly lockFile 99ee5e80-nzo-npm-cookie-jar-0-3-0-package /home/lerenzo/.npm/cookie-jar/0.3.0/package
11950 verbose lock /home/lerenzo/.npm/cookie-jar/0.3.0/package /home/lerenzo/.npm/99ee5e80-nzo-npm-cookie-jar-0-3-0-package.lock
11951 silly lockFile 99ee5e80-nzo-npm-cookie-jar-0-3-0-package /home/lerenzo/.npm/cookie-jar/0.3.0/package
11952 silly lockFile 99ee5e80-nzo-npm-cookie-jar-0-3-0-package /home/lerenzo/.npm/cookie-jar/0.3.0/package
11953 verbose tar unpack /home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11954 silly lockFile 3f70c8ed-nzo-npm-cookie-jar-0-3-0-package tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package
11955 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package /home/lerenzo/.npm/3f70c8ed-nzo-npm-cookie-jar-0-3-0-package.lock
11956 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11957 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz /home/lerenzo/.npm/5a5d76b2-npm-cookie-jar-0-3-0-package-tgz.lock
11958 silly gunzTarPerm modes [ '755', '644' ]
11959 silly gunzTarPerm extractEntry package.json
11960 silly gunzTarPerm extractEntry README.md
11961 silly gunzTarPerm extractEntry LICENSE
11962 silly gunzTarPerm extractEntry index.js
11963 silly gunzTarPerm extractEntry jar.js
11964 silly gunzTarPerm extractEntry tests/run.js
11965 silly gunzTarPerm extractEntry tests/test-cookie.js
11966 silly gunzTarPerm extractEntry tests/test-cookiejar.js
11967 silly lockFile 3f70c8ed-nzo-npm-cookie-jar-0-3-0-package tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package
11968 silly lockFile 3f70c8ed-nzo-npm-cookie-jar-0-3-0-package tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package
11969 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11970 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
11971 verbose chmod /home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz 644
11972 verbose chown /home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz [ 1000, 1000 ]
11973 silly lockFile e92588d6--cookie-jar-cookie-jar-0-3-0-tgz https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz
11974 silly lockFile e92588d6--cookie-jar-cookie-jar-0-3-0-tgz https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz
11975 silly lockFile 46e83fc0-cookie-jar-0-3-0 cookie-jar@0.3.0
11976 silly lockFile 46e83fc0-cookie-jar-0-3-0 cookie-jar@0.3.0
11977 silly lockFile 4c61eb43-cookie-jar-0-3-0 cookie-jar@~0.3.0
11978 silly lockFile 4c61eb43-cookie-jar-0-3-0 cookie-jar@~0.3.0
11979 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz
11980 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
11981 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package /home/lerenzo/.npm/8e459d2e-14111-0-5689662995282561-package.lock
11982 silly lockFile 09913d6b-14111-0-5689662995282561-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz
11983 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz /home/lerenzo/.npm/09913d6b-14111-0-5689662995282561-tmp-tgz.lock
11984 silly gunzTarPerm modes [ '755', '644' ]
11985 silly gunzTarPerm extractEntry package.json
11986 silly gunzTarPerm extractEntry License
11987 silly gunzTarPerm extractEntry Readme.md
11988 silly gunzTarPerm extractEntry lib/form_data.js
11989 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
11990 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
11991 silly lockFile 09913d6b-14111-0-5689662995282561-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz
11992 silly lockFile 09913d6b-14111-0-5689662995282561-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/tmp.tgz
11993 verbose tar pack [ '/home/lerenzo/.npm/form-data/0.1.2/package.tgz',
11993 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package' ]
11994 verbose tarball /home/lerenzo/.npm/form-data/0.1.2/package.tgz
11995 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
11996 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
11997 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package /home/lerenzo/.npm/8e459d2e-14111-0-5689662995282561-package.lock
11998 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
11999 verbose lock tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz /home/lerenzo/.npm/adb4a40c--npm-form-data-0-1-2-package-tgz.lock
12000 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
12001 silly lockFile 8e459d2e-14111-0-5689662995282561-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572314111-0.5689662995282561/package
12002 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
12003 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
12004 silly lockFile d8f66dd8-enzo-npm-form-data-0-1-2-package /home/lerenzo/.npm/form-data/0.1.2/package
12005 verbose lock /home/lerenzo/.npm/form-data/0.1.2/package /home/lerenzo/.npm/d8f66dd8-enzo-npm-form-data-0-1-2-package.lock
12006 silly lockFile d8f66dd8-enzo-npm-form-data-0-1-2-package /home/lerenzo/.npm/form-data/0.1.2/package
12007 silly lockFile d8f66dd8-enzo-npm-form-data-0-1-2-package /home/lerenzo/.npm/form-data/0.1.2/package
12008 verbose tar unpack /home/lerenzo/.npm/form-data/0.1.2/package.tgz
12009 silly lockFile 328387bf-enzo-npm-form-data-0-1-2-package tar:///home/lerenzo/.npm/form-data/0.1.2/package
12010 verbose lock tar:///home/lerenzo/.npm/form-data/0.1.2/package /home/lerenzo/.npm/328387bf-enzo-npm-form-data-0-1-2-package.lock
12011 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
12012 verbose lock tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz /home/lerenzo/.npm/adb4a40c--npm-form-data-0-1-2-package-tgz.lock
12013 silly gunzTarPerm modes [ '755', '644' ]
12014 silly gunzTarPerm extractEntry package.json
12015 silly gunzTarPerm extractEntry License
12016 silly gunzTarPerm extractEntry Readme.md
12017 silly gunzTarPerm extractEntry lib/form_data.js
12018 silly lockFile 328387bf-enzo-npm-form-data-0-1-2-package tar:///home/lerenzo/.npm/form-data/0.1.2/package
12019 silly lockFile 328387bf-enzo-npm-form-data-0-1-2-package tar:///home/lerenzo/.npm/form-data/0.1.2/package
12020 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
12021 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
12022 verbose chmod /home/lerenzo/.npm/form-data/0.1.2/package.tgz 644
12023 verbose chown /home/lerenzo/.npm/form-data/0.1.2/package.tgz [ 1000, 1000 ]
12024 silly lockFile 627c9ba9-rg-form-data-form-data-0-1-2-tgz https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz
12025 silly lockFile 627c9ba9-rg-form-data-form-data-0-1-2-tgz https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz
12026 silly lockFile 5abf5da9-form-data-0-1-2 form-data@0.1.2
12027 silly lockFile 5abf5da9-form-data-0-1-2 form-data@0.1.2
12028 silly lockFile 26aa13f4-form-data-0-1-0 form-data@~0.1.0
12029 silly lockFile 26aa13f4-form-data-0-1-0 form-data@~0.1.0
12030 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz
12031 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12032 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package /home/lerenzo/.npm/e9268c06-5252-0-27700414694845676-package.lock
12033 silly lockFile 1e6dd449-5252-0-27700414694845676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz
12034 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz /home/lerenzo/.npm/1e6dd449-5252-0-27700414694845676-tmp-tgz.lock
12035 silly gunzTarPerm modes [ '755', '644' ]
12036 silly gunzTarPerm extractEntry package.json
12037 silly gunzTarPerm extractEntry .npmignore
12038 silly gunzTarPerm extractEntry README.md
12039 silly gunzTarPerm extractEntry LICENCE
12040 silly gunzTarPerm extractEntry rs.js
12041 silly gunzTarPerm extractEntry example/example.js
12042 silly gunzTarPerm extractEntry lib/read.js
12043 silly gunzTarPerm extractEntry test/basic.js
12044 silly gunzTarPerm extractEntry test/defaults.js
12045 silly gunzTarPerm extractEntry test/many.js
12046 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12047 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12048 silly lockFile 1e6dd449-5252-0-27700414694845676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz
12049 silly lockFile 1e6dd449-5252-0-27700414694845676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/tmp.tgz
12050 verbose tar pack [ '/home/lerenzo/.npm/read/1.0.5/package.tgz',
12050 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package' ]
12051 verbose tarball /home/lerenzo/.npm/read/1.0.5/package.tgz
12052 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12053 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12054 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package /home/lerenzo/.npm/e9268c06-5252-0-27700414694845676-package.lock
12055 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12056 verbose lock tar:///home/lerenzo/.npm/read/1.0.5/package.tgz /home/lerenzo/.npm/ed7a61ef-renzo-npm-read-1-0-5-package-tgz.lock
12057 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12058 silly lockFile e9268c06-5252-0-27700414694845676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572315252-0.27700414694845676/package
12059 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12060 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12061 silly lockFile 380f01f7-e-lerenzo-npm-read-1-0-5-package /home/lerenzo/.npm/read/1.0.5/package
12062 verbose lock /home/lerenzo/.npm/read/1.0.5/package /home/lerenzo/.npm/380f01f7-e-lerenzo-npm-read-1-0-5-package.lock
12063 silly lockFile 380f01f7-e-lerenzo-npm-read-1-0-5-package /home/lerenzo/.npm/read/1.0.5/package
12064 silly lockFile 380f01f7-e-lerenzo-npm-read-1-0-5-package /home/lerenzo/.npm/read/1.0.5/package
12065 verbose tar unpack /home/lerenzo/.npm/read/1.0.5/package.tgz
12066 silly lockFile 3a3863b2-e-lerenzo-npm-read-1-0-5-package tar:///home/lerenzo/.npm/read/1.0.5/package
12067 verbose lock tar:///home/lerenzo/.npm/read/1.0.5/package /home/lerenzo/.npm/3a3863b2-e-lerenzo-npm-read-1-0-5-package.lock
12068 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12069 verbose lock tar:///home/lerenzo/.npm/read/1.0.5/package.tgz /home/lerenzo/.npm/ed7a61ef-renzo-npm-read-1-0-5-package-tgz.lock
12070 silly gunzTarPerm modes [ '755', '644' ]
12071 silly gunzTarPerm extractEntry package.json
12072 silly gunzTarPerm extractEntry .npmignore
12073 silly gunzTarPerm extractEntry README.md
12074 silly gunzTarPerm extractEntry LICENCE
12075 silly gunzTarPerm extractEntry rs.js
12076 silly gunzTarPerm extractEntry example/example.js
12077 silly gunzTarPerm extractEntry lib/read.js
12078 silly gunzTarPerm extractEntry test/basic.js
12079 silly gunzTarPerm extractEntry test/defaults.js
12080 silly gunzTarPerm extractEntry test/many.js
12081 silly lockFile 3a3863b2-e-lerenzo-npm-read-1-0-5-package tar:///home/lerenzo/.npm/read/1.0.5/package
12082 silly lockFile 3a3863b2-e-lerenzo-npm-read-1-0-5-package tar:///home/lerenzo/.npm/read/1.0.5/package
12083 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12084 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
12085 verbose chmod /home/lerenzo/.npm/read/1.0.5/package.tgz 644
12086 verbose chown /home/lerenzo/.npm/read/1.0.5/package.tgz [ 1000, 1000 ]
12087 silly lockFile 1cfc710e-ry-npmjs-org-read-read-1-0-5-tgz https://registry.npmjs.org/read/-/read-1.0.5.tgz
12088 silly lockFile 1cfc710e-ry-npmjs-org-read-read-1-0-5-tgz https://registry.npmjs.org/read/-/read-1.0.5.tgz
12089 silly lockFile 4450a55a-read-1-0-5 read@1.0.5
12090 silly lockFile 4450a55a-read-1-0-5 read@1.0.5
12091 silly lockFile acd4039d-read-1-0-x read@1.0.x
12092 silly lockFile acd4039d-read-1-0-x read@1.0.x
12093 http 200 https://registry.npmjs.org/wordwrap
12094 silly registry.get cb [ 200,
12094 silly registry.get   { vary: 'Accept',
12094 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
12094 silly registry.get     etag: '"3HPX5BQ0X4U2A3KJNTK2473OZ"',
12094 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:01 GMT',
12094 silly registry.get     'content-type': 'application/json',
12094 silly registry.get     'content-length': '2540' } ]
12095 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2-0 <0.1.0-0', hasData: true }
12096 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
12097 verbose addNamed [ 'wordwrap', '0.0.2' ]
12098 verbose addNamed [ '0.0.2', '0.0.2' ]
12099 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
12100 verbose lock wordwrap@0.0.2 /home/lerenzo/.npm/24a694c8-wordwrap-0-0-2.lock
12101 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
12102 verbose lock https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz /home/lerenzo/.npm/5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz.lock
12103 verbose addRemoteTarball [ 'https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz',
12103 verbose addRemoteTarball   'b79669bb42ecb409f83d583cad52ca17eaa1643f' ]
12104 info retry fetch attempt 1 at 14:12:02
12105 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz
12106 http GET https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
12107 http 200 https://registry.npmjs.org/utile
12108 silly registry.get cb [ 200,
12108 silly registry.get   { vary: 'Accept',
12108 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12108 silly registry.get     etag: '"35DTRKGH6NGSY3UOY6LCQUMJ2"',
12108 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:58 GMT',
12108 silly registry.get     'content-type': 'application/json',
12108 silly registry.get     'content-length': '56782' } ]
12109 silly addNameRange number 2 { name: 'utile', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
12110 silly addNameRange versions [ 'utile',
12110 silly addNameRange   [ '0.0.1',
12110 silly addNameRange     '0.0.2',
12110 silly addNameRange     '0.0.3',
12110 silly addNameRange     '0.0.4',
12110 silly addNameRange     '0.0.5',
12110 silly addNameRange     '0.0.6',
12110 silly addNameRange     '0.0.8',
12110 silly addNameRange     '0.0.9',
12110 silly addNameRange     '0.0.10',
12110 silly addNameRange     '0.1.0',
12110 silly addNameRange     '0.1.1',
12110 silly addNameRange     '0.1.2',
12110 silly addNameRange     '0.1.3',
12110 silly addNameRange     '0.1.5',
12110 silly addNameRange     '0.1.6',
12110 silly addNameRange     '0.1.7',
12110 silly addNameRange     '0.2.0' ] ]
12111 verbose addNamed [ 'utile', '0.2.0' ]
12112 verbose addNamed [ '0.2.0', '0.2.0' ]
12113 silly lockFile ebd0a0dc-utile-0-2-0 utile@0.2.0
12114 verbose lock utile@0.2.0 /home/lerenzo/.npm/ebd0a0dc-utile-0-2-0.lock
12115 silly lockFile 6edb5994--npmjs-org-utile-utile-0-2-0-tgz https://registry.npmjs.org/utile/-/utile-0.2.0.tgz
12116 verbose lock https://registry.npmjs.org/utile/-/utile-0.2.0.tgz /home/lerenzo/.npm/6edb5994--npmjs-org-utile-utile-0-2-0-tgz.lock
12117 verbose addRemoteTarball [ 'https://registry.npmjs.org/utile/-/utile-0.2.0.tgz',
12117 verbose addRemoteTarball   '91a2423ca2eb3322390e211ee3d71cf4fa193aea' ]
12118 info retry fetch attempt 1 at 14:12:02
12119 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz
12120 http GET https://registry.npmjs.org/utile/-/utile-0.2.0.tgz
12121 http 200 https://registry.npmjs.org/qs
12122 silly registry.get cb [ 200,
12122 silly registry.get   { vary: 'Accept',
12122 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
12122 silly registry.get     etag: '"A0908O91HJF6S9ZO1VDAN636E"',
12122 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:52 GMT',
12122 silly registry.get     'content-type': 'application/json',
12122 silly registry.get     'content-length': '50999' } ]
12123 silly addNameRange number 2 { name: 'qs', range: '>=0.5.4-0 <0.6.0-0', hasData: true }
12124 silly addNameRange versions [ 'qs',
12124 silly addNameRange   [ '0.0.1',
12124 silly addNameRange     '0.0.2',
12124 silly addNameRange     '0.0.3',
12124 silly addNameRange     '0.0.4',
12124 silly addNameRange     '0.0.5',
12124 silly addNameRange     '0.0.6',
12124 silly addNameRange     '0.0.7',
12124 silly addNameRange     '0.1.0',
12124 silly addNameRange     '0.2.0',
12124 silly addNameRange     '0.3.0',
12124 silly addNameRange     '0.3.1',
12124 silly addNameRange     '0.3.2',
12124 silly addNameRange     '0.4.0',
12124 silly addNameRange     '0.4.1',
12124 silly addNameRange     '0.4.2',
12124 silly addNameRange     '0.5.0',
12124 silly addNameRange     '0.5.1',
12124 silly addNameRange     '0.5.2',
12124 silly addNameRange     '0.5.3',
12124 silly addNameRange     '0.5.4',
12124 silly addNameRange     '0.5.5',
12124 silly addNameRange     '0.5.6',
12124 silly addNameRange     '0.6.0',
12124 silly addNameRange     '0.6.1',
12124 silly addNameRange     '0.6.2',
12124 silly addNameRange     '0.6.3',
12124 silly addNameRange     '0.6.4',
12124 silly addNameRange     '0.6.5' ] ]
12125 verbose addNamed [ 'qs', '0.5.6' ]
12126 verbose addNamed [ '0.5.6', '0.5.6' ]
12127 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
12128 verbose lock qs@0.5.6 /home/lerenzo/.npm/84168241-qs-0-5-6.lock
12129 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
12130 verbose lock https://registry.npmjs.org/qs/-/qs-0.5.6.tgz /home/lerenzo/.npm/d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz.lock
12131 verbose addRemoteTarball [ 'https://registry.npmjs.org/qs/-/qs-0.5.6.tgz',
12131 verbose addRemoteTarball   '31b1ad058567651c526921506b9a8793911a0384' ]
12132 info retry fetch attempt 1 at 14:12:02
12133 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz
12134 http GET https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
12135 http 200 https://registry.npmjs.org/minimatch
12136 silly registry.get cb [ 200,
12136 silly registry.get   { vary: 'Accept',
12136 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12136 silly registry.get     etag: '"3YO70XAXH5555BF86QX8F9AHE"',
12136 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:53 GMT',
12136 silly registry.get     'content-type': 'application/json',
12136 silly registry.get     'content-length': '141076' } ]
12137 silly addNameRange number 2 { name: 'minimatch', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
12138 silly addNameRange versions [ 'minimatch',
12138 silly addNameRange   [ '0.0.1',
12138 silly addNameRange     '0.0.2',
12138 silly addNameRange     '0.0.4',
12138 silly addNameRange     '0.0.5',
12138 silly addNameRange     '0.1.1',
12138 silly addNameRange     '0.1.2',
12138 silly addNameRange     '0.1.3',
12138 silly addNameRange     '0.1.4',
12138 silly addNameRange     '0.1.5',
12138 silly addNameRange     '0.2.0',
12138 silly addNameRange     '0.2.2',
12138 silly addNameRange     '0.2.3',
12138 silly addNameRange     '0.2.4',
12138 silly addNameRange     '0.2.5',
12138 silly addNameRange     '0.2.6',
12138 silly addNameRange     '0.2.7',
12138 silly addNameRange     '0.2.8',
12138 silly addNameRange     '0.2.9',
12138 silly addNameRange     '0.2.10',
12138 silly addNameRange     '0.2.11',
12138 silly addNameRange     '0.2.12' ] ]
12139 verbose addNamed [ 'minimatch', '0.2.12' ]
12140 verbose addNamed [ '0.2.12', '0.2.12' ]
12141 silly lockFile 16b89810-minimatch-0-2-12 minimatch@0.2.12
12142 verbose lock minimatch@0.2.12 /home/lerenzo/.npm/16b89810-minimatch-0-2-12.lock
12143 silly lockFile 6eaa8aee-g-minimatch-minimatch-0-2-12-tgz https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz
12144 verbose lock https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz /home/lerenzo/.npm/6eaa8aee-g-minimatch-minimatch-0-2-12-tgz.lock
12145 verbose addRemoteTarball [ 'https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz',
12145 verbose addRemoteTarball   'ea82a012ac662c7ddfaa144f1c147e6946f5dafb' ]
12146 info retry fetch attempt 1 at 14:12:04
12147 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz
12148 http GET https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz
12149 http 200 https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz
12150 http 200 https://registry.npmjs.org/cliff/0.1.8
12151 silly registry.get cb [ 200,
12151 silly registry.get   { vary: 'Accept',
12151 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12151 silly registry.get     etag: '"D922JZYN4QWU5BL2QN9QCINSR"',
12151 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:02 GMT',
12151 silly registry.get     'content-type': 'application/json',
12151 silly registry.get     'content-length': '7353' } ]
12152 silly lockFile 3fad3ff6--npmjs-org-cliff-cliff-0-1-8-tgz https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz
12153 verbose lock https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz /home/lerenzo/.npm/3fad3ff6--npmjs-org-cliff-cliff-0-1-8-tgz.lock
12154 verbose addRemoteTarball [ 'https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz',
12154 verbose addRemoteTarball   '43ca8ad9fe3943489693ab62dce0cae22509d272' ]
12155 info retry fetch attempt 1 at 14:12:05
12156 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz
12157 http GET https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz
12158 http 200 https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
12159 http 200 https://registry.npmjs.org/nconf/0.6.7
12160 silly registry.get cb [ 200,
12160 silly registry.get   { vary: 'Accept',
12160 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12160 silly registry.get     etag: '"A779W1WRZMTU6NX77X78YKIOE"',
12160 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:04 GMT',
12160 silly registry.get     'content-type': 'application/json',
12160 silly registry.get     'content-length': '9248' } ]
12161 silly lockFile a647e65f--npmjs-org-nconf-nconf-0-6-7-tgz https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz
12162 verbose lock https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz /home/lerenzo/.npm/a647e65f--npmjs-org-nconf-nconf-0-6-7-tgz.lock
12163 verbose addRemoteTarball [ 'https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz',
12163 verbose addRemoteTarball   'f2ffce75f4573857429c719d9f6ed0a9a231a47c' ]
12164 info retry fetch attempt 1 at 14:12:05
12165 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz
12166 http GET https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz
12167 http 200 https://registry.npmjs.org/eventemitter2/0.4.11
12168 silly registry.get cb [ 200,
12168 silly registry.get   { vary: 'Accept',
12168 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
12168 silly registry.get     etag: '"3X5QUGJ2DP05IHP358LX937LG"',
12168 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:02 GMT',
12168 silly registry.get     'content-type': 'application/json',
12168 silly registry.get     'content-length': '8772' } ]
12169 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz
12170 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12171 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package /home/lerenzo/.npm/4c186beb-12610-0-6082731857895851-package.lock
12172 silly lockFile e03017b8-12610-0-6082731857895851-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz
12173 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz /home/lerenzo/.npm/e03017b8-12610-0-6082731857895851-tmp-tgz.lock
12174 silly gunzTarPerm modes [ '755', '644' ]
12175 silly lockFile 9e4d22aa-mitter2-eventemitter2-0-4-11-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz
12176 verbose lock https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz /home/lerenzo/.npm/9e4d22aa-mitter2-eventemitter2-0-4-11-tgz.lock
12177 verbose addRemoteTarball [ 'https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz',
12177 verbose addRemoteTarball   '8bbf2b6ac7b31e2eea0c8d8f533ef41f849a9e2c' ]
12178 silly gunzTarPerm extractEntry package.json
12179 info retry fetch attempt 1 at 14:12:05
12180 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz
12181 http GET https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz
12182 silly gunzTarPerm extractEntry index.js
12183 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12184 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12185 silly lockFile e03017b8-12610-0-6082731857895851-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz
12186 silly lockFile e03017b8-12610-0-6082731857895851-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/tmp.tgz
12187 verbose tar pack [ '/home/lerenzo/.npm/forever-agent/0.2.0/package.tgz',
12187 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package' ]
12188 verbose tarball /home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12189 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12190 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12191 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package /home/lerenzo/.npm/4c186beb-12610-0-6082731857895851-package.lock
12192 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12193 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz /home/lerenzo/.npm/60adcac6--forever-agent-0-2-0-package-tgz.lock
12194 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12195 silly lockFile 4c186beb-12610-0-6082731857895851-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572312610-0.6082731857895851/package
12196 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12197 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12198 silly lockFile 080d5baa--npm-forever-agent-0-2-0-package /home/lerenzo/.npm/forever-agent/0.2.0/package
12199 verbose lock /home/lerenzo/.npm/forever-agent/0.2.0/package /home/lerenzo/.npm/080d5baa--npm-forever-agent-0-2-0-package.lock
12200 silly lockFile 080d5baa--npm-forever-agent-0-2-0-package /home/lerenzo/.npm/forever-agent/0.2.0/package
12201 silly lockFile 080d5baa--npm-forever-agent-0-2-0-package /home/lerenzo/.npm/forever-agent/0.2.0/package
12202 verbose tar unpack /home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12203 silly lockFile 006d2b72--npm-forever-agent-0-2-0-package tar:///home/lerenzo/.npm/forever-agent/0.2.0/package
12204 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.2.0/package /home/lerenzo/.npm/006d2b72--npm-forever-agent-0-2-0-package.lock
12205 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12206 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz /home/lerenzo/.npm/60adcac6--forever-agent-0-2-0-package-tgz.lock
12207 silly gunzTarPerm modes [ '755', '644' ]
12208 silly gunzTarPerm extractEntry package.json
12209 silly gunzTarPerm extractEntry index.js
12210 silly lockFile 006d2b72--npm-forever-agent-0-2-0-package tar:///home/lerenzo/.npm/forever-agent/0.2.0/package
12211 silly lockFile 006d2b72--npm-forever-agent-0-2-0-package tar:///home/lerenzo/.npm/forever-agent/0.2.0/package
12212 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12213 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
12214 verbose chmod /home/lerenzo/.npm/forever-agent/0.2.0/package.tgz 644
12215 verbose chown /home/lerenzo/.npm/forever-agent/0.2.0/package.tgz [ 1000, 1000 ]
12216 silly lockFile b38452d6-er-agent-forever-agent-0-2-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz
12217 silly lockFile b38452d6-er-agent-forever-agent-0-2-0-tgz https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz
12218 silly lockFile 88b53d74-forever-agent-0-2-0 forever-agent@0.2.0
12219 silly lockFile 88b53d74-forever-agent-0-2-0 forever-agent@0.2.0
12220 silly lockFile df7f0a96-forever-agent-0-2-0 forever-agent@~0.2.0
12221 silly lockFile df7f0a96-forever-agent-0-2-0 forever-agent@~0.2.0
12222 http 200 https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
12223 http 200 https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz
12224 http 200 https://registry.npmjs.org/utile/0.1.7
12225 silly registry.get cb [ 200,
12225 silly registry.get   { vary: 'Accept',
12225 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12225 silly registry.get     etag: '"35DTRKGH6NGSY3UOY6LCQUMJ2"',
12225 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:05 GMT',
12225 silly registry.get     'content-type': 'application/json',
12225 silly registry.get     'content-length': '5661' } ]
12226 silly lockFile 80d5629c--npmjs-org-utile-utile-0-1-7-tgz https://registry.npmjs.org/utile/-/utile-0.1.7.tgz
12227 verbose lock https://registry.npmjs.org/utile/-/utile-0.1.7.tgz /home/lerenzo/.npm/80d5629c--npmjs-org-utile-utile-0-1-7-tgz.lock
12228 verbose addRemoteTarball [ 'https://registry.npmjs.org/utile/-/utile-0.1.7.tgz',
12228 verbose addRemoteTarball   '55db180d54475339fd6dd9e2d14a4c0b52624b69' ]
12229 info retry fetch attempt 1 at 14:12:06
12230 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz
12231 http GET https://registry.npmjs.org/utile/-/utile-0.1.7.tgz
12232 http 304 https://registry.npmjs.org/ws
12233 silly registry.get cb [ 304,
12233 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12233 silly registry.get     etag: '"E12YI8VJ4M8JMCAI08FISWC04"',
12233 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:06 GMT',
12233 silly registry.get     'content-length': '0' } ]
12234 verbose etag ws from cache
12235 silly addNameRange number 2 { name: 'ws', range: '>=0.4.28-0 <0.5.0-0', hasData: true }
12236 silly addNameRange versions [ 'ws',
12236 silly addNameRange   [ '0.2.6',
12236 silly addNameRange     '0.2.8',
12236 silly addNameRange     '0.2.9',
12236 silly addNameRange     '0.3.0',
12236 silly addNameRange     '0.3.1',
12236 silly addNameRange     '0.3.2',
12236 silly addNameRange     '0.3.3',
12236 silly addNameRange     '0.3.4',
12236 silly addNameRange     '0.3.4-2',
12236 silly addNameRange     '0.3.5',
12236 silly addNameRange     '0.3.5-2',
12236 silly addNameRange     '0.3.5-3',
12236 silly addNameRange     '0.3.5-4',
12236 silly addNameRange     '0.3.6',
12236 silly addNameRange     '0.3.7',
12236 silly addNameRange     '0.3.8',
12236 silly addNameRange     '0.3.9',
12236 silly addNameRange     '0.4.0',
12236 silly addNameRange     '0.4.1',
12236 silly addNameRange     '0.4.2',
12236 silly addNameRange     '0.4.3',
12236 silly addNameRange     '0.4.5',
12236 silly addNameRange     '0.4.6',
12236 silly addNameRange     '0.4.7',
12236 silly addNameRange     '0.4.8',
12236 silly addNameRange     '0.4.9',
12236 silly addNameRange     '0.4.10',
12236 silly addNameRange     '0.4.11',
12236 silly addNameRange     '0.4.12',
12236 silly addNameRange     '0.4.13',
12236 silly addNameRange     '0.4.14',
12236 silly addNameRange     '0.4.15',
12236 silly addNameRange     '0.4.16',
12236 silly addNameRange     '0.4.17',
12236 silly addNameRange     '0.4.18',
12236 silly addNameRange     '0.4.19',
12236 silly addNameRange     '0.4.20',
12236 silly addNameRange     '0.4.21',
12236 silly addNameRange     '0.4.22',
12236 silly addNameRange     '0.4.23',
12236 silly addNameRange     '0.4.24',
12236 silly addNameRange     '0.4.25',
12236 silly addNameRange     '0.4.27',
12236 silly addNameRange     '0.4.28',
12236 silly addNameRange     '0.4.29',
12236 silly addNameRange     '0.4.30',
12236 silly addNameRange     '0.4.31' ] ]
12237 verbose addNamed [ 'ws', '0.4.31' ]
12238 verbose addNamed [ '0.4.31', '0.4.31' ]
12239 silly lockFile 53e67403-ws-0-4-31 ws@0.4.31
12240 verbose lock ws@0.4.31 /home/lerenzo/.npm/53e67403-ws-0-4-31.lock
12241 silly lockFile 53e67403-ws-0-4-31 ws@0.4.31
12242 silly lockFile 53e67403-ws-0-4-31 ws@0.4.31
12243 silly lockFile 1ef0d92d-ws-0-4-28 ws@~0.4.28
12244 silly lockFile 1ef0d92d-ws-0-4-28 ws@~0.4.28
12245 http 200 https://registry.npmjs.org/utile/-/utile-0.2.0.tgz
12246 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz
12247 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12248 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package /home/lerenzo/.npm/af6fb9a6-2618-0-06386295915581286-package.lock
12249 silly lockFile 71f59189-2618-0-06386295915581286-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz
12250 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz /home/lerenzo/.npm/71f59189-2618-0-06386295915581286-tmp-tgz.lock
12251 silly gunzTarPerm modes [ '755', '644' ]
12252 silly gunzTarPerm extractEntry package.json
12253 silly gunzTarPerm extractEntry .npmignore
12254 silly gunzTarPerm extractEntry README.md
12255 silly gunzTarPerm extractEntry LICENSE
12256 silly gunzTarPerm extractEntry .travis.yml
12257 silly gunzTarPerm extractEntry CHANGELOG.md
12258 silly gunzTarPerm extractEntry lib/args.js
12259 silly gunzTarPerm extractEntry lib/base64.js
12260 silly gunzTarPerm extractEntry lib/file.js
12261 silly gunzTarPerm extractEntry lib/format.js
12262 silly gunzTarPerm extractEntry lib/index.js
12263 silly gunzTarPerm extractEntry test/file-test.js
12264 silly gunzTarPerm extractEntry test/format-test.js
12265 silly gunzTarPerm extractEntry test/function-args-test.js
12266 silly gunzTarPerm extractEntry test/random-string-test.js
12267 silly gunzTarPerm extractEntry test/require-directory-test.js
12268 silly gunzTarPerm extractEntry test/utile-test.js
12269 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
12270 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
12271 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
12272 silly gunzTarPerm extractEntry test/helpers/macros.js
12273 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12274 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12275 silly lockFile 71f59189-2618-0-06386295915581286-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz
12276 silly lockFile 71f59189-2618-0-06386295915581286-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/tmp.tgz
12277 verbose tar pack [ '/home/lerenzo/.npm/utile/0.2.0/package.tgz',
12277 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package' ]
12278 verbose tarball /home/lerenzo/.npm/utile/0.2.0/package.tgz
12279 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12280 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12281 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package /home/lerenzo/.npm/af6fb9a6-2618-0-06386295915581286-package.lock
12282 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12283 verbose lock tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz /home/lerenzo/.npm/22df4238-enzo-npm-utile-0-2-0-package-tgz.lock
12284 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12285 silly lockFile af6fb9a6-2618-0-06386295915581286-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322618-0.06386295915581286/package
12286 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12287 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12288 silly lockFile 98426ebb--lerenzo-npm-utile-0-2-0-package /home/lerenzo/.npm/utile/0.2.0/package
12289 verbose lock /home/lerenzo/.npm/utile/0.2.0/package /home/lerenzo/.npm/98426ebb--lerenzo-npm-utile-0-2-0-package.lock
12290 silly lockFile 98426ebb--lerenzo-npm-utile-0-2-0-package /home/lerenzo/.npm/utile/0.2.0/package
12291 silly lockFile 98426ebb--lerenzo-npm-utile-0-2-0-package /home/lerenzo/.npm/utile/0.2.0/package
12292 verbose tar unpack /home/lerenzo/.npm/utile/0.2.0/package.tgz
12293 silly lockFile ca71af32--lerenzo-npm-utile-0-2-0-package tar:///home/lerenzo/.npm/utile/0.2.0/package
12294 verbose lock tar:///home/lerenzo/.npm/utile/0.2.0/package /home/lerenzo/.npm/ca71af32--lerenzo-npm-utile-0-2-0-package.lock
12295 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12296 verbose lock tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz /home/lerenzo/.npm/22df4238-enzo-npm-utile-0-2-0-package-tgz.lock
12297 silly gunzTarPerm modes [ '755', '644' ]
12298 silly gunzTarPerm extractEntry package.json
12299 silly gunzTarPerm extractEntry .npmignore
12300 silly gunzTarPerm extractEntry README.md
12301 silly gunzTarPerm extractEntry LICENSE
12302 silly gunzTarPerm extractEntry .travis.yml
12303 silly gunzTarPerm extractEntry CHANGELOG.md
12304 silly gunzTarPerm extractEntry lib/args.js
12305 silly gunzTarPerm extractEntry lib/base64.js
12306 silly gunzTarPerm extractEntry lib/file.js
12307 silly gunzTarPerm extractEntry lib/format.js
12308 silly gunzTarPerm extractEntry lib/index.js
12309 silly gunzTarPerm extractEntry test/file-test.js
12310 silly gunzTarPerm extractEntry test/format-test.js
12311 silly gunzTarPerm extractEntry test/function-args-test.js
12312 silly gunzTarPerm extractEntry test/random-string-test.js
12313 silly gunzTarPerm extractEntry test/require-directory-test.js
12314 silly gunzTarPerm extractEntry test/utile-test.js
12315 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
12316 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
12317 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
12318 silly gunzTarPerm extractEntry test/helpers/macros.js
12319 silly lockFile ca71af32--lerenzo-npm-utile-0-2-0-package tar:///home/lerenzo/.npm/utile/0.2.0/package
12320 silly lockFile ca71af32--lerenzo-npm-utile-0-2-0-package tar:///home/lerenzo/.npm/utile/0.2.0/package
12321 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12322 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
12323 verbose chmod /home/lerenzo/.npm/utile/0.2.0/package.tgz 644
12324 verbose chown /home/lerenzo/.npm/utile/0.2.0/package.tgz [ 1000, 1000 ]
12325 silly lockFile 6edb5994--npmjs-org-utile-utile-0-2-0-tgz https://registry.npmjs.org/utile/-/utile-0.2.0.tgz
12326 silly lockFile 6edb5994--npmjs-org-utile-utile-0-2-0-tgz https://registry.npmjs.org/utile/-/utile-0.2.0.tgz
12327 silly lockFile ebd0a0dc-utile-0-2-0 utile@0.2.0
12328 silly lockFile ebd0a0dc-utile-0-2-0 utile@0.2.0
12329 silly lockFile f92ad74f-utile-0-2-x utile@0.2.x
12330 silly lockFile f92ad74f-utile-0-2-x utile@0.2.x
12331 http 200 https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz
12332 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz
12333 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12334 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package /home/lerenzo/.npm/85307109-4000-0-42083040229044855-package.lock
12335 silly lockFile ed9c8f29-4000-0-42083040229044855-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz
12336 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz /home/lerenzo/.npm/ed9c8f29-4000-0-42083040229044855-tmp-tgz.lock
12337 silly gunzTarPerm modes [ '755', '644' ]
12338 silly gunzTarPerm extractEntry package.json
12339 silly gunzTarPerm extractEntry README.md
12340 silly gunzTarPerm extractEntry LICENSE
12341 silly gunzTarPerm extractEntry minimatch.js
12342 silly gunzTarPerm extractEntry test/basic.js
12343 silly gunzTarPerm extractEntry test/brace-expand.js
12344 silly gunzTarPerm extractEntry test/caching.js
12345 silly gunzTarPerm extractEntry test/defaults.js
12346 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12347 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12348 silly lockFile ed9c8f29-4000-0-42083040229044855-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz
12349 silly lockFile ed9c8f29-4000-0-42083040229044855-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/tmp.tgz
12350 verbose tar pack [ '/home/lerenzo/.npm/minimatch/0.2.12/package.tgz',
12350 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package' ]
12351 verbose tarball /home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12352 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12353 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12354 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package /home/lerenzo/.npm/85307109-4000-0-42083040229044855-package.lock
12355 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12356 verbose lock tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz /home/lerenzo/.npm/adba4840-npm-minimatch-0-2-12-package-tgz.lock
12357 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12358 silly lockFile 85307109-4000-0-42083040229044855-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572324000-0.42083040229044855/package
12359 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12360 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12361 silly lockFile e43cb4b0-nzo-npm-minimatch-0-2-12-package /home/lerenzo/.npm/minimatch/0.2.12/package
12362 verbose lock /home/lerenzo/.npm/minimatch/0.2.12/package /home/lerenzo/.npm/e43cb4b0-nzo-npm-minimatch-0-2-12-package.lock
12363 silly lockFile e43cb4b0-nzo-npm-minimatch-0-2-12-package /home/lerenzo/.npm/minimatch/0.2.12/package
12364 silly lockFile e43cb4b0-nzo-npm-minimatch-0-2-12-package /home/lerenzo/.npm/minimatch/0.2.12/package
12365 verbose tar unpack /home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12366 silly lockFile 1c7adb57-nzo-npm-minimatch-0-2-12-package tar:///home/lerenzo/.npm/minimatch/0.2.12/package
12367 verbose lock tar:///home/lerenzo/.npm/minimatch/0.2.12/package /home/lerenzo/.npm/1c7adb57-nzo-npm-minimatch-0-2-12-package.lock
12368 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12369 verbose lock tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz /home/lerenzo/.npm/adba4840-npm-minimatch-0-2-12-package-tgz.lock
12370 silly gunzTarPerm modes [ '755', '644' ]
12371 silly gunzTarPerm extractEntry package.json
12372 silly gunzTarPerm extractEntry README.md
12373 silly gunzTarPerm extractEntry LICENSE
12374 silly gunzTarPerm extractEntry minimatch.js
12375 silly gunzTarPerm extractEntry test/basic.js
12376 silly gunzTarPerm extractEntry test/brace-expand.js
12377 silly gunzTarPerm extractEntry test/caching.js
12378 silly gunzTarPerm extractEntry test/defaults.js
12379 silly lockFile 1c7adb57-nzo-npm-minimatch-0-2-12-package tar:///home/lerenzo/.npm/minimatch/0.2.12/package
12380 silly lockFile 1c7adb57-nzo-npm-minimatch-0-2-12-package tar:///home/lerenzo/.npm/minimatch/0.2.12/package
12381 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12382 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12383 verbose chmod /home/lerenzo/.npm/minimatch/0.2.12/package.tgz 644
12384 verbose chown /home/lerenzo/.npm/minimatch/0.2.12/package.tgz [ 1000, 1000 ]
12385 silly lockFile 6eaa8aee-g-minimatch-minimatch-0-2-12-tgz https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz
12386 silly lockFile 6eaa8aee-g-minimatch-minimatch-0-2-12-tgz https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz
12387 silly lockFile 16b89810-minimatch-0-2-12 minimatch@0.2.12
12388 silly lockFile 16b89810-minimatch-0-2-12 minimatch@0.2.12
12389 silly lockFile 5866d608-minimatch-0-2-0 minimatch@~0.2.0
12390 silly lockFile 5866d608-minimatch-0-2-0 minimatch@~0.2.0
12391 silly resolved [ { author:
12391 silly resolved      { name: 'Isaac Z. Schlueter',
12391 silly resolved        email: 'i@izs.me',
12391 silly resolved        url: 'http://blog.izs.me' },
12391 silly resolved     name: 'minimatch',
12391 silly resolved     description: 'a glob matcher in javascript',
12391 silly resolved     version: '0.2.12',
12391 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
12391 silly resolved     main: 'minimatch.js',
12391 silly resolved     scripts: { test: 'tap test' },
12391 silly resolved     engines: { node: '*' },
12391 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
12391 silly resolved     devDependencies: { tap: '' },
12391 silly resolved     license:
12391 silly resolved      { type: 'MIT',
12391 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
12391 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n### Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n',
12391 silly resolved     readmeFilename: 'README.md',
12391 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
12391 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
12391 silly resolved     _id: 'minimatch@0.2.12',
12391 silly resolved     dist: { shasum: '7212ad29580782787c9bf411c91a6dc1389f6387' },
12391 silly resolved     _from: 'minimatch@~0.2.0',
12391 silly resolved     _resolved: 'https://registry.npmjs.org/minimatch/-/minimatch-0.2.12.tgz' } ]
12392 info install minimatch@0.2.12 into /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore
12393 info installOne minimatch@0.2.12
12394 info /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch unbuild
12395 verbose tar unpack /home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12396 silly lockFile 0d489752-am-ignore-node-modules-minimatch tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
12397 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch /home/lerenzo/.npm/0d489752-am-ignore-node-modules-minimatch.lock
12398 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12399 verbose lock tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz /home/lerenzo/.npm/adba4840-npm-minimatch-0-2-12-package-tgz.lock
12400 silly gunzTarPerm modes [ '755', '644' ]
12401 silly gunzTarPerm extractEntry package.json
12402 silly gunzTarPerm extractEntry README.md
12403 silly gunzTarPerm extractEntry LICENSE
12404 silly gunzTarPerm extractEntry minimatch.js
12405 silly gunzTarPerm extractEntry test/basic.js
12406 silly gunzTarPerm extractEntry test/brace-expand.js
12407 silly gunzTarPerm extractEntry test/caching.js
12408 silly gunzTarPerm extractEntry test/defaults.js
12409 silly lockFile 0d489752-am-ignore-node-modules-minimatch tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
12410 silly lockFile 0d489752-am-ignore-node-modules-minimatch tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
12411 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12412 silly lockFile adba4840-npm-minimatch-0-2-12-package-tgz tar:///home/lerenzo/.npm/minimatch/0.2.12/package.tgz
12413 info preinstall minimatch@0.2.12
12414 verbose readDependencies using package.json deps
12415 verbose readDependencies using package.json deps
12416 verbose cache add [ 'lru-cache@2', null ]
12417 verbose cache add name=undefined spec="lru-cache@2" args=["lru-cache@2",null]
12418 verbose parsed url { protocol: null,
12418 verbose parsed url   slashes: null,
12418 verbose parsed url   auth: null,
12418 verbose parsed url   host: null,
12418 verbose parsed url   port: null,
12418 verbose parsed url   hostname: null,
12418 verbose parsed url   hash: null,
12418 verbose parsed url   search: null,
12418 verbose parsed url   query: null,
12418 verbose parsed url   pathname: 'lru-cache@2',
12418 verbose parsed url   path: 'lru-cache@2',
12418 verbose parsed url   href: 'lru-cache@2' }
12419 verbose cache add name="lru-cache" spec="2" args=["lru-cache","2"]
12420 verbose parsed url { protocol: null,
12420 verbose parsed url   slashes: null,
12420 verbose parsed url   auth: null,
12420 verbose parsed url   host: null,
12420 verbose parsed url   port: null,
12420 verbose parsed url   hostname: null,
12420 verbose parsed url   hash: null,
12420 verbose parsed url   search: null,
12420 verbose parsed url   query: null,
12420 verbose parsed url   pathname: '2',
12420 verbose parsed url   path: '2',
12420 verbose parsed url   href: '2' }
12421 verbose addNamed [ 'lru-cache', '2' ]
12422 verbose addNamed [ null, '>=2.0.0-0 <3.0.0-0' ]
12423 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
12424 verbose lock lru-cache@2 /home/lerenzo/.npm/b4f9d1ff-lru-cache-2.lock
12425 verbose cache add [ 'sigmund@~1.0.0', null ]
12426 verbose cache add name=undefined spec="sigmund@~1.0.0" args=["sigmund@~1.0.0",null]
12427 verbose parsed url { protocol: null,
12427 verbose parsed url   slashes: null,
12427 verbose parsed url   auth: null,
12427 verbose parsed url   host: null,
12427 verbose parsed url   port: null,
12427 verbose parsed url   hostname: null,
12427 verbose parsed url   hash: null,
12427 verbose parsed url   search: null,
12427 verbose parsed url   query: null,
12427 verbose parsed url   pathname: 'sigmund@~1.0.0',
12427 verbose parsed url   path: 'sigmund@~1.0.0',
12427 verbose parsed url   href: 'sigmund@~1.0.0' }
12428 verbose cache add name="sigmund" spec="~1.0.0" args=["sigmund","~1.0.0"]
12429 verbose parsed url { protocol: null,
12429 verbose parsed url   slashes: null,
12429 verbose parsed url   auth: null,
12429 verbose parsed url   host: null,
12429 verbose parsed url   port: null,
12429 verbose parsed url   hostname: null,
12429 verbose parsed url   hash: null,
12429 verbose parsed url   search: null,
12429 verbose parsed url   query: null,
12429 verbose parsed url   pathname: '~1.0.0',
12429 verbose parsed url   path: '~1.0.0',
12429 verbose parsed url   href: '~1.0.0' }
12430 verbose addNamed [ 'sigmund', '~1.0.0' ]
12431 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
12432 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
12433 verbose lock sigmund@~1.0.0 /home/lerenzo/.npm/584a4a05-sigmund-1-0-0.lock
12434 silly addNameRange { name: 'lru-cache',
12434 silly addNameRange   range: '>=2.0.0-0 <3.0.0-0',
12434 silly addNameRange   hasData: false }
12435 silly addNameRange { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
12436 verbose url raw lru-cache
12437 verbose url resolving [ 'https://registry.npmjs.org/', './lru-cache' ]
12438 verbose url resolved https://registry.npmjs.org/lru-cache
12439 info trying registry request attempt 1 at 14:12:09
12440 http GET https://registry.npmjs.org/lru-cache
12441 verbose url raw sigmund
12442 verbose url resolving [ 'https://registry.npmjs.org/', './sigmund' ]
12443 verbose url resolved https://registry.npmjs.org/sigmund
12444 info trying registry request attempt 1 at 14:12:09
12445 http GET https://registry.npmjs.org/sigmund
12446 http 200 https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz
12447 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz
12448 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12449 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package /home/lerenzo/.npm/149745ff-2121-0-15878963097929955-package.lock
12450 silly lockFile 1f01665b-2121-0-15878963097929955-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz
12451 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz /home/lerenzo/.npm/1f01665b-2121-0-15878963097929955-tmp-tgz.lock
12452 silly gunzTarPerm modes [ '755', '644' ]
12453 silly gunzTarPerm extractEntry index.js
12454 silly gunzTarPerm extractEntry .npmignore
12455 silly gunzTarPerm extractEntry package.json
12456 silly gunzTarPerm extractEntry README.markdown
12457 silly gunzTarPerm extractEntry example/center.js
12458 silly gunzTarPerm extractEntry example/meat.js
12459 silly gunzTarPerm extractEntry test/wrap.js
12460 silly gunzTarPerm extractEntry test/break.js
12461 silly gunzTarPerm extractEntry test/idleness.txt
12462 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12463 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12464 silly lockFile 1f01665b-2121-0-15878963097929955-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz
12465 silly lockFile 1f01665b-2121-0-15878963097929955-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/tmp.tgz
12466 verbose tar pack [ '/home/lerenzo/.npm/wordwrap/0.0.2/package.tgz',
12466 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package' ]
12467 verbose tarball /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12468 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12469 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12470 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package /home/lerenzo/.npm/149745ff-2121-0-15878963097929955-package.lock
12471 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12472 verbose lock tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz /home/lerenzo/.npm/2c08430e-o-npm-wordwrap-0-0-2-package-tgz.lock
12473 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12474 silly lockFile 149745ff-2121-0-15878963097929955-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322121-0.15878963097929955/package
12475 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12476 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12477 silly lockFile 0200dccb-renzo-npm-wordwrap-0-0-2-package /home/lerenzo/.npm/wordwrap/0.0.2/package
12478 verbose lock /home/lerenzo/.npm/wordwrap/0.0.2/package /home/lerenzo/.npm/0200dccb-renzo-npm-wordwrap-0-0-2-package.lock
12479 silly lockFile 0200dccb-renzo-npm-wordwrap-0-0-2-package /home/lerenzo/.npm/wordwrap/0.0.2/package
12480 silly lockFile 0200dccb-renzo-npm-wordwrap-0-0-2-package /home/lerenzo/.npm/wordwrap/0.0.2/package
12481 verbose tar unpack /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12482 silly lockFile f8b9beb0-renzo-npm-wordwrap-0-0-2-package tar:///home/lerenzo/.npm/wordwrap/0.0.2/package
12483 verbose lock tar:///home/lerenzo/.npm/wordwrap/0.0.2/package /home/lerenzo/.npm/f8b9beb0-renzo-npm-wordwrap-0-0-2-package.lock
12484 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12485 verbose lock tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz /home/lerenzo/.npm/2c08430e-o-npm-wordwrap-0-0-2-package-tgz.lock
12486 silly gunzTarPerm modes [ '755', '644' ]
12487 silly gunzTarPerm extractEntry package.json
12488 silly gunzTarPerm extractEntry .npmignore
12489 silly gunzTarPerm extractEntry index.js
12490 silly gunzTarPerm extractEntry README.markdown
12491 silly gunzTarPerm extractEntry example/center.js
12492 silly gunzTarPerm extractEntry example/meat.js
12493 silly gunzTarPerm extractEntry test/break.js
12494 silly gunzTarPerm extractEntry test/wrap.js
12495 silly gunzTarPerm extractEntry test/idleness.txt
12496 silly lockFile f8b9beb0-renzo-npm-wordwrap-0-0-2-package tar:///home/lerenzo/.npm/wordwrap/0.0.2/package
12497 silly lockFile f8b9beb0-renzo-npm-wordwrap-0-0-2-package tar:///home/lerenzo/.npm/wordwrap/0.0.2/package
12498 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12499 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12500 verbose chmod /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz 644
12501 verbose chown /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz [ 1000, 1000 ]
12502 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
12503 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
12504 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
12505 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
12506 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
12507 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
12508 silly resolved [ { name: 'wordwrap',
12508 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
12508 silly resolved     version: '0.0.2',
12508 silly resolved     repository:
12508 silly resolved      { type: 'git',
12508 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
12508 silly resolved     main: './index.js',
12508 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
12508 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
12508 silly resolved     scripts: { test: 'expresso' },
12508 silly resolved     devDependencies: { expresso: '=0.7.x' },
12508 silly resolved     engines: { node: '>=0.4.0' },
12508 silly resolved     license: 'MIT/X11',
12508 silly resolved     author:
12508 silly resolved      { name: 'James Halliday',
12508 silly resolved        email: 'mail@substack.net',
12508 silly resolved        url: 'http://substack.net' },
12508 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
12508 silly resolved     readmeFilename: 'README.markdown',
12508 silly resolved     bugs: { url: 'https://github.com/substack/node-wordwrap/issues' },
12508 silly resolved     homepage: 'https://github.com/substack/node-wordwrap',
12508 silly resolved     _id: 'wordwrap@0.0.2',
12508 silly resolved     dist: { shasum: '624b9d3e54ad494743ebeb222c78828a452556bf' },
12508 silly resolved     _from: 'wordwrap@~0.0.2',
12508 silly resolved     _resolved: 'https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz' } ]
12509 info install wordwrap@0.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
12510 info installOne wordwrap@0.0.2
12511 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap unbuild
12512 verbose tar unpack /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12513 silly lockFile 12c369f9-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap
12514 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap /home/lerenzo/.npm/12c369f9-s-optimist-node-modules-wordwrap.lock
12515 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12516 verbose lock tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz /home/lerenzo/.npm/2c08430e-o-npm-wordwrap-0-0-2-package-tgz.lock
12517 silly gunzTarPerm modes [ '755', '644' ]
12518 silly gunzTarPerm extractEntry package.json
12519 silly gunzTarPerm extractEntry .npmignore
12520 silly gunzTarPerm extractEntry index.js
12521 silly gunzTarPerm extractEntry README.markdown
12522 silly gunzTarPerm extractEntry example/center.js
12523 silly gunzTarPerm extractEntry example/meat.js
12524 silly gunzTarPerm extractEntry test/break.js
12525 silly gunzTarPerm extractEntry test/wrap.js
12526 silly gunzTarPerm extractEntry test/idleness.txt
12527 silly lockFile 12c369f9-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap
12528 silly lockFile 12c369f9-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap
12529 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12530 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
12531 info preinstall wordwrap@0.0.2
12532 verbose readDependencies using package.json deps
12533 verbose readDependencies using package.json deps
12534 silly resolved []
12535 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap
12536 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules/wordwrap
12537 verbose linkStuff [ true,
12537 verbose linkStuff   '/usr/local/lib/node_modules',
12537 verbose linkStuff   false,
12537 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist/node_modules' ]
12538 info linkStuff wordwrap@0.0.2
12539 verbose linkBins wordwrap@0.0.2
12540 verbose linkMans wordwrap@0.0.2
12541 verbose rebuildBundles wordwrap@0.0.2
12542 info install wordwrap@0.0.2
12543 info postinstall wordwrap@0.0.2
12544 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
12545 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/optimist
12546 verbose linkStuff [ true,
12546 verbose linkStuff   '/usr/local/lib/node_modules',
12546 verbose linkStuff   false,
12546 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules' ]
12547 info linkStuff optimist@0.3.5
12548 verbose linkBins optimist@0.3.5
12549 verbose linkMans optimist@0.3.5
12550 verbose rebuildBundles optimist@0.3.5
12551 verbose rebuildBundles [ 'wordwrap' ]
12552 info install optimist@0.3.5
12553 info postinstall optimist@0.3.5
12554 http 200 https://registry.npmjs.org/qs
12555 silly registry.get cb [ 200,
12555 silly registry.get   { vary: 'Accept',
12555 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12555 silly registry.get     etag: '"A0908O91HJF6S9ZO1VDAN636E"',
12555 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:07 GMT',
12555 silly registry.get     'content-type': 'application/json',
12555 silly registry.get     'content-length': '50999' } ]
12556 silly addNameRange number 2 { name: 'qs', range: '>=0.6.0-0 <0.7.0-0', hasData: true }
12557 silly addNameRange versions [ 'qs',
12557 silly addNameRange   [ '0.0.1',
12557 silly addNameRange     '0.0.2',
12557 silly addNameRange     '0.0.3',
12557 silly addNameRange     '0.0.4',
12557 silly addNameRange     '0.0.5',
12557 silly addNameRange     '0.0.6',
12557 silly addNameRange     '0.0.7',
12557 silly addNameRange     '0.1.0',
12557 silly addNameRange     '0.2.0',
12557 silly addNameRange     '0.3.0',
12557 silly addNameRange     '0.3.1',
12557 silly addNameRange     '0.3.2',
12557 silly addNameRange     '0.4.0',
12557 silly addNameRange     '0.4.1',
12557 silly addNameRange     '0.4.2',
12557 silly addNameRange     '0.5.0',
12557 silly addNameRange     '0.5.1',
12557 silly addNameRange     '0.5.2',
12557 silly addNameRange     '0.5.3',
12557 silly addNameRange     '0.5.4',
12557 silly addNameRange     '0.5.5',
12557 silly addNameRange     '0.5.6',
12557 silly addNameRange     '0.6.0',
12557 silly addNameRange     '0.6.1',
12557 silly addNameRange     '0.6.2',
12557 silly addNameRange     '0.6.3',
12557 silly addNameRange     '0.6.4',
12557 silly addNameRange     '0.6.5' ] ]
12558 verbose addNamed [ 'qs', '0.6.5' ]
12559 verbose addNamed [ '0.6.5', '0.6.5' ]
12560 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
12561 verbose lock qs@0.6.5 /home/lerenzo/.npm/f5e5a40f-qs-0-6-5.lock
12562 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz
12563 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12564 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package /home/lerenzo/.npm/7737b9e4-5584-0-12717166915535927-package.lock
12565 silly lockFile 535b91bb-5584-0-12717166915535927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz
12566 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz /home/lerenzo/.npm/535b91bb-5584-0-12717166915535927-tmp-tgz.lock
12567 silly gunzTarPerm modes [ '755', '644' ]
12568 silly gunzTarPerm extractEntry package.json
12569 silly gunzTarPerm extractEntry .npmignore
12570 silly gunzTarPerm extractEntry README.md
12571 silly gunzTarPerm extractEntry LICENSE
12572 silly gunzTarPerm extractEntry usage.js
12573 silly gunzTarPerm extractEntry .travis.yml
12574 silly gunzTarPerm extractEntry CHANGELOG.md
12575 silly gunzTarPerm extractEntry docs/docco.css
12576 silly gunzTarPerm extractEntry docs/nconf/common.html
12577 silly gunzTarPerm extractEntry docs/nconf/formats.html
12578 silly gunzTarPerm extractEntry docs/nconf/provider.html
12579 silly gunzTarPerm extractEntry docs/nconf/stores/file.html
12580 silly gunzTarPerm extractEntry docs/nconf/stores/memory.html
12581 silly gunzTarPerm extractEntry docs/nconf/stores/system.html
12582 silly gunzTarPerm extractEntry docs/nconf/stores.html
12583 silly gunzTarPerm extractEntry docs/nconf.html
12584 silly gunzTarPerm extractEntry lib/nconf.js
12585 silly gunzTarPerm extractEntry lib/nconf/common.js
12586 silly gunzTarPerm extractEntry lib/nconf/formats.js
12587 silly gunzTarPerm extractEntry lib/nconf/provider.js
12588 silly gunzTarPerm extractEntry lib/nconf/stores/argv.js
12589 silly gunzTarPerm extractEntry lib/nconf/stores/env.js
12590 silly gunzTarPerm extractEntry lib/nconf/stores/file.js
12591 silly gunzTarPerm extractEntry lib/nconf/stores/literal.js
12592 silly gunzTarPerm extractEntry lib/nconf/stores/memory.js
12593 silly gunzTarPerm extractEntry test/common-test.js
12594 silly gunzTarPerm extractEntry test/complete-test.js
12595 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
12596 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
12597 silly lockFile 222bee9e-qs-0-6-0 qs@~0.6.0
12598 silly lockFile 222bee9e-qs-0-6-0 qs@~0.6.0
12599 silly gunzTarPerm extractEntry test/helpers.js
12600 silly gunzTarPerm extractEntry test/hierarchy-test.js
12601 silly gunzTarPerm extractEntry test/nconf-test.js
12602 silly gunzTarPerm extractEntry test/provider-save-test.js
12603 silly gunzTarPerm extractEntry test/provider-test.js
12604 silly gunzTarPerm extractEntry test/fixtures/data.js
12605 silly gunzTarPerm extractEntry test/fixtures/complete.json
12606 silly gunzTarPerm extractEntry test/fixtures/hierarchy/global.json
12607 silly gunzTarPerm extractEntry test/fixtures/hierarchy/hierarchical.json
12608 silly gunzTarPerm extractEntry test/fixtures/hierarchy/user.json
12609 silly gunzTarPerm extractEntry test/fixtures/malformed.json
12610 silly gunzTarPerm extractEntry test/fixtures/merge/file1.json
12611 silly gunzTarPerm extractEntry test/fixtures/merge/file2.json
12612 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-argv.js
12613 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-change-argv.js
12614 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-env.js
12615 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-file-argv.js
12616 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-merge.js
12617 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-save.js
12618 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-nested-env.js
12619 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-argv.js
12620 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-env.js
12621 silly gunzTarPerm extractEntry test/mocks/mock-store.js
12622 silly gunzTarPerm extractEntry test/stores/argv-test.js
12623 silly gunzTarPerm extractEntry test/stores/env-test.js
12624 silly gunzTarPerm extractEntry test/stores/file-store-test.js
12625 silly gunzTarPerm extractEntry test/stores/literal-test.js
12626 silly gunzTarPerm extractEntry test/stores/memory-store-test.js
12627 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12628 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12629 silly lockFile 535b91bb-5584-0-12717166915535927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz
12630 silly lockFile 535b91bb-5584-0-12717166915535927-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/tmp.tgz
12631 verbose tar pack [ '/home/lerenzo/.npm/nconf/0.6.7/package.tgz',
12631 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package' ]
12632 verbose tarball /home/lerenzo/.npm/nconf/0.6.7/package.tgz
12633 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12634 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12635 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package /home/lerenzo/.npm/7737b9e4-5584-0-12717166915535927-package.lock
12636 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12637 verbose lock tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz /home/lerenzo/.npm/24802201-enzo-npm-nconf-0-6-7-package-tgz.lock
12638 http 200 https://registry.npmjs.org/utile
12639 silly registry.get cb [ 200,
12639 silly registry.get   { vary: 'Accept',
12639 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
12639 silly registry.get     etag: '"35DTRKGH6NGSY3UOY6LCQUMJ2"',
12639 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:02 GMT',
12639 silly registry.get     'content-type': 'application/json',
12639 silly registry.get     'content-length': '56782' } ]
12640 silly addNameRange number 2 { name: 'utile', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
12641 silly addNameRange versions [ 'utile',
12641 silly addNameRange   [ '0.0.1',
12641 silly addNameRange     '0.0.2',
12641 silly addNameRange     '0.0.3',
12641 silly addNameRange     '0.0.4',
12641 silly addNameRange     '0.0.5',
12641 silly addNameRange     '0.0.6',
12641 silly addNameRange     '0.0.8',
12641 silly addNameRange     '0.0.9',
12641 silly addNameRange     '0.0.10',
12641 silly addNameRange     '0.1.0',
12641 silly addNameRange     '0.1.1',
12641 silly addNameRange     '0.1.2',
12641 silly addNameRange     '0.1.3',
12641 silly addNameRange     '0.1.5',
12641 silly addNameRange     '0.1.6',
12641 silly addNameRange     '0.1.7',
12641 silly addNameRange     '0.2.0' ] ]
12642 verbose addNamed [ 'utile', '0.1.7' ]
12643 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12644 silly lockFile 7737b9e4-5584-0-12717166915535927-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325584-0.12717166915535927/package
12645 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12646 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12647 silly lockFile 98dc086c--lerenzo-npm-nconf-0-6-7-package /home/lerenzo/.npm/nconf/0.6.7/package
12648 verbose lock /home/lerenzo/.npm/nconf/0.6.7/package /home/lerenzo/.npm/98dc086c--lerenzo-npm-nconf-0-6-7-package.lock
12649 silly lockFile 98dc086c--lerenzo-npm-nconf-0-6-7-package /home/lerenzo/.npm/nconf/0.6.7/package
12650 silly lockFile 98dc086c--lerenzo-npm-nconf-0-6-7-package /home/lerenzo/.npm/nconf/0.6.7/package
12651 verbose tar unpack /home/lerenzo/.npm/nconf/0.6.7/package.tgz
12652 silly lockFile e0a01df6--lerenzo-npm-nconf-0-6-7-package tar:///home/lerenzo/.npm/nconf/0.6.7/package
12653 verbose lock tar:///home/lerenzo/.npm/nconf/0.6.7/package /home/lerenzo/.npm/e0a01df6--lerenzo-npm-nconf-0-6-7-package.lock
12654 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12655 verbose lock tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz /home/lerenzo/.npm/24802201-enzo-npm-nconf-0-6-7-package-tgz.lock
12656 silly gunzTarPerm modes [ '755', '644' ]
12657 silly gunzTarPerm extractEntry package.json
12658 silly gunzTarPerm extractEntry .npmignore
12659 silly gunzTarPerm extractEntry README.md
12660 silly gunzTarPerm extractEntry LICENSE
12661 silly gunzTarPerm extractEntry usage.js
12662 silly gunzTarPerm extractEntry .travis.yml
12663 silly gunzTarPerm extractEntry CHANGELOG.md
12664 silly gunzTarPerm extractEntry docs/docco.css
12665 silly gunzTarPerm extractEntry docs/nconf/common.html
12666 silly gunzTarPerm extractEntry docs/nconf/formats.html
12667 silly gunzTarPerm extractEntry docs/nconf/provider.html
12668 silly gunzTarPerm extractEntry docs/nconf/stores/file.html
12669 silly gunzTarPerm extractEntry docs/nconf/stores/memory.html
12670 silly gunzTarPerm extractEntry docs/nconf/stores/system.html
12671 silly gunzTarPerm extractEntry docs/nconf/stores.html
12672 silly gunzTarPerm extractEntry docs/nconf.html
12673 silly gunzTarPerm extractEntry lib/nconf.js
12674 silly gunzTarPerm extractEntry lib/nconf/common.js
12675 silly gunzTarPerm extractEntry lib/nconf/formats.js
12676 silly gunzTarPerm extractEntry lib/nconf/provider.js
12677 silly gunzTarPerm extractEntry lib/nconf/stores/argv.js
12678 silly gunzTarPerm extractEntry lib/nconf/stores/env.js
12679 silly gunzTarPerm extractEntry lib/nconf/stores/file.js
12680 silly gunzTarPerm extractEntry lib/nconf/stores/literal.js
12681 silly gunzTarPerm extractEntry lib/nconf/stores/memory.js
12682 silly gunzTarPerm extractEntry test/common-test.js
12683 silly gunzTarPerm extractEntry test/complete-test.js
12684 silly gunzTarPerm extractEntry test/helpers.js
12685 silly gunzTarPerm extractEntry test/hierarchy-test.js
12686 silly gunzTarPerm extractEntry test/nconf-test.js
12687 silly gunzTarPerm extractEntry test/provider-save-test.js
12688 silly gunzTarPerm extractEntry test/provider-test.js
12689 silly gunzTarPerm extractEntry test/fixtures/data.js
12690 silly gunzTarPerm extractEntry test/fixtures/complete.json
12691 silly gunzTarPerm extractEntry test/fixtures/hierarchy/global.json
12692 silly gunzTarPerm extractEntry test/fixtures/hierarchy/hierarchical.json
12693 silly gunzTarPerm extractEntry test/fixtures/hierarchy/user.json
12694 silly gunzTarPerm extractEntry test/fixtures/malformed.json
12695 silly gunzTarPerm extractEntry test/fixtures/merge/file1.json
12696 silly gunzTarPerm extractEntry test/fixtures/merge/file2.json
12697 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-argv.js
12698 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-change-argv.js
12699 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-env.js
12700 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-file-argv.js
12701 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-merge.js
12702 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-save.js
12703 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-nested-env.js
12704 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-argv.js
12705 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-env.js
12706 silly gunzTarPerm extractEntry test/mocks/mock-store.js
12707 silly gunzTarPerm extractEntry test/stores/argv-test.js
12708 silly gunzTarPerm extractEntry test/stores/env-test.js
12709 silly gunzTarPerm extractEntry test/stores/file-store-test.js
12710 silly gunzTarPerm extractEntry test/stores/literal-test.js
12711 silly gunzTarPerm extractEntry test/stores/memory-store-test.js
12712 silly lockFile e0a01df6--lerenzo-npm-nconf-0-6-7-package tar:///home/lerenzo/.npm/nconf/0.6.7/package
12713 silly lockFile e0a01df6--lerenzo-npm-nconf-0-6-7-package tar:///home/lerenzo/.npm/nconf/0.6.7/package
12714 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12715 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
12716 verbose chmod /home/lerenzo/.npm/nconf/0.6.7/package.tgz 644
12717 verbose chown /home/lerenzo/.npm/nconf/0.6.7/package.tgz [ 1000, 1000 ]
12718 silly lockFile a647e65f--npmjs-org-nconf-nconf-0-6-7-tgz https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz
12719 silly lockFile a647e65f--npmjs-org-nconf-nconf-0-6-7-tgz https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz
12720 silly lockFile 9482211e-nconf-0-6-7 nconf@0.6.7
12721 silly lockFile 9482211e-nconf-0-6-7 nconf@0.6.7
12722 http 200 https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz
12723 http 200 https://registry.npmjs.org/utile/-/utile-0.1.7.tgz
12724 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz
12725 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12726 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package /home/lerenzo/.npm/0941030f-26675-0-3650485686957836-package.lock
12727 silly lockFile 62a13ccc-26675-0-3650485686957836-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz
12728 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz /home/lerenzo/.npm/62a13ccc-26675-0-3650485686957836-tmp-tgz.lock
12729 silly gunzTarPerm modes [ '755', '644' ]
12730 silly gunzTarPerm extractEntry package.json
12731 silly gunzTarPerm extractEntry .npmignore
12732 silly gunzTarPerm extractEntry README.md
12733 silly gunzTarPerm extractEntry LICENSE
12734 silly gunzTarPerm extractEntry .travis.yml
12735 silly gunzTarPerm extractEntry CHANGELOG.md
12736 silly gunzTarPerm extractEntry lib/args.js
12737 silly gunzTarPerm extractEntry lib/base64.js
12738 silly gunzTarPerm extractEntry lib/file.js
12739 silly gunzTarPerm extractEntry lib/format.js
12740 silly gunzTarPerm extractEntry lib/index.js
12741 silly gunzTarPerm extractEntry test/file-test.js
12742 silly gunzTarPerm extractEntry test/format-test.js
12743 silly gunzTarPerm extractEntry test/function-args-test.js
12744 silly gunzTarPerm extractEntry test/random-string-test.js
12745 silly gunzTarPerm extractEntry test/require-directory-test.js
12746 silly gunzTarPerm extractEntry test/utile-test.js
12747 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
12748 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
12749 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
12750 silly gunzTarPerm extractEntry test/helpers/macros.js
12751 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12752 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12753 silly lockFile 62a13ccc-26675-0-3650485686957836-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz
12754 silly lockFile 62a13ccc-26675-0-3650485686957836-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/tmp.tgz
12755 verbose tar pack [ '/home/lerenzo/.npm/utile/0.1.7/package.tgz',
12755 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package' ]
12756 verbose tarball /home/lerenzo/.npm/utile/0.1.7/package.tgz
12757 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12758 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12759 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package /home/lerenzo/.npm/0941030f-26675-0-3650485686957836-package.lock
12760 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12761 verbose lock tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz /home/lerenzo/.npm/c7efa28b-enzo-npm-utile-0-1-7-package-tgz.lock
12762 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12763 silly lockFile 0941030f-26675-0-3650485686957836-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572326675-0.3650485686957836/package
12764 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12765 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12766 silly lockFile b6b04ae2--lerenzo-npm-utile-0-1-7-package /home/lerenzo/.npm/utile/0.1.7/package
12767 verbose lock /home/lerenzo/.npm/utile/0.1.7/package /home/lerenzo/.npm/b6b04ae2--lerenzo-npm-utile-0-1-7-package.lock
12768 silly lockFile b6b04ae2--lerenzo-npm-utile-0-1-7-package /home/lerenzo/.npm/utile/0.1.7/package
12769 silly lockFile b6b04ae2--lerenzo-npm-utile-0-1-7-package /home/lerenzo/.npm/utile/0.1.7/package
12770 verbose tar unpack /home/lerenzo/.npm/utile/0.1.7/package.tgz
12771 silly lockFile feabf3ec--lerenzo-npm-utile-0-1-7-package tar:///home/lerenzo/.npm/utile/0.1.7/package
12772 verbose lock tar:///home/lerenzo/.npm/utile/0.1.7/package /home/lerenzo/.npm/feabf3ec--lerenzo-npm-utile-0-1-7-package.lock
12773 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12774 verbose lock tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz /home/lerenzo/.npm/c7efa28b-enzo-npm-utile-0-1-7-package-tgz.lock
12775 silly gunzTarPerm modes [ '755', '644' ]
12776 silly gunzTarPerm extractEntry package.json
12777 silly gunzTarPerm extractEntry .npmignore
12778 silly gunzTarPerm extractEntry README.md
12779 silly gunzTarPerm extractEntry LICENSE
12780 silly gunzTarPerm extractEntry .travis.yml
12781 silly gunzTarPerm extractEntry CHANGELOG.md
12782 silly gunzTarPerm extractEntry lib/args.js
12783 silly gunzTarPerm extractEntry lib/base64.js
12784 silly gunzTarPerm extractEntry lib/file.js
12785 silly gunzTarPerm extractEntry lib/format.js
12786 silly gunzTarPerm extractEntry lib/index.js
12787 silly gunzTarPerm extractEntry test/file-test.js
12788 silly gunzTarPerm extractEntry test/format-test.js
12789 silly gunzTarPerm extractEntry test/function-args-test.js
12790 silly gunzTarPerm extractEntry test/random-string-test.js
12791 silly gunzTarPerm extractEntry test/require-directory-test.js
12792 silly gunzTarPerm extractEntry test/utile-test.js
12793 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
12794 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
12795 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
12796 silly gunzTarPerm extractEntry test/helpers/macros.js
12797 silly lockFile feabf3ec--lerenzo-npm-utile-0-1-7-package tar:///home/lerenzo/.npm/utile/0.1.7/package
12798 silly lockFile feabf3ec--lerenzo-npm-utile-0-1-7-package tar:///home/lerenzo/.npm/utile/0.1.7/package
12799 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12800 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
12801 verbose chmod /home/lerenzo/.npm/utile/0.1.7/package.tgz 644
12802 verbose chown /home/lerenzo/.npm/utile/0.1.7/package.tgz [ 1000, 1000 ]
12803 silly lockFile 80d5629c--npmjs-org-utile-utile-0-1-7-tgz https://registry.npmjs.org/utile/-/utile-0.1.7.tgz
12804 silly lockFile 80d5629c--npmjs-org-utile-utile-0-1-7-tgz https://registry.npmjs.org/utile/-/utile-0.1.7.tgz
12805 silly lockFile 78905450-utile-0-1-7 utile@0.1.7
12806 silly lockFile 78905450-utile-0-1-7 utile@0.1.7
12807 silly lockFile 67dcb77e-utile-0-1-x utile@0.1.x
12808 silly lockFile 67dcb77e-utile-0-1-x utile@0.1.x
12809 http 200 https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz
12810 http 200 https://registry.npmjs.org/winston/0.6.2
12811 silly registry.get cb [ 200,
12811 silly registry.get   { vary: 'Accept',
12811 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12811 silly registry.get     etag: '"BDC2UWGIHRSDEPWASJYB6BQ25"',
12811 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:05 GMT',
12811 silly registry.get     'content-type': 'application/json',
12811 silly registry.get     'content-length': '28693' } ]
12812 silly lockFile 65b3e88d-js-org-winston-winston-0-6-2-tgz https://registry.npmjs.org/winston/-/winston-0.6.2.tgz
12813 verbose lock https://registry.npmjs.org/winston/-/winston-0.6.2.tgz /home/lerenzo/.npm/65b3e88d-js-org-winston-winston-0-6-2-tgz.lock
12814 verbose addRemoteTarball [ 'https://registry.npmjs.org/winston/-/winston-0.6.2.tgz',
12814 verbose addRemoteTarball   '4144fe2586cdc19a612bf8c035590132c9064bd2' ]
12815 info retry fetch attempt 1 at 14:12:14
12816 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz
12817 http GET https://registry.npmjs.org/winston/-/winston-0.6.2.tgz
12818 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz
12819 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12820 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package /home/lerenzo/.npm/ccf8a920-21157-0-7209235597401857-package.lock
12821 silly lockFile 1bf2e181-21157-0-7209235597401857-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz
12822 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz /home/lerenzo/.npm/1bf2e181-21157-0-7209235597401857-tmp-tgz.lock
12823 silly gunzTarPerm modes [ '755', '644' ]
12824 silly gunzTarPerm extractEntry package.json
12825 silly gunzTarPerm extractEntry .npmignore
12826 silly gunzTarPerm extractEntry README.md
12827 silly gunzTarPerm extractEntry LICENSE
12828 silly gunzTarPerm extractEntry .travis.yml
12829 silly gunzTarPerm extractEntry CHANGELOG.md
12830 silly gunzTarPerm extractEntry example/webservice.js
12831 silly gunzTarPerm extractEntry lib/revalidator.js
12832 silly gunzTarPerm extractEntry test/validator-test.js
12833 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12834 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12835 silly lockFile 1bf2e181-21157-0-7209235597401857-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz
12836 silly lockFile 1bf2e181-21157-0-7209235597401857-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/tmp.tgz
12837 verbose tar pack [ '/home/lerenzo/.npm/revalidator/0.1.5/package.tgz',
12837 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package' ]
12838 verbose tarball /home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12839 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12840 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12841 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package /home/lerenzo/.npm/ccf8a920-21157-0-7209235597401857-package.lock
12842 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12843 verbose lock tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz /home/lerenzo/.npm/6e70a4ef-pm-revalidator-0-1-5-package-tgz.lock
12844 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12845 silly lockFile ccf8a920-21157-0-7209235597401857-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572321157-0.7209235597401857/package
12846 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12847 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12848 silly lockFile 0049f3cc-zo-npm-revalidator-0-1-5-package /home/lerenzo/.npm/revalidator/0.1.5/package
12849 verbose lock /home/lerenzo/.npm/revalidator/0.1.5/package /home/lerenzo/.npm/0049f3cc-zo-npm-revalidator-0-1-5-package.lock
12850 silly lockFile 0049f3cc-zo-npm-revalidator-0-1-5-package /home/lerenzo/.npm/revalidator/0.1.5/package
12851 silly lockFile 0049f3cc-zo-npm-revalidator-0-1-5-package /home/lerenzo/.npm/revalidator/0.1.5/package
12852 verbose tar unpack /home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12853 silly lockFile 853def57-zo-npm-revalidator-0-1-5-package tar:///home/lerenzo/.npm/revalidator/0.1.5/package
12854 verbose lock tar:///home/lerenzo/.npm/revalidator/0.1.5/package /home/lerenzo/.npm/853def57-zo-npm-revalidator-0-1-5-package.lock
12855 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12856 verbose lock tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz /home/lerenzo/.npm/6e70a4ef-pm-revalidator-0-1-5-package-tgz.lock
12857 silly gunzTarPerm modes [ '755', '644' ]
12858 silly gunzTarPerm extractEntry package.json
12859 silly gunzTarPerm extractEntry .npmignore
12860 silly gunzTarPerm extractEntry README.md
12861 silly gunzTarPerm extractEntry LICENSE
12862 silly gunzTarPerm extractEntry .travis.yml
12863 silly gunzTarPerm extractEntry CHANGELOG.md
12864 silly gunzTarPerm extractEntry example/webservice.js
12865 silly gunzTarPerm extractEntry lib/revalidator.js
12866 silly gunzTarPerm extractEntry test/validator-test.js
12867 silly lockFile 853def57-zo-npm-revalidator-0-1-5-package tar:///home/lerenzo/.npm/revalidator/0.1.5/package
12868 silly lockFile 853def57-zo-npm-revalidator-0-1-5-package tar:///home/lerenzo/.npm/revalidator/0.1.5/package
12869 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12870 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
12871 verbose chmod /home/lerenzo/.npm/revalidator/0.1.5/package.tgz 644
12872 verbose chown /home/lerenzo/.npm/revalidator/0.1.5/package.tgz [ 1000, 1000 ]
12873 silly lockFile f7e6fddc-evalidator-revalidator-0-1-5-tgz https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz
12874 silly lockFile f7e6fddc-evalidator-revalidator-0-1-5-tgz https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz
12875 silly lockFile abe9e280-revalidator-0-1-5 revalidator@0.1.5
12876 silly lockFile abe9e280-revalidator-0-1-5 revalidator@0.1.5
12877 silly lockFile 0837132e-revalidator-0-1-x revalidator@0.1.x
12878 silly lockFile 0837132e-revalidator-0-1-x revalidator@0.1.x
12879 http 304 https://registry.npmjs.org/node-uuid
12880 silly registry.get cb [ 304,
12880 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12880 silly registry.get     etag: '"8PN2L4O4M1R9JG0GTAR15W35E"',
12880 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:14 GMT',
12880 silly registry.get     'content-length': '0' } ]
12881 verbose etag node-uuid from cache
12882 silly addNameRange number 2 { name: 'node-uuid', range: '>=1.4.0-0 <1.5.0-0', hasData: true }
12883 silly addNameRange versions [ 'node-uuid',
12883 silly addNameRange   [ '1.2.0',
12883 silly addNameRange     '1.3.0',
12883 silly addNameRange     '1.3.1',
12883 silly addNameRange     '1.3.2',
12883 silly addNameRange     '1.1.0',
12883 silly addNameRange     '1.0.0',
12883 silly addNameRange     '1.3.3',
12883 silly addNameRange     '1.4.0',
12883 silly addNameRange     '1.4.1' ] ]
12884 verbose addNamed [ 'node-uuid', '1.4.1' ]
12885 verbose addNamed [ '1.4.1', '1.4.1' ]
12886 silly lockFile 7c2028cd-node-uuid-1-4-1 node-uuid@1.4.1
12887 verbose lock node-uuid@1.4.1 /home/lerenzo/.npm/7c2028cd-node-uuid-1-4-1.lock
12888 silly lockFile 7c2028cd-node-uuid-1-4-1 node-uuid@1.4.1
12889 silly lockFile 7c2028cd-node-uuid-1-4-1 node-uuid@1.4.1
12890 silly lockFile f662725f-node-uuid-1-4-0 node-uuid@~1.4.0
12891 silly lockFile f662725f-node-uuid-1-4-0 node-uuid@~1.4.0
12892 http 200 https://registry.npmjs.org/http-signature
12893 silly registry.get cb [ 200,
12893 silly registry.get   { vary: 'Accept',
12893 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12893 silly registry.get     etag: '"1M929FRRWNE7UYGGSO1BB3I9Q"',
12893 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:13 GMT',
12893 silly registry.get     'content-type': 'application/json',
12893 silly registry.get     'content-length': '24004' } ]
12894 silly addNameRange number 2 { name: 'http-signature',
12894 silly addNameRange   range: '>=0.10.0-0 <0.11.0-0',
12894 silly addNameRange   hasData: true }
12895 silly addNameRange versions [ 'http-signature',
12895 silly addNameRange   [ '0.9.0',
12895 silly addNameRange     '0.9.2',
12895 silly addNameRange     '0.9.3',
12895 silly addNameRange     '0.9.4',
12895 silly addNameRange     '0.9.5',
12895 silly addNameRange     '0.9.6',
12895 silly addNameRange     '0.9.7',
12895 silly addNameRange     '0.9.8',
12895 silly addNameRange     '0.9.9',
12895 silly addNameRange     '0.9.10',
12895 silly addNameRange     '0.9.11',
12895 silly addNameRange     '0.10.0' ] ]
12896 verbose addNamed [ 'http-signature', '0.10.0' ]
12897 verbose addNamed [ '0.10.0', '0.10.0' ]
12898 silly lockFile f628681c-http-signature-0-10-0 http-signature@0.10.0
12899 verbose lock http-signature@0.10.0 /home/lerenzo/.npm/f628681c-http-signature-0-10-0.lock
12900 silly lockFile 7a0e471e-nature-http-signature-0-10-0-tgz https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz
12901 verbose lock https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz /home/lerenzo/.npm/7a0e471e-nature-http-signature-0-10-0-tgz.lock
12902 verbose addRemoteTarball [ 'https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz',
12902 verbose addRemoteTarball   '1494e4f5000a83c0f11bcc12d6007c530cb99582' ]
12903 info retry fetch attempt 1 at 14:12:16
12904 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz
12905 http GET https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz
12906 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz
12907 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12908 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package /home/lerenzo/.npm/c977aec6-25900-0-7934926047455519-package.lock
12909 silly lockFile 7eb3f845-25900-0-7934926047455519-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz
12910 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz /home/lerenzo/.npm/7eb3f845-25900-0-7934926047455519-tmp-tgz.lock
12911 silly gunzTarPerm modes [ '755', '644' ]
12912 silly gunzTarPerm extractEntry package.json
12913 silly gunzTarPerm extractEntry .npmignore
12914 silly gunzTarPerm extractEntry README.md
12915 silly gunzTarPerm extractEntry index.js
12916 silly gunzTarPerm extractEntry lib/eventemitter2.js
12917 silly gunzTarPerm extractEntry test/common.js
12918 silly gunzTarPerm extractEntry test/perf/benchmark.js
12919 silly gunzTarPerm extractEntry test/simple/addListener.js
12920 silly gunzTarPerm extractEntry test/simple/emit.js
12921 silly gunzTarPerm extractEntry test/simple/reconfigure.js
12922 silly gunzTarPerm extractEntry test/simple/removeListener.js
12923 silly gunzTarPerm extractEntry test/simple/setMax.js
12924 silly gunzTarPerm extractEntry test/simple/ttl.js
12925 silly gunzTarPerm extractEntry test/wildcardEvents/addListener.js
12926 silly gunzTarPerm extractEntry test/wildcardEvents/all.js
12927 silly gunzTarPerm extractEntry test/wildcardEvents/customDelimiter.js
12928 silly gunzTarPerm extractEntry test/wildcardEvents/k1.js
12929 silly gunzTarPerm extractEntry test/wildcardEvents/options.js
12930 silly gunzTarPerm extractEntry test/wildcardEvents/removeListener.js
12931 silly gunzTarPerm extractEntry test/wildcardEvents/ttl.js
12932 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12933 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12934 silly lockFile 7eb3f845-25900-0-7934926047455519-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz
12935 silly lockFile 7eb3f845-25900-0-7934926047455519-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/tmp.tgz
12936 verbose tar pack [ '/home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz',
12936 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package' ]
12937 verbose tarball /home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12938 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12939 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12940 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package /home/lerenzo/.npm/c977aec6-25900-0-7934926047455519-package.lock
12941 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12942 verbose lock tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz /home/lerenzo/.npm/e7f28c23-eventemitter2-0-4-11-package-tgz.lock
12943 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12944 silly lockFile c977aec6-25900-0-7934926047455519-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325900-0.7934926047455519/package
12945 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12946 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12947 silly lockFile 9701e5cc-npm-eventemitter2-0-4-11-package /home/lerenzo/.npm/eventemitter2/0.4.11/package
12948 verbose lock /home/lerenzo/.npm/eventemitter2/0.4.11/package /home/lerenzo/.npm/9701e5cc-npm-eventemitter2-0-4-11-package.lock
12949 silly lockFile 9701e5cc-npm-eventemitter2-0-4-11-package /home/lerenzo/.npm/eventemitter2/0.4.11/package
12950 silly lockFile 9701e5cc-npm-eventemitter2-0-4-11-package /home/lerenzo/.npm/eventemitter2/0.4.11/package
12951 verbose tar unpack /home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12952 silly lockFile ad3a355d-npm-eventemitter2-0-4-11-package tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package
12953 verbose lock tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package /home/lerenzo/.npm/ad3a355d-npm-eventemitter2-0-4-11-package.lock
12954 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12955 verbose lock tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz /home/lerenzo/.npm/e7f28c23-eventemitter2-0-4-11-package-tgz.lock
12956 silly gunzTarPerm modes [ '755', '644' ]
12957 silly gunzTarPerm extractEntry package.json
12958 silly gunzTarPerm extractEntry .npmignore
12959 silly gunzTarPerm extractEntry README.md
12960 silly gunzTarPerm extractEntry index.js
12961 silly gunzTarPerm extractEntry lib/eventemitter2.js
12962 silly gunzTarPerm extractEntry test/common.js
12963 silly gunzTarPerm extractEntry test/perf/benchmark.js
12964 silly gunzTarPerm extractEntry test/simple/addListener.js
12965 silly gunzTarPerm extractEntry test/simple/emit.js
12966 silly gunzTarPerm extractEntry test/simple/reconfigure.js
12967 silly gunzTarPerm extractEntry test/simple/removeListener.js
12968 silly gunzTarPerm extractEntry test/simple/setMax.js
12969 silly gunzTarPerm extractEntry test/simple/ttl.js
12970 silly gunzTarPerm extractEntry test/wildcardEvents/addListener.js
12971 silly gunzTarPerm extractEntry test/wildcardEvents/all.js
12972 silly gunzTarPerm extractEntry test/wildcardEvents/customDelimiter.js
12973 silly gunzTarPerm extractEntry test/wildcardEvents/k1.js
12974 silly gunzTarPerm extractEntry test/wildcardEvents/options.js
12975 silly gunzTarPerm extractEntry test/wildcardEvents/removeListener.js
12976 silly gunzTarPerm extractEntry test/wildcardEvents/ttl.js
12977 silly lockFile ad3a355d-npm-eventemitter2-0-4-11-package tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package
12978 silly lockFile ad3a355d-npm-eventemitter2-0-4-11-package tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package
12979 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12980 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
12981 verbose chmod /home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz 644
12982 verbose chown /home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz [ 1000, 1000 ]
12983 silly lockFile 9e4d22aa-mitter2-eventemitter2-0-4-11-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz
12984 silly lockFile 9e4d22aa-mitter2-eventemitter2-0-4-11-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz
12985 silly lockFile 1047a589-eventemitter2-0-4-11 eventemitter2@0.4.11
12986 silly lockFile 1047a589-eventemitter2-0-4-11 eventemitter2@0.4.11
12987 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz
12988 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
12989 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package /home/lerenzo/.npm/186744a9-22728-0-5038832821883261-package.lock
12990 silly lockFile 298ee7cf-22728-0-5038832821883261-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz
12991 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz /home/lerenzo/.npm/298ee7cf-22728-0-5038832821883261-tmp-tgz.lock
12992 silly gunzTarPerm modes [ '755', '644' ]
12993 silly gunzTarPerm extractEntry package.json
12994 silly gunzTarPerm extractEntry .npmignore
12995 silly gunzTarPerm extractEntry benchmark.js
12996 silly gunzTarPerm extractEntry examples.js
12997 silly gunzTarPerm extractEntry index.js
12998 silly gunzTarPerm extractEntry History.md
12999 silly gunzTarPerm extractEntry .gitmodules
13000 silly gunzTarPerm extractEntry component.json
13001 silly gunzTarPerm extractEntry Makefile
13002 silly gunzTarPerm extractEntry .travis.yml
13003 silly gunzTarPerm extractEntry Readme.md
13004 silly gunzTarPerm extractEntry test/parse.js
13005 silly gunzTarPerm extractEntry test/stringify.js
13006 silly gunzTarPerm extractEntry test/browser/expect.js
13007 silly gunzTarPerm extractEntry test/browser/jquery.js
13008 silly gunzTarPerm extractEntry test/browser/mocha.js
13009 silly gunzTarPerm extractEntry test/browser/qs.js
13010 silly gunzTarPerm extractEntry test/browser/index.html
13011 silly gunzTarPerm extractEntry test/browser/mocha.css
13012 silly gunzTarPerm extractEntry test/browser/qs.css
13013 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13014 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13015 silly lockFile 298ee7cf-22728-0-5038832821883261-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz
13016 silly lockFile 298ee7cf-22728-0-5038832821883261-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/tmp.tgz
13017 verbose tar pack [ '/home/lerenzo/.npm/qs/0.5.6/package.tgz',
13017 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package' ]
13018 verbose tarball /home/lerenzo/.npm/qs/0.5.6/package.tgz
13019 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13020 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13021 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package /home/lerenzo/.npm/186744a9-22728-0-5038832821883261-package.lock
13022 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13023 verbose lock tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz /home/lerenzo/.npm/7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz.lock
13024 http 200 https://registry.npmjs.org/lru-cache
13025 silly registry.get cb [ 200,
13025 silly registry.get   { vary: 'Accept',
13025 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
13025 silly registry.get     etag: '"EVMUW224SL57QIO1QJYZN9ABH"',
13025 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:15 GMT',
13025 silly registry.get     'content-type': 'application/json',
13025 silly registry.get     'content-length': '60500' } ]
13026 silly addNameRange number 2 { name: 'lru-cache', range: '>=2.0.0-0 <3.0.0-0', hasData: true }
13027 silly addNameRange versions [ 'lru-cache',
13027 silly addNameRange   [ '1.0.1',
13027 silly addNameRange     '1.0.2',
13027 silly addNameRange     '1.0.3',
13027 silly addNameRange     '1.0.4',
13027 silly addNameRange     '1.0.5',
13027 silly addNameRange     '1.0.6',
13027 silly addNameRange     '1.1.0',
13027 silly addNameRange     '1.1.1',
13027 silly addNameRange     '2.0.0',
13027 silly addNameRange     '2.0.1',
13027 silly addNameRange     '2.0.2',
13027 silly addNameRange     '2.0.3',
13027 silly addNameRange     '2.0.4',
13027 silly addNameRange     '2.1.0',
13027 silly addNameRange     '2.2.0',
13027 silly addNameRange     '2.2.1',
13027 silly addNameRange     '2.2.2',
13027 silly addNameRange     '2.2.4',
13027 silly addNameRange     '2.3.0',
13027 silly addNameRange     '2.3.1',
13027 silly addNameRange     '2.5.0' ] ]
13028 verbose addNamed [ 'lru-cache', '2.5.0' ]
13029 verbose addNamed [ '2.5.0', '2.5.0' ]
13030 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
13031 verbose lock lru-cache@2.5.0 /home/lerenzo/.npm/30aa630e-lru-cache-2-5-0.lock
13032 silly lockFile 2ef4df53-rg-lru-cache-lru-cache-2-5-0-tgz https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz
13033 verbose lock https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz /home/lerenzo/.npm/2ef4df53-rg-lru-cache-lru-cache-2-5-0-tgz.lock
13034 verbose addRemoteTarball [ 'https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz',
13034 verbose addRemoteTarball   'd82388ae9c960becbea0c73bb9eb79b6c6ce9aeb' ]
13035 info retry fetch attempt 1 at 14:12:19
13036 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz
13037 http GET https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz
13038 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13039 silly lockFile 186744a9-22728-0-5038832821883261-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572322728-0.5038832821883261/package
13040 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13041 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13042 silly lockFile a095c0a5-ome-lerenzo-npm-qs-0-5-6-package /home/lerenzo/.npm/qs/0.5.6/package
13043 verbose lock /home/lerenzo/.npm/qs/0.5.6/package /home/lerenzo/.npm/a095c0a5-ome-lerenzo-npm-qs-0-5-6-package.lock
13044 silly lockFile a095c0a5-ome-lerenzo-npm-qs-0-5-6-package /home/lerenzo/.npm/qs/0.5.6/package
13045 silly lockFile a095c0a5-ome-lerenzo-npm-qs-0-5-6-package /home/lerenzo/.npm/qs/0.5.6/package
13046 verbose tar unpack /home/lerenzo/.npm/qs/0.5.6/package.tgz
13047 silly lockFile 532f5a58-ome-lerenzo-npm-qs-0-5-6-package tar:///home/lerenzo/.npm/qs/0.5.6/package
13048 verbose lock tar:///home/lerenzo/.npm/qs/0.5.6/package /home/lerenzo/.npm/532f5a58-ome-lerenzo-npm-qs-0-5-6-package.lock
13049 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13050 verbose lock tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz /home/lerenzo/.npm/7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz.lock
13051 silly gunzTarPerm modes [ '755', '644' ]
13052 silly gunzTarPerm extractEntry package.json
13053 silly gunzTarPerm extractEntry .npmignore
13054 silly gunzTarPerm extractEntry benchmark.js
13055 silly gunzTarPerm extractEntry examples.js
13056 silly gunzTarPerm extractEntry index.js
13057 silly gunzTarPerm extractEntry Readme.md
13058 silly gunzTarPerm extractEntry .gitmodules
13059 silly gunzTarPerm extractEntry component.json
13060 silly gunzTarPerm extractEntry .travis.yml
13061 silly gunzTarPerm extractEntry History.md
13062 silly gunzTarPerm extractEntry Makefile
13063 silly gunzTarPerm extractEntry test/parse.js
13064 silly gunzTarPerm extractEntry test/stringify.js
13065 silly gunzTarPerm extractEntry test/browser/expect.js
13066 silly gunzTarPerm extractEntry test/browser/jquery.js
13067 silly gunzTarPerm extractEntry test/browser/mocha.js
13068 silly gunzTarPerm extractEntry test/browser/qs.js
13069 silly gunzTarPerm extractEntry test/browser/index.html
13070 silly gunzTarPerm extractEntry test/browser/mocha.css
13071 silly gunzTarPerm extractEntry test/browser/qs.css
13072 silly lockFile 532f5a58-ome-lerenzo-npm-qs-0-5-6-package tar:///home/lerenzo/.npm/qs/0.5.6/package
13073 silly lockFile 532f5a58-ome-lerenzo-npm-qs-0-5-6-package tar:///home/lerenzo/.npm/qs/0.5.6/package
13074 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13075 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
13076 verbose chmod /home/lerenzo/.npm/qs/0.5.6/package.tgz 644
13077 verbose chown /home/lerenzo/.npm/qs/0.5.6/package.tgz [ 1000, 1000 ]
13078 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
13079 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
13080 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
13081 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
13082 silly lockFile 2dead18a-qs-0-5-4 qs@~0.5.4
13083 silly lockFile 2dead18a-qs-0-5-4 qs@~0.5.4
13084 http 200 https://registry.npmjs.org/sigmund
13085 silly registry.get cb [ 200,
13085 silly registry.get   { vary: 'Accept',
13085 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
13085 silly registry.get     etag: '"BAAVPGGBONNEW4H9S234JOULZ"',
13085 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:16 GMT',
13085 silly registry.get     'content-type': 'application/json',
13085 silly registry.get     'content-length': '5204' } ]
13086 silly addNameRange number 2 { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
13087 silly addNameRange versions [ 'sigmund', [ '1.0.0' ] ]
13088 verbose addNamed [ 'sigmund', '1.0.0' ]
13089 verbose addNamed [ '1.0.0', '1.0.0' ]
13090 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
13091 verbose lock sigmund@1.0.0 /home/lerenzo/.npm/7b2d1244-sigmund-1-0-0.lock
13092 silly lockFile 6a95961e-js-org-sigmund-sigmund-1-0-0-tgz https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz
13093 verbose lock https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz /home/lerenzo/.npm/6a95961e-js-org-sigmund-sigmund-1-0-0-tgz.lock
13094 verbose addRemoteTarball [ 'https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz',
13094 verbose addRemoteTarball   '66a2b3a749ae8b5fb89efd4fcc01dc94fbe02296' ]
13095 info retry fetch attempt 1 at 14:12:20
13096 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz
13097 http GET https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz
13098 http 200 https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz
13099 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz
13100 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13101 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package /home/lerenzo/.npm/4b1fb659-6381-0-19696286553516984-package.lock
13102 silly lockFile ae54244b-6381-0-19696286553516984-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz
13103 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz /home/lerenzo/.npm/ae54244b-6381-0-19696286553516984-tmp-tgz.lock
13104 silly gunzTarPerm modes [ '755', '644' ]
13105 silly gunzTarPerm extractEntry package.json
13106 silly gunzTarPerm extractEntry .npmignore
13107 silly gunzTarPerm extractEntry README.md
13108 silly gunzTarPerm extractEntry LICENSE
13109 silly gunzTarPerm extractEntry .dir-locals.el
13110 silly gunzTarPerm extractEntry http_signing.md
13111 silly gunzTarPerm extractEntry lib/index.js
13112 silly gunzTarPerm extractEntry lib/parser.js
13113 silly gunzTarPerm extractEntry lib/signer.js
13114 silly gunzTarPerm extractEntry lib/util.js
13115 silly gunzTarPerm extractEntry lib/verify.js
13116 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13117 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13118 silly lockFile ae54244b-6381-0-19696286553516984-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz
13119 silly lockFile ae54244b-6381-0-19696286553516984-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/tmp.tgz
13120 verbose tar pack [ '/home/lerenzo/.npm/http-signature/0.10.0/package.tgz',
13120 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package' ]
13121 verbose tarball /home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13122 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13123 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13124 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package /home/lerenzo/.npm/4b1fb659-6381-0-19696286553516984-package.lock
13125 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13126 verbose lock tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz /home/lerenzo/.npm/d6728d0b-ttp-signature-0-10-0-package-tgz.lock
13127 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13128 silly lockFile 4b1fb659-6381-0-19696286553516984-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572336381-0.19696286553516984/package
13129 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13130 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13131 silly lockFile 07e56681-pm-http-signature-0-10-0-package /home/lerenzo/.npm/http-signature/0.10.0/package
13132 verbose lock /home/lerenzo/.npm/http-signature/0.10.0/package /home/lerenzo/.npm/07e56681-pm-http-signature-0-10-0-package.lock
13133 silly lockFile 07e56681-pm-http-signature-0-10-0-package /home/lerenzo/.npm/http-signature/0.10.0/package
13134 silly lockFile 07e56681-pm-http-signature-0-10-0-package /home/lerenzo/.npm/http-signature/0.10.0/package
13135 verbose tar unpack /home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13136 silly lockFile 73e2cb95-pm-http-signature-0-10-0-package tar:///home/lerenzo/.npm/http-signature/0.10.0/package
13137 verbose lock tar:///home/lerenzo/.npm/http-signature/0.10.0/package /home/lerenzo/.npm/73e2cb95-pm-http-signature-0-10-0-package.lock
13138 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13139 verbose lock tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz /home/lerenzo/.npm/d6728d0b-ttp-signature-0-10-0-package-tgz.lock
13140 silly gunzTarPerm modes [ '755', '644' ]
13141 silly gunzTarPerm extractEntry package.json
13142 silly gunzTarPerm extractEntry .npmignore
13143 silly gunzTarPerm extractEntry README.md
13144 silly gunzTarPerm extractEntry LICENSE
13145 silly gunzTarPerm extractEntry .dir-locals.el
13146 silly gunzTarPerm extractEntry http_signing.md
13147 silly gunzTarPerm extractEntry lib/index.js
13148 silly gunzTarPerm extractEntry lib/parser.js
13149 silly gunzTarPerm extractEntry lib/signer.js
13150 silly gunzTarPerm extractEntry lib/util.js
13151 silly gunzTarPerm extractEntry lib/verify.js
13152 silly lockFile 73e2cb95-pm-http-signature-0-10-0-package tar:///home/lerenzo/.npm/http-signature/0.10.0/package
13153 silly lockFile 73e2cb95-pm-http-signature-0-10-0-package tar:///home/lerenzo/.npm/http-signature/0.10.0/package
13154 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13155 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
13156 verbose chmod /home/lerenzo/.npm/http-signature/0.10.0/package.tgz 644
13157 verbose chown /home/lerenzo/.npm/http-signature/0.10.0/package.tgz [ 1000, 1000 ]
13158 silly lockFile 7a0e471e-nature-http-signature-0-10-0-tgz https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz
13159 silly lockFile 7a0e471e-nature-http-signature-0-10-0-tgz https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz
13160 silly lockFile f628681c-http-signature-0-10-0 http-signature@0.10.0
13161 silly lockFile f628681c-http-signature-0-10-0 http-signature@0.10.0
13162 silly lockFile 8170f292-http-signature-0-10-0 http-signature@~0.10.0
13163 silly lockFile 8170f292-http-signature-0-10-0 http-signature@~0.10.0
13164 http 200 https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz
13165 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz
13166 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13167 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package /home/lerenzo/.npm/ebd373f2-39732-0-5165658427868038-package.lock
13168 silly lockFile 52a4d8d3-39732-0-5165658427868038-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz
13169 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz /home/lerenzo/.npm/52a4d8d3-39732-0-5165658427868038-tmp-tgz.lock
13170 silly gunzTarPerm modes [ '755', '644' ]
13171 silly gunzTarPerm extractEntry package.json
13172 silly gunzTarPerm extractEntry .npmignore
13173 silly gunzTarPerm extractEntry README.md
13174 silly gunzTarPerm extractEntry LICENSE
13175 silly gunzTarPerm extractEntry CONTRIBUTORS
13176 silly gunzTarPerm extractEntry lib/lru-cache.js
13177 silly gunzTarPerm extractEntry test/basic.js
13178 silly gunzTarPerm extractEntry test/foreach.js
13179 silly gunzTarPerm extractEntry test/memory-leak.js
13180 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13181 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13182 silly lockFile 52a4d8d3-39732-0-5165658427868038-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz
13183 silly lockFile 52a4d8d3-39732-0-5165658427868038-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/tmp.tgz
13184 verbose tar pack [ '/home/lerenzo/.npm/lru-cache/2.5.0/package.tgz',
13184 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package' ]
13185 verbose tarball /home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13186 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13187 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13188 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package /home/lerenzo/.npm/ebd373f2-39732-0-5165658427868038-package.lock
13189 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13190 verbose lock tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz /home/lerenzo/.npm/5f42a512--npm-lru-cache-2-5-0-package-tgz.lock
13191 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13192 silly lockFile ebd373f2-39732-0-5165658427868038-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572339732-0.5165658427868038/package
13193 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13194 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13195 silly lockFile e58fb9b4-enzo-npm-lru-cache-2-5-0-package /home/lerenzo/.npm/lru-cache/2.5.0/package
13196 verbose lock /home/lerenzo/.npm/lru-cache/2.5.0/package /home/lerenzo/.npm/e58fb9b4-enzo-npm-lru-cache-2-5-0-package.lock
13197 silly lockFile e58fb9b4-enzo-npm-lru-cache-2-5-0-package /home/lerenzo/.npm/lru-cache/2.5.0/package
13198 silly lockFile e58fb9b4-enzo-npm-lru-cache-2-5-0-package /home/lerenzo/.npm/lru-cache/2.5.0/package
13199 verbose tar unpack /home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13200 silly lockFile 87f71b8a-enzo-npm-lru-cache-2-5-0-package tar:///home/lerenzo/.npm/lru-cache/2.5.0/package
13201 verbose lock tar:///home/lerenzo/.npm/lru-cache/2.5.0/package /home/lerenzo/.npm/87f71b8a-enzo-npm-lru-cache-2-5-0-package.lock
13202 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13203 verbose lock tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz /home/lerenzo/.npm/5f42a512--npm-lru-cache-2-5-0-package-tgz.lock
13204 silly gunzTarPerm modes [ '755', '644' ]
13205 silly gunzTarPerm extractEntry package.json
13206 silly gunzTarPerm extractEntry .npmignore
13207 silly gunzTarPerm extractEntry README.md
13208 silly gunzTarPerm extractEntry LICENSE
13209 silly gunzTarPerm extractEntry CONTRIBUTORS
13210 silly gunzTarPerm extractEntry lib/lru-cache.js
13211 silly gunzTarPerm extractEntry test/basic.js
13212 silly gunzTarPerm extractEntry test/foreach.js
13213 silly gunzTarPerm extractEntry test/memory-leak.js
13214 silly lockFile 87f71b8a-enzo-npm-lru-cache-2-5-0-package tar:///home/lerenzo/.npm/lru-cache/2.5.0/package
13215 silly lockFile 87f71b8a-enzo-npm-lru-cache-2-5-0-package tar:///home/lerenzo/.npm/lru-cache/2.5.0/package
13216 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13217 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
13218 verbose chmod /home/lerenzo/.npm/lru-cache/2.5.0/package.tgz 644
13219 verbose chown /home/lerenzo/.npm/lru-cache/2.5.0/package.tgz [ 1000, 1000 ]
13220 silly lockFile 2ef4df53-rg-lru-cache-lru-cache-2-5-0-tgz https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz
13221 silly lockFile 2ef4df53-rg-lru-cache-lru-cache-2-5-0-tgz https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz
13222 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
13223 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
13224 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
13225 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
13226 http 200 https://registry.npmjs.org/winston/-/winston-0.6.2.tgz
13227 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz
13228 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13229 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package /home/lerenzo/.npm/694952ab-5342-0-43412901810370386-package.lock
13230 silly lockFile bbebc20a-5342-0-43412901810370386-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz
13231 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz /home/lerenzo/.npm/bbebc20a-5342-0-43412901810370386-tmp-tgz.lock
13232 silly gunzTarPerm modes [ '755', '644' ]
13233 silly gunzTarPerm extractEntry .npmignore
13234 silly gunzTarPerm extractEntry assets/
13235 silly gunzTarPerm extractEntry assets/inspect.png
13236 silly gunzTarPerm extractEntry assets/put-object-rows.png
13237 silly gunzTarPerm extractEntry assets/put-object.png
13238 silly gunzTarPerm extractEntry assets/put-rows-colors.png
13239 silly gunzTarPerm extractEntry assets/put-rows.png
13240 silly gunzTarPerm extractEntry assets/string-object-rows.png
13241 silly gunzTarPerm extractEntry assets/string-rows.png
13242 silly gunzTarPerm extractEntry examples/
13243 silly gunzTarPerm extractEntry examples/inspect.js
13244 silly gunzTarPerm extractEntry examples/put-object-rows.js
13245 silly gunzTarPerm extractEntry examples/put-object.js
13246 silly gunzTarPerm extractEntry examples/put-rows-colors.js
13247 silly gunzTarPerm extractEntry examples/put-rows.js
13248 silly gunzTarPerm extractEntry examples/string-object-rows.js
13249 silly gunzTarPerm extractEntry examples/string-rows.js
13250 silly gunzTarPerm extractEntry lib/
13251 silly gunzTarPerm extractEntry lib/cliff.js
13252 silly gunzTarPerm extractEntry LICENSE
13253 silly gunzTarPerm extractEntry package.json
13254 silly gunzTarPerm extractEntry README.md
13255 silly gunzTarPerm extractEntry test/
13256 silly gunzTarPerm extractEntry test/cliff-test.js
13257 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13258 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13259 silly lockFile bbebc20a-5342-0-43412901810370386-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz
13260 silly lockFile bbebc20a-5342-0-43412901810370386-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/tmp.tgz
13261 verbose tar pack [ '/home/lerenzo/.npm/cliff/0.1.8/package.tgz',
13261 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package' ]
13262 verbose tarball /home/lerenzo/.npm/cliff/0.1.8/package.tgz
13263 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13264 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13265 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package /home/lerenzo/.npm/694952ab-5342-0-43412901810370386-package.lock
13266 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13267 verbose lock tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz /home/lerenzo/.npm/72524f61-enzo-npm-cliff-0-1-8-package-tgz.lock
13268 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13269 silly lockFile 694952ab-5342-0-43412901810370386-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572325342-0.43412901810370386/package
13270 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13271 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13272 silly lockFile 46d00d6a--lerenzo-npm-cliff-0-1-8-package /home/lerenzo/.npm/cliff/0.1.8/package
13273 verbose lock /home/lerenzo/.npm/cliff/0.1.8/package /home/lerenzo/.npm/46d00d6a--lerenzo-npm-cliff-0-1-8-package.lock
13274 silly lockFile 46d00d6a--lerenzo-npm-cliff-0-1-8-package /home/lerenzo/.npm/cliff/0.1.8/package
13275 silly lockFile 46d00d6a--lerenzo-npm-cliff-0-1-8-package /home/lerenzo/.npm/cliff/0.1.8/package
13276 verbose tar unpack /home/lerenzo/.npm/cliff/0.1.8/package.tgz
13277 silly lockFile 1f63151d--lerenzo-npm-cliff-0-1-8-package tar:///home/lerenzo/.npm/cliff/0.1.8/package
13278 verbose lock tar:///home/lerenzo/.npm/cliff/0.1.8/package /home/lerenzo/.npm/1f63151d--lerenzo-npm-cliff-0-1-8-package.lock
13279 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13280 verbose lock tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz /home/lerenzo/.npm/72524f61-enzo-npm-cliff-0-1-8-package-tgz.lock
13281 silly gunzTarPerm modes [ '755', '644' ]
13282 silly gunzTarPerm extractEntry package.json
13283 silly gunzTarPerm extractEntry .npmignore
13284 silly gunzTarPerm extractEntry README.md
13285 silly gunzTarPerm extractEntry LICENSE
13286 silly gunzTarPerm extractEntry assets/inspect.png
13287 silly gunzTarPerm extractEntry assets/put-object-rows.png
13288 silly gunzTarPerm extractEntry assets/put-object.png
13289 silly gunzTarPerm extractEntry assets/put-rows-colors.png
13290 silly gunzTarPerm extractEntry assets/put-rows.png
13291 silly gunzTarPerm extractEntry assets/string-object-rows.png
13292 silly gunzTarPerm extractEntry assets/string-rows.png
13293 silly gunzTarPerm extractEntry examples/inspect.js
13294 silly gunzTarPerm extractEntry examples/put-object-rows.js
13295 silly gunzTarPerm extractEntry examples/put-object.js
13296 silly gunzTarPerm extractEntry examples/put-rows-colors.js
13297 silly gunzTarPerm extractEntry examples/put-rows.js
13298 silly gunzTarPerm extractEntry examples/string-object-rows.js
13299 silly gunzTarPerm extractEntry examples/string-rows.js
13300 silly gunzTarPerm extractEntry lib/cliff.js
13301 silly gunzTarPerm extractEntry test/cliff-test.js
13302 silly lockFile 1f63151d--lerenzo-npm-cliff-0-1-8-package tar:///home/lerenzo/.npm/cliff/0.1.8/package
13303 silly lockFile 1f63151d--lerenzo-npm-cliff-0-1-8-package tar:///home/lerenzo/.npm/cliff/0.1.8/package
13304 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13305 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13306 verbose chmod /home/lerenzo/.npm/cliff/0.1.8/package.tgz 644
13307 verbose chown /home/lerenzo/.npm/cliff/0.1.8/package.tgz [ 1000, 1000 ]
13308 silly lockFile 3fad3ff6--npmjs-org-cliff-cliff-0-1-8-tgz https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz
13309 silly lockFile 3fad3ff6--npmjs-org-cliff-cliff-0-1-8-tgz https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz
13310 silly lockFile a0c35da7-cliff-0-1-8 cliff@0.1.8
13311 silly lockFile a0c35da7-cliff-0-1-8 cliff@0.1.8
13312 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz
13313 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13314 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package /home/lerenzo/.npm/23d037ee-34607-0-6586046773009002-package.lock
13315 silly lockFile 5516149b-34607-0-6586046773009002-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz
13316 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz /home/lerenzo/.npm/5516149b-34607-0-6586046773009002-tmp-tgz.lock
13317 silly gunzTarPerm modes [ '755', '644' ]
13318 silly gunzTarPerm extractEntry .npmignore
13319 silly gunzTarPerm extractEntry .travis.yml
13320 silly gunzTarPerm extractEntry docs/
13321 silly gunzTarPerm extractEntry docs/transports.md
13322 silly gunzTarPerm extractEntry examples/
13323 silly gunzTarPerm extractEntry examples/couchdb.js
13324 silly gunzTarPerm extractEntry examples/exception.js
13325 silly gunzTarPerm extractEntry examples/raw-mode.js
13326 silly gunzTarPerm extractEntry examples/webhook-post.js
13327 silly gunzTarPerm extractEntry lib/
13328 silly gunzTarPerm extractEntry lib/winston/
13329 silly gunzTarPerm extractEntry lib/winston/common.js
13330 silly gunzTarPerm extractEntry lib/winston/config/
13331 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
13332 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
13333 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
13334 silly gunzTarPerm extractEntry lib/winston/config.js
13335 silly gunzTarPerm extractEntry lib/winston/container.js
13336 silly gunzTarPerm extractEntry lib/winston/exception.js
13337 silly gunzTarPerm extractEntry lib/winston/logger.js
13338 silly gunzTarPerm extractEntry lib/winston/transports/
13339 silly gunzTarPerm extractEntry lib/winston/transports/console.js
13340 silly gunzTarPerm extractEntry lib/winston/transports/file.js
13341 silly gunzTarPerm extractEntry lib/winston/transports/http.js
13342 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
13343 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
13344 silly gunzTarPerm extractEntry lib/winston/transports.js
13345 silly gunzTarPerm extractEntry lib/winston.js
13346 silly gunzTarPerm extractEntry LICENSE
13347 silly gunzTarPerm extractEntry package.json
13348 silly gunzTarPerm extractEntry README.md
13349 silly gunzTarPerm extractEntry test/
13350 silly gunzTarPerm extractEntry test/cli-test.js
13351 silly gunzTarPerm extractEntry test/container-test.js
13352 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
13353 silly gunzTarPerm extractEntry test/exception-test.js
13354 silly gunzTarPerm extractEntry test/fixtures/
13355 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
13356 silly gunzTarPerm extractEntry test/fixtures/keys/
13357 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
13358 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
13359 silly gunzTarPerm extractEntry test/fixtures/logs/
13360 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
13361 silly gunzTarPerm extractEntry test/fixtures/scripts/
13362 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
13363 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
13364 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
13365 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
13366 silly gunzTarPerm extractEntry test/helpers.js
13367 silly gunzTarPerm extractEntry test/log-exception-test.js
13368 silly gunzTarPerm extractEntry test/log-rewriter-test.js
13369 silly gunzTarPerm extractEntry test/logger-test.js
13370 silly gunzTarPerm extractEntry test/transports/
13371 silly gunzTarPerm extractEntry test/transports/console-test.js
13372 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
13373 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
13374 silly gunzTarPerm extractEntry test/transports/file-test.js
13375 silly gunzTarPerm extractEntry test/transports/transport.js
13376 silly gunzTarPerm extractEntry test/transports/webhook-test.js
13377 silly gunzTarPerm extractEntry test/winston-test.js
13378 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13379 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13380 silly lockFile 5516149b-34607-0-6586046773009002-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz
13381 silly lockFile 5516149b-34607-0-6586046773009002-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/tmp.tgz
13382 verbose tar pack [ '/home/lerenzo/.npm/winston/0.6.2/package.tgz',
13382 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package' ]
13383 verbose tarball /home/lerenzo/.npm/winston/0.6.2/package.tgz
13384 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13385 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13386 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package /home/lerenzo/.npm/23d037ee-34607-0-6586046773009002-package.lock
13387 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13388 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13389 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13390 silly lockFile 23d037ee-34607-0-6586046773009002-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572334607-0.6586046773009002/package
13391 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13392 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13393 silly lockFile 538d6706-erenzo-npm-winston-0-6-2-package /home/lerenzo/.npm/winston/0.6.2/package
13394 verbose lock /home/lerenzo/.npm/winston/0.6.2/package /home/lerenzo/.npm/538d6706-erenzo-npm-winston-0-6-2-package.lock
13395 silly lockFile 538d6706-erenzo-npm-winston-0-6-2-package /home/lerenzo/.npm/winston/0.6.2/package
13396 silly lockFile 538d6706-erenzo-npm-winston-0-6-2-package /home/lerenzo/.npm/winston/0.6.2/package
13397 verbose tar unpack /home/lerenzo/.npm/winston/0.6.2/package.tgz
13398 silly lockFile f51e2f1e-erenzo-npm-winston-0-6-2-package tar:///home/lerenzo/.npm/winston/0.6.2/package
13399 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package /home/lerenzo/.npm/f51e2f1e-erenzo-npm-winston-0-6-2-package.lock
13400 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13401 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13402 silly gunzTarPerm modes [ '755', '644' ]
13403 silly gunzTarPerm extractEntry package.json
13404 silly gunzTarPerm extractEntry .npmignore
13405 silly gunzTarPerm extractEntry README.md
13406 silly gunzTarPerm extractEntry LICENSE
13407 silly gunzTarPerm extractEntry .travis.yml
13408 silly gunzTarPerm extractEntry docs/transports.md
13409 silly gunzTarPerm extractEntry examples/couchdb.js
13410 silly gunzTarPerm extractEntry examples/exception.js
13411 silly gunzTarPerm extractEntry examples/raw-mode.js
13412 silly gunzTarPerm extractEntry examples/webhook-post.js
13413 silly gunzTarPerm extractEntry lib/winston.js
13414 silly gunzTarPerm extractEntry lib/winston/common.js
13415 silly gunzTarPerm extractEntry lib/winston/config.js
13416 silly gunzTarPerm extractEntry lib/winston/container.js
13417 silly gunzTarPerm extractEntry lib/winston/exception.js
13418 silly gunzTarPerm extractEntry lib/winston/logger.js
13419 silly gunzTarPerm extractEntry lib/winston/transports.js
13420 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
13421 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
13422 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
13423 silly gunzTarPerm extractEntry lib/winston/transports/console.js
13424 silly gunzTarPerm extractEntry lib/winston/transports/file.js
13425 silly gunzTarPerm extractEntry lib/winston/transports/http.js
13426 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
13427 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
13428 silly gunzTarPerm extractEntry test/cli-test.js
13429 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
13430 silly gunzTarPerm extractEntry test/exception-test.js
13431 silly gunzTarPerm extractEntry test/logger-test.js
13432 silly gunzTarPerm extractEntry test/container-test.js
13433 silly gunzTarPerm extractEntry test/log-exception-test.js
13434 silly gunzTarPerm extractEntry test/log-rewriter-test.js
13435 silly gunzTarPerm extractEntry test/winston-test.js
13436 silly gunzTarPerm extractEntry test/helpers.js
13437 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
13438 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
13439 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
13440 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
13441 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
13442 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
13443 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
13444 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
13445 silly gunzTarPerm extractEntry test/transports/console-test.js
13446 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
13447 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
13448 silly gunzTarPerm extractEntry test/transports/file-test.js
13449 silly gunzTarPerm extractEntry test/transports/transport.js
13450 silly gunzTarPerm extractEntry test/transports/webhook-test.js
13451 silly lockFile f51e2f1e-erenzo-npm-winston-0-6-2-package tar:///home/lerenzo/.npm/winston/0.6.2/package
13452 silly lockFile f51e2f1e-erenzo-npm-winston-0-6-2-package tar:///home/lerenzo/.npm/winston/0.6.2/package
13453 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13454 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13455 verbose chmod /home/lerenzo/.npm/winston/0.6.2/package.tgz 644
13456 verbose chown /home/lerenzo/.npm/winston/0.6.2/package.tgz [ 1000, 1000 ]
13457 silly lockFile 65b3e88d-js-org-winston-winston-0-6-2-tgz https://registry.npmjs.org/winston/-/winston-0.6.2.tgz
13458 silly lockFile 65b3e88d-js-org-winston-winston-0-6-2-tgz https://registry.npmjs.org/winston/-/winston-0.6.2.tgz
13459 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
13460 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
13461 silly resolved [ { name: 'nconf',
13461 silly resolved     description: 'Hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.',
13461 silly resolved     version: '0.6.7',
13461 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13461 silly resolved     maintainers: [ [Object] ],
13461 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/nconf.git' },
13461 silly resolved     keywords: [ 'configuration', 'key value store', 'plugabble' ],
13461 silly resolved     dependencies:
13461 silly resolved      { async: '0.1.x',
13461 silly resolved        ini: '1.x.x',
13461 silly resolved        optimist: '0.3.x',
13461 silly resolved        pkginfo: '0.2.x' },
13461 silly resolved     devDependencies: { vows: '0.6.x' },
13461 silly resolved     main: './lib/nconf',
13461 silly resolved     scripts: { test: 'vows test/*-test.js test/**/*-test.js --spec' },
13461 silly resolved     engines: { node: '>= 0.4.0' },
13461 silly resolved     readme: '# nconf [![Build Status](https://secure.travis-ci.org/flatiron/nconf.png)](http://travis-ci.org/flatiron/nconf)\n\nHierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.\n\n## Example\nUsing nconf is easy; it is designed to be a simple key-value store with support for both local and remote storage. Keys are namespaced and delimited by `:`. Lets dive right into sample usage:\n\n``` js\n  var fs    = require(\'fs\'),\n      nconf = require(\'nconf\');\n\n  //\n  // Setup nconf to use (in-order):\n  //   1. Command-line arguments\n  //   2. Environment variables\n  //   3. A file located at \'path/to/config.json\'\n  //\n  nconf.argv()\n       .env()\n       .file({ file: \'path/to/config.json\' });\n\n  //\n  // Set a few variables on `nconf`.\n  //\n  nconf.set(\'database:host\', \'127.0.0.1\');\n  nconf.set(\'database:port\', 5984);\n\n  //\n  // Get the entire database object from nconf. This will output\n  // { host: \'127.0.0.1\', port: 5984 }\n  //\n  console.log(\'foo: \' + nconf.get(\'foo\'));\n  console.log(\'NODE_ENV: \' + nconf.get(\'NODE_ENV\'));\n  console.log(\'database: \' + nconf.get(\'database\'));\n\n  //\n  // Save the configuration object to disk\n  //\n  nconf.save(function (err) {\n    fs.readFile(\'path/to/your/config.json\', function (err, data) {\n      console.dir(JSON.parse(data.toString()))\n    });\n  });\n```\n\nIf you run the above script:\n\n``` bash\n  $ NODE_ENV=production sample.js --foo bar\n```\n\nThe output will be:\n\n```\n  foo: bar\n  NODE_ENV: production\n  database: { host: \'127.0.0.1\', port: 5984 }\n```\n\n## Hierarchical configuration\n\nConfiguration management can get complicated very quickly for even trivial applications running in production. `nconf` addresses this problem by enabling you to setup a hierarchy for different sources of configuration with no defaults. **The order in which you attach these configuration sources determines their priority in the hierarchy.** Lets take a look at the options available to you\n\n  1. **nconf.argv(options)** Loads `process.argv` using optimist. If `options` is supplied it is passed along to optimist.\n  2. **nconf.env(options)** Loads `process.env` into the hierarchy.\n  3. **nconf.file(options)** Loads the configuration data at options.file into the hierarchy.\n  4. **nconf.defaults(options)** Loads the data in options.store into the hierarchy.\n  5. **nconf.overrides(options)** Loads the data in options.store into the hierarchy.\n\nA sane default for this could be:\n\n``` js\n  var nconf = require(\'nconf\');\n\n  //\n  // 1. any overrides\n  //\n  nconf.overrides({\n    \'always\': \'be this value\'\n  });\n\n  //\n  // 2. `process.env`\n  // 3. `process.argv`\n  //\n  nconf.env().argv();\n\n  //\n  // 4. Values in `config.json`\n  //\n  nconf.file(\'/path/to/config.json\');\n\n  //\n  // Or with a custom name\n  //\n  nconf.file(\'custom\', \'/path/to/config.json\');\n\n  //\n  // Or searching from a base directory.\n  // Note: `name` is optional.\n  //\n  nconf.file(name, {\n    file: \'config.json\',\n    dir: \'search/from/here\',\n    search: true\n  });\n\n  //\n  // 5. Any default values\n  //\n  nconf.defaults({\n    \'if nothing else\': \'use this value\'\n  });\n```\n\n## API Documentation\n\nThe top-level of `nconf` is an instance of the `nconf.Provider` abstracts this all for you into a simple API.\n\n### nconf.add(name, options)\nAdds a new store with the specified `name` and `options`. If `options.type` is not set, then `name` will be used instead:\n\n``` js\n  nconf.add(\'user\', { type: \'file\', file: \'/path/to/userconf.json\' });\n  nconf.add(\'global\', { type: \'file\', file: \'/path/to/globalconf.json\' });\n```\n\n### nconf.use(name, options)\nSimilar to `nconf.add`, except that it can replace an existing store if new options are provided\n\n``` js\n  //\n  // Load a file store onto nconf with the specified settings\n  //\n  nconf.use(\'file\', { file: \'/path/to/some/config-file.json\' });\n\n  //\n  // Replace the file store with new settings\n  //\n  nconf.use(\'file\', { file: \'path/to/a-new/config-file.json\' });\n```\n\n### nconf.remove(name)\nRemoves the store with the specified `name.` The configuration stored at that level will no longer be used for lookup(s).\n\n``` js\n  nconf.remove(\'file\');\n```\n\n## Storage Engines\n\n### Memory\nA simple in-memory storage engine that stores a nested JSON representation of the configuration. To use this engine, just call `.use()` with the appropriate arguments. All calls to `.get()`, `.set()`, `.clear()`, `.reset()` methods are synchronous since we are only dealing with an in-memory object.\n\n``` js\n  nconf.use(\'memory\');\n```\n\n### Argv\nResponsible for loading the values parsed from `process.argv` by `optimist` into the configuration hierarchy. See the [optimist option docs](https://github.com/substack/node-optimist/#optionskey-opt) for more on the option format.\n\n``` js\n  //\n  // Can optionally also be an object literal to pass to `optimist`.\n  //\n  nconf.argv({\n    "x": {\n      alias: \'example\',\n      describe: \'Example description for usage generation\',\n      demand: true,\n      default: \'some-value\'\n    }\n  });\n```\n\n### Env\nResponsible for loading the values parsed from `process.env` into the configuration hierarchy.\n\n``` js\n  //\n  // Can optionally also be an Array of values to limit process.env to.\n  //\n  nconf.env([\'only\', \'load\', \'these\', \'values\', \'from\', \'process.env\']);\n\n  //\n  // Can also specify a separator for nested keys (instead of the default \':\')\n  //\n  nconf.env(\'__\');\n  // Get the value of the env variable \'database__host\'\n  var dbHost = nconf.get(\'database:host\');\n\n  //\n  // Or use both options\n  //\n  nconf.env({\n    separator: \'__\',\n    whitelist: [\'database__host\', \'only\', \'load\', \'these\', \'values\']\n  });\n  var dbHost = nconf.get(\'database:host\');\n```\n\n### Literal\nLoads a given object literal into the configuration hierarchy. Both `nconf.defaults()` and `nconf.overrides()` use the Literal store.\n\n``` js\n  nconf.defaults({\n    \'some\': \'default value\'\n  });\n```\n\n### File\nBased on the Memory store, but provides additional methods `.save()` and `.load()` which allow you to read your configuration to and from file. As with the Memory store, all method calls are synchronous with the exception of `.save()` and `.load()` which take callback functions. It is important to note that setting keys in the File engine will not be persisted to disk until a call to `.save()` is made.\n\n``` js\n  nconf.file(\'path/to/your/config.json\');\n  // add multiple files, hierarchically. notice the unique key for each file\n  nconf.file(\'user\', \'path/to/your/user.json\');\n  nconf.file(\'global\', \'path/to/your/global.json\');\n```\n\nThe file store is also extensible for multiple file formats, defaulting to `JSON`. To use a custom format, simply pass a format object to the `.use()` method. This object must have `.parse()` and `.stringify()` methods just like the native `JSON` object.\n\n### Redis\nThere is a separate Redis-based store available through [nconf-redis][0]. To install and use this store simply:\n\n``` bash\n  $ npm install nconf\n  $ npm install nconf-redis\n```\n\nOnce installing both `nconf` and `nconf-redis`, you must require both modules to use the Redis store:\n\n``` js\n  var nconf = require(\'nconf\');\n\n  //\n  // Requiring `nconf-redis` will extend the `nconf`\n  // module.\n  //\n  require(\'nconf-redis\');\n\n  nconf.use(\'redis\', { host: \'localhost\', port: 6379, ttl: 60 * 60 * 1000 });\n```\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing nconf\n```\n  [sudo] npm install nconf\n```\n\n## More Documentation\nThere is more documentation available through docco. I haven\'t gotten around to making a gh-pages branch so in the meantime if you clone the repository you can view the docs:\n\n```\n  open docs/nconf.html\n```\n\n## Run Tests\nTests are written in vows and give complete coverage of all APIs and storage engines.\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)\n#### License: MIT\n\n[0]: http://github.com/indexzero/nconf-redis\n',
13461 silly resolved     readmeFilename: 'README.md',
13461 silly resolved     bugs: { url: 'https://github.com/flatiron/nconf/issues' },
13461 silly resolved     homepage: 'https://github.com/flatiron/nconf',
13461 silly resolved     _id: 'nconf@0.6.7',
13461 silly resolved     dist: { shasum: '135a71f2e4b89acbb82faba7e440194ac100ff6d' },
13461 silly resolved     _from: 'nconf@0.6.7',
13461 silly resolved     _resolved: 'https://registry.npmjs.org/nconf/-/nconf-0.6.7.tgz' },
13461 silly resolved   { name: 'utile',
13461 silly resolved     description: 'A drop-in replacement for `util` with some additional advantageous functions',
13461 silly resolved     version: '0.1.7',
13461 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13461 silly resolved     maintainers: [ [Object] ],
13461 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/utile.git' },
13461 silly resolved     dependencies:
13461 silly resolved      { async: '0.1.x',
13461 silly resolved        'deep-equal': '*',
13461 silly resolved        i: '0.3.x',
13461 silly resolved        mkdirp: '0.x.x',
13461 silly resolved        ncp: '0.2.x',
13461 silly resolved        rimraf: '1.x.x' },
13461 silly resolved     devDependencies: { vows: '0.6.x' },
13461 silly resolved     scripts: { test: 'vows --spec' },
13461 silly resolved     main: './lib/index',
13461 silly resolved     engines: { node: '>= 0.6.4' },
13461 silly resolved     readme: '# utile [![Build Status](https://secure.travis-ci.org/flatiron/utile.png)](http://travis-ci.org/flatiron/utile)\n\nA drop-in replacement for `util` with some additional advantageous functions\n\n## Motivation\nJavascript is definitely a "batteries not included language" when compared to languages like Ruby or Python. Node.js has a simple utility library which exposes some basic (but important) functionality:\n\n```\n$ node\n> var util = require(\'util\');\n> util.\n(...)\n\nutil.debug                 util.error                 util.exec                  util.inherits              util.inspect\nutil.log                   util.p                     util.print                 util.pump                  util.puts\n```\n\nWhen one considers their own utility library, why ever bother requiring `util` again? That is the approach taken by this module. To compare:\n\n```\n$ node\n> var utile = require(\'./lib\')\n> utile.\n(...)\n\nutile.async                 utile.capitalize            utile.clone                 utile.cpr                   utile.createPath            utile.debug\nutile.each                  utile.error                 utile.exec                  utile.file                  utile.filter                utile.find\nutile.inherits              utile.log                   utile.mixin                 utile.mkdirp                utile.p                     utile.path\nutile.print                 utile.pump                  utile.puts                  utile.randomString          utile.requireDir            uile.requireDirLazy\nutile.rimraf\n```\n\nAs you can see all of the original methods from `util` are there, but there are several new methods specific to `utile`. A note about implementation: _no node.js native modules are modified by utile, it simply copies those methods._\n\n## Methods\nThe `utile` modules exposes some simple utility methods:\n\n* `.each(obj, iterator)`: Iterate over the keys of an object.\n* `.mixin(target [source0, source1, ...])`: Copies enumerable properties from `source0 ... sourceN` onto `target` and returns the resulting object.\n* `.clone(obj)`: Shallow clones the specified object.\n* `.capitalize(str)`: Capitalizes the specified `str`.\n* `.randomString(length)`: randomString returns a pseudo-random ASCII string (subset) the return value is a string of length ⌈bits/6⌉ of characters from the base64 alphabet.\n* `.filter(obj, test)`: return an object with the properties that `test` returns true on.\n* `.args(arguments)`: Converts function arguments into actual array with special `callback`, `cb`, `array`, and `last` properties. Also supports *optional* argument contracts. See [the example](https://github.com/flatiron/utile/blob/master/examples/utile-args.js) for more details.\n* `.requireDir(directory)`: Requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values being return values of `require(filename)`.\n* `.requireDirLazy(directory)`: Lazily requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values (getters) being return values of `require(filename)`.\n* `.format([string] text, [array] formats, [array] replacements)`: Replace `formats` in `text` with `replacements`. This will fall back to the original `util.format` command if it is called improperly.\n\n## Packaged Dependencies\nIn addition to the methods that are built-in, utile includes a number of commonly used dependencies to reduce the number of includes in your package.json. These modules _are not eagerly loaded to be respectful of startup time,_ but instead are lazy-loaded getters on the `utile` object\n\n* `.async`: [Async utilities for node and the browser][0]\n* `.inflect`: [Customizable inflections for node.js][6]\n* `.mkdirp`: [Recursively mkdir, like mkdir -p, but in node.js][1]\n* `.rimraf`: [A rm -rf util for nodejs][2]\n* `.cpr`: [Asynchronous recursive file copying with Node.js][3]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing utile\n```\n  [sudo] npm install utile\n```\n\n## Tests\nAll tests are written with [vows][4] and should be run with [npm][5]:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Nodejitsu Inc.](http://www.nodejitsu.com)\n#### Contributors: [Charlie Robbins](http://github.com/indexzero), [Dominic Tarr](http://github.com/dominictarr)\n#### License: MIT\n\n[0]: https://github.com/caolan/async\n[1]: https://github.com/substack/node-mkdirp\n[2]: https://github.com/isaacs/rimraf\n[3]: https://github.com/avianflu/ncp\n[4]: https://vowsjs.org\n[5]: https://npmjs.org\n[6]: https://github.com/pksunkara/inflect\n',
13461 silly resolved     readmeFilename: 'README.md',
13461 silly resolved     bugs: { url: 'https://github.com/flatiron/utile/issues' },
13461 silly resolved     homepage: 'https://github.com/flatiron/utile',
13461 silly resolved     _id: 'utile@0.1.7',
13461 silly resolved     dist: { shasum: 'ce188b03f743b578b5f2da08bdd4275e4ee697d1' },
13461 silly resolved     _from: 'utile@0.1.x',
13461 silly resolved     _resolved: 'https://registry.npmjs.org/utile/-/utile-0.1.7.tgz' },
13461 silly resolved   { name: 'eventemitter2',
13461 silly resolved     version: '0.4.11',
13461 silly resolved     description: 'A Node.js event emitter implementation with namespaces, wildcards, TTL and browser support.',
13461 silly resolved     keywords: [ 'event', 'events', 'emitter', 'eventemitter' ],
13461 silly resolved     author: { name: 'hij1nx', email: 'hij1nx@nodejitsu.com' },
13461 silly resolved     maintainers: [ [Object], [Object] ],
13461 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object] ],
13461 silly resolved     licenses: [ [Object] ],
13461 silly resolved     homepage: 'https://github.com/hij1nx/EventEmitter2',
13461 silly resolved     repositories: [ [Object] ],
13461 silly resolved     devDependencies: { nodeunit: '*', benchmark: '>= 0.2.2' },
13461 silly resolved     engines: [ 'node' ],
13461 silly resolved     main: './lib/eventemitter2.js',
13461 silly resolved     scripts:
13461 silly resolved      { test: 'nodeunit test/simple/* && nodeunit test/wildcardEvents/*',
13461 silly resolved        benchmark: 'node test/perf/benchmark.js' },
13461 silly resolved     readme: '# EventEmitter2\n\nEventEmitter2 is a an implementation of the EventEmitter found in Node.js\n\n## Features\n\n - Namespaces/Wildcards.\n - Times To Listen (TTL), extends the `once` concept with `many`.\n - Browser environment compatibility.\n - Demonstrates good performance in benchmarks\n\n```\nEventEmitterHeatUp x 3,728,965 ops/sec \\302\\2610.68% (60 runs sampled)\nEventEmitter x 2,822,904 ops/sec \\302\\2610.74% (63 runs sampled)\nEventEmitter2 x 7,251,227 ops/sec \\302\\2610.55% (58 runs sampled)\nEventEmitter2 (wild) x 3,220,268 ops/sec \\302\\2610.44% (65 runs sampled)\nFastest is EventEmitter2\n```\n\n## Differences (Non breaking, compatible with existing EventEmitter)\n\n - The constructor takes a configuration object.\n \n```javascript\n    var EventEmitter2 = require(\'eventemitter2\').EventEmitter2;\n    var server = new EventEmitter2({\n      wildcard: true, // should the event emitter use wildcards.\n      delimiter: \'::\', // the delimiter used to segment namespaces, defaults to `.`.\n      newListener: false, // if you want to emit the newListener event set to true.\n      maxListeners: 20, // the max number of listeners that can be assigned to an event, defaults to 10.\n    });\n```\n\n - Getting the actual event that fired.\n\n```javascript\n    server.on(\'foo.*\', function(value1, value2) {\n      console.log(this.event, value1, value2);\n    });\n```\n\n - Fire an event N times and then remove it, an extension of the `once` concept.\n\n```javascript\n    server.many(\'foo\', 4, function() {\n      console.log(\'hello\');\n    });\n```\n\n - Pass in a namespaced event as an array rather than a delimited string.\n\n```javascript\n    server.many([\'foo\', \'bar\', \'bazz\'], function() {\n      console.log(\'hello\');\n    });\n```\n\n\n## API\n\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `error` event. Error events are treated as a special case.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n\nAll EventEmitters emit the event `newListener` when new listeners are\nadded.\n\n\n**Namespaces** with **Wildcards**\nTo use namespaces/wildcards, pass the `wildcard` option into the EventEmitter constructor.\nWhen namespaces/wildcards are enabled, events can either be strings (`foo.bar`) separated\nby a delimiter or arrays (`[\'foo\', \'bar\']`). The delimiter is also configurable as a \nconstructor option.\n\nAn event name passed to any event emitter method can contain a wild card (the `*` character).\nIf the event name is a string, a wildcard may appear as `foo.*`. If the event name is an array, \nthe wildcard may appear as `[\'foo\', \'*\']`.\n\nIf either of the above described events were passed to the `on` method, subsequent emits such \nas the following would be observed...\n\n```javascript\n   emitter.emit(\'foo.bazz\');\n   emitter.emit([\'foo\', \'bar\']);\n```\n\n\n#### emitter.addListener(event, listener)\n#### emitter.on(event, listener)\n\nAdds a listener to the end of the listeners array for the specified event.\n\n```javascript\n    server.on(\'data\', function(value1, value2, value3 /* accepts any number of expected values... */) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n```javascript\n    server.on(\'data\', function(value) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n#### emitter.onAny(listener)\n\nAdds a listener that will be fired when any event is emitted.\n\n```javascript\n    server.onAny(function(value) {\n      console.log(\'All events trigger this.\');\n    });\n```\n\n#### emitter.offAny(listener)\n\nRemoves the listener that will be fired when any event is emitted.\n\n```javascript\n    server.offAny(function(value) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n#### emitter.once(event, listener)\n\nAdds a **one time** listener for the event. The listener is invoked only the first time the event is fired, after which it is removed.\n\n```javascript\n    server.once(\'get\', function (value) {\n      console.log(\'Ah, we have our first value!\');\n    });\n```\n\n#### emitter.many(event, timesToListen, listener)\n\nAdds a listener that will execute **n times** for the event before being removed. The listener is invoked only the first time the event is fired, after which it is removed.\n\n```javascript\n    server.many(\'get\', 4, function (value) {\n      console.log(\'This event will be listened to exactly four times.\');\n    });\n```\n\n\n#### emitter.removeListener(event, listener)\n#### emitter.off(event, listener)\n\nRemove a listener from the listener array for the specified event. **Caution**: changes array indices in the listener array behind the listener.\n\n```javascript\n    var callback = function(value) {\n      console.log(\'someone connected!\');\n    };\n    server.on(\'get\', callback);\n    // ...\n    server.removeListener(\'get\', callback);\n```\n\n\n#### emitter.removeAllListeners([event])\n\nRemoves all listeners, or those of the specified event.\n\n\n#### emitter.setMaxListeners(n)\n\nBy default EventEmitters will print a warning if more than 10 listeners are added to it. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.\n\n\n#### emitter.listeners(event)\n\nReturns an array of listeners for the specified event. This array can be manipulated, e.g. to remove listeners.\n\n```javascript\n    server.on(\'get\', function(value) {\n      console.log(\'someone connected!\');\n    });\n    console.log(console.log(server.listeners(\'get\')); // [ [Function] ]\n```\n\n#### emitter.listenersAny()\n\nReturns an array of listeners that are listening for any event that is specified. This array can be manipulated, e.g. to remove listeners.\n\n```javascript\n    server.onAny(function(value) {\n      console.log(\'someone connected!\');\n    });\n    console.log(console.log(server.listenersAny()[0]); // [ [Function] ] // someone connected!\n```\n\n#### emitter.emit(event, [arg1], [arg2], [...])\n\nExecute each of the listeners that may be listening for the specified event name in order with the list of arguments.\n\n## Test coverage\n\nThere is a test suite that tries to cover each use case, it can be found <a href="https://github.com/hij1nx/EventEmitter2/tree/master/test">here</a>.\n\n## Licence\n\n(The MIT License)\n\nCopyright (c) 2011 hij1nx <http://www.twitter.com/hij1nx>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \'Software\'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
13461 silly resolved     readmeFilename: 'README.md',
13461 silly resolved     repository:
13461 silly resolved      { type: 'git',
13461 silly resolved        url: 'git://github.com/hij1nx/EventEmitter2.git' },
13461 silly resolved     bugs: { url: 'https://github.com/hij1nx/EventEmitter2/issues' },
13461 silly resolved     _id: 'eventemitter2@0.4.11',
13461 silly resolved     dist: { shasum: 'ebc8c06f39794f4e3305b0206e00f395aa7196b2' },
13461 silly resolved     _from: 'eventemitter2@0.4.11',
13461 silly resolved     _resolved: 'https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.11.tgz' },
13461 silly resolved   { name: 'cliff',
13461 silly resolved     description: 'Your CLI formatting friend.',
13461 silly resolved     version: '0.1.8',
13461 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13461 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/cliff.git' },
13461 silly resolved     maintainers: [ [Object] ],
13461 silly resolved     keywords: [ 'cli', 'logging', 'tools', 'winston' ],
13461 silly resolved     dependencies: { colors: '0.x.x', eyes: '0.1.x', winston: '0.6.x' },
13461 silly resolved     devDependencies: { vows: '0.5.x' },
13461 silly resolved     main: './lib/cliff',
13461 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
13461 silly resolved     engines: { node: '>= 0.4.0' },
13461 silly resolved     readme: '# cliff\n\nCLI output formatting tools: "Your CLI Formatting Friend".\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing cliff\n```\n  [sudo] npm install cliff\n```\n\n## Usage\nThere are a number of methods available in Cliff for common logging tasks in command-line tools. If you\'re looking for more usage, checkout the [examples in this repository][3]:\n\n1. Logging rows of data\n2. Inspecting Objects\n\n### Logging rows of data\n\n**cliff.stringifyRows(rows[, colors])**\n\nTakes a set of Arrays and row headers and returns properly formatted and padded rows. Here\'s a sample:\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  var rows = [\n    [\'Name\',  \'Flavor\',    \'Dessert\'],\n    [\'Alice\', \'cherry\',    \'yogurt\'],\n    [\'Bob\',   \'carmel\',    \'apples\'],\n    [\'Joe\',   \'chocolate\', \'cake\'],\n    [\'Nick\',  \'vanilla\',   \'ice cream\']\n  ];\n\n  console.log(cliff.stringifyRows(rows, [\'red\', \'blue\', \'green\']));\n```\n\n![output from string-rows.js][string-rows]\n\n**cliff.putRows(level, rows[, colors])**\n\nThe `putRows` method is a simple helper that takes a set of Arrays and row headers and logs properly formatted and padded rows (logs `stringifyRows` to [winston][0]). Here\'s a quick sample:\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  var rows = [\n    [\'Name\',  \'Flavor\',    \'Dessert\'],\n    [\'Alice\', \'cherry\',    \'yogurt\'],\n    [\'Bob\',   \'carmel\',    \'apples\'],\n    [\'Joe\',   \'chocolate\', \'cake\'],\n    [\'Nick\',  \'vanilla\',   \'ice cream\']\n  ];\n\n  cliff.putRows(\'data\', rows, [\'red\', \'blue\', \'green\']);\n```\n\nThe resulting output on the command-line would be:\n\n![output from put-rows.js][put-rows]\n\n**cliff.stringifyObjectRows(objs, properties[, colors])**\n*used to be: cliff.rowifyObjects(objs, properties, colors)*\n\nTakes a set of Objects and the properties to extract from them and returns properly formatted and padded rows. Here\'s a sample:\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  var objs = [], obj = {\n    name: "bazz",\n    address: "1234 Nowhere Dr.",\n  };\n\n  for (var i = 0; i < 10; i++) {\n    objs.push({\n      name: obj.name,\n      address: obj.address,\n      id: Math.random().toString()\n    });\n  }\n\n  console.log(cliff.stringifyObjectRows(objs, [\'id\', \'name\', \'address\'], [\'red\', \'blue\', \'green\']));\n```\n\n![output from string-object-rows.js][string-object-rows]\n\n**cliff.putObjectRows(level, objs, properties[, colors])**\n\nTakes a set of Objects and the properties to extract from them and it will log to the console. (it prints `stringifyObjectRows` with [winston][0]). Here\'s a sample:\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  var objs = [], obj = {\n    name: "bazz",\n    address: "1234 Nowhere Dr.",\n  };\n\n  for (var i = 0; i < 10; i++) {\n    objs.push({\n      name: obj.name,\n      address: obj.address,\n      id: Math.random().toString()\n    });\n  }\n\n  cliff.putObjectRows(\'data\', objs, [\'id\', \'name\', \'address\']);\n```\n\n![output from string-object-rows.js][string-object-rows]\n\n**Colors Parameter**\n\nThe `colors` parameter is an array that colors the first row. It uses the [colors.js][2]. You can use any of those.\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  var rows = [\n    [\'Name\',        \'Flavor\',              \'Dessert\'],\n    [\'Alice\'.grey,  \'cherry\'.cyan,         \'yogurt\'.yellow],\n    [\'Bob\'.magenta, \'carmel\'.rainbow,      \'apples\'.white],\n    [\'Joe\'.italic,  \'chocolate\'.underline, \'cake\'.inverse],\n    [\'Nick\'.bold,   \'vanilla\',             \'ice cream\']\n  ];\n\n  cliff.putRows(\'data\', rows, [\'red\', \'blue\', \'green\']);\n```\n\nThe resulting output on the command-line would be:\n\n![output from puts-rows-colors.js][put-rows-colors]\n\n### Inspecting Objects\n\n**cliff.inspect(obj)**\n\nThe `inspect` method is a lightweight wrapper to a pre-configured [eyes][1] inspector. If you wish to change the coloring of objects that are logged using `cliff` you only need to override `cliff.inspect` with a new [eyes][1] inspector. Here is how to use it:\n\n``` js\n  var cliff = require(\'../lib/cliff\');\n\n  console.log(cliff.inspect({\n    literal: "bazz",\n    arr: [\n      "one",\n      2,\n    ],\n    obj: {\n      host: "localhost",\n      port: 5984,\n      auth: {\n        username: "admin",\n        password: "password"\n      }\n    }\n  }));\n```\n\n![output from inspect.js][inspect]\n\n**cliff.putObject(obj, [rewriters, padding])**\n\nThe `putObject` method is a simple helper function for prefixing and styling inspected object output from [eyes][1]. Here\'s a quick sample:\n\n``` js\nvar cliff = require(\'cliff\');\n\ncliff.putObject({\n  literal: "bazz",\n  arr: [\n    "one",\n    2,\n  ],\n  obj: {\n    host: "localhost",\n    port: 5984,\n    auth: {\n      username: "admin",\n      password: "password"\n    }\n  }\n});\n```\n\nThe resulting output on the command-line would be: \n\n![output from put-object.js][put-object]\n\n## Run Tests\n\nAll of the cliff tests are written in [vows][4], and cover all of the use cases described above.\n\n```\n  npm test\n```\n\n## Motivation\n\nCliff is the swiss army knife of CLI formatting tools. It is based on highly flexible and powerful libraries: \n\n* [winston][0]: A multi-transport async logging library for node.js\n* [eyes][1]: A customizable value inspector for node.js\n* [colors][2]: Get colors in your node.js console like what \n\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n\n[0]: http://github.com/indexzero/winston\n[1]: http://github.com/cloudhead/eyes.js\n[2]: http://github.com/marak/colors.js\n[3]: http://github.com/flatiron/cliff/tree/master/examples\n[4]: http://vowsjs.org\n\n[inspect]: https://github.com/flatiron/cliff/raw/master/assets/inspect.png\n[put-object-rows]: https://github.com/flatiron/cliff/raw/master/assets/put-object-rows.png\n[put-object]: https://github.com/flatiron/cliff/raw/master/assets/put-object.png\n[put-rows-colors]: https://github.com/flatiron/cliff/raw/master/assets/put-rows-colors.png\n[put-rows]: https://github.com/flatiron/cliff/raw/master/assets/put-rows.png\n[string-object-rows]: https://github.com/flatiron/cliff/raw/master/assets/string-object-rows.png\n[string-rows]: https://github.com/flatiron/cliff/raw/master/assets/string-rows.png',
13461 silly resolved     readmeFilename: 'README.md',
13461 silly resolved     bugs: { url: 'https://github.com/flatiron/cliff/issues' },
13461 silly resolved     homepage: 'https://github.com/flatiron/cliff',
13461 silly resolved     _id: 'cliff@0.1.8',
13461 silly resolved     dist: { shasum: '50020da881b8d69f79e23599e22ccf604be27e72' },
13461 silly resolved     _from: 'cliff@0.1.8',
13461 silly resolved     _resolved: 'https://registry.npmjs.org/cliff/-/cliff-0.1.8.tgz' },
13461 silly resolved   { name: 'winston',
13461 silly resolved     description: 'A multi-transport async logging library for Node.js',
13461 silly resolved     version: '0.6.2',
13461 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13461 silly resolved     maintainers: [ [Object] ],
13461 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
13461 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
13461 silly resolved     dependencies:
13461 silly resolved      { async: '0.1.x',
13461 silly resolved        colors: '0.x.x',
13461 silly resolved        cycle: '1.0.x',
13461 silly resolved        eyes: '0.1.x',
13461 silly resolved        pkginfo: '0.2.x',
13461 silly resolved        request: '2.9.x',
13461 silly resolved        'stack-trace': '0.0.x' },
13461 silly resolved     devDependencies: { vows: '0.6.x' },
13461 silly resolved     main: './lib/winston',
13461 silly resolved     scripts: { test: 'vows --spec --isolate' },
13461 silly resolved     engines: { node: '>= 0.4.0' },
13461 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n  * [Adding Custom Transports](#adding-custom-transports)\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documenation about working with each individual transport supported by Winston see the "Working with Transports" section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n',
13461 silly resolved     readmeFilename: 'README.md',
13461 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
13461 silly resolved     homepage: 'https://github.com/flatiron/winston',
13461 silly resolved     _id: 'winston@0.6.2',
13461 silly resolved     dist: { shasum: '890ccc2716ba8d1e24b2401bacf0e9645249ee10' },
13461 silly resolved     _from: 'winston@0.6.2',
13461 silly resolved     _resolved: 'https://registry.npmjs.org/winston/-/winston-0.6.2.tgz' } ]
13462 info install nconf@0.6.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
13463 info install utile@0.1.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
13464 info install eventemitter2@0.4.11 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
13465 info install cliff@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
13466 info install winston@0.6.2 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway
13467 info installOne nconf@0.6.7
13468 info installOne utile@0.1.7
13469 info installOne eventemitter2@0.4.11
13470 info installOne cliff@0.1.8
13471 info installOne winston@0.6.2
13472 silly lockFile e1f74e0f-winston-0-6-x winston@0.6.x
13473 silly lockFile e1f74e0f-winston-0-6-x winston@0.6.x
13474 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf unbuild
13475 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/utile unbuild
13476 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2 unbuild
13477 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff unbuild
13478 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston unbuild
13479 silly resolved [ { name: 'eyes',
13479 silly resolved     description: 'a customizable value inspector',
13479 silly resolved     url: 'http://github.com/cloudhead/eyes.js',
13479 silly resolved     keywords: [ 'inspector', 'debug', 'inspect', 'print' ],
13479 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
13479 silly resolved     contributors: [ [Object] ],
13479 silly resolved     licenses: [ 'MIT' ],
13479 silly resolved     main: './lib/eyes',
13479 silly resolved     version: '0.1.8',
13479 silly resolved     scripts: { test: 'node test/*-test.js' },
13479 silly resolved     directories: { lib: './lib', test: './test' },
13479 silly resolved     engines: { node: '> 0.1.90' },
13479 silly resolved     readme: 'eyes\n====\n\na customizable value inspector for Node.js\n\nsynopsis\n--------\n\nI was tired of looking at cluttered output in the console -- something needed to be done,\n`sys.inspect()` didn\'t display regexps correctly, and was too verbose, and I had an hour or two to spare. \nSo I decided to have some fun. _eyes_ were born.\n\n![eyes-ss](http://dl.dropbox.com/u/251849/eyes-js-ss.gif)\n\n_example of the output of a user-customized eyes.js inspector_\n\n*eyes* also deals with circular objects in an intelligent way, and can pretty-print object literals.\n\nusage\n-----\n\n    var inspect = require(\'eyes\').inspector({styles: {all: \'magenta\'}});\n\n    inspect(something); // inspect with the settings passed to `inspector`\n\nor\n\n    var eyes = require(\'eyes\');\n\n    eyes.inspect(something); // inspect with the default settings\n\nyou can pass a _label_ to `inspect()`, to keep track of your inspections:\n\n    eyes.inspect(something, "a random value");\n\nIf you want to return the output of eyes without printing it, you can set it up this way:\n\n    var inspect = require(\'eyes\').inspector({ stream: null });\n\n    sys.puts(inspect({ something: 42 }));\n\ncustomization\n-------------\n\nThese are the default styles and settings used by _eyes_.\n\n    styles: {                 // Styles applied to stdout\n        all:     \'cyan\',      // Overall style applied to everything\n        label:   \'underline\', // Inspection labels, like \'array\' in `array: [1, 2, 3]`\n        other:   \'inverted\',  // Objects which don\'t have a literal representation, such as functions\n        key:     \'bold\',      // The keys in object literals, like \'a\' in `{a: 1}`\n        special: \'grey\',      // null, undefined...\n        string:  \'green\',\n        number:  \'magenta\',\n        bool:    \'blue\',      // true false\n        regexp:  \'green\',     // /\\d+/\n    },\n    \n    pretty: true,             // Indent object literals\n    hideFunctions: false,     // Don\'t output functions at all\n    stream: process.stdout,   // Stream to write to, or null\n    maxLength: 2048           // Truncate output if longer\n\nYou can overwrite them with your own, by passing a similar object to `inspector()` or `inspect()`.\n\n    var inspect = require(\'eyes\').inspector({\n        styles: {\n            all: \'magenta\',\n            special: \'bold\'\n        },\n        maxLength: 512\n    });\n\n',
13479 silly resolved     readmeFilename: 'README.md',
13479 silly resolved     _id: 'eyes@0.1.8',
13479 silly resolved     dist: { shasum: 'ac1caf2ee18750246460c884201bd1b9d5c3d4c2' },
13479 silly resolved     _from: 'eyes@0.1.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz' },
13479 silly resolved   { name: 'resolve',
13479 silly resolved     description: 'A more hookable require.resolve() implementation',
13479 silly resolved     version: '0.2.8',
13479 silly resolved     repository:
13479 silly resolved      { type: 'git',
13479 silly resolved        url: 'git://github.com/substack/node-resolve.git' },
13479 silly resolved     main: 'index.js',
13479 silly resolved     keywords: [ 'resolve', 'require', 'node', 'module' ],
13479 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
13479 silly resolved     scripts: { test: 'tap test/*.js' },
13479 silly resolved     dependencies: {},
13479 silly resolved     devDependencies: { tap: '~0.2.4' },
13479 silly resolved     engines: { node: '>=0.4.0' },
13479 silly resolved     license: 'MIT',
13479 silly resolved     author:
13479 silly resolved      { name: 'James Halliday',
13479 silly resolved        email: 'mail@substack.net',
13479 silly resolved        url: 'http://substack.net' },
13479 silly resolved     readme: 'resolve\n=======\n\nImplements the [node `require.resolve()`\nalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\nexcept you can pass in the file to compute paths relatively to along with your\nown `require.paths` without updating the global copy (which doesn\'t even work in\nnode `>=0.5`).\n\n[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\n\nmethods\n=======\n\nvar resolve = require(\'resolve\');\n\nresolve.sync(pkg, opts)\n-----------------------\n\nSynchronously search for the package/filename string `pkg`\naccording to the [`require.resolve()`\nalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\nfor `X=pkg` and `Y=opts.basedir`.\n\nDefault values for `opts`:\n\n````javascript\n{\n    paths : [],\n    basedir : __dirname,\n    extensions : [ \'.js\' ],\n    readFileSync : fs.readFileSync,\n    isFile : function (file) {\n        return path.existSync(file) && fs.statSync(file).isFile()\n    }\n}\n````\n\nOptionally you can specify a `opts.packageFilter` function to map the contents\nof `JSON.parse()`\'d package.json files.\n\nIf nothing is found, all of the directories in `opts.paths` are searched.\n\nresolve.isCore(pkg)\n-------------------\n\nReturn whether a package is in core.\n',
13479 silly resolved     readmeFilename: 'README.markdown',
13479 silly resolved     bugs: { url: 'https://github.com/substack/node-resolve/issues' },
13479 silly resolved     homepage: 'https://github.com/substack/node-resolve',
13479 silly resolved     _id: 'resolve@0.2.8',
13479 silly resolved     dist: { shasum: '81a6118bc5864619cf51037495b62ac282e03a08' },
13479 silly resolved     _from: 'resolve@0.2.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/resolve/-/resolve-0.2.8.tgz' },
13479 silly resolved   { name: 'read-installed',
13479 silly resolved     description: 'Read all the installed packages in a folder, and return a tree structure with all the data.',
13479 silly resolved     version: '0.0.4',
13479 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/read-installed' },
13479 silly resolved     main: 'read-installed.js',
13479 silly resolved     scripts: { test: 'node test/basic.js' },
13479 silly resolved     dependencies:
13479 silly resolved      { semver: '1.x',
13479 silly resolved        slide: '~1.1.3',
13479 silly resolved        'read-package-json': '0',
13479 silly resolved        'graceful-fs': '~1.1.8',
13479 silly resolved        npmlog: '0' },
13479 silly resolved     optionalDependencies: { 'graceful-fs': '~1.1.8', npmlog: '0' },
13479 silly resolved     author:
13479 silly resolved      { name: 'Isaac Z. Schlueter',
13479 silly resolved        email: 'i@izs.me',
13479 silly resolved        url: 'http://blog.izs.me/' },
13479 silly resolved     readme: '# read-installed\n\nRead all the installed packages in a folder, and return a tree\nstructure with all the data.\n\nnpm uses this.\n\n## Usage\n\n```javascript\nvar readInstalled = require("read-installed")\n// depth is optional, defaults to Infinity\nreadInstalled(folder, depth, function (er, data) {\n  ...\n})\n```\n',
13479 silly resolved     readmeFilename: 'README.md',
13479 silly resolved     bugs: { url: 'https://github.com/isaacs/read-installed/issues' },
13479 silly resolved     homepage: 'https://github.com/isaacs/read-installed',
13479 silly resolved     _id: 'read-installed@0.0.4',
13479 silly resolved     dist: { shasum: 'f0d4c4dfcf35827b3e502b7df5d75de87a1634c8' },
13479 silly resolved     _from: 'read-installed@0.0.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/read-installed/-/read-installed-0.0.4.tgz' },
13479 silly resolved   { name: 'optimist',
13479 silly resolved     version: '0.3.7',
13479 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
13479 silly resolved     main: './index.js',
13479 silly resolved     dependencies: { wordwrap: '~0.0.2' },
13479 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.4.0' },
13479 silly resolved     scripts: { test: 'tap ./test/*.js' },
13479 silly resolved     repository:
13479 silly resolved      { type: 'git',
13479 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
13479 silly resolved     keywords:
13479 silly resolved      [ 'argument',
13479 silly resolved        'args',
13479 silly resolved        'option',
13479 silly resolved        'parser',
13479 silly resolved        'parsing',
13479 silly resolved        'cli',
13479 silly resolved        'command' ],
13479 silly resolved     author:
13479 silly resolved      { name: 'James Halliday',
13479 silly resolved        email: 'mail@substack.net',
13479 silly resolved        url: 'http://substack.net' },
13479 silly resolved     license: 'MIT/X11',
13479 silly resolved     engine: { node: '>=0.4' },
13479 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
13479 silly resolved     readmeFilename: 'readme.markdown',
13479 silly resolved     bugs: { url: 'https://github.com/substack/node-optimist/issues' },
13479 silly resolved     homepage: 'https://github.com/substack/node-optimist',
13479 silly resolved     _id: 'optimist@0.3.7',
13479 silly resolved     dist: { shasum: '7d81beab6d12166f10b84401fac2ff919fbd0ae2' },
13479 silly resolved     _from: 'optimist@0.3.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz' },
13479 silly resolved   { name: 'detective',
13479 silly resolved     description: 'Find all calls to require() no matter how crazily nested using a proper walk of the AST',
13479 silly resolved     version: '0.0.4',
13479 silly resolved     repository:
13479 silly resolved      { type: 'git',
13479 silly resolved        url: 'git://github.com/substack/node-detective.git' },
13479 silly resolved     main: 'index.js',
13479 silly resolved     keywords: [ 'require', 'source', 'analyze', 'ast' ],
13479 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
13479 silly resolved     scripts: { test: 'expresso' },
13479 silly resolved     dependencies: { burrito: '0.2.x' },
13479 silly resolved     devDependencies: { expresso: '=0.7.x' },
13479 silly resolved     engines: { node: '>=0.4.0' },
13479 silly resolved     license: 'MIT',
13479 silly resolved     author:
13479 silly resolved      { name: 'James Halliday',
13479 silly resolved        email: 'mail@substack.net',
13479 silly resolved        url: 'http://substack.net' },
13479 silly resolved     readme: 'detective\n=========\n\nFind all calls to require() no matter how crazily nested using a proper walk of\nthe AST.\n\nexample\n=======\n\nstrings\n-------\n\nstrings_src.js:\n\n````javascript\nvar a = require(\'a\');\nvar b = require(\'b\');\nvar c = require(\'c\');\n````\n\nstrings.js:\n\n````javascript\nvar detective = require(\'detective\');\nvar fs = require(\'fs\');\n\nvar src = fs.readFileSync(__dirname + \'/strings_src.js\');\nvar requires = detective(src);\nconsole.dir(requires);\n````\n\noutput:\n\n    $ node examples/strings.js\n    [ \'a\', \'b\', \'c\' ]\n\nmethods\n=======\n\nvar detective = require(\'detective\');\n\ndetective(src, opts)\n--------------------\n\nGive some source body `src`, return an array of all the require()s with string\narguments.\n\nThe options parameter `opts` is passed along to `detective.find()`.\n\ndetective.find(src, opts)\n-------------------------\n\nGive some source body `src`, return an object with "strings" and "expressions"\narrays for each of the require() calls.\n\nThe "expressions" array will contain the stringified expressions.\n\nOptionally you can specify a different function besides `"require"` to analyze\nwith `opts.word`.\n\ninstallation\n============\n\n    npm install detective\n',
13479 silly resolved     readmeFilename: 'README.markdown',
13479 silly resolved     bugs: { url: 'https://github.com/substack/node-detective/issues' },
13479 silly resolved     homepage: 'https://github.com/substack/node-detective',
13479 silly resolved     _id: 'detective@0.0.4',
13479 silly resolved     dist: { shasum: '04f7c2681cb1e55118eab7fffdcaa32067ebb4a2' },
13479 silly resolved     _from: 'detective@0.0.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/detective/-/detective-0.0.4.tgz' },
13479 silly resolved   { name: 'winston',
13479 silly resolved     description: 'A multi-transport async logging library for Node.js',
13479 silly resolved     version: '0.6.2',
13479 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13479 silly resolved     maintainers: [ [Object] ],
13479 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
13479 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
13479 silly resolved     dependencies:
13479 silly resolved      { async: '0.1.x',
13479 silly resolved        colors: '0.x.x',
13479 silly resolved        cycle: '1.0.x',
13479 silly resolved        eyes: '0.1.x',
13479 silly resolved        pkginfo: '0.2.x',
13479 silly resolved        request: '2.9.x',
13479 silly resolved        'stack-trace': '0.0.x' },
13479 silly resolved     devDependencies: { vows: '0.6.x' },
13479 silly resolved     main: './lib/winston',
13479 silly resolved     scripts: { test: 'vows --spec --isolate' },
13479 silly resolved     engines: { node: '>= 0.4.0' },
13479 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n  * [Adding Custom Transports](#adding-custom-transports)\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documenation about working with each individual transport supported by Winston see the "Working with Transports" section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n',
13479 silly resolved     readmeFilename: 'README.md',
13479 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
13479 silly resolved     homepage: 'https://github.com/flatiron/winston',
13479 silly resolved     _id: 'winston@0.6.2',
13479 silly resolved     dist: { shasum: '890ccc2716ba8d1e24b2401bacf0e9645249ee10' },
13479 silly resolved     _from: 'winston@0.6.x',
13479 silly resolved     _resolved: 'https://registry.npmjs.org/winston/-/winston-0.6.2.tgz' } ]
13480 info install eyes@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13481 info install resolve@0.2.8 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13482 info install read-installed@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13483 info install optimist@0.3.7 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13484 info install detective@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13485 info install winston@0.6.2 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
13486 info installOne eyes@0.1.8
13487 info installOne resolve@0.2.8
13488 info installOne read-installed@0.0.4
13489 info installOne optimist@0.3.7
13490 info installOne detective@0.0.4
13491 info installOne winston@0.6.2
13492 silly resolved [ { name: 'read',
13492 silly resolved     version: '1.0.5',
13492 silly resolved     main: 'lib/read.js',
13492 silly resolved     dependencies: { 'mute-stream': '~0.0.4' },
13492 silly resolved     devDependencies: { tap: '*' },
13492 silly resolved     engines: { node: '>=0.8' },
13492 silly resolved     author:
13492 silly resolved      { name: 'Isaac Z. Schlueter',
13492 silly resolved        email: 'i@izs.me',
13492 silly resolved        url: 'http://blog.izs.me/' },
13492 silly resolved     description: 'read(1) for node programs',
13492 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/read.git' },
13492 silly resolved     license: 'BSD',
13492 silly resolved     scripts: { test: 'tap test/*.js' },
13492 silly resolved     readme: '## read\n\nFor reading user input from stdin.\n\nSimilar to the `readline` builtin\'s `question()` method, but with a\nfew more features.\n\n## USAGE\n\n```javascript\nvar read = require("read")\nread(options, callback)\n```\n\nThe callback gets called with either the user input, or the default\nspecified, or an error, as `callback(error, result, isDefault)`\nnode style.\n\n## OPTIONS\n\nEvery option is optional.\n\n* `prompt` What to write to stdout before reading input.\n* `silent` Don\'t echo the output as the user types it.\n* `replace` Replace silenced characters with the supplied character value.\n* `timeout` Number of ms to wait for user input before giving up.\n* `default` The default value if the user enters nothing.\n* `edit` Allow the user to edit the default value.\n* `terminal` Treat the output as a TTY, whether it is or not.\n* `input` Readable stream to get input data from. (default `process.stdin`)\n* `output` Writeable stream to write prompts to. (default: `process.stdout`)\n\nIf silent is true, and the input is a TTY, then read will set raw\nmode, and read character by character.\n\n## COMPATIBILITY\n\nThis module works sort of with node 0.6.  It does not work with node\nversions less than 0.6.  It is best on node 0.8.\n\nOn node version 0.6, it will remove all listeners on the input\nstream\'s `data` and `keypress` events, because the readline module did\nnot fully clean up after itself in that version of node, and did not\nmake it possible to clean up after it in a way that has no potential\nfor side effects.\n\nAdditionally, some of the readline options (like `terminal`) will not\nfunction in versions of node before 0.8, because they were not\nimplemented in the builtin readline module.\n\n## CONTRIBUTING\n\nPatches welcome.\n',
13492 silly resolved     readmeFilename: 'README.md',
13492 silly resolved     bugs: { url: 'https://github.com/isaacs/read/issues' },
13492 silly resolved     homepage: 'https://github.com/isaacs/read',
13492 silly resolved     _id: 'read@1.0.5',
13492 silly resolved     dist: { shasum: 'a8e305e7eaf7b2266902bea851da27a2a84a654f' },
13492 silly resolved     _from: 'read@1.0.x',
13492 silly resolved     _resolved: 'https://registry.npmjs.org/read/-/read-1.0.5.tgz' },
13492 silly resolved   { name: 'utile',
13492 silly resolved     description: 'A drop-in replacement for `util` with some additional advantageous functions',
13492 silly resolved     version: '0.2.0',
13492 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13492 silly resolved     maintainers: [ [Object] ],
13492 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/utile.git' },
13492 silly resolved     dependencies:
13492 silly resolved      { async: '0.1.x',
13492 silly resolved        'deep-equal': '*',
13492 silly resolved        i: '0.3.x',
13492 silly resolved        mkdirp: '0.x.x',
13492 silly resolved        ncp: '0.2.x',
13492 silly resolved        rimraf: '2.x.x' },
13492 silly resolved     devDependencies: { vows: '0.6.x' },
13492 silly resolved     scripts: { test: 'vows --spec' },
13492 silly resolved     main: './lib/index',
13492 silly resolved     engines: { node: '>= 0.6.4' },
13492 silly resolved     readme: '# utile [![Build Status](https://secure.travis-ci.org/flatiron/utile.png)](http://travis-ci.org/flatiron/utile)\n\nA drop-in replacement for `util` with some additional advantageous functions\n\n## Motivation\nJavascript is definitely a "batteries not included language" when compared to languages like Ruby or Python. Node.js has a simple utility library which exposes some basic (but important) functionality:\n\n```\n$ node\n> var util = require(\'util\');\n> util.\n(...)\n\nutil.debug                 util.error                 util.exec                  util.inherits              util.inspect\nutil.log                   util.p                     util.print                 util.pump                  util.puts\n```\n\nWhen one considers their own utility library, why ever bother requiring `util` again? That is the approach taken by this module. To compare:\n\n```\n$ node\n> var utile = require(\'./lib\')\n> utile.\n(...)\n\nutile.async                 utile.capitalize            utile.clone                 utile.cpr                   utile.createPath            utile.debug\nutile.each                  utile.error                 utile.exec                  utile.file                  utile.filter                utile.find\nutile.inherits              utile.log                   utile.mixin                 utile.mkdirp                utile.p                     utile.path\nutile.print                 utile.pump                  utile.puts                  utile.randomString          utile.requireDir            uile.requireDirLazy\nutile.rimraf\n```\n\nAs you can see all of the original methods from `util` are there, but there are several new methods specific to `utile`. A note about implementation: _no node.js native modules are modified by utile, it simply copies those methods._\n\n## Methods\nThe `utile` modules exposes some simple utility methods:\n\n* `.each(obj, iterator)`: Iterate over the keys of an object.\n* `.mixin(target [source0, source1, ...])`: Copies enumerable properties from `source0 ... sourceN` onto `target` and returns the resulting object.\n* `.clone(obj)`: Shallow clones the specified object.\n* `.capitalize(str)`: Capitalizes the specified `str`.\n* `.randomString(length)`: randomString returns a pseudo-random ASCII string (subset) the return value is a string of length ⌈bits/6⌉ of characters from the base64 alphabet.\n* `.filter(obj, test)`: return an object with the properties that `test` returns true on.\n* `.args(arguments)`: Converts function arguments into actual array with special `callback`, `cb`, `array`, and `last` properties. Also supports *optional* argument contracts. See [the example](https://github.com/flatiron/utile/blob/master/examples/utile-args.js) for more details.\n* `.requireDir(directory)`: Requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values being return values of `require(filename)`.\n* `.requireDirLazy(directory)`: Lazily requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values (getters) being return values of `require(filename)`.\n* `.format([string] text, [array] formats, [array] replacements)`: Replace `formats` in `text` with `replacements`. This will fall back to the original `util.format` command if it is called improperly.\n\n## Packaged Dependencies\nIn addition to the methods that are built-in, utile includes a number of commonly used dependencies to reduce the number of includes in your package.json. These modules _are not eagerly loaded to be respectful of startup time,_ but instead are lazy-loaded getters on the `utile` object\n\n* `.async`: [Async utilities for node and the browser][0]\n* `.inflect`: [Customizable inflections for node.js][6]\n* `.mkdirp`: [Recursively mkdir, like mkdir -p, but in node.js][1]\n* `.rimraf`: [A rm -rf util for nodejs][2]\n* `.cpr`: [Asynchronous recursive file copying with Node.js][3]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing utile\n```\n  [sudo] npm install utile\n```\n\n## Tests\nAll tests are written with [vows][4] and should be run with [npm][5]:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Nodejitsu Inc.](http://www.nodejitsu.com)\n#### Contributors: [Charlie Robbins](http://github.com/indexzero), [Dominic Tarr](http://github.com/dominictarr)\n#### License: MIT\n\n[0]: https://github.com/caolan/async\n[1]: https://github.com/substack/node-mkdirp\n[2]: https://github.com/isaacs/rimraf\n[3]: https://github.com/avianflu/ncp\n[4]: https://vowsjs.org\n[5]: https://npmjs.org\n[6]: https://github.com/pksunkara/inflect\n',
13492 silly resolved     readmeFilename: 'README.md',
13492 silly resolved     bugs: { url: 'https://github.com/flatiron/utile/issues' },
13492 silly resolved     homepage: 'https://github.com/flatiron/utile',
13492 silly resolved     _id: 'utile@0.2.0',
13492 silly resolved     dist: { shasum: 'b121496b6c5bd396bfa69b51134859e5c577afd6' },
13492 silly resolved     _from: 'utile@0.2.x',
13492 silly resolved     _resolved: 'https://registry.npmjs.org/utile/-/utile-0.2.0.tgz' },
13492 silly resolved   { name: 'revalidator',
13492 silly resolved     version: '0.1.5',
13492 silly resolved     description: 'A cross-browser / node.js validator used by resourceful',
13492 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13492 silly resolved     maintainers: [ [Object], [Object] ],
13492 silly resolved     repository:
13492 silly resolved      { type: 'git',
13492 silly resolved        url: 'http://github.com/flatiron/revalidator.git' },
13492 silly resolved     devDependencies: { vows: '0.6.x' },
13492 silly resolved     main: './lib/revalidator',
13492 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
13492 silly resolved     engines: { node: '>= 0.4.0' },
13492 silly resolved     readme: '# revalidator [![Build Status](https://secure.travis-ci.org/flatiron/revalidator.png)](http://travis-ci.org/flatiron/revalidator)\n\nA cross-browser / node.js validator used by resourceful and flatiron.\n\n## Example\nThe core of `revalidator` is simple and succinct: `revalidator.validate(obj, schema)`: \n \n``` js\n  var revalidator = require(\'revalidator\');\n  \n  console.dir(revalidator.validate(someObject, {\n    properties: {\n      url: {\n        description: \'the url the object should be stored at\',\n        type: \'string\',\n        pattern: \'^/[^#%&*{}\\\\:<>?\\/+]+$\',\n        required: true\n      },\n      challenge: {\n        description: \'a means of protecting data (insufficient for production, used as example)\',\n        type: \'string\',\n        minLength: 5\n      },\n      body: {\n        description: \'what to store at the url\',\n        type: \'any\',\n        default: null\n      }\n    }\n  }));\n```\n\nThis will return with a value indicating if the `obj` conforms to the `schema`. If it does not, a descriptive object will be returned containing the errors encountered with validation.\n\n``` js\n  {\n    valid: true // or false\n    errors: [/* Array of errors if valid is false */]\n  }\n```\n\nIn the browser, the validation function is exposed on `window.validate` by simply including `revalidator.js`.\n\n## Installation\n\n### Installing npm (node package manager)\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing revalidator\n``` bash \n  $ [sudo] npm install revalidator\n```\n\n## Usage\n\n`revalidator` takes json-schema as input to validate objects.\n\n### revalidator.validate (obj, schema, options)\n\nThis will return with a value indicating if the `obj` conforms to the `schema`. If it does not, a descriptive object will be returned containing the errors encountered with validation.\n\n``` js\n{\n  valid: true // or false\n  errors: [/* Array of errors if valid is false */]\n}\n```\n\n#### Available Options\n\n* __validateFormats__: Enforce format constraints (_default true_)\n* __validateFormatsStrict__: When `validateFormats` is _true_ treat unrecognized formats as validation errors (_default false_)\n* __validateFormatExtensions__: When `validateFormats` is _true_ also validate formats defined in `validate.formatExtensions` (_default true_)\n* __cast__: Enforce casting of some types (for integers/numbers are only supported) when it\'s possible, e.g. `"42" => 42`, but `"forty2" => "forty2"` for the `integer` type.\n\n### Schema\nFor a property an `value` is that which is given as input for validation where as an `expected value` is the value of the below fields\n\n#### required\nIf true, the value should not be empty\n\n```js\n{ required: true }\n```\n\n#### type\nThe `type of value` should be equal to the expected value\n\n```js\n{ type: \'string\' }\n{ type: \'number\' }\n{ type: \'integer\' }\n{ type: \'array\' }\n{ type: \'boolean\' }\n{ type: \'object\' }\n{ type: \'null\' }\n{ type: \'any\' }\n{ type: [\'boolean\', \'string\'] }\n```\n\n#### pattern\nThe expected value regex needs to be satisfied by the value\n\n```js\n{ pattern: /^[a-z]+$/ }\n```\n\n#### maxLength\nThe length of value must be greater than or equal to expected value\n\n```js\n{ maxLength: 8 }\n```\n\n#### minLength\nThe length of value must be lesser than or equal to expected value\n\n```js\n{ minLength: 8 }\n```\n\n#### minimum\nValue must be greater than or equal to the expected value\n\n```js\n{ minimum: 10 }\n```\n\n#### maximum\nValue must be lesser than or equal to the expected value\n\n```js\n{ maximum: 10 }\n```\n\n#### exclusiveMinimum\nValue must be greater than expected value\n\n```js\n{ exclusiveMinimum: 9 }\n```\n\n### exclusiveMaximum\nValue must be lesser than expected value\n\n```js\n{ exclusiveMaximum: 11 }\n```\n\n#### divisibleBy\nValue must be divisible by expected value\n\n```js\n{ divisibleBy: 5 }\n{ divisibleBy: 0.5 }\n```\n\n#### minItems\nValue must contain more then expected value number of items\n\n```js\n{ minItems: 2 }\n```\n\n#### maxItems\nValue must contains less then expected value number of items\n\n```js\n{ maxItems: 5 }\n```\n\n#### uniqueItems\nValue must hold a unique set of values\n\n```js\n{ uniqueItems: true }\n```\n\n#### enum\nValue must be present in the array of expected value\n\n```js\n{ enum: [\'month\', \'year\'] }\n```\n\n#### format\nValue must be a valid format\n\n```js\n{ format: \'url\' }\n{ format: \'email\' }\n{ format: \'ip-address\' }\n{ format: \'ipv6\' }\n{ format: \'date-time\' }\n{ format: \'date\' }\n{ format: \'time\' }\n{ format: \'color\' }\n{ format: \'host-name\' }\n{ format: \'utc-millisec\' }\n{ format: \'regex\' }\n```\n\n#### conform\nValue must conform to constraint denoted by expected value\n\n```js\n{ conform: function (v) {\n    if (v%3==1) return true;\n    return false;\n  }\n}\n```\n\n#### dependencies\nValue is valid only if the dependent value is valid\n\n```js\n{\n  town: { required: true, dependencies: \'country\' },\n  country: { maxLength: 3, required: true }\n}\n```\n\n### Nested Schema\nWe also allow nested schema\n\n```js\n{\n  properties: {\n    title: {\n      type: \'string\',\n      maxLength: 140,\n      required: true\n    },\n    author: {\n      type: \'object\',\n      required: true,\n      properties: {\n        name: {\n          type: \'string\',\n          required: true\n        },\n        email: {\n          type: \'string\',\n          format: \'email\'\n        }\n      }\n    }\n  }\n}\n```\n\n### Custom Messages\nWe also allow custom message for different constraints\n\n```js\n{\n  type: \'string\',\n  format: \'url\'\n  messages: {\n    type: \'Not a string type\',\n    format: \'Expected format is a url\'\n  }\n```\n\n```js\n{\n  conform: function () { ... },\n  message: \'This can be used as a global message\'\n}\n```\n\n## Tests\nAll tests are written with [vows][0] and should be run with [npm][1]:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://nodejitsu.com), [Alexis Sellier](http://cloudhead.io)\n#### Contributors: [Fedor Indutny](http://github.com/indutny), [Bradley Meck](http://github.com/bmeck), [Laurie Harper](http://laurie.holoweb.net/)\n#### License: Apache 2.0\n\n[0]: http://vowsjs.org\n[1]: http://npmjs.org\n',
13492 silly resolved     readmeFilename: 'README.md',
13492 silly resolved     bugs: { url: 'https://github.com/flatiron/revalidator/issues' },
13492 silly resolved     homepage: 'https://github.com/flatiron/revalidator',
13492 silly resolved     _id: 'revalidator@0.1.5',
13492 silly resolved     dist: { shasum: 'c198074dbdef1560258da59f02001b9505d602e5' },
13492 silly resolved     _from: 'revalidator@0.1.x',
13492 silly resolved     _resolved: 'https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz' },
13492 silly resolved   { name: 'winston',
13492 silly resolved     description: 'A multi-transport async logging library for Node.js',
13492 silly resolved     version: '0.6.2',
13492 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13492 silly resolved     maintainers: [ [Object] ],
13492 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
13492 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
13492 silly resolved     dependencies:
13492 silly resolved      { async: '0.1.x',
13492 silly resolved        colors: '0.x.x',
13492 silly resolved        cycle: '1.0.x',
13492 silly resolved        eyes: '0.1.x',
13492 silly resolved        pkginfo: '0.2.x',
13492 silly resolved        request: '2.9.x',
13492 silly resolved        'stack-trace': '0.0.x' },
13492 silly resolved     devDependencies: { vows: '0.6.x' },
13492 silly resolved     main: './lib/winston',
13492 silly resolved     scripts: { test: 'vows --spec --isolate' },
13492 silly resolved     engines: { node: '>= 0.4.0' },
13492 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n  * [Adding Custom Transports](#adding-custom-transports)\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documenation about working with each individual transport supported by Winston see the "Working with Transports" section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n',
13492 silly resolved     readmeFilename: 'README.md',
13492 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
13492 silly resolved     homepage: 'https://github.com/flatiron/winston',
13492 silly resolved     _id: 'winston@0.6.2',
13492 silly resolved     dist: { shasum: '890ccc2716ba8d1e24b2401bacf0e9645249ee10' },
13492 silly resolved     _from: 'winston@0.6.x',
13492 silly resolved     _resolved: 'https://registry.npmjs.org/winston/-/winston-0.6.2.tgz' } ]
13493 info install read@1.0.5 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt
13494 info install utile@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt
13495 info install revalidator@0.1.5 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt
13496 info install winston@0.6.2 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt
13497 info installOne read@1.0.5
13498 info installOne utile@0.2.0
13499 info installOne revalidator@0.1.5
13500 info installOne winston@0.6.2
13501 silly resolved [ { name: 'read',
13501 silly resolved     version: '1.0.5',
13501 silly resolved     main: 'lib/read.js',
13501 silly resolved     dependencies: { 'mute-stream': '~0.0.4' },
13501 silly resolved     devDependencies: { tap: '*' },
13501 silly resolved     engines: { node: '>=0.8' },
13501 silly resolved     author:
13501 silly resolved      { name: 'Isaac Z. Schlueter',
13501 silly resolved        email: 'i@izs.me',
13501 silly resolved        url: 'http://blog.izs.me/' },
13501 silly resolved     description: 'read(1) for node programs',
13501 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/read.git' },
13501 silly resolved     license: 'BSD',
13501 silly resolved     scripts: { test: 'tap test/*.js' },
13501 silly resolved     readme: '## read\n\nFor reading user input from stdin.\n\nSimilar to the `readline` builtin\'s `question()` method, but with a\nfew more features.\n\n## USAGE\n\n```javascript\nvar read = require("read")\nread(options, callback)\n```\n\nThe callback gets called with either the user input, or the default\nspecified, or an error, as `callback(error, result, isDefault)`\nnode style.\n\n## OPTIONS\n\nEvery option is optional.\n\n* `prompt` What to write to stdout before reading input.\n* `silent` Don\'t echo the output as the user types it.\n* `replace` Replace silenced characters with the supplied character value.\n* `timeout` Number of ms to wait for user input before giving up.\n* `default` The default value if the user enters nothing.\n* `edit` Allow the user to edit the default value.\n* `terminal` Treat the output as a TTY, whether it is or not.\n* `input` Readable stream to get input data from. (default `process.stdin`)\n* `output` Writeable stream to write prompts to. (default: `process.stdout`)\n\nIf silent is true, and the input is a TTY, then read will set raw\nmode, and read character by character.\n\n## COMPATIBILITY\n\nThis module works sort of with node 0.6.  It does not work with node\nversions less than 0.6.  It is best on node 0.8.\n\nOn node version 0.6, it will remove all listeners on the input\nstream\'s `data` and `keypress` events, because the readline module did\nnot fully clean up after itself in that version of node, and did not\nmake it possible to clean up after it in a way that has no potential\nfor side effects.\n\nAdditionally, some of the readline options (like `terminal`) will not\nfunction in versions of node before 0.8, because they were not\nimplemented in the builtin readline module.\n\n## CONTRIBUTING\n\nPatches welcome.\n',
13501 silly resolved     readmeFilename: 'README.md',
13501 silly resolved     bugs: { url: 'https://github.com/isaacs/read/issues' },
13501 silly resolved     homepage: 'https://github.com/isaacs/read',
13501 silly resolved     _id: 'read@1.0.5',
13501 silly resolved     dist: { shasum: 'a8e305e7eaf7b2266902bea851da27a2a84a654f' },
13501 silly resolved     _from: 'read@1.0.x',
13501 silly resolved     _resolved: 'https://registry.npmjs.org/read/-/read-1.0.5.tgz' },
13501 silly resolved   { name: 'utile',
13501 silly resolved     description: 'A drop-in replacement for `util` with some additional advantageous functions',
13501 silly resolved     version: '0.1.7',
13501 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13501 silly resolved     maintainers: [ [Object] ],
13501 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/utile.git' },
13501 silly resolved     dependencies:
13501 silly resolved      { async: '0.1.x',
13501 silly resolved        'deep-equal': '*',
13501 silly resolved        i: '0.3.x',
13501 silly resolved        mkdirp: '0.x.x',
13501 silly resolved        ncp: '0.2.x',
13501 silly resolved        rimraf: '1.x.x' },
13501 silly resolved     devDependencies: { vows: '0.6.x' },
13501 silly resolved     scripts: { test: 'vows --spec' },
13501 silly resolved     main: './lib/index',
13501 silly resolved     engines: { node: '>= 0.6.4' },
13501 silly resolved     readme: '# utile [![Build Status](https://secure.travis-ci.org/flatiron/utile.png)](http://travis-ci.org/flatiron/utile)\n\nA drop-in replacement for `util` with some additional advantageous functions\n\n## Motivation\nJavascript is definitely a "batteries not included language" when compared to languages like Ruby or Python. Node.js has a simple utility library which exposes some basic (but important) functionality:\n\n```\n$ node\n> var util = require(\'util\');\n> util.\n(...)\n\nutil.debug                 util.error                 util.exec                  util.inherits              util.inspect\nutil.log                   util.p                     util.print                 util.pump                  util.puts\n```\n\nWhen one considers their own utility library, why ever bother requiring `util` again? That is the approach taken by this module. To compare:\n\n```\n$ node\n> var utile = require(\'./lib\')\n> utile.\n(...)\n\nutile.async                 utile.capitalize            utile.clone                 utile.cpr                   utile.createPath            utile.debug\nutile.each                  utile.error                 utile.exec                  utile.file                  utile.filter                utile.find\nutile.inherits              utile.log                   utile.mixin                 utile.mkdirp                utile.p                     utile.path\nutile.print                 utile.pump                  utile.puts                  utile.randomString          utile.requireDir            uile.requireDirLazy\nutile.rimraf\n```\n\nAs you can see all of the original methods from `util` are there, but there are several new methods specific to `utile`. A note about implementation: _no node.js native modules are modified by utile, it simply copies those methods._\n\n## Methods\nThe `utile` modules exposes some simple utility methods:\n\n* `.each(obj, iterator)`: Iterate over the keys of an object.\n* `.mixin(target [source0, source1, ...])`: Copies enumerable properties from `source0 ... sourceN` onto `target` and returns the resulting object.\n* `.clone(obj)`: Shallow clones the specified object.\n* `.capitalize(str)`: Capitalizes the specified `str`.\n* `.randomString(length)`: randomString returns a pseudo-random ASCII string (subset) the return value is a string of length ⌈bits/6⌉ of characters from the base64 alphabet.\n* `.filter(obj, test)`: return an object with the properties that `test` returns true on.\n* `.args(arguments)`: Converts function arguments into actual array with special `callback`, `cb`, `array`, and `last` properties. Also supports *optional* argument contracts. See [the example](https://github.com/flatiron/utile/blob/master/examples/utile-args.js) for more details.\n* `.requireDir(directory)`: Requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values being return values of `require(filename)`.\n* `.requireDirLazy(directory)`: Lazily requires all files and directories from `directory`, returning an object with keys being filenames (without trailing `.js`) and respective values (getters) being return values of `require(filename)`.\n* `.format([string] text, [array] formats, [array] replacements)`: Replace `formats` in `text` with `replacements`. This will fall back to the original `util.format` command if it is called improperly.\n\n## Packaged Dependencies\nIn addition to the methods that are built-in, utile includes a number of commonly used dependencies to reduce the number of includes in your package.json. These modules _are not eagerly loaded to be respectful of startup time,_ but instead are lazy-loaded getters on the `utile` object\n\n* `.async`: [Async utilities for node and the browser][0]\n* `.inflect`: [Customizable inflections for node.js][6]\n* `.mkdirp`: [Recursively mkdir, like mkdir -p, but in node.js][1]\n* `.rimraf`: [A rm -rf util for nodejs][2]\n* `.cpr`: [Asynchronous recursive file copying with Node.js][3]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing utile\n```\n  [sudo] npm install utile\n```\n\n## Tests\nAll tests are written with [vows][4] and should be run with [npm][5]:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Nodejitsu Inc.](http://www.nodejitsu.com)\n#### Contributors: [Charlie Robbins](http://github.com/indexzero), [Dominic Tarr](http://github.com/dominictarr)\n#### License: MIT\n\n[0]: https://github.com/caolan/async\n[1]: https://github.com/substack/node-mkdirp\n[2]: https://github.com/isaacs/rimraf\n[3]: https://github.com/avianflu/ncp\n[4]: https://vowsjs.org\n[5]: https://npmjs.org\n[6]: https://github.com/pksunkara/inflect\n',
13501 silly resolved     readmeFilename: 'README.md',
13501 silly resolved     bugs: { url: 'https://github.com/flatiron/utile/issues' },
13501 silly resolved     homepage: 'https://github.com/flatiron/utile',
13501 silly resolved     _id: 'utile@0.1.7',
13501 silly resolved     dist: { shasum: 'ce188b03f743b578b5f2da08bdd4275e4ee697d1' },
13501 silly resolved     _from: 'utile@0.1.x',
13501 silly resolved     _resolved: 'https://registry.npmjs.org/utile/-/utile-0.1.7.tgz' },
13501 silly resolved   { name: 'revalidator',
13501 silly resolved     version: '0.1.5',
13501 silly resolved     description: 'A cross-browser / node.js validator used by resourceful',
13501 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13501 silly resolved     maintainers: [ [Object], [Object] ],
13501 silly resolved     repository:
13501 silly resolved      { type: 'git',
13501 silly resolved        url: 'http://github.com/flatiron/revalidator.git' },
13501 silly resolved     devDependencies: { vows: '0.6.x' },
13501 silly resolved     main: './lib/revalidator',
13501 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
13501 silly resolved     engines: { node: '>= 0.4.0' },
13501 silly resolved     readme: '# revalidator [![Build Status](https://secure.travis-ci.org/flatiron/revalidator.png)](http://travis-ci.org/flatiron/revalidator)\n\nA cross-browser / node.js validator used by resourceful and flatiron.\n\n## Example\nThe core of `revalidator` is simple and succinct: `revalidator.validate(obj, schema)`: \n \n``` js\n  var revalidator = require(\'revalidator\');\n  \n  console.dir(revalidator.validate(someObject, {\n    properties: {\n      url: {\n        description: \'the url the object should be stored at\',\n        type: \'string\',\n        pattern: \'^/[^#%&*{}\\\\:<>?\\/+]+$\',\n        required: true\n      },\n      challenge: {\n        description: \'a means of protecting data (insufficient for production, used as example)\',\n        type: \'string\',\n        minLength: 5\n      },\n      body: {\n        description: \'what to store at the url\',\n        type: \'any\',\n        default: null\n      }\n    }\n  }));\n```\n\nThis will return with a value indicating if the `obj` conforms to the `schema`. If it does not, a descriptive object will be returned containing the errors encountered with validation.\n\n``` js\n  {\n    valid: true // or false\n    errors: [/* Array of errors if valid is false */]\n  }\n```\n\nIn the browser, the validation function is exposed on `window.validate` by simply including `revalidator.js`.\n\n## Installation\n\n### Installing npm (node package manager)\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing revalidator\n``` bash \n  $ [sudo] npm install revalidator\n```\n\n## Usage\n\n`revalidator` takes json-schema as input to validate objects.\n\n### revalidator.validate (obj, schema, options)\n\nThis will return with a value indicating if the `obj` conforms to the `schema`. If it does not, a descriptive object will be returned containing the errors encountered with validation.\n\n``` js\n{\n  valid: true // or false\n  errors: [/* Array of errors if valid is false */]\n}\n```\n\n#### Available Options\n\n* __validateFormats__: Enforce format constraints (_default true_)\n* __validateFormatsStrict__: When `validateFormats` is _true_ treat unrecognized formats as validation errors (_default false_)\n* __validateFormatExtensions__: When `validateFormats` is _true_ also validate formats defined in `validate.formatExtensions` (_default true_)\n* __cast__: Enforce casting of some types (for integers/numbers are only supported) when it\'s possible, e.g. `"42" => 42`, but `"forty2" => "forty2"` for the `integer` type.\n\n### Schema\nFor a property an `value` is that which is given as input for validation where as an `expected value` is the value of the below fields\n\n#### required\nIf true, the value should not be empty\n\n```js\n{ required: true }\n```\n\n#### type\nThe `type of value` should be equal to the expected value\n\n```js\n{ type: \'string\' }\n{ type: \'number\' }\n{ type: \'integer\' }\n{ type: \'array\' }\n{ type: \'boolean\' }\n{ type: \'object\' }\n{ type: \'null\' }\n{ type: \'any\' }\n{ type: [\'boolean\', \'string\'] }\n```\n\n#### pattern\nThe expected value regex needs to be satisfied by the value\n\n```js\n{ pattern: /^[a-z]+$/ }\n```\n\n#### maxLength\nThe length of value must be greater than or equal to expected value\n\n```js\n{ maxLength: 8 }\n```\n\n#### minLength\nThe length of value must be lesser than or equal to expected value\n\n```js\n{ minLength: 8 }\n```\n\n#### minimum\nValue must be greater than or equal to the expected value\n\n```js\n{ minimum: 10 }\n```\n\n#### maximum\nValue must be lesser than or equal to the expected value\n\n```js\n{ maximum: 10 }\n```\n\n#### exclusiveMinimum\nValue must be greater than expected value\n\n```js\n{ exclusiveMinimum: 9 }\n```\n\n### exclusiveMaximum\nValue must be lesser than expected value\n\n```js\n{ exclusiveMaximum: 11 }\n```\n\n#### divisibleBy\nValue must be divisible by expected value\n\n```js\n{ divisibleBy: 5 }\n{ divisibleBy: 0.5 }\n```\n\n#### minItems\nValue must contain more then expected value number of items\n\n```js\n{ minItems: 2 }\n```\n\n#### maxItems\nValue must contains less then expected value number of items\n\n```js\n{ maxItems: 5 }\n```\n\n#### uniqueItems\nValue must hold a unique set of values\n\n```js\n{ uniqueItems: true }\n```\n\n#### enum\nValue must be present in the array of expected value\n\n```js\n{ enum: [\'month\', \'year\'] }\n```\n\n#### format\nValue must be a valid format\n\n```js\n{ format: \'url\' }\n{ format: \'email\' }\n{ format: \'ip-address\' }\n{ format: \'ipv6\' }\n{ format: \'date-time\' }\n{ format: \'date\' }\n{ format: \'time\' }\n{ format: \'color\' }\n{ format: \'host-name\' }\n{ format: \'utc-millisec\' }\n{ format: \'regex\' }\n```\n\n#### conform\nValue must conform to constraint denoted by expected value\n\n```js\n{ conform: function (v) {\n    if (v%3==1) return true;\n    return false;\n  }\n}\n```\n\n#### dependencies\nValue is valid only if the dependent value is valid\n\n```js\n{\n  town: { required: true, dependencies: \'country\' },\n  country: { maxLength: 3, required: true }\n}\n```\n\n### Nested Schema\nWe also allow nested schema\n\n```js\n{\n  properties: {\n    title: {\n      type: \'string\',\n      maxLength: 140,\n      required: true\n    },\n    author: {\n      type: \'object\',\n      required: true,\n      properties: {\n        name: {\n          type: \'string\',\n          required: true\n        },\n        email: {\n          type: \'string\',\n          format: \'email\'\n        }\n      }\n    }\n  }\n}\n```\n\n### Custom Messages\nWe also allow custom message for different constraints\n\n```js\n{\n  type: \'string\',\n  format: \'url\'\n  messages: {\n    type: \'Not a string type\',\n    format: \'Expected format is a url\'\n  }\n```\n\n```js\n{\n  conform: function () { ... },\n  message: \'This can be used as a global message\'\n}\n```\n\n## Tests\nAll tests are written with [vows][0] and should be run with [npm][1]:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://nodejitsu.com), [Alexis Sellier](http://cloudhead.io)\n#### Contributors: [Fedor Indutny](http://github.com/indutny), [Bradley Meck](http://github.com/bmeck), [Laurie Harper](http://laurie.holoweb.net/)\n#### License: Apache 2.0\n\n[0]: http://vowsjs.org\n[1]: http://npmjs.org\n',
13501 silly resolved     readmeFilename: 'README.md',
13501 silly resolved     bugs: { url: 'https://github.com/flatiron/revalidator/issues' },
13501 silly resolved     homepage: 'https://github.com/flatiron/revalidator',
13501 silly resolved     _id: 'revalidator@0.1.5',
13501 silly resolved     dist: { shasum: 'c198074dbdef1560258da59f02001b9505d602e5' },
13501 silly resolved     _from: 'revalidator@0.1.x',
13501 silly resolved     _resolved: 'https://registry.npmjs.org/revalidator/-/revalidator-0.1.5.tgz' },
13501 silly resolved   { name: 'winston',
13501 silly resolved     description: 'A multi-transport async logging library for Node.js',
13501 silly resolved     version: '0.6.2',
13501 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
13501 silly resolved     maintainers: [ [Object] ],
13501 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
13501 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
13501 silly resolved     dependencies:
13501 silly resolved      { async: '0.1.x',
13501 silly resolved        colors: '0.x.x',
13501 silly resolved        cycle: '1.0.x',
13501 silly resolved        eyes: '0.1.x',
13501 silly resolved        pkginfo: '0.2.x',
13501 silly resolved        request: '2.9.x',
13501 silly resolved        'stack-trace': '0.0.x' },
13501 silly resolved     devDependencies: { vows: '0.6.x' },
13501 silly resolved     main: './lib/winston',
13501 silly resolved     scripts: { test: 'vows --spec --isolate' },
13501 silly resolved     engines: { node: '>= 0.4.0' },
13501 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n  * [Adding Custom Transports](#adding-custom-transports)\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documenation about working with each individual transport supported by Winston see the "Working with Transports" section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n',
13501 silly resolved     readmeFilename: 'README.md',
13501 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
13501 silly resolved     homepage: 'https://github.com/flatiron/winston',
13501 silly resolved     _id: 'winston@0.6.2',
13501 silly resolved     dist: { shasum: '890ccc2716ba8d1e24b2401bacf0e9645249ee10' },
13501 silly resolved     _from: 'winston@0.6.x',
13501 silly resolved     _resolved: 'https://registry.npmjs.org/winston/-/winston-0.6.2.tgz' } ]
13502 info install read@1.0.5 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
13503 info install utile@0.1.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
13504 info install revalidator@0.1.5 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
13505 info install winston@0.6.2 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt
13506 info installOne read@1.0.5
13507 info installOne utile@0.1.7
13508 info installOne revalidator@0.1.5
13509 info installOne winston@0.6.2
13510 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes unbuild
13511 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve unbuild
13512 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed unbuild
13513 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist unbuild
13514 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective unbuild
13515 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston unbuild
13516 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read unbuild
13517 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/utile unbuild
13518 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator unbuild
13519 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston unbuild
13520 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read unbuild
13521 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/utile unbuild
13522 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator unbuild
13523 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston unbuild
13524 verbose tar unpack /home/lerenzo/.npm/nconf/0.6.7/package.tgz
13525 silly lockFile 17f62cd3-ules-broadway-node-modules-nconf tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
13526 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf /home/lerenzo/.npm/17f62cd3-ules-broadway-node-modules-nconf.lock
13527 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
13528 verbose lock tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz /home/lerenzo/.npm/24802201-enzo-npm-nconf-0-6-7-package-tgz.lock
13529 verbose tar unpack /home/lerenzo/.npm/utile/0.1.7/package.tgz
13530 silly lockFile be5d83a9-ules-broadway-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/utile
13531 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/utile /home/lerenzo/.npm/be5d83a9-ules-broadway-node-modules-utile.lock
13532 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
13533 verbose lock tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz /home/lerenzo/.npm/c7efa28b-enzo-npm-utile-0-1-7-package-tgz.lock
13534 verbose tar unpack /home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
13535 silly lockFile 85212e0f-adway-node-modules-eventemitter2 tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2
13536 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2 /home/lerenzo/.npm/85212e0f-adway-node-modules-eventemitter2.lock
13537 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
13538 verbose lock tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz /home/lerenzo/.npm/e7f28c23-eventemitter2-0-4-11-package-tgz.lock
13539 verbose tar unpack /home/lerenzo/.npm/cliff/0.1.8/package.tgz
13540 silly lockFile b9ddf052-ules-broadway-node-modules-cliff tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
13541 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff /home/lerenzo/.npm/b9ddf052-ules-broadway-node-modules-cliff.lock
13542 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
13543 verbose lock tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz /home/lerenzo/.npm/72524f61-enzo-npm-cliff-0-1-8-package-tgz.lock
13544 verbose tar unpack /home/lerenzo/.npm/winston/0.6.2/package.tgz
13545 silly lockFile f6e8ed59-es-broadway-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
13546 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston /home/lerenzo/.npm/f6e8ed59-es-broadway-node-modules-winston.lock
13547 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13548 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13549 verbose tar unpack /home/lerenzo/.npm/eyes/0.1.8/package.tgz
13550 silly lockFile 518c9636-quire-analyzer-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes
13551 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes /home/lerenzo/.npm/518c9636-quire-analyzer-node-modules-eyes.lock
13552 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
13553 verbose lock tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz /home/lerenzo/.npm/b7667f40-renzo-npm-eyes-0-1-8-package-tgz.lock
13554 verbose tar unpack /home/lerenzo/.npm/resolve/0.2.8/package.tgz
13555 silly lockFile 0d5b369a-re-analyzer-node-modules-resolve tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve
13556 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve /home/lerenzo/.npm/0d5b369a-re-analyzer-node-modules-resolve.lock
13557 silly lockFile b94198b5-zo-npm-resolve-0-2-8-package-tgz tar:///home/lerenzo/.npm/resolve/0.2.8/package.tgz
13558 verbose lock tar:///home/lerenzo/.npm/resolve/0.2.8/package.tgz /home/lerenzo/.npm/b94198b5-zo-npm-resolve-0-2-8-package-tgz.lock
13559 verbose tar unpack /home/lerenzo/.npm/read-installed/0.0.4/package.tgz
13560 silly lockFile dece8e3f-yzer-node-modules-read-installed tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
13561 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed /home/lerenzo/.npm/dece8e3f-yzer-node-modules-read-installed.lock
13562 silly lockFile 42312039-read-installed-0-0-4-package-tgz tar:///home/lerenzo/.npm/read-installed/0.0.4/package.tgz
13563 verbose lock tar:///home/lerenzo/.npm/read-installed/0.0.4/package.tgz /home/lerenzo/.npm/42312039-read-installed-0-0-4-package-tgz.lock
13564 verbose tar unpack /home/lerenzo/.npm/optimist/0.3.7/package.tgz
13565 silly lockFile a67c31c5-e-analyzer-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
13566 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist /home/lerenzo/.npm/a67c31c5-e-analyzer-node-modules-optimist.lock
13567 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
13568 verbose lock tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz /home/lerenzo/.npm/88a20e1c-o-npm-optimist-0-3-7-package-tgz.lock
13569 verbose tar unpack /home/lerenzo/.npm/detective/0.0.4/package.tgz
13570 silly lockFile 3b8e738c--analyzer-node-modules-detective tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective
13571 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective /home/lerenzo/.npm/3b8e738c--analyzer-node-modules-detective.lock
13572 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
13573 verbose lock tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz /home/lerenzo/.npm/cea1a593--npm-detective-0-0-4-package-tgz.lock
13574 verbose tar unpack /home/lerenzo/.npm/winston/0.6.2/package.tgz
13575 silly lockFile 14ecb04f-re-analyzer-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
13576 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston /home/lerenzo/.npm/14ecb04f-re-analyzer-node-modules-winston.lock
13577 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13578 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13579 verbose tar unpack /home/lerenzo/.npm/read/1.0.5/package.tgz
13580 silly lockFile 3e3feced-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
13581 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read /home/lerenzo/.npm/3e3feced-modules-prompt-node-modules-read.lock
13582 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
13583 verbose lock tar:///home/lerenzo/.npm/read/1.0.5/package.tgz /home/lerenzo/.npm/ed7a61ef-renzo-npm-read-1-0-5-package-tgz.lock
13584 verbose tar unpack /home/lerenzo/.npm/utile/0.2.0/package.tgz
13585 silly lockFile 4698ca23-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/utile
13586 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/utile /home/lerenzo/.npm/4698ca23-odules-prompt-node-modules-utile.lock
13587 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
13588 verbose lock tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz /home/lerenzo/.npm/22df4238-enzo-npm-utile-0-2-0-package-tgz.lock
13589 verbose tar unpack /home/lerenzo/.npm/revalidator/0.1.5/package.tgz
13590 silly lockFile 3a6ba224--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator
13591 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator /home/lerenzo/.npm/3a6ba224--prompt-node-modules-revalidator.lock
13592 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
13593 verbose lock tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz /home/lerenzo/.npm/6e70a4ef-pm-revalidator-0-1-5-package-tgz.lock
13594 verbose tar unpack /home/lerenzo/.npm/winston/0.6.2/package.tgz
13595 silly lockFile eabf2b83-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
13596 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston /home/lerenzo/.npm/eabf2b83-ules-prompt-node-modules-winston.lock
13597 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13598 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13599 verbose tar unpack /home/lerenzo/.npm/read/1.0.5/package.tgz
13600 silly lockFile 68a7cc2c-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
13601 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read /home/lerenzo/.npm/68a7cc2c-modules-prompt-node-modules-read.lock
13602 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
13603 verbose lock tar:///home/lerenzo/.npm/read/1.0.5/package.tgz /home/lerenzo/.npm/ed7a61ef-renzo-npm-read-1-0-5-package-tgz.lock
13604 verbose tar unpack /home/lerenzo/.npm/utile/0.1.7/package.tgz
13605 silly lockFile c47448f9-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/utile
13606 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/utile /home/lerenzo/.npm/c47448f9-odules-prompt-node-modules-utile.lock
13607 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
13608 verbose lock tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz /home/lerenzo/.npm/c7efa28b-enzo-npm-utile-0-1-7-package-tgz.lock
13609 verbose tar unpack /home/lerenzo/.npm/revalidator/0.1.5/package.tgz
13610 silly lockFile 0a4597c1--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator
13611 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator /home/lerenzo/.npm/0a4597c1--prompt-node-modules-revalidator.lock
13612 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
13613 verbose lock tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz /home/lerenzo/.npm/6e70a4ef-pm-revalidator-0-1-5-package-tgz.lock
13614 verbose tar unpack /home/lerenzo/.npm/winston/0.6.2/package.tgz
13615 silly lockFile dbd652af-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
13616 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston /home/lerenzo/.npm/dbd652af-ules-prompt-node-modules-winston.lock
13617 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
13618 verbose lock tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz /home/lerenzo/.npm/f1cca79d-zo-npm-winston-0-6-2-package-tgz.lock
13619 silly gunzTarPerm modes [ '755', '644' ]
13620 silly gunzTarPerm modes [ '755', '644' ]
13621 silly gunzTarPerm modes [ '755', '644' ]
13622 silly gunzTarPerm modes [ '755', '644' ]
13623 silly gunzTarPerm modes [ '755', '644' ]
13624 silly gunzTarPerm modes [ '755', '644' ]
13625 silly gunzTarPerm modes [ '755', '644' ]
13626 silly gunzTarPerm modes [ '755', '644' ]
13627 silly gunzTarPerm modes [ '755', '644' ]
13628 silly gunzTarPerm modes [ '755', '644' ]
13629 silly gunzTarPerm modes [ '755', '644' ]
13630 silly gunzTarPerm modes [ '755', '644' ]
13631 silly gunzTarPerm modes [ '755', '644' ]
13632 silly gunzTarPerm extractEntry package.json
13633 silly gunzTarPerm extractEntry package.json
13634 silly gunzTarPerm extractEntry package.json
13635 silly gunzTarPerm extractEntry package.json
13636 silly gunzTarPerm extractEntry package.json
13637 silly gunzTarPerm extractEntry package.json
13638 silly gunzTarPerm extractEntry package.json
13639 silly gunzTarPerm extractEntry package.json
13640 silly gunzTarPerm extractEntry package.json
13641 silly gunzTarPerm extractEntry package.json
13642 silly gunzTarPerm extractEntry package.json
13643 silly gunzTarPerm extractEntry .npmignore
13644 silly gunzTarPerm extractEntry README.md
13645 silly gunzTarPerm extractEntry package.json
13646 silly gunzTarPerm extractEntry package.json
13647 silly gunzTarPerm extractEntry .npmignore
13648 silly gunzTarPerm extractEntry README.md
13649 silly gunzTarPerm extractEntry .npmignore
13650 silly gunzTarPerm extractEntry README.md
13651 silly gunzTarPerm extractEntry .npmignore
13652 silly gunzTarPerm extractEntry README.md
13653 silly gunzTarPerm extractEntry .npmignore
13654 silly gunzTarPerm extractEntry README.md
13655 silly gunzTarPerm extractEntry README.md
13656 silly gunzTarPerm extractEntry LICENSE
13657 silly gunzTarPerm extractEntry LICENSE
13658 silly gunzTarPerm extractEntry index.js
13659 silly gunzTarPerm extractEntry README.md
13660 silly gunzTarPerm extractEntry LICENSE
13661 silly gunzTarPerm extractEntry LICENSE
13662 silly gunzTarPerm extractEntry index.js
13663 silly gunzTarPerm extractEntry index.js
13664 silly gunzTarPerm extractEntry README.markdown
13665 silly gunzTarPerm extractEntry .npmignore
13666 silly gunzTarPerm extractEntry README.md
13667 silly gunzTarPerm extractEntry .npmignore
13668 silly gunzTarPerm extractEntry README.md
13669 silly gunzTarPerm extractEntry .npmignore
13670 silly gunzTarPerm extractEntry README.md
13671 silly gunzTarPerm extractEntry LICENSE
13672 silly gunzTarPerm extractEntry usage.js
13673 silly gunzTarPerm extractEntry LICENSE
13674 silly gunzTarPerm extractEntry .travis.yml
13675 silly gunzTarPerm extractEntry LICENSE
13676 silly gunzTarPerm extractEntry assets/inspect.png
13677 silly gunzTarPerm extractEntry LICENSE
13678 silly gunzTarPerm extractEntry Makefile
13679 silly gunzTarPerm extractEntry lib/eyes.js
13680 silly gunzTarPerm extractEntry LICENCE
13681 silly gunzTarPerm extractEntry rs.js
13682 silly gunzTarPerm extractEntry index.js
13683 silly gunzTarPerm extractEntry lib/eventemitter2.js
13684 silly gunzTarPerm extractEntry .travis.yml
13685 silly gunzTarPerm extractEntry README.markdown
13686 silly gunzTarPerm extractEntry .travis.yml
13687 silly gunzTarPerm extractEntry read-installed.js
13688 silly gunzTarPerm extractEntry test/basic.js
13689 silly gunzTarPerm extractEntry example/strings.js
13690 silly gunzTarPerm extractEntry example/strings_src.js
13691 silly gunzTarPerm extractEntry LICENSE
13692 silly gunzTarPerm extractEntry .travis.yml
13693 silly gunzTarPerm extractEntry LICENSE
13694 silly gunzTarPerm extractEntry .travis.yml
13695 silly gunzTarPerm extractEntry CHANGELOG.md
13696 silly gunzTarPerm extractEntry example/webservice.js
13697 silly gunzTarPerm extractEntry lib/revalidator.js
13698 silly gunzTarPerm extractEntry test/validator-test.js
13699 silly gunzTarPerm extractEntry .travis.yml
13700 silly gunzTarPerm extractEntry CHANGELOG.md
13701 silly gunzTarPerm extractEntry docs/docco.css
13702 silly gunzTarPerm extractEntry docs/nconf/common.html
13703 silly gunzTarPerm extractEntry docs/nconf/formats.html
13704 silly gunzTarPerm extractEntry docs/nconf/provider.html
13705 silly gunzTarPerm extractEntry docs/nconf/stores/file.html
13706 silly gunzTarPerm extractEntry docs/nconf/stores/memory.html
13707 silly gunzTarPerm extractEntry docs/nconf/stores/system.html
13708 silly gunzTarPerm extractEntry docs/nconf/stores.html
13709 silly gunzTarPerm extractEntry docs/nconf.html
13710 silly gunzTarPerm extractEntry lib/nconf.js
13711 silly gunzTarPerm extractEntry lib/nconf/common.js
13712 silly gunzTarPerm extractEntry lib/nconf/formats.js
13713 silly gunzTarPerm extractEntry lib/nconf/provider.js
13714 silly gunzTarPerm extractEntry lib/nconf/stores/argv.js
13715 silly gunzTarPerm extractEntry lib/nconf/stores/env.js
13716 silly gunzTarPerm extractEntry lib/nconf/stores/file.js
13717 silly gunzTarPerm extractEntry lib/nconf/stores/literal.js
13718 silly gunzTarPerm extractEntry lib/nconf/stores/memory.js
13719 silly gunzTarPerm extractEntry test/common-test.js
13720 silly gunzTarPerm extractEntry test/complete-test.js
13721 silly gunzTarPerm extractEntry test/helpers.js
13722 silly gunzTarPerm extractEntry test/hierarchy-test.js
13723 silly gunzTarPerm extractEntry test/nconf-test.js
13724 silly gunzTarPerm extractEntry test/provider-save-test.js
13725 silly gunzTarPerm extractEntry test/provider-test.js
13726 silly gunzTarPerm extractEntry test/fixtures/data.js
13727 silly gunzTarPerm extractEntry test/fixtures/complete.json
13728 silly gunzTarPerm extractEntry test/fixtures/hierarchy/global.json
13729 silly gunzTarPerm extractEntry test/fixtures/hierarchy/hierarchical.json
13730 silly gunzTarPerm extractEntry test/fixtures/hierarchy/user.json
13731 silly gunzTarPerm extractEntry test/fixtures/malformed.json
13732 silly gunzTarPerm extractEntry test/fixtures/merge/file1.json
13733 silly gunzTarPerm extractEntry test/fixtures/merge/file2.json
13734 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-argv.js
13735 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-change-argv.js
13736 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-env.js
13737 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-file-argv.js
13738 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-merge.js
13739 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-hierarchical-load-save.js
13740 silly gunzTarPerm extractEntry test/fixtures/scripts/nconf-nested-env.js
13741 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-argv.js
13742 silly gunzTarPerm extractEntry test/fixtures/scripts/provider-env.js
13743 silly gunzTarPerm extractEntry test/mocks/mock-store.js
13744 silly gunzTarPerm extractEntry test/stores/argv-test.js
13745 silly gunzTarPerm extractEntry test/stores/env-test.js
13746 silly gunzTarPerm extractEntry test/stores/file-store-test.js
13747 silly gunzTarPerm extractEntry test/stores/literal-test.js
13748 silly gunzTarPerm extractEntry test/stores/memory-store-test.js
13749 silly gunzTarPerm extractEntry CHANGELOG.md
13750 silly gunzTarPerm extractEntry lib/args.js
13751 silly gunzTarPerm extractEntry assets/put-object-rows.png
13752 silly gunzTarPerm extractEntry .travis.yml
13753 silly gunzTarPerm extractEntry docs/transports.md
13754 silly gunzTarPerm extractEntry example/example.js
13755 silly gunzTarPerm extractEntry lib/read.js
13756 silly gunzTarPerm extractEntry test/common.js
13757 silly gunzTarPerm extractEntry CHANGELOG.md
13758 silly gunzTarPerm extractEntry lib/args.js
13759 silly gunzTarPerm extractEntry test/core.js
13760 silly gunzTarPerm extractEntry test/filter.js
13761 silly gunzTarPerm extractEntry example/bool.js
13762 silly gunzTarPerm extractEntry example/default_singles.js
13763 silly gunzTarPerm extractEntry test/eyes-test.js
13764 silly gunzTarPerm extractEntry test/both.js
13765 silly gunzTarPerm extractEntry test/nested.js
13766 silly gunzTarPerm extractEntry test/basic.js
13767 silly gunzTarPerm extractEntry test/defaults.js
13768 silly gunzTarPerm extractEntry test/strings.js
13769 silly gunzTarPerm extractEntry test/word.js
13770 silly gunzTarPerm extractEntry lib/base64.js
13771 silly gunzTarPerm extractEntry lib/file.js
13772 silly gunzTarPerm extractEntry test/mock.js
13773 silly gunzTarPerm extractEntry test/resolver.js
13774 silly gunzTarPerm extractEntry assets/put-object.png
13775 silly gunzTarPerm extractEntry lib/base64.js
13776 silly gunzTarPerm extractEntry lib/file.js
13777 silly gunzTarPerm extractEntry test/many.js
13778 silly gunzTarPerm extractEntry test/perf/benchmark.js
13779 silly gunzTarPerm extractEntry test/simple/addListener.js
13780 silly gunzTarPerm extractEntry test/files/both.js
13781 silly gunzTarPerm extractEntry test/files/nested.js
13782 silly gunzTarPerm extractEntry test/resolver/foo.js
13783 silly gunzTarPerm extractEntry lib/format.js
13784 silly gunzTarPerm extractEntry assets/put-rows-colors.png
13785 silly gunzTarPerm extractEntry assets/put-rows.png
13786 silly gunzTarPerm extractEntry test/simple/emit.js
13787 silly gunzTarPerm extractEntry test/simple/reconfigure.js
13788 silly gunzTarPerm extractEntry lib/format.js
13789 silly gunzTarPerm extractEntry test/files/strings.js
13790 silly gunzTarPerm extractEntry test/files/word.js
13791 silly gunzTarPerm extractEntry test/resolver/mug.js
13792 silly gunzTarPerm extractEntry test/resolver/bar/node_modules/foo/index.js
13793 silly gunzTarPerm extractEntry lib/index.js
13794 silly gunzTarPerm extractEntry test/file-test.js
13795 silly gunzTarPerm extractEntry lib/index.js
13796 silly gunzTarPerm extractEntry test/file-test.js
13797 silly gunzTarPerm extractEntry example/divide.js
13798 silly gunzTarPerm extractEntry example/line_count.js
13799 silly gunzTarPerm extractEntry test/format-test.js
13800 silly gunzTarPerm extractEntry test/function-args-test.js
13801 silly gunzTarPerm extractEntry test/resolver/baz/package.json
13802 silly gunzTarPerm extractEntry test/resolver/baz/doom.js
13803 silly gunzTarPerm extractEntry test/format-test.js
13804 silly gunzTarPerm extractEntry test/function-args-test.js
13805 silly gunzTarPerm extractEntry example/default_hash.js
13806 silly gunzTarPerm extractEntry example/line_count_wrap.js
13807 silly gunzTarPerm extractEntry test/resolver/baz/quux.js
13808 silly gunzTarPerm extractEntry test/resolver/biz/node_modules/grux/index.js
13809 silly gunzTarPerm extractEntry test/random-string-test.js
13810 silly gunzTarPerm extractEntry test/require-directory-test.js
13811 silly gunzTarPerm extractEntry example/nonopt.js
13812 silly gunzTarPerm extractEntry example/reflect.js
13813 silly lockFile dece8e3f-yzer-node-modules-read-installed tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
13814 silly lockFile dece8e3f-yzer-node-modules-read-installed tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
13815 silly lockFile 42312039-read-installed-0-0-4-package-tgz tar:///home/lerenzo/.npm/read-installed/0.0.4/package.tgz
13816 silly lockFile 42312039-read-installed-0-0-4-package-tgz tar:///home/lerenzo/.npm/read-installed/0.0.4/package.tgz
13817 silly gunzTarPerm extractEntry test/random-string-test.js
13818 silly gunzTarPerm extractEntry test/require-directory-test.js
13819 silly gunzTarPerm extractEntry examples/couchdb.js
13820 silly gunzTarPerm extractEntry examples/exception.js
13821 info preinstall read-installed@0.0.4
13822 silly gunzTarPerm extractEntry test/resolver/biz/node_modules/tiv/index.js
13823 silly gunzTarPerm extractEntry test/resolver/cup.coffee
13824 silly gunzTarPerm extractEntry test/utile-test.js
13825 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
13826 silly gunzTarPerm extractEntry example/short.js
13827 silly gunzTarPerm extractEntry example/string.js
13828 verbose readDependencies using package.json deps
13829 verbose readDependencies using package.json deps
13830 silly gunzTarPerm extractEntry test/utile-test.js
13831 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
13832 verbose cache add [ 'graceful-fs@~1.1.8', null ]
13833 verbose cache add name=undefined spec="graceful-fs@~1.1.8" args=["graceful-fs@~1.1.8",null]
13834 verbose parsed url { protocol: null,
13834 verbose parsed url   slashes: null,
13834 verbose parsed url   auth: null,
13834 verbose parsed url   host: null,
13834 verbose parsed url   port: null,
13834 verbose parsed url   hostname: null,
13834 verbose parsed url   hash: null,
13834 verbose parsed url   search: null,
13834 verbose parsed url   query: null,
13834 verbose parsed url   pathname: 'graceful-fs@~1.1.8',
13834 verbose parsed url   path: 'graceful-fs@~1.1.8',
13834 verbose parsed url   href: 'graceful-fs@~1.1.8' }
13835 verbose cache add name="graceful-fs" spec="~1.1.8" args=["graceful-fs","~1.1.8"]
13836 verbose parsed url { protocol: null,
13836 verbose parsed url   slashes: null,
13836 verbose parsed url   auth: null,
13836 verbose parsed url   host: null,
13836 verbose parsed url   port: null,
13836 verbose parsed url   hostname: null,
13836 verbose parsed url   hash: null,
13836 verbose parsed url   search: null,
13836 verbose parsed url   query: null,
13836 verbose parsed url   pathname: '~1.1.8',
13836 verbose parsed url   path: '~1.1.8',
13836 verbose parsed url   href: '~1.1.8' }
13837 verbose addNamed [ 'graceful-fs', '~1.1.8' ]
13838 verbose addNamed [ null, '>=1.1.8-0 <1.2.0-0' ]
13839 silly lockFile a6fe5834-graceful-fs-1-1-8 graceful-fs@~1.1.8
13840 verbose lock graceful-fs@~1.1.8 /home/lerenzo/.npm/a6fe5834-graceful-fs-1-1-8.lock
13841 verbose cache add [ 'slide@~1.1.3', null ]
13842 verbose cache add name=undefined spec="slide@~1.1.3" args=["slide@~1.1.3",null]
13843 verbose parsed url { protocol: null,
13843 verbose parsed url   slashes: null,
13843 verbose parsed url   auth: null,
13843 verbose parsed url   host: null,
13843 verbose parsed url   port: null,
13843 verbose parsed url   hostname: null,
13843 verbose parsed url   hash: null,
13843 verbose parsed url   search: null,
13843 verbose parsed url   query: null,
13843 verbose parsed url   pathname: 'slide@~1.1.3',
13843 verbose parsed url   path: 'slide@~1.1.3',
13843 verbose parsed url   href: 'slide@~1.1.3' }
13844 verbose cache add name="slide" spec="~1.1.3" args=["slide","~1.1.3"]
13845 verbose parsed url { protocol: null,
13845 verbose parsed url   slashes: null,
13845 verbose parsed url   auth: null,
13845 verbose parsed url   host: null,
13845 verbose parsed url   port: null,
13845 verbose parsed url   hostname: null,
13845 verbose parsed url   hash: null,
13845 verbose parsed url   search: null,
13845 verbose parsed url   query: null,
13845 verbose parsed url   pathname: '~1.1.3',
13845 verbose parsed url   path: '~1.1.3',
13845 verbose parsed url   href: '~1.1.3' }
13846 verbose addNamed [ 'slide', '~1.1.3' ]
13847 verbose addNamed [ null, '>=1.1.3-0 <1.2.0-0' ]
13848 silly lockFile a9ca7910-slide-1-1-3 slide@~1.1.3
13849 verbose lock slide@~1.1.3 /home/lerenzo/.npm/a9ca7910-slide-1-1-3.lock
13850 verbose cache add [ 'read-package-json@0', null ]
13851 verbose cache add name=undefined spec="read-package-json@0" args=["read-package-json@0",null]
13852 verbose parsed url { protocol: null,
13852 verbose parsed url   slashes: null,
13852 verbose parsed url   auth: null,
13852 verbose parsed url   host: null,
13852 verbose parsed url   port: null,
13852 verbose parsed url   hostname: null,
13852 verbose parsed url   hash: null,
13852 verbose parsed url   search: null,
13852 verbose parsed url   query: null,
13852 verbose parsed url   pathname: 'read-package-json@0',
13852 verbose parsed url   path: 'read-package-json@0',
13852 verbose parsed url   href: 'read-package-json@0' }
13853 verbose cache add name="read-package-json" spec="0" args=["read-package-json","0"]
13854 verbose parsed url { protocol: null,
13854 verbose parsed url   slashes: null,
13854 verbose parsed url   auth: null,
13854 verbose parsed url   host: null,
13854 verbose parsed url   port: null,
13854 verbose parsed url   hostname: null,
13854 verbose parsed url   hash: null,
13854 verbose parsed url   search: null,
13854 verbose parsed url   query: null,
13854 verbose parsed url   pathname: '0',
13854 verbose parsed url   path: '0',
13854 verbose parsed url   href: '0' }
13855 verbose addNamed [ 'read-package-json', '0' ]
13856 verbose addNamed [ null, '>=0.0.0-0 <1.0.0-0' ]
13857 silly lockFile 49119071-read-package-json-0 read-package-json@0
13858 verbose lock read-package-json@0 /home/lerenzo/.npm/49119071-read-package-json-0.lock
13859 silly lockFile 518c9636-quire-analyzer-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes
13860 silly lockFile 518c9636-quire-analyzer-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes
13861 verbose cache add [ 'npmlog@0', null ]
13862 verbose cache add name=undefined spec="npmlog@0" args=["npmlog@0",null]
13863 verbose parsed url { protocol: null,
13863 verbose parsed url   slashes: null,
13863 verbose parsed url   auth: null,
13863 verbose parsed url   host: null,
13863 verbose parsed url   port: null,
13863 verbose parsed url   hostname: null,
13863 verbose parsed url   hash: null,
13863 verbose parsed url   search: null,
13863 verbose parsed url   query: null,
13863 verbose parsed url   pathname: 'npmlog@0',
13863 verbose parsed url   path: 'npmlog@0',
13863 verbose parsed url   href: 'npmlog@0' }
13864 verbose cache add name="npmlog" spec="0" args=["npmlog","0"]
13865 verbose parsed url { protocol: null,
13865 verbose parsed url   slashes: null,
13865 verbose parsed url   auth: null,
13865 verbose parsed url   host: null,
13865 verbose parsed url   port: null,
13865 verbose parsed url   hostname: null,
13865 verbose parsed url   hash: null,
13865 verbose parsed url   search: null,
13865 verbose parsed url   query: null,
13865 verbose parsed url   pathname: '0',
13865 verbose parsed url   path: '0',
13865 verbose parsed url   href: '0' }
13866 verbose addNamed [ 'npmlog', '0' ]
13867 verbose addNamed [ null, '>=0.0.0-0 <1.0.0-0' ]
13868 silly lockFile 2f67ef0a-npmlog-0 npmlog@0
13869 verbose lock npmlog@0 /home/lerenzo/.npm/2f67ef0a-npmlog-0.lock
13870 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
13871 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
13872 silly gunzTarPerm extractEntry test/simple/removeListener.js
13873 silly gunzTarPerm extractEntry test/simple/setMax.js
13874 silly gunzTarPerm extractEntry examples/raw-mode.js
13875 silly gunzTarPerm extractEntry examples/webhook-post.js
13876 silly addNameRange { name: 'graceful-fs',
13876 silly addNameRange   range: '>=1.1.8-0 <1.2.0-0',
13876 silly addNameRange   hasData: false }
13877 silly addNameRange { name: 'slide', range: '>=1.1.3-0 <1.2.0-0', hasData: false }
13878 silly addNameRange { name: 'read-package-json',
13878 silly addNameRange   range: '>=0.0.0-0 <1.0.0-0',
13878 silly addNameRange   hasData: false }
13879 verbose url raw slide
13880 verbose url resolving [ 'https://registry.npmjs.org/', './slide' ]
13881 verbose url resolved https://registry.npmjs.org/slide
13882 info trying registry request attempt 1 at 14:12:34
13883 http GET https://registry.npmjs.org/slide
13884 silly addNameRange { name: 'npmlog', range: '>=0.0.0-0 <1.0.0-0', hasData: false }
13885 verbose url raw read-package-json
13886 verbose url resolving [ 'https://registry.npmjs.org/', './read-package-json' ]
13887 verbose url resolved https://registry.npmjs.org/read-package-json
13888 info trying registry request attempt 1 at 14:12:34
13889 http GET https://registry.npmjs.org/read-package-json
13890 silly gunzTarPerm extractEntry example/boolean_single.js
13891 silly gunzTarPerm extractEntry example/usage-options.js
13892 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
13893 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
13894 verbose url raw npmlog
13895 verbose url resolving [ 'https://registry.npmjs.org/', './npmlog' ]
13896 verbose url resolved https://registry.npmjs.org/npmlog
13897 info trying registry request attempt 1 at 14:12:34
13898 http GET https://registry.npmjs.org/npmlog
13899 info preinstall eyes@0.1.8
13900 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
13901 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
13902 verbose url raw graceful-fs
13903 verbose url resolving [ 'https://registry.npmjs.org/', './graceful-fs' ]
13904 verbose url resolved https://registry.npmjs.org/graceful-fs
13905 info trying registry request attempt 1 at 14:12:34
13906 verbose etag "8VTIGE3KHXX4861152PVTWGF8"
13907 http GET https://registry.npmjs.org/graceful-fs
13908 silly gunzTarPerm extractEntry test/resolver/mug.coffee
13909 silly gunzTarPerm extractEntry test/resolver/other_path/root.js
13910 verbose readDependencies using package.json deps
13911 silly gunzTarPerm extractEntry lib/winston.js
13912 silly gunzTarPerm extractEntry lib/winston/common.js
13913 verbose readDependencies using package.json deps
13914 silly resolved []
13915 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes
13916 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/eyes
13917 verbose linkStuff [ true,
13917 verbose linkStuff   '/usr/local/lib/node_modules',
13917 verbose linkStuff   false,
13917 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules' ]
13918 info linkStuff eyes@0.1.8
13919 verbose linkBins eyes@0.1.8
13920 verbose linkMans eyes@0.1.8
13921 verbose rebuildBundles eyes@0.1.8
13922 info install eyes@0.1.8
13923 silly gunzTarPerm extractEntry example/boolean_double.js
13924 silly gunzTarPerm extractEntry example/xup.js
13925 info postinstall eyes@0.1.8
13926 silly gunzTarPerm extractEntry test/helpers/macros.js
13927 silly gunzTarPerm extractEntry test/helpers/macros.js
13928 silly gunzTarPerm extractEntry test/resolver/other_path/lib/other-lib.js
13929 silly gunzTarPerm extractEntry test/simple/ttl.js
13930 silly gunzTarPerm extractEntry test/wildcardEvents/addListener.js
13931 silly gunzTarPerm extractEntry example/line_count_options.js
13932 silly gunzTarPerm extractEntry readme.markdown
13933 silly gunzTarPerm extractEntry assets/string-object-rows.png
13934 silly gunzTarPerm extractEntry assets/string-rows.png
13935 silly gunzTarPerm extractEntry test/_.js
13936 silly gunzTarPerm extractEntry test/parse.js
13937 silly gunzTarPerm extractEntry test/wildcardEvents/all.js
13938 silly gunzTarPerm extractEntry test/wildcardEvents/customDelimiter.js
13939 silly lockFile 3e3feced-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
13940 silly lockFile 3e3feced-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
13941 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
13942 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
13943 info preinstall read@1.0.5
13944 silly gunzTarPerm extractEntry test/usage.js
13945 silly gunzTarPerm extractEntry test/_/argv.js
13946 silly lockFile 3b8e738c--analyzer-node-modules-detective tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective
13947 silly lockFile 3b8e738c--analyzer-node-modules-detective tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective
13948 verbose readDependencies using package.json deps
13949 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
13950 silly lockFile cea1a593--npm-detective-0-0-4-package-tgz tar:///home/lerenzo/.npm/detective/0.0.4/package.tgz
13951 verbose readDependencies using package.json deps
13952 verbose cache add [ 'mute-stream@~0.0.4', null ]
13953 verbose cache add name=undefined spec="mute-stream@~0.0.4" args=["mute-stream@~0.0.4",null]
13954 verbose parsed url { protocol: null,
13954 verbose parsed url   slashes: null,
13954 verbose parsed url   auth: null,
13954 verbose parsed url   host: null,
13954 verbose parsed url   port: null,
13954 verbose parsed url   hostname: null,
13954 verbose parsed url   hash: null,
13954 verbose parsed url   search: null,
13954 verbose parsed url   query: null,
13954 verbose parsed url   pathname: 'mute-stream@~0.0.4',
13954 verbose parsed url   path: 'mute-stream@~0.0.4',
13954 verbose parsed url   href: 'mute-stream@~0.0.4' }
13955 verbose cache add name="mute-stream" spec="~0.0.4" args=["mute-stream","~0.0.4"]
13956 verbose parsed url { protocol: null,
13956 verbose parsed url   slashes: null,
13956 verbose parsed url   auth: null,
13956 verbose parsed url   host: null,
13956 verbose parsed url   port: null,
13956 verbose parsed url   hostname: null,
13956 verbose parsed url   hash: null,
13956 verbose parsed url   search: null,
13956 verbose parsed url   query: null,
13956 verbose parsed url   pathname: '~0.0.4',
13956 verbose parsed url   path: '~0.0.4',
13956 verbose parsed url   href: '~0.0.4' }
13957 verbose addNamed [ 'mute-stream', '~0.0.4' ]
13958 verbose addNamed [ null, '>=0.0.4-0 <0.1.0-0' ]
13959 silly lockFile 0cb27cfc-mute-stream-0-0-4 mute-stream@~0.0.4
13960 verbose lock mute-stream@~0.0.4 /home/lerenzo/.npm/0cb27cfc-mute-stream-0-0-4.lock
13961 info preinstall detective@0.0.4
13962 silly addNameRange { name: 'mute-stream',
13962 silly addNameRange   range: '>=0.0.4-0 <0.1.0-0',
13962 silly addNameRange   hasData: false }
13963 silly gunzTarPerm extractEntry test/_/bin.js
13964 verbose url raw mute-stream
13965 verbose url resolving [ 'https://registry.npmjs.org/', './mute-stream' ]
13966 verbose url resolved https://registry.npmjs.org/mute-stream
13967 info trying registry request attempt 1 at 14:12:34
13968 http GET https://registry.npmjs.org/mute-stream
13969 verbose readDependencies using package.json deps
13970 verbose readDependencies using package.json deps
13971 silly gunzTarPerm extractEntry test/wildcardEvents/k1.js
13972 silly gunzTarPerm extractEntry test/wildcardEvents/options.js
13973 silly gunzTarPerm extractEntry lib/winston/config.js
13974 silly gunzTarPerm extractEntry lib/winston/container.js
13975 verbose cache add [ 'burrito@0.2.x', null ]
13976 verbose cache add name=undefined spec="burrito@0.2.x" args=["burrito@0.2.x",null]
13977 verbose parsed url { protocol: null,
13977 verbose parsed url   slashes: null,
13977 verbose parsed url   auth: null,
13977 verbose parsed url   host: null,
13977 verbose parsed url   port: null,
13977 verbose parsed url   hostname: null,
13977 verbose parsed url   hash: null,
13977 verbose parsed url   search: null,
13977 verbose parsed url   query: null,
13977 verbose parsed url   pathname: 'burrito@0.2.x',
13977 verbose parsed url   path: 'burrito@0.2.x',
13977 verbose parsed url   href: 'burrito@0.2.x' }
13978 verbose cache add name="burrito" spec="0.2.x" args=["burrito","0.2.x"]
13979 verbose parsed url { protocol: null,
13979 verbose parsed url   slashes: null,
13979 verbose parsed url   auth: null,
13979 verbose parsed url   host: null,
13979 verbose parsed url   port: null,
13979 verbose parsed url   hostname: null,
13979 verbose parsed url   hash: null,
13979 verbose parsed url   search: null,
13979 verbose parsed url   query: null,
13979 verbose parsed url   pathname: '0.2.x',
13979 verbose parsed url   path: '0.2.x',
13979 verbose parsed url   href: '0.2.x' }
13980 verbose addNamed [ 'burrito', '0.2.x' ]
13981 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
13982 silly lockFile ba13ba50-burrito-0-2-x burrito@0.2.x
13983 verbose lock burrito@0.2.x /home/lerenzo/.npm/ba13ba50-burrito-0-2-x.lock
13984 silly addNameRange { name: 'burrito', range: '>=0.2.0-0 <0.3.0-0', hasData: false }
13985 verbose url raw burrito
13986 verbose url resolving [ 'https://registry.npmjs.org/', './burrito' ]
13987 verbose url resolved https://registry.npmjs.org/burrito
13988 info trying registry request attempt 1 at 14:12:34
13989 http GET https://registry.npmjs.org/burrito
13990 silly gunzTarPerm extractEntry lib/winston/exception.js
13991 silly gunzTarPerm extractEntry lib/winston/logger.js
13992 silly gunzTarPerm extractEntry test/wildcardEvents/removeListener.js
13993 silly gunzTarPerm extractEntry test/wildcardEvents/ttl.js
13994 silly gunzTarPerm extractEntry lib/winston/transports.js
13995 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
13996 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
13997 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
13998 silly gunzTarPerm extractEntry lib/winston/transports/console.js
13999 silly gunzTarPerm extractEntry lib/winston/transports/file.js
14000 silly gunzTarPerm extractEntry lib/winston/transports/http.js
14001 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
14002 silly lockFile 3a6ba224--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator
14003 silly lockFile 3a6ba224--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator
14004 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
14005 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
14006 info preinstall revalidator@0.1.5
14007 verbose readDependencies using package.json deps
14008 verbose readDependencies using package.json deps
14009 silly resolved []
14010 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator
14011 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/revalidator
14012 verbose linkStuff [ true,
14012 verbose linkStuff   '/usr/local/lib/node_modules',
14012 verbose linkStuff   false,
14012 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules' ]
14013 info linkStuff revalidator@0.1.5
14014 verbose linkBins revalidator@0.1.5
14015 verbose linkMans revalidator@0.1.5
14016 verbose rebuildBundles revalidator@0.1.5
14017 info install revalidator@0.1.5
14018 info postinstall revalidator@0.1.5
14019 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
14020 silly gunzTarPerm extractEntry test/cli-test.js
14021 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
14022 silly gunzTarPerm extractEntry test/exception-test.js
14023 silly lockFile 0d5b369a-re-analyzer-node-modules-resolve tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve
14024 silly lockFile 0d5b369a-re-analyzer-node-modules-resolve tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve
14025 silly lockFile b94198b5-zo-npm-resolve-0-2-8-package-tgz tar:///home/lerenzo/.npm/resolve/0.2.8/package.tgz
14026 silly lockFile b94198b5-zo-npm-resolve-0-2-8-package-tgz tar:///home/lerenzo/.npm/resolve/0.2.8/package.tgz
14027 info preinstall resolve@0.2.8
14028 silly gunzTarPerm extractEntry examples/inspect.js
14029 verbose readDependencies using package.json deps
14030 verbose readDependencies using package.json deps
14031 silly resolved []
14032 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve
14033 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/resolve
14034 verbose linkStuff [ true,
14034 verbose linkStuff   '/usr/local/lib/node_modules',
14034 verbose linkStuff   false,
14034 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules' ]
14035 info linkStuff resolve@0.2.8
14036 verbose linkBins resolve@0.2.8
14037 verbose linkMans resolve@0.2.8
14038 verbose rebuildBundles resolve@0.2.8
14039 info install resolve@0.2.8
14040 silly gunzTarPerm extractEntry test/logger-test.js
14041 silly gunzTarPerm extractEntry test/container-test.js
14042 info postinstall resolve@0.2.8
14043 silly gunzTarPerm extractEntry test/log-exception-test.js
14044 silly gunzTarPerm extractEntry test/log-rewriter-test.js
14045 silly lockFile be5d83a9-ules-broadway-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/utile
14046 silly lockFile be5d83a9-ules-broadway-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/utile
14047 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
14048 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
14049 silly lockFile 4698ca23-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/utile
14050 silly lockFile 4698ca23-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/utile
14051 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
14052 silly lockFile 22df4238-enzo-npm-utile-0-2-0-package-tgz tar:///home/lerenzo/.npm/utile/0.2.0/package.tgz
14053 info preinstall utile@0.1.7
14054 verbose readDependencies using package.json deps
14055 info preinstall utile@0.2.0
14056 verbose readDependencies using package.json deps
14057 verbose readDependencies using package.json deps
14058 verbose readDependencies using package.json deps
14059 verbose cache add [ 'async@0.1.x', null ]
14060 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14061 verbose parsed url { protocol: null,
14061 verbose parsed url   slashes: null,
14061 verbose parsed url   auth: null,
14061 verbose parsed url   host: null,
14061 verbose parsed url   port: null,
14061 verbose parsed url   hostname: null,
14061 verbose parsed url   hash: null,
14061 verbose parsed url   search: null,
14061 verbose parsed url   query: null,
14061 verbose parsed url   pathname: 'async@0.1.x',
14061 verbose parsed url   path: 'async@0.1.x',
14061 verbose parsed url   href: 'async@0.1.x' }
14062 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14063 verbose parsed url { protocol: null,
14063 verbose parsed url   slashes: null,
14063 verbose parsed url   auth: null,
14063 verbose parsed url   host: null,
14063 verbose parsed url   port: null,
14063 verbose parsed url   hostname: null,
14063 verbose parsed url   hash: null,
14063 verbose parsed url   search: null,
14063 verbose parsed url   query: null,
14063 verbose parsed url   pathname: '0.1.x',
14063 verbose parsed url   path: '0.1.x',
14063 verbose parsed url   href: '0.1.x' }
14064 verbose addNamed [ 'async', '0.1.x' ]
14065 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
14066 silly lockFile 463e1c03-async-0-1-x async@0.1.x
14067 verbose lock async@0.1.x /home/lerenzo/.npm/463e1c03-async-0-1-x.lock
14068 verbose cache add [ 'deep-equal@*', null ]
14069 verbose cache add name=undefined spec="deep-equal@*" args=["deep-equal@*",null]
14070 verbose parsed url { protocol: null,
14070 verbose parsed url   slashes: null,
14070 verbose parsed url   auth: null,
14070 verbose parsed url   host: null,
14070 verbose parsed url   port: null,
14070 verbose parsed url   hostname: null,
14070 verbose parsed url   hash: null,
14070 verbose parsed url   search: null,
14070 verbose parsed url   query: null,
14070 verbose parsed url   pathname: 'deep-equal@*',
14070 verbose parsed url   path: 'deep-equal@*',
14070 verbose parsed url   href: 'deep-equal@*' }
14071 verbose cache add name="deep-equal" spec="*" args=["deep-equal","*"]
14072 verbose parsed url { protocol: null,
14072 verbose parsed url   slashes: null,
14072 verbose parsed url   auth: null,
14072 verbose parsed url   host: null,
14072 verbose parsed url   port: null,
14072 verbose parsed url   hostname: null,
14072 verbose parsed url   hash: null,
14072 verbose parsed url   search: null,
14072 verbose parsed url   query: null,
14072 verbose parsed url   pathname: '*',
14072 verbose parsed url   path: '*',
14072 verbose parsed url   href: '*' }
14073 verbose addNamed [ 'deep-equal', '*' ]
14074 verbose addNamed [ null, '*' ]
14075 silly lockFile 2aa4e33c-deep-equal deep-equal@*
14076 verbose lock deep-equal@* /home/lerenzo/.npm/2aa4e33c-deep-equal.lock
14077 silly addNameRange { name: 'async', range: '>=0.1.0-0 <0.2.0-0', hasData: false }
14078 verbose cache add [ 'mkdirp@0.x.x', null ]
14079 verbose cache add name=undefined spec="mkdirp@0.x.x" args=["mkdirp@0.x.x",null]
14080 verbose parsed url { protocol: null,
14080 verbose parsed url   slashes: null,
14080 verbose parsed url   auth: null,
14080 verbose parsed url   host: null,
14080 verbose parsed url   port: null,
14080 verbose parsed url   hostname: null,
14080 verbose parsed url   hash: null,
14080 verbose parsed url   search: null,
14080 verbose parsed url   query: null,
14080 verbose parsed url   pathname: 'mkdirp@0.x.x',
14080 verbose parsed url   path: 'mkdirp@0.x.x',
14080 verbose parsed url   href: 'mkdirp@0.x.x' }
14081 verbose cache add name="mkdirp" spec="0.x.x" args=["mkdirp","0.x.x"]
14082 verbose parsed url { protocol: null,
14082 verbose parsed url   slashes: null,
14082 verbose parsed url   auth: null,
14082 verbose parsed url   host: null,
14082 verbose parsed url   port: null,
14082 verbose parsed url   hostname: null,
14082 verbose parsed url   hash: null,
14082 verbose parsed url   search: null,
14082 verbose parsed url   query: null,
14082 verbose parsed url   pathname: '0.x.x',
14082 verbose parsed url   path: '0.x.x',
14082 verbose parsed url   href: '0.x.x' }
14083 verbose addNamed [ 'mkdirp', '0.x.x' ]
14084 verbose addNamed [ null, '>=0.0.0-0 <1.0.0-0' ]
14085 silly lockFile 0cdf6d66-mkdirp-0-x-x mkdirp@0.x.x
14086 verbose lock mkdirp@0.x.x /home/lerenzo/.npm/0cdf6d66-mkdirp-0-x-x.lock
14087 verbose cache add [ 'i@0.3.x', null ]
14088 verbose cache add name=undefined spec="i@0.3.x" args=["i@0.3.x",null]
14089 verbose parsed url { protocol: null,
14089 verbose parsed url   slashes: null,
14089 verbose parsed url   auth: null,
14089 verbose parsed url   host: null,
14089 verbose parsed url   port: null,
14089 verbose parsed url   hostname: null,
14089 verbose parsed url   hash: null,
14089 verbose parsed url   search: null,
14089 verbose parsed url   query: null,
14089 verbose parsed url   pathname: 'i@0.3.x',
14089 verbose parsed url   path: 'i@0.3.x',
14089 verbose parsed url   href: 'i@0.3.x' }
14090 verbose cache add name="i" spec="0.3.x" args=["i","0.3.x"]
14091 verbose parsed url { protocol: null,
14091 verbose parsed url   slashes: null,
14091 verbose parsed url   auth: null,
14091 verbose parsed url   host: null,
14091 verbose parsed url   port: null,
14091 verbose parsed url   hostname: null,
14091 verbose parsed url   hash: null,
14091 verbose parsed url   search: null,
14091 verbose parsed url   query: null,
14091 verbose parsed url   pathname: '0.3.x',
14091 verbose parsed url   path: '0.3.x',
14091 verbose parsed url   href: '0.3.x' }
14092 verbose addNamed [ 'i', '0.3.x' ]
14093 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
14094 silly lockFile 2b556e57-i-0-3-x i@0.3.x
14095 verbose lock i@0.3.x /home/lerenzo/.npm/2b556e57-i-0-3-x.lock
14096 verbose cache add [ 'i@0.3.x', null ]
14097 verbose cache add name=undefined spec="i@0.3.x" args=["i@0.3.x",null]
14098 verbose parsed url { protocol: null,
14098 verbose parsed url   slashes: null,
14098 verbose parsed url   auth: null,
14098 verbose parsed url   host: null,
14098 verbose parsed url   port: null,
14098 verbose parsed url   hostname: null,
14098 verbose parsed url   hash: null,
14098 verbose parsed url   search: null,
14098 verbose parsed url   query: null,
14098 verbose parsed url   pathname: 'i@0.3.x',
14098 verbose parsed url   path: 'i@0.3.x',
14098 verbose parsed url   href: 'i@0.3.x' }
14099 verbose cache add name="i" spec="0.3.x" args=["i","0.3.x"]
14100 verbose parsed url { protocol: null,
14100 verbose parsed url   slashes: null,
14100 verbose parsed url   auth: null,
14100 verbose parsed url   host: null,
14100 verbose parsed url   port: null,
14100 verbose parsed url   hostname: null,
14100 verbose parsed url   hash: null,
14100 verbose parsed url   search: null,
14100 verbose parsed url   query: null,
14100 verbose parsed url   pathname: '0.3.x',
14100 verbose parsed url   path: '0.3.x',
14100 verbose parsed url   href: '0.3.x' }
14101 verbose addNamed [ 'i', '0.3.x' ]
14102 verbose cache add [ 'async@0.1.x', null ]
14103 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14104 verbose parsed url { protocol: null,
14104 verbose parsed url   slashes: null,
14104 verbose parsed url   auth: null,
14104 verbose parsed url   host: null,
14104 verbose parsed url   port: null,
14104 verbose parsed url   hostname: null,
14104 verbose parsed url   hash: null,
14104 verbose parsed url   search: null,
14104 verbose parsed url   query: null,
14104 verbose parsed url   pathname: 'async@0.1.x',
14104 verbose parsed url   path: 'async@0.1.x',
14104 verbose parsed url   href: 'async@0.1.x' }
14105 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14106 verbose parsed url { protocol: null,
14106 verbose parsed url   slashes: null,
14106 verbose parsed url   auth: null,
14106 verbose parsed url   host: null,
14106 verbose parsed url   port: null,
14106 verbose parsed url   hostname: null,
14106 verbose parsed url   hash: null,
14106 verbose parsed url   search: null,
14106 verbose parsed url   query: null,
14106 verbose parsed url   pathname: '0.1.x',
14106 verbose parsed url   path: '0.1.x',
14106 verbose parsed url   href: '0.1.x' }
14107 verbose addNamed [ 'async', '0.1.x' ]
14108 verbose cache add [ 'deep-equal@*', null ]
14109 verbose cache add name=undefined spec="deep-equal@*" args=["deep-equal@*",null]
14110 verbose parsed url { protocol: null,
14110 verbose parsed url   slashes: null,
14110 verbose parsed url   auth: null,
14110 verbose parsed url   host: null,
14110 verbose parsed url   port: null,
14110 verbose parsed url   hostname: null,
14110 verbose parsed url   hash: null,
14110 verbose parsed url   search: null,
14110 verbose parsed url   query: null,
14110 verbose parsed url   pathname: 'deep-equal@*',
14110 verbose parsed url   path: 'deep-equal@*',
14110 verbose parsed url   href: 'deep-equal@*' }
14111 verbose cache add name="deep-equal" spec="*" args=["deep-equal","*"]
14112 verbose parsed url { protocol: null,
14112 verbose parsed url   slashes: null,
14112 verbose parsed url   auth: null,
14112 verbose parsed url   host: null,
14112 verbose parsed url   port: null,
14112 verbose parsed url   hostname: null,
14112 verbose parsed url   hash: null,
14112 verbose parsed url   search: null,
14112 verbose parsed url   query: null,
14112 verbose parsed url   pathname: '*',
14112 verbose parsed url   path: '*',
14112 verbose parsed url   href: '*' }
14113 verbose addNamed [ 'deep-equal', '*' ]
14114 silly addNameRange { name: 'deep-equal', range: '*', hasData: false }
14115 verbose url raw async
14116 verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
14117 verbose url resolved https://registry.npmjs.org/async
14118 info trying registry request attempt 1 at 14:12:34
14119 http GET https://registry.npmjs.org/async
14120 verbose cache add [ 'ncp@0.2.x', null ]
14121 verbose cache add name=undefined spec="ncp@0.2.x" args=["ncp@0.2.x",null]
14122 verbose parsed url { protocol: null,
14122 verbose parsed url   slashes: null,
14122 verbose parsed url   auth: null,
14122 verbose parsed url   host: null,
14122 verbose parsed url   port: null,
14122 verbose parsed url   hostname: null,
14122 verbose parsed url   hash: null,
14122 verbose parsed url   search: null,
14122 verbose parsed url   query: null,
14122 verbose parsed url   pathname: 'ncp@0.2.x',
14122 verbose parsed url   path: 'ncp@0.2.x',
14122 verbose parsed url   href: 'ncp@0.2.x' }
14123 verbose cache add name="ncp" spec="0.2.x" args=["ncp","0.2.x"]
14124 verbose parsed url { protocol: null,
14124 verbose parsed url   slashes: null,
14124 verbose parsed url   auth: null,
14124 verbose parsed url   host: null,
14124 verbose parsed url   port: null,
14124 verbose parsed url   hostname: null,
14124 verbose parsed url   hash: null,
14124 verbose parsed url   search: null,
14124 verbose parsed url   query: null,
14124 verbose parsed url   pathname: '0.2.x',
14124 verbose parsed url   path: '0.2.x',
14124 verbose parsed url   href: '0.2.x' }
14125 verbose addNamed [ 'ncp', '0.2.x' ]
14126 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
14127 silly lockFile 144b88e9-ncp-0-2-x ncp@0.2.x
14128 verbose lock ncp@0.2.x /home/lerenzo/.npm/144b88e9-ncp-0-2-x.lock
14129 verbose cache add [ 'ncp@0.2.x', null ]
14130 verbose cache add name=undefined spec="ncp@0.2.x" args=["ncp@0.2.x",null]
14131 verbose parsed url { protocol: null,
14131 verbose parsed url   slashes: null,
14131 verbose parsed url   auth: null,
14131 verbose parsed url   host: null,
14131 verbose parsed url   port: null,
14131 verbose parsed url   hostname: null,
14131 verbose parsed url   hash: null,
14131 verbose parsed url   search: null,
14131 verbose parsed url   query: null,
14131 verbose parsed url   pathname: 'ncp@0.2.x',
14131 verbose parsed url   path: 'ncp@0.2.x',
14131 verbose parsed url   href: 'ncp@0.2.x' }
14132 verbose cache add name="ncp" spec="0.2.x" args=["ncp","0.2.x"]
14133 verbose parsed url { protocol: null,
14133 verbose parsed url   slashes: null,
14133 verbose parsed url   auth: null,
14133 verbose parsed url   host: null,
14133 verbose parsed url   port: null,
14133 verbose parsed url   hostname: null,
14133 verbose parsed url   hash: null,
14133 verbose parsed url   search: null,
14133 verbose parsed url   query: null,
14133 verbose parsed url   pathname: '0.2.x',
14133 verbose parsed url   path: '0.2.x',
14133 verbose parsed url   href: '0.2.x' }
14134 verbose addNamed [ 'ncp', '0.2.x' ]
14135 verbose cache add [ 'mkdirp@0.x.x', null ]
14136 verbose cache add name=undefined spec="mkdirp@0.x.x" args=["mkdirp@0.x.x",null]
14137 verbose parsed url { protocol: null,
14137 verbose parsed url   slashes: null,
14137 verbose parsed url   auth: null,
14137 verbose parsed url   host: null,
14137 verbose parsed url   port: null,
14137 verbose parsed url   hostname: null,
14137 verbose parsed url   hash: null,
14137 verbose parsed url   search: null,
14137 verbose parsed url   query: null,
14137 verbose parsed url   pathname: 'mkdirp@0.x.x',
14137 verbose parsed url   path: 'mkdirp@0.x.x',
14137 verbose parsed url   href: 'mkdirp@0.x.x' }
14138 verbose cache add name="mkdirp" spec="0.x.x" args=["mkdirp","0.x.x"]
14139 verbose parsed url { protocol: null,
14139 verbose parsed url   slashes: null,
14139 verbose parsed url   auth: null,
14139 verbose parsed url   host: null,
14139 verbose parsed url   port: null,
14139 verbose parsed url   hostname: null,
14139 verbose parsed url   hash: null,
14139 verbose parsed url   search: null,
14139 verbose parsed url   query: null,
14139 verbose parsed url   pathname: '0.x.x',
14139 verbose parsed url   path: '0.x.x',
14139 verbose parsed url   href: '0.x.x' }
14140 verbose addNamed [ 'mkdirp', '0.x.x' ]
14141 verbose cache add [ 'rimraf@1.x.x', null ]
14142 verbose cache add name=undefined spec="rimraf@1.x.x" args=["rimraf@1.x.x",null]
14143 verbose parsed url { protocol: null,
14143 verbose parsed url   slashes: null,
14143 verbose parsed url   auth: null,
14143 verbose parsed url   host: null,
14143 verbose parsed url   port: null,
14143 verbose parsed url   hostname: null,
14143 verbose parsed url   hash: null,
14143 verbose parsed url   search: null,
14143 verbose parsed url   query: null,
14143 verbose parsed url   pathname: 'rimraf@1.x.x',
14143 verbose parsed url   path: 'rimraf@1.x.x',
14143 verbose parsed url   href: 'rimraf@1.x.x' }
14144 verbose cache add name="rimraf" spec="1.x.x" args=["rimraf","1.x.x"]
14145 verbose parsed url { protocol: null,
14145 verbose parsed url   slashes: null,
14145 verbose parsed url   auth: null,
14145 verbose parsed url   host: null,
14145 verbose parsed url   port: null,
14145 verbose parsed url   hostname: null,
14145 verbose parsed url   hash: null,
14145 verbose parsed url   search: null,
14145 verbose parsed url   query: null,
14145 verbose parsed url   pathname: '1.x.x',
14145 verbose parsed url   path: '1.x.x',
14145 verbose parsed url   href: '1.x.x' }
14146 verbose addNamed [ 'rimraf', '1.x.x' ]
14147 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
14148 silly lockFile 42682ec2-rimraf-1-x-x rimraf@1.x.x
14149 verbose lock rimraf@1.x.x /home/lerenzo/.npm/42682ec2-rimraf-1-x-x.lock
14150 verbose cache add [ 'rimraf@2.x.x', null ]
14151 verbose cache add name=undefined spec="rimraf@2.x.x" args=["rimraf@2.x.x",null]
14152 verbose parsed url { protocol: null,
14152 verbose parsed url   slashes: null,
14152 verbose parsed url   auth: null,
14152 verbose parsed url   host: null,
14152 verbose parsed url   port: null,
14152 verbose parsed url   hostname: null,
14152 verbose parsed url   hash: null,
14152 verbose parsed url   search: null,
14152 verbose parsed url   query: null,
14152 verbose parsed url   pathname: 'rimraf@2.x.x',
14152 verbose parsed url   path: 'rimraf@2.x.x',
14152 verbose parsed url   href: 'rimraf@2.x.x' }
14153 verbose cache add name="rimraf" spec="2.x.x" args=["rimraf","2.x.x"]
14154 verbose parsed url { protocol: null,
14154 verbose parsed url   slashes: null,
14154 verbose parsed url   auth: null,
14154 verbose parsed url   host: null,
14154 verbose parsed url   port: null,
14154 verbose parsed url   hostname: null,
14154 verbose parsed url   hash: null,
14154 verbose parsed url   search: null,
14154 verbose parsed url   query: null,
14154 verbose parsed url   pathname: '2.x.x',
14154 verbose parsed url   path: '2.x.x',
14154 verbose parsed url   href: '2.x.x' }
14155 verbose addNamed [ 'rimraf', '2.x.x' ]
14156 verbose addNamed [ null, '>=2.0.0-0 <3.0.0-0' ]
14157 silly lockFile 7220c273-rimraf-2-x-x rimraf@2.x.x
14158 verbose lock rimraf@2.x.x /home/lerenzo/.npm/7220c273-rimraf-2-x-x.lock
14159 verbose url raw deep-equal
14160 verbose url resolving [ 'https://registry.npmjs.org/', './deep-equal' ]
14161 verbose url resolved https://registry.npmjs.org/deep-equal
14162 info trying registry request attempt 1 at 14:12:34
14163 http GET https://registry.npmjs.org/deep-equal
14164 silly addNameRange { name: 'mkdirp', range: '>=0.0.0-0 <1.0.0-0', hasData: false }
14165 silly addNameRange { name: 'i', range: '>=0.3.0-0 <0.4.0-0', hasData: false }
14166 verbose url raw i
14167 verbose url resolving [ 'https://registry.npmjs.org/', './i' ]
14168 verbose url resolved https://registry.npmjs.org/i
14169 info trying registry request attempt 1 at 14:12:34
14170 http GET https://registry.npmjs.org/i
14171 silly addNameRange { name: 'ncp', range: '>=0.2.0-0 <0.3.0-0', hasData: false }
14172 silly addNameRange { name: 'rimraf', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
14173 silly addNameRange { name: 'rimraf', range: '>=2.0.0-0 <3.0.0-0', hasData: false }
14174 verbose url raw ncp
14175 verbose url resolving [ 'https://registry.npmjs.org/', './ncp' ]
14176 verbose url resolved https://registry.npmjs.org/ncp
14177 info trying registry request attempt 1 at 14:12:34
14178 http GET https://registry.npmjs.org/ncp
14179 verbose url raw mkdirp
14180 verbose url resolving [ 'https://registry.npmjs.org/', './mkdirp' ]
14181 verbose url resolved https://registry.npmjs.org/mkdirp
14182 info trying registry request attempt 1 at 14:12:34
14183 verbose etag "2FCGN661Y5J8YJFE1Z01DF3KM"
14184 http GET https://registry.npmjs.org/mkdirp
14185 verbose url raw rimraf
14186 verbose url resolving [ 'https://registry.npmjs.org/', './rimraf' ]
14187 verbose url resolved https://registry.npmjs.org/rimraf
14188 info trying registry request attempt 1 at 14:12:34
14189 verbose etag "BO8JLBC2TKAXGJCA5T3URAII3"
14190 http GET https://registry.npmjs.org/rimraf
14191 verbose url raw rimraf
14192 verbose url resolving [ 'https://registry.npmjs.org/', './rimraf' ]
14193 verbose url resolved https://registry.npmjs.org/rimraf
14194 info trying registry request attempt 1 at 14:12:34
14195 verbose etag "BO8JLBC2TKAXGJCA5T3URAII3"
14196 http GET https://registry.npmjs.org/rimraf
14197 silly gunzTarPerm modes [ '755', '644' ]
14198 silly gunzTarPerm modes [ '755', '644' ]
14199 silly gunzTarPerm modes [ '755', '644' ]
14200 silly gunzTarPerm extractEntry test/winston-test.js
14201 silly gunzTarPerm extractEntry test/helpers.js
14202 silly gunzTarPerm extractEntry package.json
14203 silly gunzTarPerm extractEntry package.json
14204 silly gunzTarPerm extractEntry package.json
14205 silly gunzTarPerm extractEntry .npmignore
14206 silly gunzTarPerm extractEntry README.md
14207 silly gunzTarPerm extractEntry .npmignore
14208 silly gunzTarPerm extractEntry README.md
14209 silly gunzTarPerm extractEntry .npmignore
14210 silly gunzTarPerm extractEntry README.md
14211 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
14212 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
14213 silly gunzTarPerm extractEntry LICENCE
14214 silly gunzTarPerm extractEntry rs.js
14215 silly gunzTarPerm extractEntry LICENSE
14216 silly gunzTarPerm extractEntry .travis.yml
14217 silly gunzTarPerm extractEntry LICENSE
14218 silly gunzTarPerm extractEntry .travis.yml
14219 silly gunzTarPerm extractEntry CHANGELOG.md
14220 silly gunzTarPerm extractEntry example/webservice.js
14221 silly gunzTarPerm extractEntry lib/revalidator.js
14222 silly gunzTarPerm extractEntry test/validator-test.js
14223 silly gunzTarPerm extractEntry examples/put-object-rows.js
14224 silly gunzTarPerm extractEntry examples/put-object.js
14225 silly lockFile a67c31c5-e-analyzer-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
14226 silly lockFile a67c31c5-e-analyzer-node-modules-optimist tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
14227 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
14228 silly lockFile 88a20e1c-o-npm-optimist-0-3-7-package-tgz tar:///home/lerenzo/.npm/optimist/0.3.7/package.tgz
14229 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
14230 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
14231 silly gunzTarPerm extractEntry example/example.js
14232 silly gunzTarPerm extractEntry lib/read.js
14233 info preinstall optimist@0.3.7
14234 silly gunzTarPerm extractEntry CHANGELOG.md
14235 silly gunzTarPerm extractEntry lib/args.js
14236 verbose readDependencies using package.json deps
14237 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
14238 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
14239 verbose readDependencies using package.json deps
14240 silly gunzTarPerm extractEntry test/basic.js
14241 silly gunzTarPerm extractEntry test/defaults.js
14242 verbose cache add [ 'wordwrap@~0.0.2', null ]
14243 verbose cache add name=undefined spec="wordwrap@~0.0.2" args=["wordwrap@~0.0.2",null]
14244 verbose parsed url { protocol: null,
14244 verbose parsed url   slashes: null,
14244 verbose parsed url   auth: null,
14244 verbose parsed url   host: null,
14244 verbose parsed url   port: null,
14244 verbose parsed url   hostname: null,
14244 verbose parsed url   hash: null,
14244 verbose parsed url   search: null,
14244 verbose parsed url   query: null,
14244 verbose parsed url   pathname: 'wordwrap@~0.0.2',
14244 verbose parsed url   path: 'wordwrap@~0.0.2',
14244 verbose parsed url   href: 'wordwrap@~0.0.2' }
14245 verbose cache add name="wordwrap" spec="~0.0.2" args=["wordwrap","~0.0.2"]
14246 verbose parsed url { protocol: null,
14246 verbose parsed url   slashes: null,
14246 verbose parsed url   auth: null,
14246 verbose parsed url   host: null,
14246 verbose parsed url   port: null,
14246 verbose parsed url   hostname: null,
14246 verbose parsed url   hash: null,
14246 verbose parsed url   search: null,
14246 verbose parsed url   query: null,
14246 verbose parsed url   pathname: '~0.0.2',
14246 verbose parsed url   path: '~0.0.2',
14246 verbose parsed url   href: '~0.0.2' }
14247 verbose addNamed [ 'wordwrap', '~0.0.2' ]
14248 verbose addNamed [ null, '>=0.0.2-0 <0.1.0-0' ]
14249 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
14250 verbose lock wordwrap@~0.0.2 /home/lerenzo/.npm/8bd42136-wordwrap-0-0-2.lock
14251 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
14252 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
14253 silly addNameRange { name: 'wordwrap', range: '>=0.0.2-0 <0.1.0-0', hasData: false }
14254 verbose url raw wordwrap
14255 verbose url resolving [ 'https://registry.npmjs.org/', './wordwrap' ]
14256 verbose url resolved https://registry.npmjs.org/wordwrap
14257 info trying registry request attempt 1 at 14:12:34
14258 verbose etag "3HPX5BQ0X4U2A3KJNTK2473OZ"
14259 http GET https://registry.npmjs.org/wordwrap
14260 silly gunzTarPerm extractEntry lib/base64.js
14261 silly gunzTarPerm extractEntry lib/file.js
14262 silly gunzTarPerm extractEntry test/many.js
14263 silly gunzTarPerm extractEntry test/transports/console-test.js
14264 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
14265 silly gunzTarPerm extractEntry lib/format.js
14266 silly lockFile 85212e0f-adway-node-modules-eventemitter2 tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2
14267 silly lockFile 85212e0f-adway-node-modules-eventemitter2 tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2
14268 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
14269 silly lockFile e7f28c23-eventemitter2-0-4-11-package-tgz tar:///home/lerenzo/.npm/eventemitter2/0.4.11/package.tgz
14270 info preinstall eventemitter2@0.4.11
14271 silly gunzTarPerm extractEntry lib/index.js
14272 silly gunzTarPerm extractEntry test/file-test.js
14273 verbose readDependencies using package.json deps
14274 verbose readDependencies using package.json deps
14275 silly resolved []
14276 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2
14277 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2
14278 verbose linkStuff [ true,
14278 verbose linkStuff   '/usr/local/lib/node_modules',
14278 verbose linkStuff   false,
14278 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules' ]
14279 info linkStuff eventemitter2@0.4.11
14280 verbose linkBins eventemitter2@0.4.11
14281 verbose linkMans eventemitter2@0.4.11
14282 verbose rebuildBundles eventemitter2@0.4.11
14283 info install eventemitter2@0.4.11
14284 info postinstall eventemitter2@0.4.11
14285 silly gunzTarPerm extractEntry test/format-test.js
14286 silly gunzTarPerm extractEntry test/function-args-test.js
14287 silly gunzTarPerm extractEntry examples/put-rows-colors.js
14288 silly gunzTarPerm extractEntry examples/put-rows.js
14289 silly gunzTarPerm extractEntry test/random-string-test.js
14290 silly gunzTarPerm extractEntry test/require-directory-test.js
14291 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
14292 silly gunzTarPerm extractEntry test/transports/file-test.js
14293 silly gunzTarPerm extractEntry test/utile-test.js
14294 silly gunzTarPerm extractEntry test/fixtures/read-json-file/config.json
14295 silly gunzTarPerm extractEntry test/fixtures/require-directory/helloWorld.js
14296 silly gunzTarPerm extractEntry test/fixtures/require-directory/directory/index.js
14297 silly gunzTarPerm extractEntry test/transports/transport.js
14298 silly gunzTarPerm extractEntry test/transports/webhook-test.js
14299 silly gunzTarPerm extractEntry test/helpers/macros.js
14300 silly lockFile 68a7cc2c-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
14301 silly lockFile 68a7cc2c-modules-prompt-node-modules-read tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
14302 silly gunzTarPerm extractEntry examples/string-object-rows.js
14303 silly gunzTarPerm extractEntry examples/string-rows.js
14304 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
14305 silly lockFile ed7a61ef-renzo-npm-read-1-0-5-package-tgz tar:///home/lerenzo/.npm/read/1.0.5/package.tgz
14306 info preinstall read@1.0.5
14307 verbose readDependencies using package.json deps
14308 verbose readDependencies using package.json deps
14309 verbose cache add [ 'mute-stream@~0.0.4', null ]
14310 verbose cache add name=undefined spec="mute-stream@~0.0.4" args=["mute-stream@~0.0.4",null]
14311 verbose parsed url { protocol: null,
14311 verbose parsed url   slashes: null,
14311 verbose parsed url   auth: null,
14311 verbose parsed url   host: null,
14311 verbose parsed url   port: null,
14311 verbose parsed url   hostname: null,
14311 verbose parsed url   hash: null,
14311 verbose parsed url   search: null,
14311 verbose parsed url   query: null,
14311 verbose parsed url   pathname: 'mute-stream@~0.0.4',
14311 verbose parsed url   path: 'mute-stream@~0.0.4',
14311 verbose parsed url   href: 'mute-stream@~0.0.4' }
14312 verbose cache add name="mute-stream" spec="~0.0.4" args=["mute-stream","~0.0.4"]
14313 verbose parsed url { protocol: null,
14313 verbose parsed url   slashes: null,
14313 verbose parsed url   auth: null,
14313 verbose parsed url   host: null,
14313 verbose parsed url   port: null,
14313 verbose parsed url   hostname: null,
14313 verbose parsed url   hash: null,
14313 verbose parsed url   search: null,
14313 verbose parsed url   query: null,
14313 verbose parsed url   pathname: '~0.0.4',
14313 verbose parsed url   path: '~0.0.4',
14313 verbose parsed url   href: '~0.0.4' }
14314 verbose addNamed [ 'mute-stream', '~0.0.4' ]
14315 silly lockFile 0a4597c1--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator
14316 silly lockFile 0a4597c1--prompt-node-modules-revalidator tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator
14317 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
14318 silly lockFile 6e70a4ef-pm-revalidator-0-1-5-package-tgz tar:///home/lerenzo/.npm/revalidator/0.1.5/package.tgz
14319 info preinstall revalidator@0.1.5
14320 verbose readDependencies using package.json deps
14321 verbose readDependencies using package.json deps
14322 silly resolved []
14323 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator
14324 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/revalidator
14325 verbose linkStuff [ true,
14325 verbose linkStuff   '/usr/local/lib/node_modules',
14325 verbose linkStuff   false,
14325 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules' ]
14326 info linkStuff revalidator@0.1.5
14327 verbose linkBins revalidator@0.1.5
14328 verbose linkMans revalidator@0.1.5
14329 verbose rebuildBundles revalidator@0.1.5
14330 info install revalidator@0.1.5
14331 info postinstall revalidator@0.1.5
14332 silly gunzTarPerm extractEntry lib/cliff.js
14333 silly gunzTarPerm extractEntry test/cliff-test.js
14334 silly lockFile c47448f9-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/utile
14335 silly lockFile c47448f9-odules-prompt-node-modules-utile tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/utile
14336 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
14337 silly lockFile c7efa28b-enzo-npm-utile-0-1-7-package-tgz tar:///home/lerenzo/.npm/utile/0.1.7/package.tgz
14338 info preinstall utile@0.1.7
14339 verbose readDependencies using package.json deps
14340 verbose readDependencies using package.json deps
14341 verbose cache add [ 'async@0.1.x', null ]
14342 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14343 verbose parsed url { protocol: null,
14343 verbose parsed url   slashes: null,
14343 verbose parsed url   auth: null,
14343 verbose parsed url   host: null,
14343 verbose parsed url   port: null,
14343 verbose parsed url   hostname: null,
14343 verbose parsed url   hash: null,
14343 verbose parsed url   search: null,
14343 verbose parsed url   query: null,
14343 verbose parsed url   pathname: 'async@0.1.x',
14343 verbose parsed url   path: 'async@0.1.x',
14343 verbose parsed url   href: 'async@0.1.x' }
14344 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14345 verbose parsed url { protocol: null,
14345 verbose parsed url   slashes: null,
14345 verbose parsed url   auth: null,
14345 verbose parsed url   host: null,
14345 verbose parsed url   port: null,
14345 verbose parsed url   hostname: null,
14345 verbose parsed url   hash: null,
14345 verbose parsed url   search: null,
14345 verbose parsed url   query: null,
14345 verbose parsed url   pathname: '0.1.x',
14345 verbose parsed url   path: '0.1.x',
14345 verbose parsed url   href: '0.1.x' }
14346 verbose addNamed [ 'async', '0.1.x' ]
14347 verbose cache add [ 'deep-equal@*', null ]
14348 verbose cache add name=undefined spec="deep-equal@*" args=["deep-equal@*",null]
14349 verbose parsed url { protocol: null,
14349 verbose parsed url   slashes: null,
14349 verbose parsed url   auth: null,
14349 verbose parsed url   host: null,
14349 verbose parsed url   port: null,
14349 verbose parsed url   hostname: null,
14349 verbose parsed url   hash: null,
14349 verbose parsed url   search: null,
14349 verbose parsed url   query: null,
14349 verbose parsed url   pathname: 'deep-equal@*',
14349 verbose parsed url   path: 'deep-equal@*',
14349 verbose parsed url   href: 'deep-equal@*' }
14350 verbose cache add name="deep-equal" spec="*" args=["deep-equal","*"]
14351 verbose parsed url { protocol: null,
14351 verbose parsed url   slashes: null,
14351 verbose parsed url   auth: null,
14351 verbose parsed url   host: null,
14351 verbose parsed url   port: null,
14351 verbose parsed url   hostname: null,
14351 verbose parsed url   hash: null,
14351 verbose parsed url   search: null,
14351 verbose parsed url   query: null,
14351 verbose parsed url   pathname: '*',
14351 verbose parsed url   path: '*',
14351 verbose parsed url   href: '*' }
14352 verbose addNamed [ 'deep-equal', '*' ]
14353 verbose cache add [ 'i@0.3.x', null ]
14354 verbose cache add name=undefined spec="i@0.3.x" args=["i@0.3.x",null]
14355 verbose parsed url { protocol: null,
14355 verbose parsed url   slashes: null,
14355 verbose parsed url   auth: null,
14355 verbose parsed url   host: null,
14355 verbose parsed url   port: null,
14355 verbose parsed url   hostname: null,
14355 verbose parsed url   hash: null,
14355 verbose parsed url   search: null,
14355 verbose parsed url   query: null,
14355 verbose parsed url   pathname: 'i@0.3.x',
14355 verbose parsed url   path: 'i@0.3.x',
14355 verbose parsed url   href: 'i@0.3.x' }
14356 verbose cache add name="i" spec="0.3.x" args=["i","0.3.x"]
14357 verbose parsed url { protocol: null,
14357 verbose parsed url   slashes: null,
14357 verbose parsed url   auth: null,
14357 verbose parsed url   host: null,
14357 verbose parsed url   port: null,
14357 verbose parsed url   hostname: null,
14357 verbose parsed url   hash: null,
14357 verbose parsed url   search: null,
14357 verbose parsed url   query: null,
14357 verbose parsed url   pathname: '0.3.x',
14357 verbose parsed url   path: '0.3.x',
14357 verbose parsed url   href: '0.3.x' }
14358 verbose addNamed [ 'i', '0.3.x' ]
14359 verbose cache add [ 'mkdirp@0.x.x', null ]
14360 verbose cache add name=undefined spec="mkdirp@0.x.x" args=["mkdirp@0.x.x",null]
14361 verbose parsed url { protocol: null,
14361 verbose parsed url   slashes: null,
14361 verbose parsed url   auth: null,
14361 verbose parsed url   host: null,
14361 verbose parsed url   port: null,
14361 verbose parsed url   hostname: null,
14361 verbose parsed url   hash: null,
14361 verbose parsed url   search: null,
14361 verbose parsed url   query: null,
14361 verbose parsed url   pathname: 'mkdirp@0.x.x',
14361 verbose parsed url   path: 'mkdirp@0.x.x',
14361 verbose parsed url   href: 'mkdirp@0.x.x' }
14362 verbose cache add name="mkdirp" spec="0.x.x" args=["mkdirp","0.x.x"]
14363 verbose parsed url { protocol: null,
14363 verbose parsed url   slashes: null,
14363 verbose parsed url   auth: null,
14363 verbose parsed url   host: null,
14363 verbose parsed url   port: null,
14363 verbose parsed url   hostname: null,
14363 verbose parsed url   hash: null,
14363 verbose parsed url   search: null,
14363 verbose parsed url   query: null,
14363 verbose parsed url   pathname: '0.x.x',
14363 verbose parsed url   path: '0.x.x',
14363 verbose parsed url   href: '0.x.x' }
14364 verbose addNamed [ 'mkdirp', '0.x.x' ]
14365 verbose cache add [ 'ncp@0.2.x', null ]
14366 verbose cache add name=undefined spec="ncp@0.2.x" args=["ncp@0.2.x",null]
14367 verbose parsed url { protocol: null,
14367 verbose parsed url   slashes: null,
14367 verbose parsed url   auth: null,
14367 verbose parsed url   host: null,
14367 verbose parsed url   port: null,
14367 verbose parsed url   hostname: null,
14367 verbose parsed url   hash: null,
14367 verbose parsed url   search: null,
14367 verbose parsed url   query: null,
14367 verbose parsed url   pathname: 'ncp@0.2.x',
14367 verbose parsed url   path: 'ncp@0.2.x',
14367 verbose parsed url   href: 'ncp@0.2.x' }
14368 verbose cache add name="ncp" spec="0.2.x" args=["ncp","0.2.x"]
14369 verbose parsed url { protocol: null,
14369 verbose parsed url   slashes: null,
14369 verbose parsed url   auth: null,
14369 verbose parsed url   host: null,
14369 verbose parsed url   port: null,
14369 verbose parsed url   hostname: null,
14369 verbose parsed url   hash: null,
14369 verbose parsed url   search: null,
14369 verbose parsed url   query: null,
14369 verbose parsed url   pathname: '0.2.x',
14369 verbose parsed url   path: '0.2.x',
14369 verbose parsed url   href: '0.2.x' }
14370 verbose addNamed [ 'ncp', '0.2.x' ]
14371 verbose cache add [ 'rimraf@1.x.x', null ]
14372 verbose cache add name=undefined spec="rimraf@1.x.x" args=["rimraf@1.x.x",null]
14373 verbose parsed url { protocol: null,
14373 verbose parsed url   slashes: null,
14373 verbose parsed url   auth: null,
14373 verbose parsed url   host: null,
14373 verbose parsed url   port: null,
14373 verbose parsed url   hostname: null,
14373 verbose parsed url   hash: null,
14373 verbose parsed url   search: null,
14373 verbose parsed url   query: null,
14373 verbose parsed url   pathname: 'rimraf@1.x.x',
14373 verbose parsed url   path: 'rimraf@1.x.x',
14373 verbose parsed url   href: 'rimraf@1.x.x' }
14374 verbose cache add name="rimraf" spec="1.x.x" args=["rimraf","1.x.x"]
14375 verbose parsed url { protocol: null,
14375 verbose parsed url   slashes: null,
14375 verbose parsed url   auth: null,
14375 verbose parsed url   host: null,
14375 verbose parsed url   port: null,
14375 verbose parsed url   hostname: null,
14375 verbose parsed url   hash: null,
14375 verbose parsed url   search: null,
14375 verbose parsed url   query: null,
14375 verbose parsed url   pathname: '1.x.x',
14375 verbose parsed url   path: '1.x.x',
14375 verbose parsed url   href: '1.x.x' }
14376 verbose addNamed [ 'rimraf', '1.x.x' ]
14377 silly lockFile b9ddf052-ules-broadway-node-modules-cliff tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
14378 silly lockFile b9ddf052-ules-broadway-node-modules-cliff tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
14379 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
14380 silly lockFile 72524f61-enzo-npm-cliff-0-1-8-package-tgz tar:///home/lerenzo/.npm/cliff/0.1.8/package.tgz
14381 info preinstall cliff@0.1.8
14382 verbose readDependencies using package.json deps
14383 verbose readDependencies using package.json deps
14384 verbose cache add [ 'eyes@0.1.x', null ]
14385 verbose cache add name=undefined spec="eyes@0.1.x" args=["eyes@0.1.x",null]
14386 verbose parsed url { protocol: null,
14386 verbose parsed url   slashes: null,
14386 verbose parsed url   auth: null,
14386 verbose parsed url   host: null,
14386 verbose parsed url   port: null,
14386 verbose parsed url   hostname: null,
14386 verbose parsed url   hash: null,
14386 verbose parsed url   search: null,
14386 verbose parsed url   query: null,
14386 verbose parsed url   pathname: 'eyes@0.1.x',
14386 verbose parsed url   path: 'eyes@0.1.x',
14386 verbose parsed url   href: 'eyes@0.1.x' }
14387 verbose cache add name="eyes" spec="0.1.x" args=["eyes","0.1.x"]
14388 verbose parsed url { protocol: null,
14388 verbose parsed url   slashes: null,
14388 verbose parsed url   auth: null,
14388 verbose parsed url   host: null,
14388 verbose parsed url   port: null,
14388 verbose parsed url   hostname: null,
14388 verbose parsed url   hash: null,
14388 verbose parsed url   search: null,
14388 verbose parsed url   query: null,
14388 verbose parsed url   pathname: '0.1.x',
14388 verbose parsed url   path: '0.1.x',
14388 verbose parsed url   href: '0.1.x' }
14389 verbose addNamed [ 'eyes', '0.1.x' ]
14390 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
14391 silly lockFile 81039dce-eyes-0-1-x eyes@0.1.x
14392 verbose lock eyes@0.1.x /home/lerenzo/.npm/81039dce-eyes-0-1-x.lock
14393 silly addNameRange { name: 'eyes', range: '>=0.1.0-0 <0.2.0-0', hasData: false }
14394 silly lockFile f6e8ed59-es-broadway-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
14395 silly lockFile f6e8ed59-es-broadway-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
14396 verbose url raw eyes
14397 verbose url resolving [ 'https://registry.npmjs.org/', './eyes' ]
14398 verbose url resolved https://registry.npmjs.org/eyes
14399 info trying registry request attempt 1 at 14:12:35
14400 verbose etag "GBSC916INGWA41U26GSK8RWO"
14401 http GET https://registry.npmjs.org/eyes
14402 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14403 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14404 info preinstall winston@0.6.2
14405 verbose readDependencies using package.json deps
14406 verbose readDependencies using package.json deps
14407 verbose cache add [ 'async@0.1.x', null ]
14408 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14409 verbose parsed url { protocol: null,
14409 verbose parsed url   slashes: null,
14409 verbose parsed url   auth: null,
14409 verbose parsed url   host: null,
14409 verbose parsed url   port: null,
14409 verbose parsed url   hostname: null,
14409 verbose parsed url   hash: null,
14409 verbose parsed url   search: null,
14409 verbose parsed url   query: null,
14409 verbose parsed url   pathname: 'async@0.1.x',
14409 verbose parsed url   path: 'async@0.1.x',
14409 verbose parsed url   href: 'async@0.1.x' }
14410 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14411 verbose parsed url { protocol: null,
14411 verbose parsed url   slashes: null,
14411 verbose parsed url   auth: null,
14411 verbose parsed url   host: null,
14411 verbose parsed url   port: null,
14411 verbose parsed url   hostname: null,
14411 verbose parsed url   hash: null,
14411 verbose parsed url   search: null,
14411 verbose parsed url   query: null,
14411 verbose parsed url   pathname: '0.1.x',
14411 verbose parsed url   path: '0.1.x',
14411 verbose parsed url   href: '0.1.x' }
14412 verbose addNamed [ 'async', '0.1.x' ]
14413 verbose cache add [ 'cycle@1.0.x', null ]
14414 verbose cache add name=undefined spec="cycle@1.0.x" args=["cycle@1.0.x",null]
14415 verbose parsed url { protocol: null,
14415 verbose parsed url   slashes: null,
14415 verbose parsed url   auth: null,
14415 verbose parsed url   host: null,
14415 verbose parsed url   port: null,
14415 verbose parsed url   hostname: null,
14415 verbose parsed url   hash: null,
14415 verbose parsed url   search: null,
14415 verbose parsed url   query: null,
14415 verbose parsed url   pathname: 'cycle@1.0.x',
14415 verbose parsed url   path: 'cycle@1.0.x',
14415 verbose parsed url   href: 'cycle@1.0.x' }
14416 verbose cache add name="cycle" spec="1.0.x" args=["cycle","1.0.x"]
14417 verbose parsed url { protocol: null,
14417 verbose parsed url   slashes: null,
14417 verbose parsed url   auth: null,
14417 verbose parsed url   host: null,
14417 verbose parsed url   port: null,
14417 verbose parsed url   hostname: null,
14417 verbose parsed url   hash: null,
14417 verbose parsed url   search: null,
14417 verbose parsed url   query: null,
14417 verbose parsed url   pathname: '1.0.x',
14417 verbose parsed url   path: '1.0.x',
14417 verbose parsed url   href: '1.0.x' }
14418 verbose addNamed [ 'cycle', '1.0.x' ]
14419 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
14420 silly lockFile dfb63733-cycle-1-0-x cycle@1.0.x
14421 verbose lock cycle@1.0.x /home/lerenzo/.npm/dfb63733-cycle-1-0-x.lock
14422 verbose cache add [ 'eyes@0.1.x', null ]
14423 verbose cache add name=undefined spec="eyes@0.1.x" args=["eyes@0.1.x",null]
14424 verbose parsed url { protocol: null,
14424 verbose parsed url   slashes: null,
14424 verbose parsed url   auth: null,
14424 verbose parsed url   host: null,
14424 verbose parsed url   port: null,
14424 verbose parsed url   hostname: null,
14424 verbose parsed url   hash: null,
14424 verbose parsed url   search: null,
14424 verbose parsed url   query: null,
14424 verbose parsed url   pathname: 'eyes@0.1.x',
14424 verbose parsed url   path: 'eyes@0.1.x',
14424 verbose parsed url   href: 'eyes@0.1.x' }
14425 verbose cache add name="eyes" spec="0.1.x" args=["eyes","0.1.x"]
14426 verbose parsed url { protocol: null,
14426 verbose parsed url   slashes: null,
14426 verbose parsed url   auth: null,
14426 verbose parsed url   host: null,
14426 verbose parsed url   port: null,
14426 verbose parsed url   hostname: null,
14426 verbose parsed url   hash: null,
14426 verbose parsed url   search: null,
14426 verbose parsed url   query: null,
14426 verbose parsed url   pathname: '0.1.x',
14426 verbose parsed url   path: '0.1.x',
14426 verbose parsed url   href: '0.1.x' }
14427 verbose addNamed [ 'eyes', '0.1.x' ]
14428 silly addNameRange { name: 'cycle', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
14429 verbose cache add [ 'pkginfo@0.2.x', null ]
14430 verbose cache add name=undefined spec="pkginfo@0.2.x" args=["pkginfo@0.2.x",null]
14431 verbose parsed url { protocol: null,
14431 verbose parsed url   slashes: null,
14431 verbose parsed url   auth: null,
14431 verbose parsed url   host: null,
14431 verbose parsed url   port: null,
14431 verbose parsed url   hostname: null,
14431 verbose parsed url   hash: null,
14431 verbose parsed url   search: null,
14431 verbose parsed url   query: null,
14431 verbose parsed url   pathname: 'pkginfo@0.2.x',
14431 verbose parsed url   path: 'pkginfo@0.2.x',
14431 verbose parsed url   href: 'pkginfo@0.2.x' }
14432 verbose cache add name="pkginfo" spec="0.2.x" args=["pkginfo","0.2.x"]
14433 verbose parsed url { protocol: null,
14433 verbose parsed url   slashes: null,
14433 verbose parsed url   auth: null,
14433 verbose parsed url   host: null,
14433 verbose parsed url   port: null,
14433 verbose parsed url   hostname: null,
14433 verbose parsed url   hash: null,
14433 verbose parsed url   search: null,
14433 verbose parsed url   query: null,
14433 verbose parsed url   pathname: '0.2.x',
14433 verbose parsed url   path: '0.2.x',
14433 verbose parsed url   href: '0.2.x' }
14434 verbose addNamed [ 'pkginfo', '0.2.x' ]
14435 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
14436 silly lockFile f898f07d-pkginfo-0-2-x pkginfo@0.2.x
14437 verbose lock pkginfo@0.2.x /home/lerenzo/.npm/f898f07d-pkginfo-0-2-x.lock
14438 verbose url raw cycle
14439 verbose url resolving [ 'https://registry.npmjs.org/', './cycle' ]
14440 verbose url resolved https://registry.npmjs.org/cycle
14441 info trying registry request attempt 1 at 14:12:35
14442 http GET https://registry.npmjs.org/cycle
14443 verbose cache add [ 'stack-trace@0.0.x', null ]
14444 verbose cache add name=undefined spec="stack-trace@0.0.x" args=["stack-trace@0.0.x",null]
14445 verbose parsed url { protocol: null,
14445 verbose parsed url   slashes: null,
14445 verbose parsed url   auth: null,
14445 verbose parsed url   host: null,
14445 verbose parsed url   port: null,
14445 verbose parsed url   hostname: null,
14445 verbose parsed url   hash: null,
14445 verbose parsed url   search: null,
14445 verbose parsed url   query: null,
14445 verbose parsed url   pathname: 'stack-trace@0.0.x',
14445 verbose parsed url   path: 'stack-trace@0.0.x',
14445 verbose parsed url   href: 'stack-trace@0.0.x' }
14446 verbose cache add name="stack-trace" spec="0.0.x" args=["stack-trace","0.0.x"]
14447 verbose parsed url { protocol: null,
14447 verbose parsed url   slashes: null,
14447 verbose parsed url   auth: null,
14447 verbose parsed url   host: null,
14447 verbose parsed url   port: null,
14447 verbose parsed url   hostname: null,
14447 verbose parsed url   hash: null,
14447 verbose parsed url   search: null,
14447 verbose parsed url   query: null,
14447 verbose parsed url   pathname: '0.0.x',
14447 verbose parsed url   path: '0.0.x',
14447 verbose parsed url   href: '0.0.x' }
14448 verbose addNamed [ 'stack-trace', '0.0.x' ]
14449 verbose addNamed [ null, '>=0.0.0-0 <0.1.0-0' ]
14450 silly lockFile 00b1025d-stack-trace-0-0-x stack-trace@0.0.x
14451 verbose lock stack-trace@0.0.x /home/lerenzo/.npm/00b1025d-stack-trace-0-0-x.lock
14452 verbose cache add [ 'request@2.9.x', null ]
14453 verbose cache add name=undefined spec="request@2.9.x" args=["request@2.9.x",null]
14454 verbose parsed url { protocol: null,
14454 verbose parsed url   slashes: null,
14454 verbose parsed url   auth: null,
14454 verbose parsed url   host: null,
14454 verbose parsed url   port: null,
14454 verbose parsed url   hostname: null,
14454 verbose parsed url   hash: null,
14454 verbose parsed url   search: null,
14454 verbose parsed url   query: null,
14454 verbose parsed url   pathname: 'request@2.9.x',
14454 verbose parsed url   path: 'request@2.9.x',
14454 verbose parsed url   href: 'request@2.9.x' }
14455 verbose cache add name="request" spec="2.9.x" args=["request","2.9.x"]
14456 verbose parsed url { protocol: null,
14456 verbose parsed url   slashes: null,
14456 verbose parsed url   auth: null,
14456 verbose parsed url   host: null,
14456 verbose parsed url   port: null,
14456 verbose parsed url   hostname: null,
14456 verbose parsed url   hash: null,
14456 verbose parsed url   search: null,
14456 verbose parsed url   query: null,
14456 verbose parsed url   pathname: '2.9.x',
14456 verbose parsed url   path: '2.9.x',
14456 verbose parsed url   href: '2.9.x' }
14457 verbose addNamed [ 'request', '2.9.x' ]
14458 verbose addNamed [ null, '>=2.9.0-0 <2.10.0-0' ]
14459 silly lockFile 0258777d-request-2-9-x request@2.9.x
14460 verbose lock request@2.9.x /home/lerenzo/.npm/0258777d-request-2-9-x.lock
14461 silly addNameRange { name: 'pkginfo', range: '>=0.2.0-0 <0.3.0-0', hasData: false }
14462 silly addNameRange { name: 'stack-trace',
14462 silly addNameRange   range: '>=0.0.0-0 <0.1.0-0',
14462 silly addNameRange   hasData: false }
14463 silly addNameRange { name: 'request', range: '>=2.9.0-0 <2.10.0-0', hasData: false }
14464 verbose url raw pkginfo
14465 verbose url resolving [ 'https://registry.npmjs.org/', './pkginfo' ]
14466 verbose url resolved https://registry.npmjs.org/pkginfo
14467 info trying registry request attempt 1 at 14:12:35
14468 http GET https://registry.npmjs.org/pkginfo
14469 verbose url raw stack-trace
14470 verbose url resolving [ 'https://registry.npmjs.org/', './stack-trace' ]
14471 verbose url resolved https://registry.npmjs.org/stack-trace
14472 info trying registry request attempt 1 at 14:12:35
14473 http GET https://registry.npmjs.org/stack-trace
14474 verbose url raw request
14475 verbose url resolving [ 'https://registry.npmjs.org/', './request' ]
14476 verbose url resolved https://registry.npmjs.org/request
14477 info trying registry request attempt 1 at 14:12:35
14478 http GET https://registry.npmjs.org/request
14479 silly lockFile 17f62cd3-ules-broadway-node-modules-nconf tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
14480 silly lockFile 17f62cd3-ules-broadway-node-modules-nconf tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
14481 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
14482 silly lockFile 24802201-enzo-npm-nconf-0-6-7-package-tgz tar:///home/lerenzo/.npm/nconf/0.6.7/package.tgz
14483 info preinstall nconf@0.6.7
14484 verbose readDependencies using package.json deps
14485 verbose readDependencies using package.json deps
14486 verbose cache add [ 'async@0.1.x', null ]
14487 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14488 verbose parsed url { protocol: null,
14488 verbose parsed url   slashes: null,
14488 verbose parsed url   auth: null,
14488 verbose parsed url   host: null,
14488 verbose parsed url   port: null,
14488 verbose parsed url   hostname: null,
14488 verbose parsed url   hash: null,
14488 verbose parsed url   search: null,
14488 verbose parsed url   query: null,
14488 verbose parsed url   pathname: 'async@0.1.x',
14488 verbose parsed url   path: 'async@0.1.x',
14488 verbose parsed url   href: 'async@0.1.x' }
14489 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14490 verbose parsed url { protocol: null,
14490 verbose parsed url   slashes: null,
14490 verbose parsed url   auth: null,
14490 verbose parsed url   host: null,
14490 verbose parsed url   port: null,
14490 verbose parsed url   hostname: null,
14490 verbose parsed url   hash: null,
14490 verbose parsed url   search: null,
14490 verbose parsed url   query: null,
14490 verbose parsed url   pathname: '0.1.x',
14490 verbose parsed url   path: '0.1.x',
14490 verbose parsed url   href: '0.1.x' }
14491 verbose addNamed [ 'async', '0.1.x' ]
14492 verbose cache add [ 'ini@1.x.x', null ]
14493 verbose cache add name=undefined spec="ini@1.x.x" args=["ini@1.x.x",null]
14494 verbose parsed url { protocol: null,
14494 verbose parsed url   slashes: null,
14494 verbose parsed url   auth: null,
14494 verbose parsed url   host: null,
14494 verbose parsed url   port: null,
14494 verbose parsed url   hostname: null,
14494 verbose parsed url   hash: null,
14494 verbose parsed url   search: null,
14494 verbose parsed url   query: null,
14494 verbose parsed url   pathname: 'ini@1.x.x',
14494 verbose parsed url   path: 'ini@1.x.x',
14494 verbose parsed url   href: 'ini@1.x.x' }
14495 verbose cache add name="ini" spec="1.x.x" args=["ini","1.x.x"]
14496 verbose parsed url { protocol: null,
14496 verbose parsed url   slashes: null,
14496 verbose parsed url   auth: null,
14496 verbose parsed url   host: null,
14496 verbose parsed url   port: null,
14496 verbose parsed url   hostname: null,
14496 verbose parsed url   hash: null,
14496 verbose parsed url   search: null,
14496 verbose parsed url   query: null,
14496 verbose parsed url   pathname: '1.x.x',
14496 verbose parsed url   path: '1.x.x',
14496 verbose parsed url   href: '1.x.x' }
14497 verbose addNamed [ 'ini', '1.x.x' ]
14498 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
14499 silly lockFile 60d1e4cf-ini-1-x-x ini@1.x.x
14500 verbose lock ini@1.x.x /home/lerenzo/.npm/60d1e4cf-ini-1-x-x.lock
14501 verbose cache add [ 'pkginfo@0.2.x', null ]
14502 verbose cache add name=undefined spec="pkginfo@0.2.x" args=["pkginfo@0.2.x",null]
14503 verbose parsed url { protocol: null,
14503 verbose parsed url   slashes: null,
14503 verbose parsed url   auth: null,
14503 verbose parsed url   host: null,
14503 verbose parsed url   port: null,
14503 verbose parsed url   hostname: null,
14503 verbose parsed url   hash: null,
14503 verbose parsed url   search: null,
14503 verbose parsed url   query: null,
14503 verbose parsed url   pathname: 'pkginfo@0.2.x',
14503 verbose parsed url   path: 'pkginfo@0.2.x',
14503 verbose parsed url   href: 'pkginfo@0.2.x' }
14504 verbose cache add name="pkginfo" spec="0.2.x" args=["pkginfo","0.2.x"]
14505 verbose parsed url { protocol: null,
14505 verbose parsed url   slashes: null,
14505 verbose parsed url   auth: null,
14505 verbose parsed url   host: null,
14505 verbose parsed url   port: null,
14505 verbose parsed url   hostname: null,
14505 verbose parsed url   hash: null,
14505 verbose parsed url   search: null,
14505 verbose parsed url   query: null,
14505 verbose parsed url   pathname: '0.2.x',
14505 verbose parsed url   path: '0.2.x',
14505 verbose parsed url   href: '0.2.x' }
14506 verbose addNamed [ 'pkginfo', '0.2.x' ]
14507 silly addNameRange { name: 'ini', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
14508 verbose url raw ini
14509 verbose url resolving [ 'https://registry.npmjs.org/', './ini' ]
14510 verbose url resolved https://registry.npmjs.org/ini
14511 info trying registry request attempt 1 at 14:12:35
14512 http GET https://registry.npmjs.org/ini
14513 silly gunzTarPerm modes [ '755', '644' ]
14514 silly gunzTarPerm extractEntry package.json
14515 silly gunzTarPerm extractEntry .npmignore
14516 silly gunzTarPerm extractEntry README.md
14517 silly gunzTarPerm extractEntry LICENSE
14518 silly gunzTarPerm extractEntry .travis.yml
14519 silly gunzTarPerm extractEntry docs/transports.md
14520 silly gunzTarPerm extractEntry examples/couchdb.js
14521 silly gunzTarPerm extractEntry examples/exception.js
14522 silly gunzTarPerm extractEntry examples/raw-mode.js
14523 silly gunzTarPerm extractEntry examples/webhook-post.js
14524 silly gunzTarPerm extractEntry lib/winston.js
14525 silly gunzTarPerm extractEntry lib/winston/common.js
14526 silly gunzTarPerm extractEntry lib/winston/config.js
14527 silly gunzTarPerm extractEntry lib/winston/container.js
14528 silly gunzTarPerm extractEntry lib/winston/exception.js
14529 silly gunzTarPerm extractEntry lib/winston/logger.js
14530 silly gunzTarPerm extractEntry lib/winston/transports.js
14531 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
14532 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
14533 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
14534 silly gunzTarPerm extractEntry lib/winston/transports/console.js
14535 silly gunzTarPerm extractEntry lib/winston/transports/file.js
14536 silly gunzTarPerm extractEntry lib/winston/transports/http.js
14537 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
14538 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
14539 silly gunzTarPerm extractEntry test/cli-test.js
14540 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
14541 silly gunzTarPerm extractEntry test/exception-test.js
14542 silly gunzTarPerm extractEntry test/logger-test.js
14543 silly gunzTarPerm extractEntry test/container-test.js
14544 silly gunzTarPerm extractEntry test/log-exception-test.js
14545 silly gunzTarPerm extractEntry test/log-rewriter-test.js
14546 silly gunzTarPerm extractEntry test/winston-test.js
14547 silly gunzTarPerm extractEntry test/helpers.js
14548 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
14549 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
14550 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
14551 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
14552 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
14553 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
14554 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
14555 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
14556 silly gunzTarPerm extractEntry test/transports/console-test.js
14557 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
14558 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
14559 silly gunzTarPerm extractEntry test/transports/file-test.js
14560 silly gunzTarPerm extractEntry test/transports/transport.js
14561 silly gunzTarPerm extractEntry test/transports/webhook-test.js
14562 silly lockFile 14ecb04f-re-analyzer-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
14563 silly lockFile 14ecb04f-re-analyzer-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
14564 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14565 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14566 info preinstall winston@0.6.2
14567 verbose readDependencies using package.json deps
14568 verbose readDependencies using package.json deps
14569 verbose cache add [ 'async@0.1.x', null ]
14570 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14571 verbose parsed url { protocol: null,
14571 verbose parsed url   slashes: null,
14571 verbose parsed url   auth: null,
14571 verbose parsed url   host: null,
14571 verbose parsed url   port: null,
14571 verbose parsed url   hostname: null,
14571 verbose parsed url   hash: null,
14571 verbose parsed url   search: null,
14571 verbose parsed url   query: null,
14571 verbose parsed url   pathname: 'async@0.1.x',
14571 verbose parsed url   path: 'async@0.1.x',
14571 verbose parsed url   href: 'async@0.1.x' }
14572 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14573 verbose parsed url { protocol: null,
14573 verbose parsed url   slashes: null,
14573 verbose parsed url   auth: null,
14573 verbose parsed url   host: null,
14573 verbose parsed url   port: null,
14573 verbose parsed url   hostname: null,
14573 verbose parsed url   hash: null,
14573 verbose parsed url   search: null,
14573 verbose parsed url   query: null,
14573 verbose parsed url   pathname: '0.1.x',
14573 verbose parsed url   path: '0.1.x',
14573 verbose parsed url   href: '0.1.x' }
14574 verbose addNamed [ 'async', '0.1.x' ]
14575 verbose cache add [ 'cycle@1.0.x', null ]
14576 verbose cache add name=undefined spec="cycle@1.0.x" args=["cycle@1.0.x",null]
14577 verbose parsed url { protocol: null,
14577 verbose parsed url   slashes: null,
14577 verbose parsed url   auth: null,
14577 verbose parsed url   host: null,
14577 verbose parsed url   port: null,
14577 verbose parsed url   hostname: null,
14577 verbose parsed url   hash: null,
14577 verbose parsed url   search: null,
14577 verbose parsed url   query: null,
14577 verbose parsed url   pathname: 'cycle@1.0.x',
14577 verbose parsed url   path: 'cycle@1.0.x',
14577 verbose parsed url   href: 'cycle@1.0.x' }
14578 verbose cache add name="cycle" spec="1.0.x" args=["cycle","1.0.x"]
14579 verbose parsed url { protocol: null,
14579 verbose parsed url   slashes: null,
14579 verbose parsed url   auth: null,
14579 verbose parsed url   host: null,
14579 verbose parsed url   port: null,
14579 verbose parsed url   hostname: null,
14579 verbose parsed url   hash: null,
14579 verbose parsed url   search: null,
14579 verbose parsed url   query: null,
14579 verbose parsed url   pathname: '1.0.x',
14579 verbose parsed url   path: '1.0.x',
14579 verbose parsed url   href: '1.0.x' }
14580 verbose addNamed [ 'cycle', '1.0.x' ]
14581 verbose cache add [ 'pkginfo@0.2.x', null ]
14582 verbose cache add name=undefined spec="pkginfo@0.2.x" args=["pkginfo@0.2.x",null]
14583 verbose parsed url { protocol: null,
14583 verbose parsed url   slashes: null,
14583 verbose parsed url   auth: null,
14583 verbose parsed url   host: null,
14583 verbose parsed url   port: null,
14583 verbose parsed url   hostname: null,
14583 verbose parsed url   hash: null,
14583 verbose parsed url   search: null,
14583 verbose parsed url   query: null,
14583 verbose parsed url   pathname: 'pkginfo@0.2.x',
14583 verbose parsed url   path: 'pkginfo@0.2.x',
14583 verbose parsed url   href: 'pkginfo@0.2.x' }
14584 verbose cache add name="pkginfo" spec="0.2.x" args=["pkginfo","0.2.x"]
14585 verbose parsed url { protocol: null,
14585 verbose parsed url   slashes: null,
14585 verbose parsed url   auth: null,
14585 verbose parsed url   host: null,
14585 verbose parsed url   port: null,
14585 verbose parsed url   hostname: null,
14585 verbose parsed url   hash: null,
14585 verbose parsed url   search: null,
14585 verbose parsed url   query: null,
14585 verbose parsed url   pathname: '0.2.x',
14585 verbose parsed url   path: '0.2.x',
14585 verbose parsed url   href: '0.2.x' }
14586 verbose addNamed [ 'pkginfo', '0.2.x' ]
14587 verbose cache add [ 'request@2.9.x', null ]
14588 verbose cache add name=undefined spec="request@2.9.x" args=["request@2.9.x",null]
14589 verbose parsed url { protocol: null,
14589 verbose parsed url   slashes: null,
14589 verbose parsed url   auth: null,
14589 verbose parsed url   host: null,
14589 verbose parsed url   port: null,
14589 verbose parsed url   hostname: null,
14589 verbose parsed url   hash: null,
14589 verbose parsed url   search: null,
14589 verbose parsed url   query: null,
14589 verbose parsed url   pathname: 'request@2.9.x',
14589 verbose parsed url   path: 'request@2.9.x',
14589 verbose parsed url   href: 'request@2.9.x' }
14590 verbose cache add name="request" spec="2.9.x" args=["request","2.9.x"]
14591 verbose parsed url { protocol: null,
14591 verbose parsed url   slashes: null,
14591 verbose parsed url   auth: null,
14591 verbose parsed url   host: null,
14591 verbose parsed url   port: null,
14591 verbose parsed url   hostname: null,
14591 verbose parsed url   hash: null,
14591 verbose parsed url   search: null,
14591 verbose parsed url   query: null,
14591 verbose parsed url   pathname: '2.9.x',
14591 verbose parsed url   path: '2.9.x',
14591 verbose parsed url   href: '2.9.x' }
14592 verbose addNamed [ 'request', '2.9.x' ]
14593 verbose cache add [ 'stack-trace@0.0.x', null ]
14594 verbose cache add name=undefined spec="stack-trace@0.0.x" args=["stack-trace@0.0.x",null]
14595 verbose parsed url { protocol: null,
14595 verbose parsed url   slashes: null,
14595 verbose parsed url   auth: null,
14595 verbose parsed url   host: null,
14595 verbose parsed url   port: null,
14595 verbose parsed url   hostname: null,
14595 verbose parsed url   hash: null,
14595 verbose parsed url   search: null,
14595 verbose parsed url   query: null,
14595 verbose parsed url   pathname: 'stack-trace@0.0.x',
14595 verbose parsed url   path: 'stack-trace@0.0.x',
14595 verbose parsed url   href: 'stack-trace@0.0.x' }
14596 verbose cache add name="stack-trace" spec="0.0.x" args=["stack-trace","0.0.x"]
14597 verbose parsed url { protocol: null,
14597 verbose parsed url   slashes: null,
14597 verbose parsed url   auth: null,
14597 verbose parsed url   host: null,
14597 verbose parsed url   port: null,
14597 verbose parsed url   hostname: null,
14597 verbose parsed url   hash: null,
14597 verbose parsed url   search: null,
14597 verbose parsed url   query: null,
14597 verbose parsed url   pathname: '0.0.x',
14597 verbose parsed url   path: '0.0.x',
14597 verbose parsed url   href: '0.0.x' }
14598 verbose addNamed [ 'stack-trace', '0.0.x' ]
14599 silly gunzTarPerm modes [ '755', '644' ]
14600 silly gunzTarPerm extractEntry package.json
14601 silly gunzTarPerm extractEntry .npmignore
14602 silly gunzTarPerm extractEntry README.md
14603 silly gunzTarPerm extractEntry LICENSE
14604 silly gunzTarPerm extractEntry .travis.yml
14605 silly gunzTarPerm extractEntry docs/transports.md
14606 silly gunzTarPerm extractEntry examples/couchdb.js
14607 silly gunzTarPerm extractEntry examples/exception.js
14608 silly gunzTarPerm extractEntry examples/raw-mode.js
14609 silly gunzTarPerm extractEntry examples/webhook-post.js
14610 silly gunzTarPerm extractEntry lib/winston.js
14611 silly gunzTarPerm extractEntry lib/winston/common.js
14612 silly gunzTarPerm extractEntry lib/winston/config.js
14613 silly gunzTarPerm extractEntry lib/winston/container.js
14614 silly gunzTarPerm extractEntry lib/winston/exception.js
14615 silly gunzTarPerm extractEntry lib/winston/logger.js
14616 silly gunzTarPerm extractEntry lib/winston/transports.js
14617 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
14618 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
14619 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
14620 silly gunzTarPerm extractEntry lib/winston/transports/console.js
14621 silly gunzTarPerm extractEntry lib/winston/transports/file.js
14622 silly gunzTarPerm extractEntry lib/winston/transports/http.js
14623 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
14624 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
14625 silly gunzTarPerm extractEntry test/cli-test.js
14626 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
14627 silly gunzTarPerm extractEntry test/exception-test.js
14628 silly gunzTarPerm extractEntry test/logger-test.js
14629 silly gunzTarPerm extractEntry test/container-test.js
14630 silly gunzTarPerm extractEntry test/log-exception-test.js
14631 silly gunzTarPerm extractEntry test/log-rewriter-test.js
14632 silly gunzTarPerm extractEntry test/winston-test.js
14633 silly gunzTarPerm extractEntry test/helpers.js
14634 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
14635 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
14636 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
14637 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
14638 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
14639 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
14640 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
14641 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
14642 silly gunzTarPerm extractEntry test/transports/console-test.js
14643 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
14644 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
14645 silly gunzTarPerm extractEntry test/transports/file-test.js
14646 silly gunzTarPerm extractEntry test/transports/transport.js
14647 silly gunzTarPerm extractEntry test/transports/webhook-test.js
14648 silly lockFile eabf2b83-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
14649 silly lockFile eabf2b83-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
14650 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14651 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14652 info preinstall winston@0.6.2
14653 verbose readDependencies using package.json deps
14654 verbose readDependencies using package.json deps
14655 verbose cache add [ 'async@0.1.x', null ]
14656 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14657 verbose parsed url { protocol: null,
14657 verbose parsed url   slashes: null,
14657 verbose parsed url   auth: null,
14657 verbose parsed url   host: null,
14657 verbose parsed url   port: null,
14657 verbose parsed url   hostname: null,
14657 verbose parsed url   hash: null,
14657 verbose parsed url   search: null,
14657 verbose parsed url   query: null,
14657 verbose parsed url   pathname: 'async@0.1.x',
14657 verbose parsed url   path: 'async@0.1.x',
14657 verbose parsed url   href: 'async@0.1.x' }
14658 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14659 verbose parsed url { protocol: null,
14659 verbose parsed url   slashes: null,
14659 verbose parsed url   auth: null,
14659 verbose parsed url   host: null,
14659 verbose parsed url   port: null,
14659 verbose parsed url   hostname: null,
14659 verbose parsed url   hash: null,
14659 verbose parsed url   search: null,
14659 verbose parsed url   query: null,
14659 verbose parsed url   pathname: '0.1.x',
14659 verbose parsed url   path: '0.1.x',
14659 verbose parsed url   href: '0.1.x' }
14660 verbose addNamed [ 'async', '0.1.x' ]
14661 verbose cache add [ 'cycle@1.0.x', null ]
14662 verbose cache add name=undefined spec="cycle@1.0.x" args=["cycle@1.0.x",null]
14663 verbose parsed url { protocol: null,
14663 verbose parsed url   slashes: null,
14663 verbose parsed url   auth: null,
14663 verbose parsed url   host: null,
14663 verbose parsed url   port: null,
14663 verbose parsed url   hostname: null,
14663 verbose parsed url   hash: null,
14663 verbose parsed url   search: null,
14663 verbose parsed url   query: null,
14663 verbose parsed url   pathname: 'cycle@1.0.x',
14663 verbose parsed url   path: 'cycle@1.0.x',
14663 verbose parsed url   href: 'cycle@1.0.x' }
14664 verbose cache add name="cycle" spec="1.0.x" args=["cycle","1.0.x"]
14665 verbose parsed url { protocol: null,
14665 verbose parsed url   slashes: null,
14665 verbose parsed url   auth: null,
14665 verbose parsed url   host: null,
14665 verbose parsed url   port: null,
14665 verbose parsed url   hostname: null,
14665 verbose parsed url   hash: null,
14665 verbose parsed url   search: null,
14665 verbose parsed url   query: null,
14665 verbose parsed url   pathname: '1.0.x',
14665 verbose parsed url   path: '1.0.x',
14665 verbose parsed url   href: '1.0.x' }
14666 verbose addNamed [ 'cycle', '1.0.x' ]
14667 verbose cache add [ 'pkginfo@0.2.x', null ]
14668 verbose cache add name=undefined spec="pkginfo@0.2.x" args=["pkginfo@0.2.x",null]
14669 verbose parsed url { protocol: null,
14669 verbose parsed url   slashes: null,
14669 verbose parsed url   auth: null,
14669 verbose parsed url   host: null,
14669 verbose parsed url   port: null,
14669 verbose parsed url   hostname: null,
14669 verbose parsed url   hash: null,
14669 verbose parsed url   search: null,
14669 verbose parsed url   query: null,
14669 verbose parsed url   pathname: 'pkginfo@0.2.x',
14669 verbose parsed url   path: 'pkginfo@0.2.x',
14669 verbose parsed url   href: 'pkginfo@0.2.x' }
14670 verbose cache add name="pkginfo" spec="0.2.x" args=["pkginfo","0.2.x"]
14671 verbose parsed url { protocol: null,
14671 verbose parsed url   slashes: null,
14671 verbose parsed url   auth: null,
14671 verbose parsed url   host: null,
14671 verbose parsed url   port: null,
14671 verbose parsed url   hostname: null,
14671 verbose parsed url   hash: null,
14671 verbose parsed url   search: null,
14671 verbose parsed url   query: null,
14671 verbose parsed url   pathname: '0.2.x',
14671 verbose parsed url   path: '0.2.x',
14671 verbose parsed url   href: '0.2.x' }
14672 verbose addNamed [ 'pkginfo', '0.2.x' ]
14673 verbose cache add [ 'eyes@0.1.x', null ]
14674 verbose cache add name=undefined spec="eyes@0.1.x" args=["eyes@0.1.x",null]
14675 verbose parsed url { protocol: null,
14675 verbose parsed url   slashes: null,
14675 verbose parsed url   auth: null,
14675 verbose parsed url   host: null,
14675 verbose parsed url   port: null,
14675 verbose parsed url   hostname: null,
14675 verbose parsed url   hash: null,
14675 verbose parsed url   search: null,
14675 verbose parsed url   query: null,
14675 verbose parsed url   pathname: 'eyes@0.1.x',
14675 verbose parsed url   path: 'eyes@0.1.x',
14675 verbose parsed url   href: 'eyes@0.1.x' }
14676 verbose cache add name="eyes" spec="0.1.x" args=["eyes","0.1.x"]
14677 verbose parsed url { protocol: null,
14677 verbose parsed url   slashes: null,
14677 verbose parsed url   auth: null,
14677 verbose parsed url   host: null,
14677 verbose parsed url   port: null,
14677 verbose parsed url   hostname: null,
14677 verbose parsed url   hash: null,
14677 verbose parsed url   search: null,
14677 verbose parsed url   query: null,
14677 verbose parsed url   pathname: '0.1.x',
14677 verbose parsed url   path: '0.1.x',
14677 verbose parsed url   href: '0.1.x' }
14678 verbose addNamed [ 'eyes', '0.1.x' ]
14679 verbose cache add [ 'request@2.9.x', null ]
14680 verbose cache add name=undefined spec="request@2.9.x" args=["request@2.9.x",null]
14681 verbose parsed url { protocol: null,
14681 verbose parsed url   slashes: null,
14681 verbose parsed url   auth: null,
14681 verbose parsed url   host: null,
14681 verbose parsed url   port: null,
14681 verbose parsed url   hostname: null,
14681 verbose parsed url   hash: null,
14681 verbose parsed url   search: null,
14681 verbose parsed url   query: null,
14681 verbose parsed url   pathname: 'request@2.9.x',
14681 verbose parsed url   path: 'request@2.9.x',
14681 verbose parsed url   href: 'request@2.9.x' }
14682 verbose cache add name="request" spec="2.9.x" args=["request","2.9.x"]
14683 verbose parsed url { protocol: null,
14683 verbose parsed url   slashes: null,
14683 verbose parsed url   auth: null,
14683 verbose parsed url   host: null,
14683 verbose parsed url   port: null,
14683 verbose parsed url   hostname: null,
14683 verbose parsed url   hash: null,
14683 verbose parsed url   search: null,
14683 verbose parsed url   query: null,
14683 verbose parsed url   pathname: '2.9.x',
14683 verbose parsed url   path: '2.9.x',
14683 verbose parsed url   href: '2.9.x' }
14684 verbose addNamed [ 'request', '2.9.x' ]
14685 verbose cache add [ 'stack-trace@0.0.x', null ]
14686 verbose cache add name=undefined spec="stack-trace@0.0.x" args=["stack-trace@0.0.x",null]
14687 verbose parsed url { protocol: null,
14687 verbose parsed url   slashes: null,
14687 verbose parsed url   auth: null,
14687 verbose parsed url   host: null,
14687 verbose parsed url   port: null,
14687 verbose parsed url   hostname: null,
14687 verbose parsed url   hash: null,
14687 verbose parsed url   search: null,
14687 verbose parsed url   query: null,
14687 verbose parsed url   pathname: 'stack-trace@0.0.x',
14687 verbose parsed url   path: 'stack-trace@0.0.x',
14687 verbose parsed url   href: 'stack-trace@0.0.x' }
14688 verbose cache add name="stack-trace" spec="0.0.x" args=["stack-trace","0.0.x"]
14689 verbose parsed url { protocol: null,
14689 verbose parsed url   slashes: null,
14689 verbose parsed url   auth: null,
14689 verbose parsed url   host: null,
14689 verbose parsed url   port: null,
14689 verbose parsed url   hostname: null,
14689 verbose parsed url   hash: null,
14689 verbose parsed url   search: null,
14689 verbose parsed url   query: null,
14689 verbose parsed url   pathname: '0.0.x',
14689 verbose parsed url   path: '0.0.x',
14689 verbose parsed url   href: '0.0.x' }
14690 verbose addNamed [ 'stack-trace', '0.0.x' ]
14691 silly gunzTarPerm modes [ '755', '644' ]
14692 silly gunzTarPerm extractEntry package.json
14693 silly gunzTarPerm extractEntry .npmignore
14694 silly gunzTarPerm extractEntry README.md
14695 silly gunzTarPerm extractEntry LICENSE
14696 silly gunzTarPerm extractEntry .travis.yml
14697 silly gunzTarPerm extractEntry docs/transports.md
14698 silly gunzTarPerm extractEntry examples/couchdb.js
14699 silly gunzTarPerm extractEntry examples/exception.js
14700 silly gunzTarPerm extractEntry examples/raw-mode.js
14701 silly gunzTarPerm extractEntry examples/webhook-post.js
14702 silly gunzTarPerm extractEntry lib/winston.js
14703 silly gunzTarPerm extractEntry lib/winston/common.js
14704 silly gunzTarPerm extractEntry lib/winston/config.js
14705 silly gunzTarPerm extractEntry lib/winston/container.js
14706 silly gunzTarPerm extractEntry lib/winston/exception.js
14707 silly gunzTarPerm extractEntry lib/winston/logger.js
14708 silly gunzTarPerm extractEntry lib/winston/transports.js
14709 silly gunzTarPerm extractEntry lib/winston/config/cli-config.js
14710 silly gunzTarPerm extractEntry lib/winston/config/npm-config.js
14711 silly gunzTarPerm extractEntry lib/winston/config/syslog-config.js
14712 silly gunzTarPerm extractEntry lib/winston/transports/console.js
14713 silly gunzTarPerm extractEntry lib/winston/transports/file.js
14714 silly gunzTarPerm extractEntry lib/winston/transports/http.js
14715 silly gunzTarPerm extractEntry lib/winston/transports/transport.js
14716 silly gunzTarPerm extractEntry lib/winston/transports/webhook.js
14717 silly gunzTarPerm extractEntry test/cli-test.js
14718 silly gunzTarPerm extractEntry test/custom-timestamp-test.js
14719 silly gunzTarPerm extractEntry test/exception-test.js
14720 silly gunzTarPerm extractEntry test/logger-test.js
14721 silly gunzTarPerm extractEntry test/container-test.js
14722 silly gunzTarPerm extractEntry test/log-exception-test.js
14723 silly gunzTarPerm extractEntry test/log-rewriter-test.js
14724 silly gunzTarPerm extractEntry test/winston-test.js
14725 silly gunzTarPerm extractEntry test/helpers.js
14726 silly gunzTarPerm extractEntry test/fixtures/.gitkeep
14727 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-cert.pem
14728 silly gunzTarPerm extractEntry test/fixtures/keys/agent2-key.pem
14729 silly gunzTarPerm extractEntry test/fixtures/logs/.gitkeep
14730 silly gunzTarPerm extractEntry test/fixtures/scripts/default-exceptions.js
14731 silly gunzTarPerm extractEntry test/fixtures/scripts/exit-on-error.js
14732 silly gunzTarPerm extractEntry test/fixtures/scripts/log-exceptions.js
14733 silly gunzTarPerm extractEntry test/fixtures/scripts/unhandle-exceptions.js
14734 silly gunzTarPerm extractEntry test/transports/console-test.js
14735 silly gunzTarPerm extractEntry test/transports/file-maxfiles-test.js
14736 silly gunzTarPerm extractEntry test/transports/file-maxsize-test.js
14737 silly gunzTarPerm extractEntry test/transports/file-test.js
14738 silly gunzTarPerm extractEntry test/transports/transport.js
14739 silly gunzTarPerm extractEntry test/transports/webhook-test.js
14740 silly lockFile dbd652af-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
14741 silly lockFile dbd652af-ules-prompt-node-modules-winston tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
14742 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14743 silly lockFile f1cca79d-zo-npm-winston-0-6-2-package-tgz tar:///home/lerenzo/.npm/winston/0.6.2/package.tgz
14744 info preinstall winston@0.6.2
14745 verbose readDependencies using package.json deps
14746 verbose readDependencies using package.json deps
14747 verbose cache add [ 'eyes@0.1.x', null ]
14748 verbose cache add name=undefined spec="eyes@0.1.x" args=["eyes@0.1.x",null]
14749 verbose parsed url { protocol: null,
14749 verbose parsed url   slashes: null,
14749 verbose parsed url   auth: null,
14749 verbose parsed url   host: null,
14749 verbose parsed url   port: null,
14749 verbose parsed url   hostname: null,
14749 verbose parsed url   hash: null,
14749 verbose parsed url   search: null,
14749 verbose parsed url   query: null,
14749 verbose parsed url   pathname: 'eyes@0.1.x',
14749 verbose parsed url   path: 'eyes@0.1.x',
14749 verbose parsed url   href: 'eyes@0.1.x' }
14750 verbose cache add name="eyes" spec="0.1.x" args=["eyes","0.1.x"]
14751 verbose parsed url { protocol: null,
14751 verbose parsed url   slashes: null,
14751 verbose parsed url   auth: null,
14751 verbose parsed url   host: null,
14751 verbose parsed url   port: null,
14751 verbose parsed url   hostname: null,
14751 verbose parsed url   hash: null,
14751 verbose parsed url   search: null,
14751 verbose parsed url   query: null,
14751 verbose parsed url   pathname: '0.1.x',
14751 verbose parsed url   path: '0.1.x',
14751 verbose parsed url   href: '0.1.x' }
14752 verbose addNamed [ 'eyes', '0.1.x' ]
14753 verbose cache add [ 'async@0.1.x', null ]
14754 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
14755 verbose parsed url { protocol: null,
14755 verbose parsed url   slashes: null,
14755 verbose parsed url   auth: null,
14755 verbose parsed url   host: null,
14755 verbose parsed url   port: null,
14755 verbose parsed url   hostname: null,
14755 verbose parsed url   hash: null,
14755 verbose parsed url   search: null,
14755 verbose parsed url   query: null,
14755 verbose parsed url   pathname: 'async@0.1.x',
14755 verbose parsed url   path: 'async@0.1.x',
14755 verbose parsed url   href: 'async@0.1.x' }
14756 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
14757 verbose parsed url { protocol: null,
14757 verbose parsed url   slashes: null,
14757 verbose parsed url   auth: null,
14757 verbose parsed url   host: null,
14757 verbose parsed url   port: null,
14757 verbose parsed url   hostname: null,
14757 verbose parsed url   hash: null,
14757 verbose parsed url   search: null,
14757 verbose parsed url   query: null,
14757 verbose parsed url   pathname: '0.1.x',
14757 verbose parsed url   path: '0.1.x',
14757 verbose parsed url   href: '0.1.x' }
14758 verbose addNamed [ 'async', '0.1.x' ]
14759 verbose cache add [ 'cycle@1.0.x', null ]
14760 verbose cache add name=undefined spec="cycle@1.0.x" args=["cycle@1.0.x",null]
14761 verbose parsed url { protocol: null,
14761 verbose parsed url   slashes: null,
14761 verbose parsed url   auth: null,
14761 verbose parsed url   host: null,
14761 verbose parsed url   port: null,
14761 verbose parsed url   hostname: null,
14761 verbose parsed url   hash: null,
14761 verbose parsed url   search: null,
14761 verbose parsed url   query: null,
14761 verbose parsed url   pathname: 'cycle@1.0.x',
14761 verbose parsed url   path: 'cycle@1.0.x',
14761 verbose parsed url   href: 'cycle@1.0.x' }
14762 verbose cache add name="cycle" spec="1.0.x" args=["cycle","1.0.x"]
14763 verbose parsed url { protocol: null,
14763 verbose parsed url   slashes: null,
14763 verbose parsed url   auth: null,
14763 verbose parsed url   host: null,
14763 verbose parsed url   port: null,
14763 verbose parsed url   hostname: null,
14763 verbose parsed url   hash: null,
14763 verbose parsed url   search: null,
14763 verbose parsed url   query: null,
14763 verbose parsed url   pathname: '1.0.x',
14763 verbose parsed url   path: '1.0.x',
14763 verbose parsed url   href: '1.0.x' }
14764 verbose addNamed [ 'cycle', '1.0.x' ]
14765 verbose cache add [ 'pkginfo@0.2.x', null ]
14766 verbose cache add name=undefined spec="pkginfo@0.2.x" args=["pkginfo@0.2.x",null]
14767 verbose parsed url { protocol: null,
14767 verbose parsed url   slashes: null,
14767 verbose parsed url   auth: null,
14767 verbose parsed url   host: null,
14767 verbose parsed url   port: null,
14767 verbose parsed url   hostname: null,
14767 verbose parsed url   hash: null,
14767 verbose parsed url   search: null,
14767 verbose parsed url   query: null,
14767 verbose parsed url   pathname: 'pkginfo@0.2.x',
14767 verbose parsed url   path: 'pkginfo@0.2.x',
14767 verbose parsed url   href: 'pkginfo@0.2.x' }
14768 verbose cache add name="pkginfo" spec="0.2.x" args=["pkginfo","0.2.x"]
14769 verbose parsed url { protocol: null,
14769 verbose parsed url   slashes: null,
14769 verbose parsed url   auth: null,
14769 verbose parsed url   host: null,
14769 verbose parsed url   port: null,
14769 verbose parsed url   hostname: null,
14769 verbose parsed url   hash: null,
14769 verbose parsed url   search: null,
14769 verbose parsed url   query: null,
14769 verbose parsed url   pathname: '0.2.x',
14769 verbose parsed url   path: '0.2.x',
14769 verbose parsed url   href: '0.2.x' }
14770 verbose addNamed [ 'pkginfo', '0.2.x' ]
14771 verbose cache add [ 'request@2.9.x', null ]
14772 verbose cache add name=undefined spec="request@2.9.x" args=["request@2.9.x",null]
14773 verbose parsed url { protocol: null,
14773 verbose parsed url   slashes: null,
14773 verbose parsed url   auth: null,
14773 verbose parsed url   host: null,
14773 verbose parsed url   port: null,
14773 verbose parsed url   hostname: null,
14773 verbose parsed url   hash: null,
14773 verbose parsed url   search: null,
14773 verbose parsed url   query: null,
14773 verbose parsed url   pathname: 'request@2.9.x',
14773 verbose parsed url   path: 'request@2.9.x',
14773 verbose parsed url   href: 'request@2.9.x' }
14774 verbose cache add name="request" spec="2.9.x" args=["request","2.9.x"]
14775 verbose parsed url { protocol: null,
14775 verbose parsed url   slashes: null,
14775 verbose parsed url   auth: null,
14775 verbose parsed url   host: null,
14775 verbose parsed url   port: null,
14775 verbose parsed url   hostname: null,
14775 verbose parsed url   hash: null,
14775 verbose parsed url   search: null,
14775 verbose parsed url   query: null,
14775 verbose parsed url   pathname: '2.9.x',
14775 verbose parsed url   path: '2.9.x',
14775 verbose parsed url   href: '2.9.x' }
14776 verbose addNamed [ 'request', '2.9.x' ]
14777 verbose cache add [ 'stack-trace@0.0.x', null ]
14778 verbose cache add name=undefined spec="stack-trace@0.0.x" args=["stack-trace@0.0.x",null]
14779 verbose parsed url { protocol: null,
14779 verbose parsed url   slashes: null,
14779 verbose parsed url   auth: null,
14779 verbose parsed url   host: null,
14779 verbose parsed url   port: null,
14779 verbose parsed url   hostname: null,
14779 verbose parsed url   hash: null,
14779 verbose parsed url   search: null,
14779 verbose parsed url   query: null,
14779 verbose parsed url   pathname: 'stack-trace@0.0.x',
14779 verbose parsed url   path: 'stack-trace@0.0.x',
14779 verbose parsed url   href: 'stack-trace@0.0.x' }
14780 verbose cache add name="stack-trace" spec="0.0.x" args=["stack-trace","0.0.x"]
14781 verbose parsed url { protocol: null,
14781 verbose parsed url   slashes: null,
14781 verbose parsed url   auth: null,
14781 verbose parsed url   host: null,
14781 verbose parsed url   port: null,
14781 verbose parsed url   hostname: null,
14781 verbose parsed url   hash: null,
14781 verbose parsed url   search: null,
14781 verbose parsed url   query: null,
14781 verbose parsed url   pathname: '0.0.x',
14781 verbose parsed url   path: '0.0.x',
14781 verbose parsed url   href: '0.0.x' }
14782 verbose addNamed [ 'stack-trace', '0.0.x' ]
14783 http 200 https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz
14784 http 200 https://registry.npmjs.org/slide
14785 silly registry.get cb [ 200,
14785 silly registry.get   { vary: 'Accept',
14785 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
14785 silly registry.get     etag: '"7UXNS5ZGZW44OX4DZJ9V1YVMD"',
14785 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:38 GMT',
14785 silly registry.get     'content-type': 'application/json',
14785 silly registry.get     'content-length': '16475' } ]
14786 silly addNameRange number 2 { name: 'slide', range: '>=1.1.3-0 <1.2.0-0', hasData: true }
14787 silly addNameRange versions [ 'slide',
14787 silly addNameRange   [ '1.0.0',
14787 silly addNameRange     '1.0.1',
14787 silly addNameRange     '1.1.0',
14787 silly addNameRange     '1.1.1',
14787 silly addNameRange     '1.1.2',
14787 silly addNameRange     '1.1.3',
14787 silly addNameRange     '1.1.4',
14787 silly addNameRange     '1.1.5' ] ]
14788 verbose addNamed [ 'slide', '1.1.5' ]
14789 verbose addNamed [ '1.1.5', '1.1.5' ]
14790 silly lockFile 131f64ed-slide-1-1-5 slide@1.1.5
14791 verbose lock slide@1.1.5 /home/lerenzo/.npm/131f64ed-slide-1-1-5.lock
14792 silly lockFile 0e522924--npmjs-org-slide-slide-1-1-5-tgz https://registry.npmjs.org/slide/-/slide-1.1.5.tgz
14793 verbose lock https://registry.npmjs.org/slide/-/slide-1.1.5.tgz /home/lerenzo/.npm/0e522924--npmjs-org-slide-slide-1-1-5-tgz.lock
14794 verbose addRemoteTarball [ 'https://registry.npmjs.org/slide/-/slide-1.1.5.tgz',
14794 verbose addRemoteTarball   '31732adeae78f1d2d60a29b63baf6a032df7c25d' ]
14795 info retry fetch attempt 1 at 14:12:39
14796 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz
14797 http GET https://registry.npmjs.org/slide/-/slide-1.1.5.tgz
14798 http 200 https://registry.npmjs.org/npmlog
14799 silly registry.get cb [ 200,
14799 silly registry.get   { vary: 'Accept',
14799 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
14799 silly registry.get     etag: '"85TNR7G5V78U7IEG1SP0UVQS8"',
14799 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:39 GMT',
14799 silly registry.get     'content-type': 'application/json',
14799 silly registry.get     'content-length': '26641' } ]
14800 silly addNameRange number 2 { name: 'npmlog', range: '>=0.0.0-0 <1.0.0-0', hasData: true }
14801 silly addNameRange versions [ 'npmlog',
14801 silly addNameRange   [ '0.0.1', '0.0.2', '0.0.3', '0.0.4', '0.0.5', '0.0.6' ] ]
14802 verbose addNamed [ 'npmlog', '0.0.6' ]
14803 verbose addNamed [ '0.0.6', '0.0.6' ]
14804 silly lockFile 54dedc57-npmlog-0-0-6 npmlog@0.0.6
14805 verbose lock npmlog@0.0.6 /home/lerenzo/.npm/54dedc57-npmlog-0-0-6.lock
14806 silly lockFile d8e4514c-pmjs-org-npmlog-npmlog-0-0-6-tgz https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz
14807 verbose lock https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz /home/lerenzo/.npm/d8e4514c-pmjs-org-npmlog-npmlog-0-0-6-tgz.lock
14808 verbose addRemoteTarball [ 'https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz',
14808 verbose addRemoteTarball   '685043fe71aa1665d6e3b2acef180640caf40873' ]
14809 info retry fetch attempt 1 at 14:12:40
14810 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz
14811 http GET https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz
14812 http 304 https://registry.npmjs.org/graceful-fs
14813 silly registry.get cb [ 304,
14813 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
14813 silly registry.get     etag: '"8VTIGE3KHXX4861152PVTWGF8"',
14813 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:40 GMT',
14813 silly registry.get     'content-length': '0' } ]
14814 verbose etag graceful-fs from cache
14815 silly addNameRange number 2 { name: 'graceful-fs',
14815 silly addNameRange   range: '>=1.1.8-0 <1.2.0-0',
14815 silly addNameRange   hasData: true }
14816 silly addNameRange versions [ 'graceful-fs',
14816 silly addNameRange   [ '1.0.0',
14816 silly addNameRange     '1.0.1',
14816 silly addNameRange     '1.0.2',
14816 silly addNameRange     '1.1.0',
14816 silly addNameRange     '1.1.1',
14816 silly addNameRange     '1.1.2',
14816 silly addNameRange     '1.1.3',
14816 silly addNameRange     '1.1.4',
14816 silly addNameRange     '1.1.5',
14816 silly addNameRange     '1.1.6',
14816 silly addNameRange     '1.1.7',
14816 silly addNameRange     '1.1.8',
14816 silly addNameRange     '1.1.9',
14816 silly addNameRange     '1.1.10',
14816 silly addNameRange     '1.1.11',
14816 silly addNameRange     '1.1.12',
14816 silly addNameRange     '1.1.13',
14816 silly addNameRange     '1.1.14',
14816 silly addNameRange     '1.2.0',
14816 silly addNameRange     '1.2.1',
14816 silly addNameRange     '1.2.2',
14816 silly addNameRange     '1.2.3',
14816 silly addNameRange     '2.0.0',
14816 silly addNameRange     '2.0.1' ] ]
14817 verbose addNamed [ 'graceful-fs', '1.1.14' ]
14818 verbose addNamed [ '1.1.14', '1.1.14' ]
14819 silly lockFile 2cf96e8d-graceful-fs-1-1-14 graceful-fs@1.1.14
14820 verbose lock graceful-fs@1.1.14 /home/lerenzo/.npm/2cf96e8d-graceful-fs-1-1-14.lock
14821 silly lockFile 464c4d45-aceful-fs-graceful-fs-1-1-14-tgz https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz
14822 verbose lock https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz /home/lerenzo/.npm/464c4d45-aceful-fs-graceful-fs-1-1-14-tgz.lock
14823 verbose addRemoteTarball [ 'https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz',
14823 verbose addRemoteTarball   '07078db5f6377f6321fceaaedf497de124dc9465' ]
14824 info retry fetch attempt 1 at 14:12:41
14825 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz
14826 http GET https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz
14827 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz
14828 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14829 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package /home/lerenzo/.npm/aa792cb9-40273-0-1941269994713366-package.lock
14830 silly lockFile 6760680a-40273-0-1941269994713366-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz
14831 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz /home/lerenzo/.npm/6760680a-40273-0-1941269994713366-tmp-tgz.lock
14832 silly gunzTarPerm modes [ '755', '644' ]
14833 silly gunzTarPerm extractEntry package.json
14834 silly gunzTarPerm extractEntry README.md
14835 silly gunzTarPerm extractEntry LICENSE
14836 silly gunzTarPerm extractEntry bench.js
14837 silly gunzTarPerm extractEntry sigmund.js
14838 silly gunzTarPerm extractEntry test/basic.js
14839 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14840 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14841 silly lockFile 6760680a-40273-0-1941269994713366-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz
14842 silly lockFile 6760680a-40273-0-1941269994713366-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/tmp.tgz
14843 verbose tar pack [ '/home/lerenzo/.npm/sigmund/1.0.0/package.tgz',
14843 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package' ]
14844 verbose tarball /home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14845 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14846 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14847 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package /home/lerenzo/.npm/aa792cb9-40273-0-1941269994713366-package.lock
14848 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14849 verbose lock tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz /home/lerenzo/.npm/b3bca43b-zo-npm-sigmund-1-0-0-package-tgz.lock
14850 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14851 silly lockFile aa792cb9-40273-0-1941269994713366-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572340273-0.1941269994713366/package
14852 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14853 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14854 silly lockFile e56faf8e-erenzo-npm-sigmund-1-0-0-package /home/lerenzo/.npm/sigmund/1.0.0/package
14855 verbose lock /home/lerenzo/.npm/sigmund/1.0.0/package /home/lerenzo/.npm/e56faf8e-erenzo-npm-sigmund-1-0-0-package.lock
14856 silly lockFile e56faf8e-erenzo-npm-sigmund-1-0-0-package /home/lerenzo/.npm/sigmund/1.0.0/package
14857 silly lockFile e56faf8e-erenzo-npm-sigmund-1-0-0-package /home/lerenzo/.npm/sigmund/1.0.0/package
14858 verbose tar unpack /home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14859 silly lockFile 10ef3541-erenzo-npm-sigmund-1-0-0-package tar:///home/lerenzo/.npm/sigmund/1.0.0/package
14860 verbose lock tar:///home/lerenzo/.npm/sigmund/1.0.0/package /home/lerenzo/.npm/10ef3541-erenzo-npm-sigmund-1-0-0-package.lock
14861 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14862 verbose lock tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz /home/lerenzo/.npm/b3bca43b-zo-npm-sigmund-1-0-0-package-tgz.lock
14863 silly gunzTarPerm modes [ '755', '644' ]
14864 silly gunzTarPerm extractEntry package.json
14865 silly gunzTarPerm extractEntry README.md
14866 silly gunzTarPerm extractEntry LICENSE
14867 silly gunzTarPerm extractEntry bench.js
14868 silly gunzTarPerm extractEntry sigmund.js
14869 silly gunzTarPerm extractEntry test/basic.js
14870 silly lockFile 10ef3541-erenzo-npm-sigmund-1-0-0-package tar:///home/lerenzo/.npm/sigmund/1.0.0/package
14871 silly lockFile 10ef3541-erenzo-npm-sigmund-1-0-0-package tar:///home/lerenzo/.npm/sigmund/1.0.0/package
14872 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14873 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14874 verbose chmod /home/lerenzo/.npm/sigmund/1.0.0/package.tgz 644
14875 verbose chown /home/lerenzo/.npm/sigmund/1.0.0/package.tgz [ 1000, 1000 ]
14876 silly lockFile 6a95961e-js-org-sigmund-sigmund-1-0-0-tgz https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz
14877 silly lockFile 6a95961e-js-org-sigmund-sigmund-1-0-0-tgz https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz
14878 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
14879 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
14880 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
14881 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
14882 silly resolved [ { name: 'lru-cache',
14882 silly resolved     description: 'A cache object that deletes the least-recently-used items.',
14882 silly resolved     version: '2.5.0',
14882 silly resolved     author: { name: 'Isaac Z. Schlueter', email: 'i@izs.me' },
14882 silly resolved     scripts: { test: 'tap test --gc' },
14882 silly resolved     main: 'lib/lru-cache.js',
14882 silly resolved     repository:
14882 silly resolved      { type: 'git',
14882 silly resolved        url: 'git://github.com/isaacs/node-lru-cache.git' },
14882 silly resolved     devDependencies: { tap: '', weak: '' },
14882 silly resolved     license:
14882 silly resolved      { type: 'MIT',
14882 silly resolved        url: 'http://github.com/isaacs/node-lru-cache/raw/master/LICENSE' },
14882 silly resolved     readme: '# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require("lru-cache")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set("key", "value")\ncache.get("key") // "value"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it\'ll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that\'s the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it\'ll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you\'re storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It\'s called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you\'ll have to do that in a\n  `nextTick` or `setTimeout` callback or it won\'t do anything.\n* `stale` By default, if you set a `maxAge`, it\'ll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it\'s\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it\'ll return the stale value before deleting it.  If\n  you don\'t set this, then it\'ll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the "recently used"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the "recently used"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it\'s handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n',
14882 silly resolved     readmeFilename: 'README.md',
14882 silly resolved     bugs: { url: 'https://github.com/isaacs/node-lru-cache/issues' },
14882 silly resolved     homepage: 'https://github.com/isaacs/node-lru-cache',
14882 silly resolved     _id: 'lru-cache@2.5.0',
14882 silly resolved     dist: { shasum: '1aa0ab277cb0a1ff9d2b429cd4d25493bd08e4dd' },
14882 silly resolved     _from: 'lru-cache@2',
14882 silly resolved     _resolved: 'https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz' },
14882 silly resolved   { name: 'sigmund',
14882 silly resolved     version: '1.0.0',
14882 silly resolved     description: 'Quick and dirty signatures for Objects.',
14882 silly resolved     main: 'sigmund.js',
14882 silly resolved     directories: { test: 'test' },
14882 silly resolved     dependencies: {},
14882 silly resolved     devDependencies: { tap: '~0.3.0' },
14882 silly resolved     scripts: { test: 'tap test/*.js', bench: 'node bench.js' },
14882 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/sigmund' },
14882 silly resolved     keywords: [ 'object', 'signature', 'key', 'data', 'psychoanalysis' ],
14882 silly resolved     author:
14882 silly resolved      { name: 'Isaac Z. Schlueter',
14882 silly resolved        email: 'i@izs.me',
14882 silly resolved        url: 'http://blog.izs.me/' },
14882 silly resolved     license: 'BSD',
14882 silly resolved     readme: '# sigmund\n\nQuick and dirty signatures for Objects.\n\nThis is like a much faster `deepEquals` comparison, which returns a\nstring key suitable for caches and the like.\n\n## Usage\n\n```javascript\nfunction doSomething (someObj) {\n  var key = sigmund(someObj, maxDepth) // max depth defaults to 10\n  var cached = cache.get(key)\n  if (cached) return cached)\n\n  var result = expensiveCalculation(someObj)\n  cache.set(key, result)\n  return result\n}\n```\n\nThe resulting key will be as unique and reproducible as calling\n`JSON.stringify` or `util.inspect` on the object, but is much faster.\nIn order to achieve this speed, some differences are glossed over.\nFor example, the object `{0:\'foo\'}` will be treated identically to the\narray `[\'foo\']`.\n\nAlso, just as there is no way to summon the soul from the scribblings\nof a cocain-addled psychoanalyst, there is no way to revive the object\nfrom the signature string that sigmund gives you.  In fact, it\'s\nbarely even readable.\n\nAs with `sys.inspect` and `JSON.stringify`, larger objects will\nproduce larger signature strings.\n\nBecause sigmund is a bit less strict than the more thorough\nalternatives, the strings will be shorter, and also there is a\nslightly higher chance for collisions.  For example, these objects\nhave the same signature:\n\n    var obj1 = {a:\'b\',c:/def/,g:[\'h\',\'i\',{j:\'\',k:\'l\'}]}\n    var obj2 = {a:\'b\',c:\'/def/\',g:[\'h\',\'i\',\'{jkl\']}\n\nLike a good Freudian, sigmund is most effective when you already have\nsome understanding of what you\'re looking for.  It can help you help\nyourself, but you must be willing to do some work as well.\n\nCycles are handled, and cyclical objects are silently omitted (though\nthe key is included in the signature output.)\n\nThe second argument is the maximum depth, which defaults to 10,\nbecause that is the maximum object traversal depth covered by most\ninsurance carriers.\n',
14882 silly resolved     readmeFilename: 'README.md',
14882 silly resolved     bugs: { url: 'https://github.com/isaacs/sigmund/issues' },
14882 silly resolved     homepage: 'https://github.com/isaacs/sigmund',
14882 silly resolved     _id: 'sigmund@1.0.0',
14882 silly resolved     dist: { shasum: '5ead8f5a47c545a62a3051ede0101202ef020100' },
14882 silly resolved     _from: 'sigmund@~1.0.0',
14882 silly resolved     _resolved: 'https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz' } ]
14883 info install lru-cache@2.5.0 into /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
14884 info install sigmund@1.0.0 into /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
14885 info installOne lru-cache@2.5.0
14886 info installOne sigmund@1.0.0
14887 info /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache unbuild
14888 info /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund unbuild
14889 verbose tar unpack /home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
14890 silly lockFile feee214c-minimatch-node-modules-lru-cache tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache
14891 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache /home/lerenzo/.npm/feee214c-minimatch-node-modules-lru-cache.lock
14892 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
14893 verbose lock tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz /home/lerenzo/.npm/5f42a512--npm-lru-cache-2-5-0-package-tgz.lock
14894 verbose tar unpack /home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14895 silly lockFile 81c5d6a7-s-minimatch-node-modules-sigmund tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund
14896 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund /home/lerenzo/.npm/81c5d6a7-s-minimatch-node-modules-sigmund.lock
14897 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14898 verbose lock tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz /home/lerenzo/.npm/b3bca43b-zo-npm-sigmund-1-0-0-package-tgz.lock
14899 silly gunzTarPerm modes [ '755', '644' ]
14900 silly gunzTarPerm modes [ '755', '644' ]
14901 silly gunzTarPerm extractEntry package.json
14902 silly gunzTarPerm extractEntry package.json
14903 silly gunzTarPerm extractEntry .npmignore
14904 silly gunzTarPerm extractEntry README.md
14905 silly gunzTarPerm extractEntry README.md
14906 silly gunzTarPerm extractEntry LICENSE
14907 silly gunzTarPerm extractEntry LICENSE
14908 silly gunzTarPerm extractEntry CONTRIBUTORS
14909 silly gunzTarPerm extractEntry bench.js
14910 silly gunzTarPerm extractEntry sigmund.js
14911 silly gunzTarPerm extractEntry lib/lru-cache.js
14912 silly gunzTarPerm extractEntry test/basic.js
14913 silly gunzTarPerm extractEntry test/foreach.js
14914 silly gunzTarPerm extractEntry test/memory-leak.js
14915 silly gunzTarPerm extractEntry test/basic.js
14916 silly lockFile 81c5d6a7-s-minimatch-node-modules-sigmund tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund
14917 silly lockFile 81c5d6a7-s-minimatch-node-modules-sigmund tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund
14918 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14919 silly lockFile b3bca43b-zo-npm-sigmund-1-0-0-package-tgz tar:///home/lerenzo/.npm/sigmund/1.0.0/package.tgz
14920 info preinstall sigmund@1.0.0
14921 verbose readDependencies using package.json deps
14922 verbose readDependencies using package.json deps
14923 silly resolved []
14924 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund
14925 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/sigmund
14926 verbose linkStuff [ true,
14926 verbose linkStuff   '/usr/local/lib/node_modules',
14926 verbose linkStuff   false,
14926 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules' ]
14927 info linkStuff sigmund@1.0.0
14928 verbose linkBins sigmund@1.0.0
14929 verbose linkMans sigmund@1.0.0
14930 verbose rebuildBundles sigmund@1.0.0
14931 info install sigmund@1.0.0
14932 info postinstall sigmund@1.0.0
14933 silly lockFile feee214c-minimatch-node-modules-lru-cache tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache
14934 silly lockFile feee214c-minimatch-node-modules-lru-cache tar:///usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache
14935 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
14936 silly lockFile 5f42a512--npm-lru-cache-2-5-0-package-tgz tar:///home/lerenzo/.npm/lru-cache/2.5.0/package.tgz
14937 info preinstall lru-cache@2.5.0
14938 verbose readDependencies using package.json deps
14939 verbose readDependencies using package.json deps
14940 silly resolved []
14941 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache
14942 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules/lru-cache
14943 verbose linkStuff [ true,
14943 verbose linkStuff   '/usr/local/lib/node_modules',
14943 verbose linkStuff   false,
14943 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch/node_modules' ]
14944 info linkStuff lru-cache@2.5.0
14945 verbose linkBins lru-cache@2.5.0
14946 verbose linkMans lru-cache@2.5.0
14947 verbose rebuildBundles lru-cache@2.5.0
14948 info install lru-cache@2.5.0
14949 info postinstall lru-cache@2.5.0
14950 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
14951 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules/minimatch
14952 verbose linkStuff [ true,
14952 verbose linkStuff   '/usr/local/lib/node_modules',
14952 verbose linkStuff   false,
14952 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore/node_modules' ]
14953 info linkStuff minimatch@0.2.12
14954 verbose linkBins minimatch@0.2.12
14955 verbose linkMans minimatch@0.2.12
14956 verbose rebuildBundles minimatch@0.2.12
14957 verbose rebuildBundles [ 'lru-cache', 'sigmund' ]
14958 info install minimatch@0.2.12
14959 info postinstall minimatch@0.2.12
14960 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore
14961 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules/fstream-ignore
14962 verbose linkStuff [ true,
14962 verbose linkStuff   '/usr/local/lib/node_modules',
14962 verbose linkStuff   false,
14962 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/fstream-npm/node_modules' ]
14963 info linkStuff fstream-ignore@0.0.7
14964 verbose linkBins fstream-ignore@0.0.7
14965 verbose linkMans fstream-ignore@0.0.7
14966 verbose rebuildBundles fstream-ignore@0.0.7
14967 verbose rebuildBundles [ 'minimatch' ]
14968 info install fstream-ignore@0.0.7
14969 info postinstall fstream-ignore@0.0.7
14970 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm
14971 info build /usr/local/lib/node_modules/jitsu/node_modules/fstream-npm
14972 verbose linkStuff [ true,
14972 verbose linkStuff   '/usr/local/lib/node_modules',
14972 verbose linkStuff   false,
14972 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules' ]
14973 info linkStuff fstream-npm@0.1.4
14974 verbose linkBins fstream-npm@0.1.4
14975 verbose linkMans fstream-npm@0.1.4
14976 verbose rebuildBundles fstream-npm@0.1.4
14977 verbose rebuildBundles [ 'fstream-ignore', 'inherits' ]
14978 info install fstream-npm@0.1.4
14979 info postinstall fstream-npm@0.1.4
14980 http 200 https://registry.npmjs.org/mute-stream
14981 silly registry.get cb [ 200,
14981 silly registry.get   { vary: 'Accept',
14981 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
14981 silly registry.get     etag: '"CRYMZFAL5IFJ68CIUWV77NAKG"',
14981 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:41 GMT',
14981 silly registry.get     'content-type': 'application/json',
14981 silly registry.get     'content-length': '11002' } ]
14982 silly addNameRange number 2 { name: 'mute-stream',
14982 silly addNameRange   range: '>=0.0.4-0 <0.1.0-0',
14982 silly addNameRange   hasData: true }
14983 silly addNameRange versions [ 'mute-stream', [ '0.0.1', '0.0.2', '0.0.3', '0.0.4' ] ]
14984 verbose addNamed [ 'mute-stream', '0.0.4' ]
14985 verbose addNamed [ '0.0.4', '0.0.4' ]
14986 silly lockFile 71666a8b-mute-stream-0-0-4 mute-stream@0.0.4
14987 verbose lock mute-stream@0.0.4 /home/lerenzo/.npm/71666a8b-mute-stream-0-0-4.lock
14988 silly lockFile 00d36016-ute-stream-mute-stream-0-0-4-tgz https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz
14989 verbose lock https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz /home/lerenzo/.npm/00d36016-ute-stream-mute-stream-0-0-4-tgz.lock
14990 verbose addRemoteTarball [ 'https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz',
14990 verbose addRemoteTarball   'a9219960a6d5d5d046597aee51252c6655f7177e' ]
14991 info retry fetch attempt 1 at 14:12:42
14992 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz
14993 http GET https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz
14994 http 200 https://registry.npmjs.org/burrito
14995 silly registry.get cb [ 200,
14995 silly registry.get   { vary: 'Accept',
14995 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
14995 silly registry.get     etag: '"4GHV64UBX9MXXCSXQ373HQKJL"',
14995 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:42 GMT',
14995 silly registry.get     'content-type': 'application/json',
14995 silly registry.get     'content-length': '21842' } ]
14996 silly addNameRange number 2 { name: 'burrito', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
14997 silly addNameRange versions [ 'burrito',
14997 silly addNameRange   [ '0.0.0',
14997 silly addNameRange     '0.1.0',
14997 silly addNameRange     '0.1.1',
14997 silly addNameRange     '0.1.2',
14997 silly addNameRange     '0.1.3',
14997 silly addNameRange     '0.1.4',
14997 silly addNameRange     '0.2.0',
14997 silly addNameRange     '0.2.1',
14997 silly addNameRange     '0.2.2',
14997 silly addNameRange     '0.2.3',
14997 silly addNameRange     '0.2.4',
14997 silly addNameRange     '0.2.5',
14997 silly addNameRange     '0.2.6',
14997 silly addNameRange     '0.2.7',
14997 silly addNameRange     '0.2.8',
14997 silly addNameRange     '0.2.9',
14997 silly addNameRange     '0.2.10',
14997 silly addNameRange     '0.2.11',
14997 silly addNameRange     '0.2.12' ] ]
14998 verbose addNamed [ 'burrito', '0.2.12' ]
14999 verbose addNamed [ '0.2.12', '0.2.12' ]
15000 silly lockFile e1162205-burrito-0-2-12 burrito@0.2.12
15001 verbose lock burrito@0.2.12 /home/lerenzo/.npm/e1162205-burrito-0-2-12.lock
15002 silly lockFile 83adf916-s-org-burrito-burrito-0-2-12-tgz https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz
15003 verbose lock https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz /home/lerenzo/.npm/83adf916-s-org-burrito-burrito-0-2-12-tgz.lock
15004 verbose addRemoteTarball [ 'https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz',
15004 verbose addRemoteTarball   'd0d6e6ac81d5e99789c6fa4accb0b0031ea54f6b' ]
15005 info retry fetch attempt 1 at 14:12:43
15006 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz
15007 http GET https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz
15008 http 200 https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz
15009 http 200 https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz
15010 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz
15011 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15012 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package /home/lerenzo/.npm/55b20d8d-62313-0-9752148038242012-package.lock
15013 silly lockFile a283296d-62313-0-9752148038242012-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz
15014 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz /home/lerenzo/.npm/a283296d-62313-0-9752148038242012-tmp-tgz.lock
15015 silly gunzTarPerm modes [ '755', '644' ]
15016 silly gunzTarPerm extractEntry package.json
15017 silly gunzTarPerm extractEntry README.md
15018 silly gunzTarPerm extractEntry LICENSE
15019 silly gunzTarPerm extractEntry mute.js
15020 silly gunzTarPerm extractEntry test/basic.js
15021 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15022 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15023 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz
15024 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15025 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package /home/lerenzo/.npm/f9304214-60752-0-5930701235774904-package.lock
15026 silly lockFile 472065bc-60752-0-5930701235774904-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz
15027 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz /home/lerenzo/.npm/472065bc-60752-0-5930701235774904-tmp-tgz.lock
15028 silly lockFile a283296d-62313-0-9752148038242012-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz
15029 silly lockFile a283296d-62313-0-9752148038242012-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/tmp.tgz
15030 silly gunzTarPerm modes [ '755', '644' ]
15031 verbose tar pack [ '/home/lerenzo/.npm/mute-stream/0.0.4/package.tgz',
15031 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package' ]
15032 verbose tarball /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15033 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15034 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15035 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package /home/lerenzo/.npm/55b20d8d-62313-0-9752148038242012-package.lock
15036 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15037 verbose lock tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz /home/lerenzo/.npm/41d596c3-pm-mute-stream-0-0-4-package-tgz.lock
15038 silly gunzTarPerm extractEntry package.json
15039 silly gunzTarPerm extractEntry README.md
15040 silly gunzTarPerm extractEntry LICENSE
15041 silly gunzTarPerm extractEntry example.js
15042 silly gunzTarPerm extractEntry log.js
15043 silly gunzTarPerm extractEntry test/basic.js
15044 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15045 silly lockFile 55b20d8d-62313-0-9752148038242012-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572362313-0.9752148038242012/package
15046 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15047 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15048 silly lockFile 25df6ee8-zo-npm-mute-stream-0-0-4-package /home/lerenzo/.npm/mute-stream/0.0.4/package
15049 verbose lock /home/lerenzo/.npm/mute-stream/0.0.4/package /home/lerenzo/.npm/25df6ee8-zo-npm-mute-stream-0-0-4-package.lock
15050 silly lockFile 25df6ee8-zo-npm-mute-stream-0-0-4-package /home/lerenzo/.npm/mute-stream/0.0.4/package
15051 silly lockFile 25df6ee8-zo-npm-mute-stream-0-0-4-package /home/lerenzo/.npm/mute-stream/0.0.4/package
15052 verbose tar unpack /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15053 silly lockFile e93af9cd-zo-npm-mute-stream-0-0-4-package tar:///home/lerenzo/.npm/mute-stream/0.0.4/package
15054 verbose lock tar:///home/lerenzo/.npm/mute-stream/0.0.4/package /home/lerenzo/.npm/e93af9cd-zo-npm-mute-stream-0-0-4-package.lock
15055 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15056 verbose lock tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz /home/lerenzo/.npm/41d596c3-pm-mute-stream-0-0-4-package-tgz.lock
15057 silly gunzTarPerm modes [ '755', '644' ]
15058 silly gunzTarPerm extractEntry package.json
15059 silly gunzTarPerm extractEntry README.md
15060 silly gunzTarPerm extractEntry LICENSE
15061 silly gunzTarPerm extractEntry mute.js
15062 silly gunzTarPerm extractEntry test/basic.js
15063 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15064 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15065 silly lockFile 472065bc-60752-0-5930701235774904-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz
15066 silly lockFile 472065bc-60752-0-5930701235774904-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/tmp.tgz
15067 verbose tar pack [ '/home/lerenzo/.npm/npmlog/0.0.6/package.tgz',
15067 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package' ]
15068 verbose tarball /home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15069 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15070 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15071 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package /home/lerenzo/.npm/f9304214-60752-0-5930701235774904-package.lock
15072 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15073 verbose lock tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz /home/lerenzo/.npm/213b80e8-nzo-npm-npmlog-0-0-6-package-tgz.lock
15074 silly lockFile e93af9cd-zo-npm-mute-stream-0-0-4-package tar:///home/lerenzo/.npm/mute-stream/0.0.4/package
15075 silly lockFile e93af9cd-zo-npm-mute-stream-0-0-4-package tar:///home/lerenzo/.npm/mute-stream/0.0.4/package
15076 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15077 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15078 verbose chmod /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz 644
15079 verbose chown /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz [ 1000, 1000 ]
15080 silly lockFile 00d36016-ute-stream-mute-stream-0-0-4-tgz https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz
15081 silly lockFile 00d36016-ute-stream-mute-stream-0-0-4-tgz https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz
15082 silly lockFile 71666a8b-mute-stream-0-0-4 mute-stream@0.0.4
15083 silly lockFile 71666a8b-mute-stream-0-0-4 mute-stream@0.0.4
15084 silly lockFile 0cb27cfc-mute-stream-0-0-4 mute-stream@~0.0.4
15085 silly lockFile 0cb27cfc-mute-stream-0-0-4 mute-stream@~0.0.4
15086 silly resolved [ { name: 'mute-stream',
15086 silly resolved     version: '0.0.4',
15086 silly resolved     main: 'mute.js',
15086 silly resolved     directories: { test: 'test' },
15086 silly resolved     devDependencies: { tap: '~0.2.5' },
15086 silly resolved     scripts: { test: 'tap test/*.js' },
15086 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/mute-stream' },
15086 silly resolved     keywords: [ 'mute', 'stream', 'pipe' ],
15086 silly resolved     author:
15086 silly resolved      { name: 'Isaac Z. Schlueter',
15086 silly resolved        email: 'i@izs.me',
15086 silly resolved        url: 'http://blog.izs.me/' },
15086 silly resolved     license: 'BSD',
15086 silly resolved     description: 'Bytes go in, but they don\'t come out (when muted).',
15086 silly resolved     readme: '# mute-stream\n\nBytes go in, but they don\'t come out (when muted).\n\nThis is a basic pass-through stream, but when muted, the bytes are\nsilently dropped, rather than being passed through.\n\n## Usage\n\n```javascript\nvar MuteStream = require(\'mute-stream\')\n\nvar ms = new MuteStream(options)\n\nms.pipe(process.stdout)\nms.write(\'foo\') // writes \'foo\' to stdout\nms.mute()\nms.write(\'bar\') // does not write \'bar\'\nms.unmute()\nms.write(\'baz\') // writes \'baz\' to stdout\n\n// can also be used to mute incoming data\nvar ms = new MuteStream\ninput.pipe(ms)\n\nms.on(\'data\', function (c) {\n  console.log(\'data: \' + c)\n})\n\ninput.emit(\'data\', \'foo\') // logs \'foo\'\nms.mute()\ninput.emit(\'data\', \'bar\') // does not log \'bar\'\nms.unmute()\ninput.emit(\'data\', \'baz\') // logs \'baz\'\n```\n\n## Options\n\nAll options are optional.\n\n* `replace` Set to a string to replace each character with the\n  specified string when muted.  (So you can show `****` instead of the\n  password, for example.)\n\n* `prompt` If you are using a replacement char, and also using a\n  prompt with a readline stream (as for a `Password: *****` input),\n  then specify what the prompt is so that backspace will work\n  properly.  Otherwise, pressing backspace will overwrite the prompt\n  with the replacement character, which is weird.\n\n## ms.mute()\n\nSet `muted` to `true`.  Turns `.write()` into a no-op.\n\n## ms.unmute()\n\nSet `muted` to `false`\n\n## ms.isTTY\n\nTrue if the pipe destination is a TTY, or if the incoming pipe source is\na TTY.\n\n## Other stream methods...\n\nThe other standard readable and writable stream methods are all\navailable.  The MuteStream object acts as a facade to its pipe source\nand destination.\n',
15086 silly resolved     readmeFilename: 'README.md',
15086 silly resolved     bugs: { url: 'https://github.com/isaacs/mute-stream/issues' },
15086 silly resolved     homepage: 'https://github.com/isaacs/mute-stream',
15086 silly resolved     _id: 'mute-stream@0.0.4',
15086 silly resolved     dist: { shasum: '60a99a863efba890b475456051a2e172ef7fbdc5' },
15086 silly resolved     _from: 'mute-stream@~0.0.4',
15086 silly resolved     _resolved: 'https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz' } ]
15087 info install mute-stream@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
15088 info installOne mute-stream@0.0.4
15089 silly resolved [ { name: 'mute-stream',
15089 silly resolved     version: '0.0.4',
15089 silly resolved     main: 'mute.js',
15089 silly resolved     directories: { test: 'test' },
15089 silly resolved     devDependencies: { tap: '~0.2.5' },
15089 silly resolved     scripts: { test: 'tap test/*.js' },
15089 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/mute-stream' },
15089 silly resolved     keywords: [ 'mute', 'stream', 'pipe' ],
15089 silly resolved     author:
15089 silly resolved      { name: 'Isaac Z. Schlueter',
15089 silly resolved        email: 'i@izs.me',
15089 silly resolved        url: 'http://blog.izs.me/' },
15089 silly resolved     license: 'BSD',
15089 silly resolved     description: 'Bytes go in, but they don\'t come out (when muted).',
15089 silly resolved     readme: '# mute-stream\n\nBytes go in, but they don\'t come out (when muted).\n\nThis is a basic pass-through stream, but when muted, the bytes are\nsilently dropped, rather than being passed through.\n\n## Usage\n\n```javascript\nvar MuteStream = require(\'mute-stream\')\n\nvar ms = new MuteStream(options)\n\nms.pipe(process.stdout)\nms.write(\'foo\') // writes \'foo\' to stdout\nms.mute()\nms.write(\'bar\') // does not write \'bar\'\nms.unmute()\nms.write(\'baz\') // writes \'baz\' to stdout\n\n// can also be used to mute incoming data\nvar ms = new MuteStream\ninput.pipe(ms)\n\nms.on(\'data\', function (c) {\n  console.log(\'data: \' + c)\n})\n\ninput.emit(\'data\', \'foo\') // logs \'foo\'\nms.mute()\ninput.emit(\'data\', \'bar\') // does not log \'bar\'\nms.unmute()\ninput.emit(\'data\', \'baz\') // logs \'baz\'\n```\n\n## Options\n\nAll options are optional.\n\n* `replace` Set to a string to replace each character with the\n  specified string when muted.  (So you can show `****` instead of the\n  password, for example.)\n\n* `prompt` If you are using a replacement char, and also using a\n  prompt with a readline stream (as for a `Password: *****` input),\n  then specify what the prompt is so that backspace will work\n  properly.  Otherwise, pressing backspace will overwrite the prompt\n  with the replacement character, which is weird.\n\n## ms.mute()\n\nSet `muted` to `true`.  Turns `.write()` into a no-op.\n\n## ms.unmute()\n\nSet `muted` to `false`\n\n## ms.isTTY\n\nTrue if the pipe destination is a TTY, or if the incoming pipe source is\na TTY.\n\n## Other stream methods...\n\nThe other standard readable and writable stream methods are all\navailable.  The MuteStream object acts as a facade to its pipe source\nand destination.\n',
15089 silly resolved     readmeFilename: 'README.md',
15089 silly resolved     bugs: { url: 'https://github.com/isaacs/mute-stream/issues' },
15089 silly resolved     homepage: 'https://github.com/isaacs/mute-stream',
15089 silly resolved     _id: 'mute-stream@0.0.4',
15089 silly resolved     dist: { shasum: '60a99a863efba890b475456051a2e172ef7fbdc5' },
15089 silly resolved     _from: 'mute-stream@~0.0.4',
15089 silly resolved     _resolved: 'https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.4.tgz' } ]
15090 info install mute-stream@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
15091 info installOne mute-stream@0.0.4
15092 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream unbuild
15093 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream unbuild
15094 verbose tar unpack /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15095 silly lockFile 71db53f8-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream
15096 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream /home/lerenzo/.npm/71db53f8-es-read-node-modules-mute-stream.lock
15097 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15098 verbose lock tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz /home/lerenzo/.npm/41d596c3-pm-mute-stream-0-0-4-package-tgz.lock
15099 verbose tar unpack /home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15100 silly lockFile 5211928c-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream
15101 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream /home/lerenzo/.npm/5211928c-es-read-node-modules-mute-stream.lock
15102 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15103 verbose lock tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz /home/lerenzo/.npm/41d596c3-pm-mute-stream-0-0-4-package-tgz.lock
15104 silly gunzTarPerm modes [ '755', '644' ]
15105 silly gunzTarPerm extractEntry package.json
15106 silly gunzTarPerm extractEntry README.md
15107 silly gunzTarPerm extractEntry LICENSE
15108 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15109 silly lockFile f9304214-60752-0-5930701235774904-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572360752-0.5930701235774904/package
15110 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15111 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15112 silly gunzTarPerm extractEntry mute.js
15113 silly gunzTarPerm extractEntry test/basic.js
15114 silly lockFile 2a74a8bb-lerenzo-npm-npmlog-0-0-6-package /home/lerenzo/.npm/npmlog/0.0.6/package
15115 verbose lock /home/lerenzo/.npm/npmlog/0.0.6/package /home/lerenzo/.npm/2a74a8bb-lerenzo-npm-npmlog-0-0-6-package.lock
15116 silly lockFile 2a74a8bb-lerenzo-npm-npmlog-0-0-6-package /home/lerenzo/.npm/npmlog/0.0.6/package
15117 silly lockFile 2a74a8bb-lerenzo-npm-npmlog-0-0-6-package /home/lerenzo/.npm/npmlog/0.0.6/package
15118 verbose tar unpack /home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15119 silly lockFile d5c0f798-lerenzo-npm-npmlog-0-0-6-package tar:///home/lerenzo/.npm/npmlog/0.0.6/package
15120 verbose lock tar:///home/lerenzo/.npm/npmlog/0.0.6/package /home/lerenzo/.npm/d5c0f798-lerenzo-npm-npmlog-0-0-6-package.lock
15121 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15122 verbose lock tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz /home/lerenzo/.npm/213b80e8-nzo-npm-npmlog-0-0-6-package-tgz.lock
15123 silly gunzTarPerm modes [ '755', '644' ]
15124 silly gunzTarPerm extractEntry package.json
15125 silly gunzTarPerm extractEntry README.md
15126 silly gunzTarPerm extractEntry LICENSE
15127 silly gunzTarPerm extractEntry example.js
15128 silly gunzTarPerm extractEntry log.js
15129 silly gunzTarPerm extractEntry test/basic.js
15130 silly lockFile 71db53f8-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream
15131 silly lockFile 71db53f8-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream
15132 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15133 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15134 info preinstall mute-stream@0.0.4
15135 verbose readDependencies using package.json deps
15136 verbose readDependencies using package.json deps
15137 silly resolved []
15138 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream
15139 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules/mute-stream
15140 verbose linkStuff [ true,
15140 verbose linkStuff   '/usr/local/lib/node_modules',
15140 verbose linkStuff   false,
15140 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read/node_modules' ]
15141 info linkStuff mute-stream@0.0.4
15142 verbose linkBins mute-stream@0.0.4
15143 verbose linkMans mute-stream@0.0.4
15144 verbose rebuildBundles mute-stream@0.0.4
15145 info install mute-stream@0.0.4
15146 info postinstall mute-stream@0.0.4
15147 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
15148 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/read
15149 verbose linkStuff [ true,
15149 verbose linkStuff   '/usr/local/lib/node_modules',
15149 verbose linkStuff   false,
15149 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules' ]
15150 info linkStuff read@1.0.5
15151 verbose linkBins read@1.0.5
15152 verbose linkMans read@1.0.5
15153 verbose rebuildBundles read@1.0.5
15154 verbose rebuildBundles [ 'mute-stream' ]
15155 info install read@1.0.5
15156 info postinstall read@1.0.5
15157 silly lockFile d5c0f798-lerenzo-npm-npmlog-0-0-6-package tar:///home/lerenzo/.npm/npmlog/0.0.6/package
15158 silly lockFile d5c0f798-lerenzo-npm-npmlog-0-0-6-package tar:///home/lerenzo/.npm/npmlog/0.0.6/package
15159 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15160 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15161 verbose chmod /home/lerenzo/.npm/npmlog/0.0.6/package.tgz 644
15162 verbose chown /home/lerenzo/.npm/npmlog/0.0.6/package.tgz [ 1000, 1000 ]
15163 silly lockFile d8e4514c-pmjs-org-npmlog-npmlog-0-0-6-tgz https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz
15164 silly lockFile d8e4514c-pmjs-org-npmlog-npmlog-0-0-6-tgz https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz
15165 silly lockFile 54dedc57-npmlog-0-0-6 npmlog@0.0.6
15166 silly lockFile 54dedc57-npmlog-0-0-6 npmlog@0.0.6
15167 silly lockFile 2f67ef0a-npmlog-0 npmlog@0
15168 silly lockFile 2f67ef0a-npmlog-0 npmlog@0
15169 silly gunzTarPerm modes [ '755', '644' ]
15170 silly gunzTarPerm extractEntry package.json
15171 silly gunzTarPerm extractEntry README.md
15172 silly gunzTarPerm extractEntry LICENSE
15173 silly gunzTarPerm extractEntry mute.js
15174 silly gunzTarPerm extractEntry test/basic.js
15175 silly lockFile 5211928c-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream
15176 silly lockFile 5211928c-es-read-node-modules-mute-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream
15177 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15178 silly lockFile 41d596c3-pm-mute-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/mute-stream/0.0.4/package.tgz
15179 info preinstall mute-stream@0.0.4
15180 verbose readDependencies using package.json deps
15181 verbose readDependencies using package.json deps
15182 silly resolved []
15183 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream
15184 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules/mute-stream
15185 verbose linkStuff [ true,
15185 verbose linkStuff   '/usr/local/lib/node_modules',
15185 verbose linkStuff   false,
15185 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read/node_modules' ]
15186 info linkStuff mute-stream@0.0.4
15187 verbose linkBins mute-stream@0.0.4
15188 verbose linkMans mute-stream@0.0.4
15189 verbose rebuildBundles mute-stream@0.0.4
15190 info install mute-stream@0.0.4
15191 info postinstall mute-stream@0.0.4
15192 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
15193 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/read
15194 verbose linkStuff [ true,
15194 verbose linkStuff   '/usr/local/lib/node_modules',
15194 verbose linkStuff   false,
15194 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules' ]
15195 info linkStuff read@1.0.5
15196 verbose linkBins read@1.0.5
15197 verbose linkMans read@1.0.5
15198 verbose rebuildBundles read@1.0.5
15199 verbose rebuildBundles [ 'mute-stream' ]
15200 info install read@1.0.5
15201 info postinstall read@1.0.5
15202 http 200 https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz
15203 http 200 https://registry.npmjs.org/slide/-/slide-1.1.5.tgz
15204 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz
15205 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15206 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package /home/lerenzo/.npm/6f75c1d6-59626-0-6034756239969283-package.lock
15207 silly lockFile 9b95db39-59626-0-6034756239969283-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz
15208 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz /home/lerenzo/.npm/9b95db39-59626-0-6034756239969283-tmp-tgz.lock
15209 silly gunzTarPerm modes [ '755', '644' ]
15210 silly gunzTarPerm extractEntry package.json
15211 silly gunzTarPerm extractEntry README.md
15212 silly gunzTarPerm extractEntry LICENSE
15213 silly gunzTarPerm extractEntry index.js
15214 silly gunzTarPerm extractEntry lib/async-map-ordered.js
15215 silly gunzTarPerm extractEntry lib/async-map.js
15216 silly gunzTarPerm extractEntry lib/bind-actor.js
15217 silly gunzTarPerm extractEntry lib/chain.js
15218 silly gunzTarPerm extractEntry lib/slide.js
15219 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15220 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15221 silly lockFile 9b95db39-59626-0-6034756239969283-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz
15222 silly lockFile 9b95db39-59626-0-6034756239969283-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/tmp.tgz
15223 verbose tar pack [ '/home/lerenzo/.npm/slide/1.1.5/package.tgz',
15223 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package' ]
15224 verbose tarball /home/lerenzo/.npm/slide/1.1.5/package.tgz
15225 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15226 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15227 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package /home/lerenzo/.npm/6f75c1d6-59626-0-6034756239969283-package.lock
15228 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15229 verbose lock tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz /home/lerenzo/.npm/b530b79b-enzo-npm-slide-1-1-5-package-tgz.lock
15230 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15231 silly lockFile 6f75c1d6-59626-0-6034756239969283-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572359626-0.6034756239969283/package
15232 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15233 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15234 silly lockFile 11d9410a--lerenzo-npm-slide-1-1-5-package /home/lerenzo/.npm/slide/1.1.5/package
15235 verbose lock /home/lerenzo/.npm/slide/1.1.5/package /home/lerenzo/.npm/11d9410a--lerenzo-npm-slide-1-1-5-package.lock
15236 silly lockFile 11d9410a--lerenzo-npm-slide-1-1-5-package /home/lerenzo/.npm/slide/1.1.5/package
15237 silly lockFile 11d9410a--lerenzo-npm-slide-1-1-5-package /home/lerenzo/.npm/slide/1.1.5/package
15238 verbose tar unpack /home/lerenzo/.npm/slide/1.1.5/package.tgz
15239 silly lockFile 9d1e66a6--lerenzo-npm-slide-1-1-5-package tar:///home/lerenzo/.npm/slide/1.1.5/package
15240 verbose lock tar:///home/lerenzo/.npm/slide/1.1.5/package /home/lerenzo/.npm/9d1e66a6--lerenzo-npm-slide-1-1-5-package.lock
15241 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15242 verbose lock tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz /home/lerenzo/.npm/b530b79b-enzo-npm-slide-1-1-5-package-tgz.lock
15243 silly gunzTarPerm modes [ '755', '644' ]
15244 silly gunzTarPerm extractEntry package.json
15245 silly gunzTarPerm extractEntry README.md
15246 silly gunzTarPerm extractEntry LICENSE
15247 silly gunzTarPerm extractEntry index.js
15248 silly gunzTarPerm extractEntry lib/async-map-ordered.js
15249 silly gunzTarPerm extractEntry lib/async-map.js
15250 silly gunzTarPerm extractEntry lib/bind-actor.js
15251 silly gunzTarPerm extractEntry lib/chain.js
15252 silly gunzTarPerm extractEntry lib/slide.js
15253 silly lockFile 9d1e66a6--lerenzo-npm-slide-1-1-5-package tar:///home/lerenzo/.npm/slide/1.1.5/package
15254 silly lockFile 9d1e66a6--lerenzo-npm-slide-1-1-5-package tar:///home/lerenzo/.npm/slide/1.1.5/package
15255 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15256 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15257 verbose chmod /home/lerenzo/.npm/slide/1.1.5/package.tgz 644
15258 verbose chown /home/lerenzo/.npm/slide/1.1.5/package.tgz [ 1000, 1000 ]
15259 silly lockFile 0e522924--npmjs-org-slide-slide-1-1-5-tgz https://registry.npmjs.org/slide/-/slide-1.1.5.tgz
15260 silly lockFile 0e522924--npmjs-org-slide-slide-1-1-5-tgz https://registry.npmjs.org/slide/-/slide-1.1.5.tgz
15261 silly lockFile 131f64ed-slide-1-1-5 slide@1.1.5
15262 silly lockFile 131f64ed-slide-1-1-5 slide@1.1.5
15263 silly lockFile a9ca7910-slide-1-1-3 slide@~1.1.3
15264 silly lockFile a9ca7910-slide-1-1-3 slide@~1.1.3
15265 http 200 https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz
15266 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz
15267 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15268 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package /home/lerenzo/.npm/2752f933-361341-0-296709259506315-package.lock
15269 silly lockFile 12902763-361341-0-296709259506315-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz
15270 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz /home/lerenzo/.npm/12902763-361341-0-296709259506315-tmp-tgz.lock
15271 silly gunzTarPerm modes [ '755', '644' ]
15272 silly gunzTarPerm extractEntry package.json
15273 silly gunzTarPerm extractEntry .npmignore
15274 silly gunzTarPerm extractEntry README.md
15275 silly gunzTarPerm extractEntry LICENSE
15276 silly gunzTarPerm extractEntry graceful-fs.js
15277 silly gunzTarPerm extractEntry test/open.js
15278 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15279 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15280 silly lockFile 12902763-361341-0-296709259506315-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz
15281 silly lockFile 12902763-361341-0-296709259506315-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/tmp.tgz
15282 verbose tar pack [ '/home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz',
15282 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package' ]
15283 verbose tarball /home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15284 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15285 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15286 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package /home/lerenzo/.npm/2752f933-361341-0-296709259506315-package.lock
15287 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15288 verbose lock tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz /home/lerenzo/.npm/67c41f81-m-graceful-fs-1-1-14-package-tgz.lock
15289 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15290 silly lockFile 2752f933-361341-0-296709259506315-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572361341-0.296709259506315/package
15291 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15292 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15293 silly lockFile 51fbec4e-o-npm-graceful-fs-1-1-14-package /home/lerenzo/.npm/graceful-fs/1.1.14/package
15294 verbose lock /home/lerenzo/.npm/graceful-fs/1.1.14/package /home/lerenzo/.npm/51fbec4e-o-npm-graceful-fs-1-1-14-package.lock
15295 silly lockFile 51fbec4e-o-npm-graceful-fs-1-1-14-package /home/lerenzo/.npm/graceful-fs/1.1.14/package
15296 silly lockFile 51fbec4e-o-npm-graceful-fs-1-1-14-package /home/lerenzo/.npm/graceful-fs/1.1.14/package
15297 verbose tar unpack /home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15298 silly lockFile 430c0bb1-o-npm-graceful-fs-1-1-14-package tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package
15299 verbose lock tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package /home/lerenzo/.npm/430c0bb1-o-npm-graceful-fs-1-1-14-package.lock
15300 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15301 verbose lock tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz /home/lerenzo/.npm/67c41f81-m-graceful-fs-1-1-14-package-tgz.lock
15302 silly gunzTarPerm modes [ '755', '644' ]
15303 silly gunzTarPerm extractEntry package.json
15304 silly gunzTarPerm extractEntry .npmignore
15305 silly gunzTarPerm extractEntry README.md
15306 silly gunzTarPerm extractEntry LICENSE
15307 silly gunzTarPerm extractEntry graceful-fs.js
15308 silly gunzTarPerm extractEntry test/open.js
15309 silly lockFile 430c0bb1-o-npm-graceful-fs-1-1-14-package tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package
15310 silly lockFile 430c0bb1-o-npm-graceful-fs-1-1-14-package tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package
15311 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15312 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15313 verbose chmod /home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz 644
15314 verbose chown /home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz [ 1000, 1000 ]
15315 silly lockFile 464c4d45-aceful-fs-graceful-fs-1-1-14-tgz https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz
15316 silly lockFile 464c4d45-aceful-fs-graceful-fs-1-1-14-tgz https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz
15317 silly lockFile 2cf96e8d-graceful-fs-1-1-14 graceful-fs@1.1.14
15318 silly lockFile 2cf96e8d-graceful-fs-1-1-14 graceful-fs@1.1.14
15319 silly lockFile a6fe5834-graceful-fs-1-1-8 graceful-fs@~1.1.8
15320 silly lockFile a6fe5834-graceful-fs-1-1-8 graceful-fs@~1.1.8
15321 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz
15322 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15323 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package /home/lerenzo/.npm/474fff75-63371-0-9148908485658467-package.lock
15324 silly lockFile d02cecc7-63371-0-9148908485658467-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz
15325 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz /home/lerenzo/.npm/d02cecc7-63371-0-9148908485658467-tmp-tgz.lock
15326 silly gunzTarPerm modes [ '755', '644' ]
15327 silly gunzTarPerm extractEntry package.json
15328 silly gunzTarPerm extractEntry .npmignore
15329 silly gunzTarPerm extractEntry index.js
15330 silly gunzTarPerm extractEntry example/wrap.js
15331 silly gunzTarPerm extractEntry example/microwave.js
15332 silly gunzTarPerm extractEntry example/web/server.js
15333 silly gunzTarPerm extractEntry example/web/main.js
15334 silly gunzTarPerm extractEntry example/web/bs.js
15335 silly gunzTarPerm extractEntry example/web/index.html
15336 silly gunzTarPerm extractEntry test/wrap.js
15337 silly gunzTarPerm extractEntry test/microwave.js
15338 silly gunzTarPerm extractEntry test/err.js
15339 silly gunzTarPerm extractEntry test/ast.js
15340 silly gunzTarPerm extractEntry test/parent.js
15341 silly gunzTarPerm extractEntry test/label.js
15342 silly gunzTarPerm extractEntry test/fail.js
15343 silly gunzTarPerm extractEntry test/fail/src.js
15344 silly gunzTarPerm extractEntry .travis.yml
15345 silly gunzTarPerm extractEntry README.markdown
15346 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15347 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15348 silly lockFile d02cecc7-63371-0-9148908485658467-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz
15349 silly lockFile d02cecc7-63371-0-9148908485658467-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/tmp.tgz
15350 verbose tar pack [ '/home/lerenzo/.npm/burrito/0.2.12/package.tgz',
15350 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package' ]
15351 verbose tarball /home/lerenzo/.npm/burrito/0.2.12/package.tgz
15352 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15353 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15354 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package /home/lerenzo/.npm/474fff75-63371-0-9148908485658467-package.lock
15355 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15356 verbose lock tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz /home/lerenzo/.npm/0223577a-o-npm-burrito-0-2-12-package-tgz.lock
15357 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15358 silly lockFile 474fff75-63371-0-9148908485658467-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572363371-0.9148908485658467/package
15359 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15360 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15361 silly lockFile 37d4b03c-renzo-npm-burrito-0-2-12-package /home/lerenzo/.npm/burrito/0.2.12/package
15362 verbose lock /home/lerenzo/.npm/burrito/0.2.12/package /home/lerenzo/.npm/37d4b03c-renzo-npm-burrito-0-2-12-package.lock
15363 silly lockFile 37d4b03c-renzo-npm-burrito-0-2-12-package /home/lerenzo/.npm/burrito/0.2.12/package
15364 silly lockFile 37d4b03c-renzo-npm-burrito-0-2-12-package /home/lerenzo/.npm/burrito/0.2.12/package
15365 verbose tar unpack /home/lerenzo/.npm/burrito/0.2.12/package.tgz
15366 silly lockFile 644beff2-renzo-npm-burrito-0-2-12-package tar:///home/lerenzo/.npm/burrito/0.2.12/package
15367 verbose lock tar:///home/lerenzo/.npm/burrito/0.2.12/package /home/lerenzo/.npm/644beff2-renzo-npm-burrito-0-2-12-package.lock
15368 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15369 verbose lock tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz /home/lerenzo/.npm/0223577a-o-npm-burrito-0-2-12-package-tgz.lock
15370 silly gunzTarPerm modes [ '755', '644' ]
15371 silly gunzTarPerm extractEntry package.json
15372 silly gunzTarPerm extractEntry .npmignore
15373 silly gunzTarPerm extractEntry index.js
15374 silly gunzTarPerm extractEntry .travis.yml
15375 silly gunzTarPerm extractEntry README.markdown
15376 silly gunzTarPerm extractEntry example/microwave.js
15377 silly gunzTarPerm extractEntry example/wrap.js
15378 silly gunzTarPerm extractEntry example/web/bs.js
15379 silly gunzTarPerm extractEntry example/web/main.js
15380 silly gunzTarPerm extractEntry example/web/server.js
15381 silly gunzTarPerm extractEntry example/web/index.html
15382 silly gunzTarPerm extractEntry test/ast.js
15383 silly gunzTarPerm extractEntry test/err.js
15384 silly gunzTarPerm extractEntry test/fail.js
15385 silly gunzTarPerm extractEntry test/label.js
15386 silly gunzTarPerm extractEntry test/microwave.js
15387 silly gunzTarPerm extractEntry test/parent.js
15388 silly gunzTarPerm extractEntry test/wrap.js
15389 silly gunzTarPerm extractEntry test/fail/src.js
15390 silly lockFile 644beff2-renzo-npm-burrito-0-2-12-package tar:///home/lerenzo/.npm/burrito/0.2.12/package
15391 silly lockFile 644beff2-renzo-npm-burrito-0-2-12-package tar:///home/lerenzo/.npm/burrito/0.2.12/package
15392 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15393 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15394 verbose chmod /home/lerenzo/.npm/burrito/0.2.12/package.tgz 644
15395 verbose chown /home/lerenzo/.npm/burrito/0.2.12/package.tgz [ 1000, 1000 ]
15396 silly lockFile 83adf916-s-org-burrito-burrito-0-2-12-tgz https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz
15397 silly lockFile 83adf916-s-org-burrito-burrito-0-2-12-tgz https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz
15398 silly lockFile e1162205-burrito-0-2-12 burrito@0.2.12
15399 silly lockFile e1162205-burrito-0-2-12 burrito@0.2.12
15400 silly lockFile ba13ba50-burrito-0-2-x burrito@0.2.x
15401 silly lockFile ba13ba50-burrito-0-2-x burrito@0.2.x
15402 silly resolved [ { name: 'burrito',
15402 silly resolved     description: 'Wrap up expressions with a trace function while walking the AST with rice and beans on the side',
15402 silly resolved     version: '0.2.12',
15402 silly resolved     repository:
15402 silly resolved      { type: 'git',
15402 silly resolved        url: 'git://github.com/substack/node-burrito.git' },
15402 silly resolved     main: './index.js',
15402 silly resolved     keywords: [ 'trace', 'ast', 'walk', 'syntax', 'source', 'tree', 'uglify' ],
15402 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
15402 silly resolved     scripts: { test: 'tap test/*.js' },
15402 silly resolved     dependencies: { traverse: '~0.5.1', 'uglify-js': '~1.1.1' },
15402 silly resolved     devDependencies: { tap: '~0.2.5' },
15402 silly resolved     engines: { node: '>=0.4.0' },
15402 silly resolved     license: 'BSD',
15402 silly resolved     author:
15402 silly resolved      { name: 'James Halliday',
15402 silly resolved        email: 'mail@substack.net',
15402 silly resolved        url: 'http://substack.net' },
15402 silly resolved     readme: 'burrito\n=======\n\nBurrito makes it easy to do crazy stuff with the javascript AST.\n\nThis is super useful if you want to roll your own stack traces or build a code\ncoverage tool.\n\n[![build status](https://secure.travis-ci.org/substack/node-burrito.png)](http://travis-ci.org/substack/node-burrito)\n\n![node.wrap("burrito")](http://substack.net/images/burrito.png)\n\nexamples\n========\n\nmicrowave\n---------\n\nexamples/microwave.js\n\n````javascript\nvar burrito = require(\'burrito\');\n\nvar res = burrito.microwave(\'Math.sin(2)\', function (node) {\n    if (node.name === \'num\') node.wrap(\'Math.PI / %s\');\n});\n\nconsole.log(res); // sin(pi / 2) == 1\n````\n\noutput:\n\n    1\n\nwrap\n----\n\nexamples/wrap.js\n\n````javascript\nvar burrito = require(\'burrito\');\n\nvar src = burrito(\'f() && g(h())\\nfoo()\', function (node) {\n    if (node.name === \'call\') node.wrap(\'qqq(%s)\');\n});\n\nconsole.log(src);\n````\n\noutput:\n\n    qqq(f()) && qqq(g(qqq(h())));\n\n    qqq(foo());\n\nmethods\n=======\n\n    var burrito = require(\'burrito\');\n\nburrito(code, cb)\n-----------------\n\nGiven some source `code` and a function `trace`, walk the ast by expression.\n\nThe `cb` gets called with a node object described below.\n\nIf `code` is an Array then it is assumbed to be an AST which you can generate\nyourself with `burrito.parse()`. The AST must be annotated, so make sure to\n`burrito.parse(src, false, true)`.\n\nburrito.microwave(code, context={}, cb)\n---------------------------------------\n\nLike `burrito()` except the result is run using\n`vm.runInNewContext(res, context)`.\n\nnode object\n===========\n\nnode.name\n---------\n\nName is a string that contains the type of the expression as named by uglify.\n\nnode.wrap(s)\n------------\n\nWrap the current expression in `s`.\n\nIf `s` is a string, `"%s"` will be replaced with the stringified current\nexpression.\n\nIf `s` is a function, it is called with the stringified current expression and\nshould return a new stringified expression.\n\nIf the `node.name === "binary"`, you get the subterms "%a" and "%b" to play with\ntoo. These subterms are applied if `s` is a function too: `s(expr, a, b)`.\n\nProtip: to insert multiple statements you can use javascript\'s lesser-known block\nsyntax that it gets from C:\n\n````javascript\nif (node.name === \'stat\') node.wrap(\'{ foo(); %s }\')\n````\n\nnode.node\n---------\n\nraw ast data generated by uglify\n\nnode.value\n----------\n\n`node.node.slice(1)` to skip the annotations\n\nnode.start\n----------\n\nThe start location of the expression, like this:\n\n````javascript\n{ type: \'name\',\n  value: \'b\',\n  line: 0,\n  col: 3,\n  pos: 3,\n  nlb: false,\n  comments_before: [] }\n````\n\nnode.end\n--------\n\nThe end  location of the expression, formatted the same as `node.start`.\n\nnode.state\n----------\n\nThe state of the traversal using traverse.\n\nnode.source()\n-------------\n\nReturns a stringified version of the expression.\n\nnode.parent()\n-------------\n\nReturns the parent `node` or `null` if the node is the root element.\n\nnode.label()\n------------\n\nReturn the label of the present node or `null` if there is no label.\n\nLabels are returned for "call", "var", "defun", and "function" nodes.\n\nReturns an array for "var" nodes since `var` statements can\ncontain multiple labels in assignment.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) you can just:\n\n    npm install burrito\n\nin the browser\n==============\n\nBurrito works in browser with\n[browserify](https://github.com/substack/node-browserify).\n\nIt has been tested against:\n\n* Internet Explorer 5.5, 6.0, 7.0, 8.0, 9.0\n* Firefox 3.5\n* Chrome 6.0\n* Opera 10.6\n* Safari 5.0\n\nkudos\n=====\n\nHeavily inspired by (and previously mostly lifted outright from) isaacs\'s nifty\ntmp/instrument.js thingy from uglify-js.\n',
15402 silly resolved     readmeFilename: 'README.markdown',
15402 silly resolved     bugs: { url: 'https://github.com/substack/node-burrito/issues' },
15402 silly resolved     homepage: 'https://github.com/substack/node-burrito',
15402 silly resolved     _id: 'burrito@0.2.12',
15402 silly resolved     dist: { shasum: '5d86f1b8359d26e82a730c6789fb4498bc838166' },
15402 silly resolved     _from: 'burrito@0.2.x',
15402 silly resolved     _resolved: 'https://registry.npmjs.org/burrito/-/burrito-0.2.12.tgz' } ]
15403 info install burrito@0.2.12 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective
15404 info installOne burrito@0.2.12
15405 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito unbuild
15406 verbose tar unpack /home/lerenzo/.npm/burrito/0.2.12/package.tgz
15407 silly lockFile 917784ef-s-detective-node-modules-burrito tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito
15408 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito /home/lerenzo/.npm/917784ef-s-detective-node-modules-burrito.lock
15409 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15410 verbose lock tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz /home/lerenzo/.npm/0223577a-o-npm-burrito-0-2-12-package-tgz.lock
15411 silly gunzTarPerm modes [ '755', '644' ]
15412 silly gunzTarPerm extractEntry package.json
15413 silly gunzTarPerm extractEntry .npmignore
15414 silly gunzTarPerm extractEntry index.js
15415 silly gunzTarPerm extractEntry .travis.yml
15416 silly gunzTarPerm extractEntry README.markdown
15417 silly gunzTarPerm extractEntry example/microwave.js
15418 silly gunzTarPerm extractEntry example/wrap.js
15419 silly gunzTarPerm extractEntry example/web/bs.js
15420 silly gunzTarPerm extractEntry example/web/main.js
15421 silly gunzTarPerm extractEntry example/web/server.js
15422 silly gunzTarPerm extractEntry example/web/index.html
15423 silly gunzTarPerm extractEntry test/ast.js
15424 silly gunzTarPerm extractEntry test/err.js
15425 silly gunzTarPerm extractEntry test/fail.js
15426 silly gunzTarPerm extractEntry test/label.js
15427 silly gunzTarPerm extractEntry test/microwave.js
15428 silly gunzTarPerm extractEntry test/parent.js
15429 silly gunzTarPerm extractEntry test/wrap.js
15430 silly gunzTarPerm extractEntry test/fail/src.js
15431 silly lockFile 917784ef-s-detective-node-modules-burrito tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito
15432 silly lockFile 917784ef-s-detective-node-modules-burrito tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito
15433 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15434 silly lockFile 0223577a-o-npm-burrito-0-2-12-package-tgz tar:///home/lerenzo/.npm/burrito/0.2.12/package.tgz
15435 info preinstall burrito@0.2.12
15436 verbose readDependencies using package.json deps
15437 verbose readDependencies using package.json deps
15438 verbose cache add [ 'traverse@~0.5.1', null ]
15439 verbose cache add name=undefined spec="traverse@~0.5.1" args=["traverse@~0.5.1",null]
15440 verbose parsed url { protocol: null,
15440 verbose parsed url   slashes: null,
15440 verbose parsed url   auth: null,
15440 verbose parsed url   host: null,
15440 verbose parsed url   port: null,
15440 verbose parsed url   hostname: null,
15440 verbose parsed url   hash: null,
15440 verbose parsed url   search: null,
15440 verbose parsed url   query: null,
15440 verbose parsed url   pathname: 'traverse@~0.5.1',
15440 verbose parsed url   path: 'traverse@~0.5.1',
15440 verbose parsed url   href: 'traverse@~0.5.1' }
15441 verbose cache add name="traverse" spec="~0.5.1" args=["traverse","~0.5.1"]
15442 verbose parsed url { protocol: null,
15442 verbose parsed url   slashes: null,
15442 verbose parsed url   auth: null,
15442 verbose parsed url   host: null,
15442 verbose parsed url   port: null,
15442 verbose parsed url   hostname: null,
15442 verbose parsed url   hash: null,
15442 verbose parsed url   search: null,
15442 verbose parsed url   query: null,
15442 verbose parsed url   pathname: '~0.5.1',
15442 verbose parsed url   path: '~0.5.1',
15442 verbose parsed url   href: '~0.5.1' }
15443 verbose addNamed [ 'traverse', '~0.5.1' ]
15444 verbose addNamed [ null, '>=0.5.1-0 <0.6.0-0' ]
15445 silly lockFile 0201121e-traverse-0-5-1 traverse@~0.5.1
15446 verbose lock traverse@~0.5.1 /home/lerenzo/.npm/0201121e-traverse-0-5-1.lock
15447 verbose cache add [ 'uglify-js@~1.1.1', null ]
15448 verbose cache add name=undefined spec="uglify-js@~1.1.1" args=["uglify-js@~1.1.1",null]
15449 verbose parsed url { protocol: null,
15449 verbose parsed url   slashes: null,
15449 verbose parsed url   auth: null,
15449 verbose parsed url   host: null,
15449 verbose parsed url   port: null,
15449 verbose parsed url   hostname: null,
15449 verbose parsed url   hash: null,
15449 verbose parsed url   search: null,
15449 verbose parsed url   query: null,
15449 verbose parsed url   pathname: 'uglify-js@~1.1.1',
15449 verbose parsed url   path: 'uglify-js@~1.1.1',
15449 verbose parsed url   href: 'uglify-js@~1.1.1' }
15450 verbose cache add name="uglify-js" spec="~1.1.1" args=["uglify-js","~1.1.1"]
15451 verbose parsed url { protocol: null,
15451 verbose parsed url   slashes: null,
15451 verbose parsed url   auth: null,
15451 verbose parsed url   host: null,
15451 verbose parsed url   port: null,
15451 verbose parsed url   hostname: null,
15451 verbose parsed url   hash: null,
15451 verbose parsed url   search: null,
15451 verbose parsed url   query: null,
15451 verbose parsed url   pathname: '~1.1.1',
15451 verbose parsed url   path: '~1.1.1',
15451 verbose parsed url   href: '~1.1.1' }
15452 verbose addNamed [ 'uglify-js', '~1.1.1' ]
15453 verbose addNamed [ null, '>=1.1.1-0 <1.2.0-0' ]
15454 silly lockFile 25e14726-uglify-js-1-1-1 uglify-js@~1.1.1
15455 verbose lock uglify-js@~1.1.1 /home/lerenzo/.npm/25e14726-uglify-js-1-1-1.lock
15456 silly addNameRange { name: 'traverse', range: '>=0.5.1-0 <0.6.0-0', hasData: false }
15457 silly addNameRange { name: 'uglify-js',
15457 silly addNameRange   range: '>=1.1.1-0 <1.2.0-0',
15457 silly addNameRange   hasData: false }
15458 verbose url raw traverse
15459 verbose url resolving [ 'https://registry.npmjs.org/', './traverse' ]
15460 verbose url resolved https://registry.npmjs.org/traverse
15461 info trying registry request attempt 1 at 14:12:56
15462 http GET https://registry.npmjs.org/traverse
15463 verbose url raw uglify-js
15464 verbose url resolving [ 'https://registry.npmjs.org/', './uglify-js' ]
15465 verbose url resolved https://registry.npmjs.org/uglify-js
15466 info trying registry request attempt 1 at 14:12:56
15467 http GET https://registry.npmjs.org/uglify-js
15468 http 200 https://registry.npmjs.org/read-package-json
15469 silly registry.get cb [ 200,
15469 silly registry.get   { vary: 'Accept',
15469 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15469 silly registry.get     etag: '"HFTSX7Y4QWF0Y0QXPFHW29QH"',
15469 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:37 GMT',
15469 silly registry.get     'content-type': 'application/json',
15469 silly registry.get     'content-length': '237090' } ]
15470 silly addNameRange number 2 { name: 'read-package-json',
15470 silly addNameRange   range: '>=0.0.0-0 <1.0.0-0',
15470 silly addNameRange   hasData: true }
15471 silly addNameRange versions [ 'read-package-json',
15471 silly addNameRange   [ '0.0.1',
15471 silly addNameRange     '0.0.2',
15471 silly addNameRange     '0.0.3',
15471 silly addNameRange     '0.0.4',
15471 silly addNameRange     '0.0.5',
15471 silly addNameRange     '0.0.6',
15471 silly addNameRange     '0.0.7',
15471 silly addNameRange     '0.0.8',
15471 silly addNameRange     '0.0.9',
15471 silly addNameRange     '0.0.10',
15471 silly addNameRange     '0.0.11',
15471 silly addNameRange     '0.0.12',
15471 silly addNameRange     '0.1.0',
15471 silly addNameRange     '0.1.1',
15471 silly addNameRange     '0.1.2',
15471 silly addNameRange     '0.1.3',
15471 silly addNameRange     '0.1.4',
15471 silly addNameRange     '0.1.5',
15471 silly addNameRange     '0.1.6',
15471 silly addNameRange     '0.1.7',
15471 silly addNameRange     '0.1.8',
15471 silly addNameRange     '0.1.9',
15471 silly addNameRange     '0.1.10',
15471 silly addNameRange     '0.1.11',
15471 silly addNameRange     '0.1.12',
15471 silly addNameRange     '0.1.13',
15471 silly addNameRange     '0.2.0',
15471 silly addNameRange     '0.2.1',
15471 silly addNameRange     '0.2.2',
15471 silly addNameRange     '0.3.0',
15471 silly addNameRange     '0.3.1',
15471 silly addNameRange     '0.4.0',
15471 silly addNameRange     '0.4.1',
15471 silly addNameRange     '1.0.0-pre',
15471 silly addNameRange     '1.0.0-rc.0',
15471 silly addNameRange     '1.1.0',
15471 silly addNameRange     '1.1.1',
15471 silly addNameRange     '1.1.2',
15471 silly addNameRange     '1.1.3',
15471 silly addNameRange     '1.1.4' ] ]
15472 verbose addNamed [ 'read-package-json', '0.4.1' ]
15473 verbose addNamed [ '0.4.1', '0.4.1' ]
15474 silly lockFile cb644209-read-package-json-0-4-1 read-package-json@0.4.1
15475 verbose lock read-package-json@0.4.1 /home/lerenzo/.npm/cb644209-read-package-json-0-4-1.lock
15476 silly lockFile b81639ae-json-read-package-json-0-4-1-tgz https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz
15477 verbose lock https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz /home/lerenzo/.npm/b81639ae-json-read-package-json-0-4-1-tgz.lock
15478 verbose addRemoteTarball [ 'https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz',
15478 verbose addRemoteTarball   'a0e917cce8333444889543de9db2b1a4606baaa2' ]
15479 info retry fetch attempt 1 at 14:13:02
15480 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz
15481 http GET https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz
15482 http 200 https://registry.npmjs.org/deep-equal
15483 silly registry.get cb [ 200,
15483 silly registry.get   { vary: 'Accept',
15483 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15483 silly registry.get     etag: '"55RZ8FSHWBJNZVD7EZCFILIR3"',
15483 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:02 GMT',
15483 silly registry.get     'content-type': 'application/json',
15483 silly registry.get     'content-length': '4142' } ]
15484 silly addNameRange number 2 { name: 'deep-equal', range: '*', hasData: true }
15485 silly addNameRange versions [ 'deep-equal', [ '0.0.0', '0.1.0' ] ]
15486 verbose addNamed [ 'deep-equal', '0.1.0' ]
15487 verbose addNamed [ '0.1.0', '0.1.0' ]
15488 silly lockFile e8edd534-deep-equal-0-1-0 deep-equal@0.1.0
15489 verbose lock deep-equal@0.1.0 /home/lerenzo/.npm/e8edd534-deep-equal-0-1-0.lock
15490 silly lockFile 4897c8e7--deep-equal-deep-equal-0-1-0-tgz https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz
15491 verbose lock https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz /home/lerenzo/.npm/4897c8e7--deep-equal-deep-equal-0-1-0-tgz.lock
15492 verbose addRemoteTarball [ 'https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz',
15492 verbose addRemoteTarball   '81fcefc84551d9d67cccdd80e1fced7f355e146f' ]
15493 info retry fetch attempt 1 at 14:13:03
15494 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz
15495 http GET https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz
15496 http 200 https://registry.npmjs.org/primus
15497 silly registry.get cb [ 200,
15497 silly registry.get   { vary: 'Accept',
15497 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15497 silly registry.get     etag: '"44FD1B17LHQH90FI4MLETMNOF"',
15497 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:06 GMT',
15497 silly registry.get     'content-type': 'application/json',
15497 silly registry.get     'content-length': '564879' } ]
15498 info retry will retry, error on last attempt: Error: socket hang up
15499 silly addNameRange number 2 { name: 'primus', range: '>=1.4.0-0 <1.5.0-0', hasData: true }
15500 silly addNameRange versions [ 'primus',
15500 silly addNameRange   [ '0.0.0',
15500 silly addNameRange     '0.1.0',
15500 silly addNameRange     '1.0.0',
15500 silly addNameRange     '1.0.1',
15500 silly addNameRange     '1.1.0',
15500 silly addNameRange     '1.1.1',
15500 silly addNameRange     '1.1.2',
15500 silly addNameRange     '1.1.3',
15500 silly addNameRange     '1.1.4',
15500 silly addNameRange     '1.2.0',
15500 silly addNameRange     '1.3.0',
15500 silly addNameRange     '1.4.0',
15500 silly addNameRange     '1.4.1',
15500 silly addNameRange     '1.4.2',
15500 silly addNameRange     '1.4.3',
15500 silly addNameRange     '1.4.4',
15500 silly addNameRange     '1.4.5',
15500 silly addNameRange     '1.4.6' ] ]
15501 verbose addNamed [ 'primus', '1.4.6' ]
15502 verbose addNamed [ '1.4.6', '1.4.6' ]
15503 silly lockFile 02d28e67-primus-1-4-6 primus@1.4.6
15504 verbose lock primus@1.4.6 /home/lerenzo/.npm/02d28e67-primus-1-4-6.lock
15505 silly lockFile 896fddc3-pmjs-org-primus-primus-1-4-6-tgz https://registry.npmjs.org/primus/-/primus-1.4.6.tgz
15506 verbose lock https://registry.npmjs.org/primus/-/primus-1.4.6.tgz /home/lerenzo/.npm/896fddc3-pmjs-org-primus-primus-1-4-6-tgz.lock
15507 verbose addRemoteTarball [ 'https://registry.npmjs.org/primus/-/primus-1.4.6.tgz',
15507 verbose addRemoteTarball   'c920327b9129cb55e0df48272250d846c4b41a44' ]
15508 info retry fetch attempt 1 at 14:13:04
15509 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz
15510 http GET https://registry.npmjs.org/primus/-/primus-1.4.6.tgz
15511 http 200 https://registry.npmjs.org/i
15512 silly registry.get cb [ 200,
15512 silly registry.get   { vary: 'Accept',
15512 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15512 silly registry.get     etag: '"ECH2VCEPI8YST4FNTYQKTUGG9"',
15512 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:03 GMT',
15512 silly registry.get     'content-type': 'application/json',
15512 silly registry.get     'content-length': '17086' } ]
15513 silly addNameRange number 2 { name: 'i', range: '>=0.3.0-0 <0.4.0-0', hasData: true }
15514 silly addNameRange versions [ 'i', [ '0.2.0', '0.3.0', '0.3.1', '0.3.2' ] ]
15515 verbose addNamed [ 'i', '0.3.2' ]
15516 verbose addNamed [ '0.3.2', '0.3.2' ]
15517 silly lockFile 80e1c2cf-i-0-3-2 i@0.3.2
15518 verbose lock i@0.3.2 /home/lerenzo/.npm/80e1c2cf-i-0-3-2.lock
15519 silly lockFile 5ca230cd-registry-npmjs-org-i-i-0-3-2-tgz https://registry.npmjs.org/i/-/i-0.3.2.tgz
15520 verbose lock https://registry.npmjs.org/i/-/i-0.3.2.tgz /home/lerenzo/.npm/5ca230cd-registry-npmjs-org-i-i-0-3-2-tgz.lock
15521 verbose addRemoteTarball [ 'https://registry.npmjs.org/i/-/i-0.3.2.tgz',
15521 verbose addRemoteTarball   'b2e2d6ef47900bd924e281231ff4c5cc798d9ea8' ]
15522 info retry fetch attempt 1 at 14:13:07
15523 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz
15524 http GET https://registry.npmjs.org/i/-/i-0.3.2.tgz
15525 http 200 https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz
15526 http 304 https://registry.npmjs.org/rimraf
15527 silly registry.get cb [ 304,
15527 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15527 silly registry.get     etag: '"BO8JLBC2TKAXGJCA5T3URAII3"',
15527 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:07 GMT',
15527 silly registry.get     'content-length': '0' } ]
15528 verbose etag rimraf from cache
15529 silly addNameRange number 2 { name: 'rimraf', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
15530 silly addNameRange versions [ 'rimraf',
15530 silly addNameRange   [ '1.0.0',
15530 silly addNameRange     '1.0.1',
15530 silly addNameRange     '1.0.2',
15530 silly addNameRange     '1.0.4',
15530 silly addNameRange     '1.0.5',
15530 silly addNameRange     '1.0.6',
15530 silly addNameRange     '1.0.7',
15530 silly addNameRange     '1.0.8',
15530 silly addNameRange     '1.0.9',
15530 silly addNameRange     '2.0.0',
15530 silly addNameRange     '2.0.1',
15530 silly addNameRange     '2.0.2',
15530 silly addNameRange     '2.0.3',
15530 silly addNameRange     '2.1.0',
15530 silly addNameRange     '2.1.1',
15530 silly addNameRange     '2.1.2',
15530 silly addNameRange     '2.1.3',
15530 silly addNameRange     '2.1.4',
15530 silly addNameRange     '2.2.0',
15530 silly addNameRange     '2.2.1',
15530 silly addNameRange     '2.2.2' ] ]
15531 verbose addNamed [ 'rimraf', '1.0.9' ]
15532 verbose addNamed [ '1.0.9', '1.0.9' ]
15533 silly lockFile 67d50f11-rimraf-1-0-9 rimraf@1.0.9
15534 verbose lock rimraf@1.0.9 /home/lerenzo/.npm/67d50f11-rimraf-1-0-9.lock
15535 silly lockFile 1c85334f-pmjs-org-rimraf-rimraf-1-0-9-tgz https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz
15536 verbose lock https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz /home/lerenzo/.npm/1c85334f-pmjs-org-rimraf-rimraf-1-0-9-tgz.lock
15537 verbose addRemoteTarball [ 'https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz',
15537 verbose addRemoteTarball   'be4801ff76c2ba6f1c50c78e9700eb1d21f239f1' ]
15538 info retry fetch attempt 1 at 14:13:07
15539 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz
15540 http GET https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz
15541 http 200 https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz
15542 http 304 https://registry.npmjs.org/rimraf
15543 silly registry.get cb [ 304,
15543 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15543 silly registry.get     etag: '"BO8JLBC2TKAXGJCA5T3URAII3"',
15543 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:08 GMT',
15543 silly registry.get     'content-length': '0' } ]
15544 verbose etag rimraf from cache
15545 silly addNameRange number 2 { name: 'rimraf', range: '>=2.0.0-0 <3.0.0-0', hasData: true }
15546 silly addNameRange versions [ 'rimraf',
15546 silly addNameRange   [ '1.0.0',
15546 silly addNameRange     '1.0.1',
15546 silly addNameRange     '1.0.2',
15546 silly addNameRange     '1.0.4',
15546 silly addNameRange     '1.0.5',
15546 silly addNameRange     '1.0.6',
15546 silly addNameRange     '1.0.7',
15546 silly addNameRange     '1.0.8',
15546 silly addNameRange     '1.0.9',
15546 silly addNameRange     '2.0.0',
15546 silly addNameRange     '2.0.1',
15546 silly addNameRange     '2.0.2',
15546 silly addNameRange     '2.0.3',
15546 silly addNameRange     '2.1.0',
15546 silly addNameRange     '2.1.1',
15546 silly addNameRange     '2.1.2',
15546 silly addNameRange     '2.1.3',
15546 silly addNameRange     '2.1.4',
15546 silly addNameRange     '2.2.0',
15546 silly addNameRange     '2.2.1',
15546 silly addNameRange     '2.2.2' ] ]
15547 verbose addNamed [ 'rimraf', '2.2.2' ]
15548 verbose addNamed [ '2.2.2', '2.2.2' ]
15549 silly lockFile aab0fa5b-rimraf-2-2-2 rimraf@2.2.2
15550 verbose lock rimraf@2.2.2 /home/lerenzo/.npm/aab0fa5b-rimraf-2-2-2.lock
15551 silly lockFile aab0fa5b-rimraf-2-2-2 rimraf@2.2.2
15552 silly lockFile aab0fa5b-rimraf-2-2-2 rimraf@2.2.2
15553 silly lockFile 7220c273-rimraf-2-x-x rimraf@2.x.x
15554 silly lockFile 7220c273-rimraf-2-x-x rimraf@2.x.x
15555 http 304 https://registry.npmjs.org/wordwrap
15556 silly registry.get cb [ 304,
15556 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15556 silly registry.get     etag: '"3HPX5BQ0X4U2A3KJNTK2473OZ"',
15556 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:08 GMT',
15556 silly registry.get     'content-length': '0' } ]
15557 verbose etag wordwrap from cache
15558 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2-0 <0.1.0-0', hasData: true }
15559 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
15560 verbose addNamed [ 'wordwrap', '0.0.2' ]
15561 verbose addNamed [ '0.0.2', '0.0.2' ]
15562 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
15563 verbose lock wordwrap@0.0.2 /home/lerenzo/.npm/24a694c8-wordwrap-0-0-2.lock
15564 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
15565 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
15566 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
15567 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
15568 silly resolved [ { name: 'wordwrap',
15568 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
15568 silly resolved     version: '0.0.2',
15568 silly resolved     repository:
15568 silly resolved      { type: 'git',
15568 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
15568 silly resolved     main: './index.js',
15568 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
15568 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
15568 silly resolved     scripts: { test: 'expresso' },
15568 silly resolved     devDependencies: { expresso: '=0.7.x' },
15568 silly resolved     engines: { node: '>=0.4.0' },
15568 silly resolved     license: 'MIT/X11',
15568 silly resolved     author:
15568 silly resolved      { name: 'James Halliday',
15568 silly resolved        email: 'mail@substack.net',
15568 silly resolved        url: 'http://substack.net' },
15568 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
15568 silly resolved     readmeFilename: 'README.markdown',
15568 silly resolved     bugs: { url: 'https://github.com/substack/node-wordwrap/issues' },
15568 silly resolved     homepage: 'https://github.com/substack/node-wordwrap',
15568 silly resolved     _id: 'wordwrap@0.0.2',
15568 silly resolved     dist: { shasum: '624b9d3e54ad494743ebeb222c78828a452556bf' },
15568 silly resolved     _from: 'wordwrap@~0.0.2',
15568 silly resolved     _resolved: 'https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz' } ]
15569 info install wordwrap@0.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
15570 info installOne wordwrap@0.0.2
15571 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap unbuild
15572 verbose tar unpack /home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
15573 silly lockFile c00ce563-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap
15574 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap /home/lerenzo/.npm/c00ce563-s-optimist-node-modules-wordwrap.lock
15575 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
15576 verbose lock tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz /home/lerenzo/.npm/2c08430e-o-npm-wordwrap-0-0-2-package-tgz.lock
15577 silly gunzTarPerm modes [ '755', '644' ]
15578 silly gunzTarPerm extractEntry package.json
15579 silly gunzTarPerm extractEntry .npmignore
15580 silly gunzTarPerm extractEntry index.js
15581 silly gunzTarPerm extractEntry README.markdown
15582 silly gunzTarPerm extractEntry example/center.js
15583 silly gunzTarPerm extractEntry example/meat.js
15584 silly gunzTarPerm extractEntry test/break.js
15585 silly gunzTarPerm extractEntry test/wrap.js
15586 silly gunzTarPerm extractEntry test/idleness.txt
15587 silly lockFile c00ce563-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap
15588 silly lockFile c00ce563-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap
15589 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
15590 silly lockFile 2c08430e-o-npm-wordwrap-0-0-2-package-tgz tar:///home/lerenzo/.npm/wordwrap/0.0.2/package.tgz
15591 info preinstall wordwrap@0.0.2
15592 verbose readDependencies using package.json deps
15593 verbose readDependencies using package.json deps
15594 silly resolved []
15595 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap
15596 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules/wordwrap
15597 verbose linkStuff [ true,
15597 verbose linkStuff   '/usr/local/lib/node_modules',
15597 verbose linkStuff   false,
15597 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist/node_modules' ]
15598 info linkStuff wordwrap@0.0.2
15599 verbose linkBins wordwrap@0.0.2
15600 verbose linkMans wordwrap@0.0.2
15601 verbose rebuildBundles wordwrap@0.0.2
15602 info install wordwrap@0.0.2
15603 info postinstall wordwrap@0.0.2
15604 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
15605 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/optimist
15606 verbose linkStuff [ true,
15606 verbose linkStuff   '/usr/local/lib/node_modules',
15606 verbose linkStuff   false,
15606 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules' ]
15607 info linkStuff optimist@0.3.7
15608 verbose linkBins optimist@0.3.7
15609 verbose linkMans optimist@0.3.7
15610 verbose rebuildBundles optimist@0.3.7
15611 verbose rebuildBundles [ 'wordwrap' ]
15612 info install optimist@0.3.7
15613 info postinstall optimist@0.3.7
15614 http 304 https://registry.npmjs.org/eyes
15615 silly registry.get cb [ 304,
15615 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15615 silly registry.get     etag: '"GBSC916INGWA41U26GSK8RWO"',
15615 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:09 GMT',
15615 silly registry.get     'content-length': '0' } ]
15616 verbose etag eyes from cache
15617 silly addNameRange number 2 { name: 'eyes', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
15618 silly addNameRange versions [ 'eyes',
15618 silly addNameRange   [ '0.1.1',
15618 silly addNameRange     '0.1.2',
15618 silly addNameRange     '0.1.3',
15618 silly addNameRange     '0.1.4',
15618 silly addNameRange     '0.1.5',
15618 silly addNameRange     '0.1.6',
15618 silly addNameRange     '0.1.7',
15618 silly addNameRange     '0.1.8' ] ]
15619 verbose addNamed [ 'eyes', '0.1.8' ]
15620 verbose addNamed [ '0.1.8', '0.1.8' ]
15621 silly lockFile 8939281b-eyes-0-1-8 eyes@0.1.8
15622 verbose lock eyes@0.1.8 /home/lerenzo/.npm/8939281b-eyes-0-1-8.lock
15623 silly lockFile 8939281b-eyes-0-1-8 eyes@0.1.8
15624 silly lockFile 8939281b-eyes-0-1-8 eyes@0.1.8
15625 silly lockFile 81039dce-eyes-0-1-x eyes@0.1.x
15626 silly lockFile 81039dce-eyes-0-1-x eyes@0.1.x
15627 silly resolved [ { name: 'eyes',
15627 silly resolved     description: 'a customizable value inspector',
15627 silly resolved     url: 'http://github.com/cloudhead/eyes.js',
15627 silly resolved     keywords: [ 'inspector', 'debug', 'inspect', 'print' ],
15627 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
15627 silly resolved     contributors: [ [Object] ],
15627 silly resolved     licenses: [ 'MIT' ],
15627 silly resolved     main: './lib/eyes',
15627 silly resolved     version: '0.1.8',
15627 silly resolved     scripts: { test: 'node test/*-test.js' },
15627 silly resolved     directories: { lib: './lib', test: './test' },
15627 silly resolved     engines: { node: '> 0.1.90' },
15627 silly resolved     readme: 'eyes\n====\n\na customizable value inspector for Node.js\n\nsynopsis\n--------\n\nI was tired of looking at cluttered output in the console -- something needed to be done,\n`sys.inspect()` didn\'t display regexps correctly, and was too verbose, and I had an hour or two to spare. \nSo I decided to have some fun. _eyes_ were born.\n\n![eyes-ss](http://dl.dropbox.com/u/251849/eyes-js-ss.gif)\n\n_example of the output of a user-customized eyes.js inspector_\n\n*eyes* also deals with circular objects in an intelligent way, and can pretty-print object literals.\n\nusage\n-----\n\n    var inspect = require(\'eyes\').inspector({styles: {all: \'magenta\'}});\n\n    inspect(something); // inspect with the settings passed to `inspector`\n\nor\n\n    var eyes = require(\'eyes\');\n\n    eyes.inspect(something); // inspect with the default settings\n\nyou can pass a _label_ to `inspect()`, to keep track of your inspections:\n\n    eyes.inspect(something, "a random value");\n\nIf you want to return the output of eyes without printing it, you can set it up this way:\n\n    var inspect = require(\'eyes\').inspector({ stream: null });\n\n    sys.puts(inspect({ something: 42 }));\n\ncustomization\n-------------\n\nThese are the default styles and settings used by _eyes_.\n\n    styles: {                 // Styles applied to stdout\n        all:     \'cyan\',      // Overall style applied to everything\n        label:   \'underline\', // Inspection labels, like \'array\' in `array: [1, 2, 3]`\n        other:   \'inverted\',  // Objects which don\'t have a literal representation, such as functions\n        key:     \'bold\',      // The keys in object literals, like \'a\' in `{a: 1}`\n        special: \'grey\',      // null, undefined...\n        string:  \'green\',\n        number:  \'magenta\',\n        bool:    \'blue\',      // true false\n        regexp:  \'green\',     // /\\d+/\n    },\n    \n    pretty: true,             // Indent object literals\n    hideFunctions: false,     // Don\'t output functions at all\n    stream: process.stdout,   // Stream to write to, or null\n    maxLength: 2048           // Truncate output if longer\n\nYou can overwrite them with your own, by passing a similar object to `inspector()` or `inspect()`.\n\n    var inspect = require(\'eyes\').inspector({\n        styles: {\n            all: \'magenta\',\n            special: \'bold\'\n        },\n        maxLength: 512\n    });\n\n',
15627 silly resolved     readmeFilename: 'README.md',
15627 silly resolved     _id: 'eyes@0.1.8',
15627 silly resolved     dist: { shasum: 'ac1caf2ee18750246460c884201bd1b9d5c3d4c2' },
15627 silly resolved     _from: 'eyes@0.1.x',
15627 silly resolved     _resolved: 'https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz' } ]
15628 info install eyes@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
15629 info installOne eyes@0.1.8
15630 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes unbuild
15631 verbose tar unpack /home/lerenzo/.npm/eyes/0.1.8/package.tgz
15632 silly lockFile eefffd58--modules-cliff-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes
15633 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes /home/lerenzo/.npm/eefffd58--modules-cliff-node-modules-eyes.lock
15634 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
15635 verbose lock tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz /home/lerenzo/.npm/b7667f40-renzo-npm-eyes-0-1-8-package-tgz.lock
15636 silly gunzTarPerm modes [ '755', '644' ]
15637 silly gunzTarPerm extractEntry package.json
15638 silly gunzTarPerm extractEntry README.md
15639 silly gunzTarPerm extractEntry LICENSE
15640 silly gunzTarPerm extractEntry Makefile
15641 silly gunzTarPerm extractEntry lib/eyes.js
15642 silly gunzTarPerm extractEntry test/eyes-test.js
15643 silly lockFile eefffd58--modules-cliff-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes
15644 silly lockFile eefffd58--modules-cliff-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes
15645 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
15646 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
15647 info preinstall eyes@0.1.8
15648 verbose readDependencies using package.json deps
15649 verbose readDependencies using package.json deps
15650 silly resolved []
15651 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes
15652 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules/eyes
15653 verbose linkStuff [ true,
15653 verbose linkStuff   '/usr/local/lib/node_modules',
15653 verbose linkStuff   false,
15653 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff/node_modules' ]
15654 info linkStuff eyes@0.1.8
15655 verbose linkBins eyes@0.1.8
15656 verbose linkMans eyes@0.1.8
15657 verbose rebuildBundles eyes@0.1.8
15658 info install eyes@0.1.8
15659 info postinstall eyes@0.1.8
15660 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
15661 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/cliff
15662 verbose linkStuff [ true,
15662 verbose linkStuff   '/usr/local/lib/node_modules',
15662 verbose linkStuff   false,
15662 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules' ]
15663 info linkStuff cliff@0.1.8
15664 verbose linkBins cliff@0.1.8
15665 verbose linkMans cliff@0.1.8
15666 verbose rebuildBundles cliff@0.1.8
15667 verbose rebuildBundles [ 'eyes' ]
15668 info install cliff@0.1.8
15669 info postinstall cliff@0.1.8
15670 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz
15671 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15672 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package /home/lerenzo/.npm/02d8cbdd-82370-0-9818528972100466-package.lock
15673 silly lockFile a70ab24f-82370-0-9818528972100466-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz
15674 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz /home/lerenzo/.npm/a70ab24f-82370-0-9818528972100466-tmp-tgz.lock
15675 silly gunzTarPerm modes [ '755', '644' ]
15676 silly gunzTarPerm extractEntry package.json
15677 silly gunzTarPerm extractEntry README.md
15678 silly gunzTarPerm extractEntry LICENSE
15679 silly gunzTarPerm extractEntry read-json.js
15680 silly gunzTarPerm extractEntry test/basic.js
15681 silly gunzTarPerm extractEntry test/bom.js
15682 silly gunzTarPerm extractEntry test/non-json.js
15683 silly gunzTarPerm extractEntry test/fixtures/bom.json
15684 silly gunzTarPerm extractEntry test/fixtures/nobom.json
15685 silly gunzTarPerm extractEntry test/fixtures/not-json.css
15686 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15687 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15688 silly lockFile a70ab24f-82370-0-9818528972100466-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz
15689 silly lockFile a70ab24f-82370-0-9818528972100466-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/tmp.tgz
15690 verbose tar pack [ '/home/lerenzo/.npm/read-package-json/0.4.1/package.tgz',
15690 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package' ]
15691 verbose tarball /home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15692 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15693 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15694 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package /home/lerenzo/.npm/02d8cbdd-82370-0-9818528972100466-package.lock
15695 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15696 verbose lock tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz /home/lerenzo/.npm/16b446f7-d-package-json-0-4-1-package-tgz.lock
15697 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15698 silly lockFile 02d8cbdd-82370-0-9818528972100466-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572382370-0.9818528972100466/package
15699 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15700 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15701 silly lockFile 9972918a--read-package-json-0-4-1-package /home/lerenzo/.npm/read-package-json/0.4.1/package
15702 verbose lock /home/lerenzo/.npm/read-package-json/0.4.1/package /home/lerenzo/.npm/9972918a--read-package-json-0-4-1-package.lock
15703 silly lockFile 9972918a--read-package-json-0-4-1-package /home/lerenzo/.npm/read-package-json/0.4.1/package
15704 silly lockFile 9972918a--read-package-json-0-4-1-package /home/lerenzo/.npm/read-package-json/0.4.1/package
15705 verbose tar unpack /home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15706 silly lockFile 292538d5--read-package-json-0-4-1-package tar:///home/lerenzo/.npm/read-package-json/0.4.1/package
15707 verbose lock tar:///home/lerenzo/.npm/read-package-json/0.4.1/package /home/lerenzo/.npm/292538d5--read-package-json-0-4-1-package.lock
15708 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15709 verbose lock tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz /home/lerenzo/.npm/16b446f7-d-package-json-0-4-1-package-tgz.lock
15710 silly gunzTarPerm modes [ '755', '644' ]
15711 silly gunzTarPerm extractEntry package.json
15712 silly gunzTarPerm extractEntry README.md
15713 silly gunzTarPerm extractEntry LICENSE
15714 silly gunzTarPerm extractEntry read-json.js
15715 silly gunzTarPerm extractEntry test/basic.js
15716 silly gunzTarPerm extractEntry test/bom.js
15717 silly gunzTarPerm extractEntry test/non-json.js
15718 silly gunzTarPerm extractEntry test/fixtures/bom.json
15719 silly gunzTarPerm extractEntry test/fixtures/nobom.json
15720 silly gunzTarPerm extractEntry test/fixtures/not-json.css
15721 http 200 https://registry.npmjs.org/cycle
15722 silly registry.get cb [ 200,
15722 silly registry.get   { vary: 'Accept',
15722 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15722 silly registry.get     etag: '"AMNXDAMK37L61M75AM8GI8ROR"',
15722 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:09 GMT',
15722 silly registry.get     'content-type': 'application/json',
15722 silly registry.get     'content-length': '5253' } ]
15723 silly addNameRange number 2 { name: 'cycle', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
15724 silly addNameRange versions [ 'cycle', [ '1.0.0', '1.0.1', '1.0.2' ] ]
15725 verbose addNamed [ 'cycle', '1.0.2' ]
15726 verbose addNamed [ '1.0.2', '1.0.2' ]
15727 silly lockFile 67c36329-cycle-1-0-2 cycle@1.0.2
15728 verbose lock cycle@1.0.2 /home/lerenzo/.npm/67c36329-cycle-1-0-2.lock
15729 silly lockFile 3ff54e6a--npmjs-org-cycle-cycle-1-0-2-tgz https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz
15730 verbose lock https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz /home/lerenzo/.npm/3ff54e6a--npmjs-org-cycle-cycle-1-0-2-tgz.lock
15731 verbose addRemoteTarball [ 'https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz',
15731 verbose addRemoteTarball   '269aca6f1b8d2baeefc8ccbc888b459f322c4e60' ]
15732 info retry fetch attempt 1 at 14:13:10
15733 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz
15734 http GET https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz
15735 silly lockFile 292538d5--read-package-json-0-4-1-package tar:///home/lerenzo/.npm/read-package-json/0.4.1/package
15736 silly lockFile 292538d5--read-package-json-0-4-1-package tar:///home/lerenzo/.npm/read-package-json/0.4.1/package
15737 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15738 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15739 verbose chmod /home/lerenzo/.npm/read-package-json/0.4.1/package.tgz 644
15740 verbose chown /home/lerenzo/.npm/read-package-json/0.4.1/package.tgz [ 1000, 1000 ]
15741 silly lockFile b81639ae-json-read-package-json-0-4-1-tgz https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz
15742 silly lockFile b81639ae-json-read-package-json-0-4-1-tgz https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz
15743 silly lockFile cb644209-read-package-json-0-4-1 read-package-json@0.4.1
15744 silly lockFile cb644209-read-package-json-0-4-1 read-package-json@0.4.1
15745 silly lockFile 49119071-read-package-json-0 read-package-json@0
15746 silly lockFile 49119071-read-package-json-0 read-package-json@0
15747 silly resolved [ { author:
15747 silly resolved      { name: 'Isaac Z. Schlueter',
15747 silly resolved        email: 'i@izs.me',
15747 silly resolved        url: 'http://blog.izs.me/' },
15747 silly resolved     name: 'npmlog',
15747 silly resolved     description: 'logger for npm',
15747 silly resolved     version: '0.0.6',
15747 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/npmlog.git' },
15747 silly resolved     main: 'log.js',
15747 silly resolved     scripts: { test: 'tap test/*.js' },
15747 silly resolved     dependencies: { ansi: '~0.2.1' },
15747 silly resolved     devDependencies: { tap: '' },
15747 silly resolved     license: 'BSD',
15747 silly resolved     readme: '# npmlog\n\nThe logger util that npm uses.\n\nThis logger is very basic.  It does the logging for npm.  It supports\ncustom levels and colored output.\n\nBy default, logs are written to stderr.  If you want to send log messages\nto outputs other than streams, then you can change the `log.stream`\nmember, or you can just listen to the events that it emits, and do\nwhatever you want with them.\n\n# Basic Usage\n\n```\nvar log = require(\'npmlog\')\n\n// additional stuff ---------------------------+\n// message ----------+                         |\n// prefix ----+      |                         |\n// level -+   |      |                         |\n//        v   v      v                         v\n    log.info(\'fyi\', \'I have a kitty cat: %j\', myKittyCat)\n```\n\n## log.level\n\n* {String}\n\nThe level to display logs at.  Any logs at or above this level will be\ndisplayed.  The special level `silent` will prevent anything from being\ndisplayed ever.\n\n## log.record\n\n* {Array}\n\nAn array of all the log messages that have been entered.\n\n## log.maxRecordSize\n\n* {Number}\n\nThe maximum number of records to keep.  If log.record gets bigger than\n10% over this value, then it is sliced down to 90% of this value.\n\nThe reason for the 10% window is so that it doesn\'t have to resize a\nlarge array on every log entry.\n\n## log.prefixStyle\n\n* {Object}\n\nA style object that specifies how prefixes are styled.  (See below)\n\n## log.headingStyle\n\n* {Object}\n\nA style object that specifies how the heading is styled.  (See below)\n\n## log.heading\n\n* {String} Default: ""\n\nIf set, a heading that is printed at the start of every line.\n\n## log.stream\n\n* {Stream} Default: `process.stderr`\n\nThe stream where output is written.\n\n## log.enableColor()\n\nForce colors to be used on all messages, regardless of the output\nstream.\n\n## log.disableColor()\n\nDisable colors on all messages.\n\n## log.pause()\n\nStop emitting messages to the stream, but do not drop them.\n\n## log.resume()\n\nEmit all buffered messages that were written while paused.\n\n## log.log(level, prefix, message, ...)\n\n* `level` {String} The level to emit the message at\n* `prefix` {String} A string prefix.  Set to "" to skip.\n* `message...` Arguments to `util.format`\n\nEmit a log message at the specified level.\n\n## log\\[level](prefix, message, ...)\n\nFor example,\n\n* log.silly(prefix, message, ...)\n* log.verbose(prefix, message, ...)\n* log.info(prefix, message, ...)\n* log.http(prefix, message, ...)\n* log.warn(prefix, message, ...)\n* log.error(prefix, message, ...)\n\nLike `log.log(level, prefix, message, ...)`.  In this way, each level is\ngiven a shorthand, so you can do `log.info(prefix, message)`.\n\n## log.addLevel(level, n, style, disp)\n\n* `level` {String} Level indicator\n* `n` {Number} The numeric level\n* `style` {Object} Object with fg, bg, inverse, etc.\n* `disp` {String} Optional replacement for `level` in the output.\n\nSets up a new level with a shorthand function and so forth.\n\nNote that if the number is `Infinity`, then setting the level to that\nwill cause all log messages to be suppressed.  If the number is\n`-Infinity`, then the only way to show it is to enable all log messages.\n\n# Events\n\nEvents are all emitted with the message object.\n\n* `log` Emitted for all messages\n* `log.<level>` Emitted for all messages with the `<level>` level.\n* `<prefix>` Messages with prefixes also emit their prefix as an event.\n\n# Style Objects\n\nStyle objects can have the following fields:\n\n* `fg` {String} Color for the foreground text\n* `bg` {String} Color for the background\n* `bold`, `inverse`, `underline` {Boolean} Set the associated property\n* `bell` {Boolean} Make a noise (This is pretty annoying, probably.)\n\n# Message Objects\n\nEvery log event is emitted with a message object, and the `log.record`\nlist contains all of them that have been created.  They have the\nfollowing fields:\n\n* `id` {Number}\n* `level` {String}\n* `prefix` {String}\n* `message` {String} Result of `util.format()`\n* `messageRaw` {Array} Arguments to `util.format()`\n',
15747 silly resolved     readmeFilename: 'README.md',
15747 silly resolved     bugs: { url: 'https://github.com/isaacs/npmlog/issues' },
15747 silly resolved     homepage: 'https://github.com/isaacs/npmlog',
15747 silly resolved     _id: 'npmlog@0.0.6',
15747 silly resolved     dist: { shasum: 'c1f5d043bdd224e9e2028343fac840ba287eac57' },
15747 silly resolved     _from: 'npmlog@0',
15747 silly resolved     _resolved: 'https://registry.npmjs.org/npmlog/-/npmlog-0.0.6.tgz' },
15747 silly resolved   { name: 'slide',
15747 silly resolved     version: '1.1.5',
15747 silly resolved     author:
15747 silly resolved      { name: 'Isaac Z. Schlueter',
15747 silly resolved        email: 'i@izs.me',
15747 silly resolved        url: 'http://blog.izs.me/' },
15747 silly resolved     contributors: [ [Object] ],
15747 silly resolved     description: 'A flow control lib small enough to fit on in a slide presentation. Derived live at Oak.JS',
15747 silly resolved     main: './lib/slide.js',
15747 silly resolved     dependencies: {},
15747 silly resolved     devDependencies: {},
15747 silly resolved     engines: { node: '*' },
15747 silly resolved     repository:
15747 silly resolved      { type: 'git',
15747 silly resolved        url: 'git://github.com/isaacs/slide-flow-control.git' },
15747 silly resolved     license: 'ISC',
15747 silly resolved     readme: '# Controlling Flow: callbacks are easy\n\n## What\'s actually hard?\n\n- Doing a bunch of things in a specific order.\n- Knowing when stuff is done.\n- Handling failures.\n- Breaking up functionality into parts (avoid nested inline callbacks)\n\n\n## Common Mistakes\n\n- Abandoning convention and consistency.\n- Putting all callbacks inline.\n- Using libraries without grokking them.\n- Trying to make async code look sync.\n\n## Define Conventions\n\n- Two kinds of functions: *actors* take action, *callbacks* get results.\n- Essentially the continuation pattern. Resulting code *looks* similar\n  to fibers, but is *much* simpler to implement.\n- Node works this way in the lowlevel APIs already, and it\'s very ﬂexible.\n\n## Callbacks\n\n- Simple responders\n- Must always be prepared to handle errors, that\'s why it\'s the first argument.\n- Often inline anonymous, but not always.\n- Can trap and call other callbacks with modified data, or pass errors upwards.\n\n## Actors\n\n- Last argument is a callback.\n- If any error occurs, and can\'t be handled, pass it to the callback and return.\n- Must not throw. Return value ignored.\n- return x ==> return cb(null, x)\n- throw er ==> return cb(er)\n\n```javascript\n// return true if a path is either\n// a symlink or a directory.\nfunction isLinkOrDir (path, cb) {\n  fs.lstat(path, function (er, s) {\n    if (er) return cb(er)\n    return cb(null, s.isDirectory() || s.isSymbolicLink())\n  })\n}\n```\n\n# asyncMap\n\n## Usecases\n\n- I have a list of 10 files, and need to read all of them, and then continue when they\'re all done.\n- I have a dozen URLs, and need to fetch them all, and then continue when they\'re all done.\n- I have 4 connected users, and need to send a message to all of them, and then continue when that\'s done.\n- I have a list of n things, and I need to dosomething with all of them, in parallel, and get the results once they\'re all complete.\n\n\n## Solution\n\n```javascript\nvar asyncMap = require("slide").asyncMap\nfunction writeFiles (files, what, cb) {\n  asyncMap(files, function (f, cb) {\n    fs.writeFile(f, what, cb)\n  }, cb)\n}\nwriteFiles([my, file, list], "foo", cb)\n```\n\n# chain\n\n## Usecases\n\n- I have to do a bunch of things, in order. Get db credentials out of a file,\n  read the data from the db, write that data to another file.\n- If anything fails, do not continue.\n- I still have to provide an array of functions, which is a lot of boilerplate,\n  and a pita if your functions take args like\n\n```javascript\nfunction (cb) {\n  blah(a, b, c, cb)\n}\n```\n\n- Results are discarded, which is a bit lame.\n- No way to branch.\n\n## Solution\n\n- reduces boilerplate by converting an array of [fn, args] to an actor\n  that takes no arguments (except cb)\n- A bit like Function#bind, but tailored for our use-case.\n- bindActor(obj, "method", a, b, c)\n- bindActor(fn, a, b, c)\n- bindActor(obj, fn, a, b, c)\n- branching, skipping over falsey arguments\n\n```javascript\nchain([\n  doThing && [thing, a, b, c]\n, isFoo && [doFoo, "foo"]\n, subChain && [chain, [one, two]]\n], cb)\n```\n\n- tracking results: results are stored in an optional array passed as argument,\n  last result is always in results[results.length - 1].\n- treat chain.first and chain.last as placeholders for the first/last\n  result up until that point.\n\n\n## Non-trivial example\n\n- Read number files in a directory\n- Add the results together\n- Ping a web service with the result\n- Write the response to a file\n- Delete the number files\n\n```javascript\nvar chain = require("slide").chain\nfunction myProgram (cb) {\n  var res = [], last = chain.last, first = chain.first\n  chain([\n    [fs, "readdir", "the-directory"]\n  , [readFiles, "the-directory", last]\n  , [sum, last]\n  , [ping, "POST", "example.com", 80, "/foo", last]\n  , [fs, "writeFile", "result.txt", last]\n  , [rmFiles, "./the-directory", first]\n  ], res, cb)\n}\n```\n\n# Conclusion: Convention Profits\n\n- Consistent API from top to bottom.\n- Sneak in at any point to inject functionality. Testable, reusable, ...\n- When ruby and python users whine, you can smile condescendingly.\n',
15747 silly resolved     readmeFilename: 'README.md',
15747 silly resolved     bugs: { url: 'https://github.com/isaacs/slide-flow-control/issues' },
15747 silly resolved     homepage: 'https://github.com/isaacs/slide-flow-control',
15747 silly resolved     _id: 'slide@1.1.5',
15747 silly resolved     dist: { shasum: 'db787aba97fc3b2b3195800b704d337fe43bdf2d' },
15747 silly resolved     _from: 'slide@~1.1.3',
15747 silly resolved     _resolved: 'https://registry.npmjs.org/slide/-/slide-1.1.5.tgz' },
15747 silly resolved   { author:
15747 silly resolved      { name: 'Isaac Z. Schlueter',
15747 silly resolved        email: 'i@izs.me',
15747 silly resolved        url: 'http://blog.izs.me' },
15747 silly resolved     name: 'graceful-fs',
15747 silly resolved     description: 'fs monkey-patching to avoid EMFILE and other problems',
15747 silly resolved     version: '1.1.14',
15747 silly resolved     repository:
15747 silly resolved      { type: 'git',
15747 silly resolved        url: 'git://github.com/isaacs/node-graceful-fs.git' },
15747 silly resolved     main: 'graceful-fs.js',
15747 silly resolved     engines: { node: '>=0.4.0' },
15747 silly resolved     directories: { test: 'test' },
15747 silly resolved     scripts: { test: 'tap test/*.js' },
15747 silly resolved     keywords: [ 'fs', 'EMFILE', 'error', 'handling', 'monkeypatch' ],
15747 silly resolved     license: 'BSD',
15747 silly resolved     readme: 'Just like node\'s `fs` module, but it does an incremental back-off when\nEMFILE is encountered.\n\nUseful in asynchronous situations where one needs to try to open lots\nand lots of files.\n',
15747 silly resolved     readmeFilename: 'README.md',
15747 silly resolved     bugs: { url: 'https://github.com/isaacs/node-graceful-fs/issues' },
15747 silly resolved     homepage: 'https://github.com/isaacs/node-graceful-fs',
15747 silly resolved     _id: 'graceful-fs@1.1.14',
15747 silly resolved     dist: { shasum: '53d4ff5ec9fe985d343e4cec7fcd8b79ae07b8ba' },
15747 silly resolved     _from: 'graceful-fs@~1.1.8',
15747 silly resolved     _resolved: 'https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.14.tgz' },
15747 silly resolved   { name: 'read-package-json',
15747 silly resolved     version: '0.4.1',
15747 silly resolved     author:
15747 silly resolved      { name: 'Isaac Z. Schlueter',
15747 silly resolved        email: 'i@izs.me',
15747 silly resolved        url: 'http://blog.izs.me/' },
15747 silly resolved     description: 'The thing npm uses to read package.json files with semantics and defaults and validation',
15747 silly resolved     repository:
15747 silly resolved      { type: 'git',
15747 silly resolved        url: 'git://github.com/isaacs/read-package-json.git' },
15747 silly resolved     main: 'read-json.js',
15747 silly resolved     scripts: { test: 'tap test/*.js' },
15747 silly resolved     dependencies:
15747 silly resolved      { glob: '~3.2.1',
15747 silly resolved        'lru-cache': '2',
15747 silly resolved        'normalize-package-data': '~0.1.2',
15747 silly resolved        npmlog: '0',
15747 silly resolved        'graceful-fs': '~1.2' },
15747 silly resolved     devDependencies: { tap: '~0.2.5' },
15747 silly resolved     optionalDependencies: { npmlog: '0', 'graceful-fs': '~1.2' },
15747 silly resolved     readme: '# read-package-json\n\nThis is the thing that npm uses to read package.json files.  It\nvalidates some stuff, and loads some default things.\n\nIt keeps a cache of the files you\'ve read, so that you don\'t end\nup reading the same package.json file multiple times.\n\nNote that if you just want to see what\'s literally in the package.json\nfile, you can usually do `var data = require(\'some-module/package.json\')`.\n\nThis module is basically only needed by npm, but it\'s handy to see what\nnpm will see when it looks at your package.\n\n## Usage\n\n```javascript\nvar readJson = require(\'read-package-json\')\n\nreadJson(\'/path/to/package.json\', function (er, data) {\n  if (er) {\n    console.error("There was an error reading the file")\n    return\n  }\n\n  console.error(\'the package data is\', data)\n}\n```\n\n## readJson(file, cb)\n\n* `file` {String} The path to the package.json file\n* `cb` {Function}\n\nReads the JSON file and does the things.\n\n## `package.json` Fields\n\nSee `man 5 package.json` or `npm help json`.\n\n## readJson.log\n\nBy default this is a reference to the `npmlog` module.  But if that\nmodule can\'t be found, then it\'ll be set to just a dummy thing that does\nnothing.\n\nReplace with your own `{log,warn,error}` object for fun loggy time.\n\n## readJson.extras(file, data, cb)\n\nRun all the extra stuff relative to the file, with the parsed data.\n\nModifies the data as it does stuff.  Calls the cb when it\'s done.\n\n## readJson.extraSet = [fn, fn, ...]\n\nArray of functions that are called by `extras`.  Each one receives the\narguments `fn(file, data, cb)` and is expected to call `cb(er, data)`\nwhen done or when an error occurs.\n\nOrder is indeterminate, so each function should be completely\nindependent.\n\nMix and match!\n\n## readJson.cache\n\nThe `lru-cache` object that readJson uses to not read the same file over\nand over again.  See\n[lru-cache](https://github.com/isaacs/node-lru-cache) for details.\n\n## Other Relevant Files Besides `package.json`\n\nSome other files have an effect on the resulting data object, in the\nfollowing ways:\n\n### `README?(.*)`\n\nIf there is a `README` or `README.*` file present, then npm will attach\na `readme` field to the data with the contents of this file.\n\nOwing to the fact that roughly 100% of existing node modules have\nMarkdown README files, it will generally be assumed to be Markdown,\nregardless of the extension.  Please plan accordingly.\n\n### `server.js`\n\nIf there is a `server.js` file, and there is not already a\n`scripts.start` field, then `scripts.start` will be set to `node\nserver.js`.\n\n### `AUTHORS`\n\nIf there is not already a `contributors` field, then the `contributors`\nfield will be set to the contents of the `AUTHORS` file, split by lines,\nand parsed.\n\n### `bindings.gyp`\n\nIf a bindings.gyp file exists, and there is not already a\n`scripts.install` field, then the `scripts.install` field will be set to\n`node-gyp rebuild`.\n\n### `wscript`\n\nIf a wscript file exists, and there is not already a `scripts.install`\nfield, then the `scripts.install` field will be set to `node-waf clean ;\nnode-waf configure build`.\n\nNote that the `bindings.gyp` file supercedes this, since node-waf has\nbeen deprecated in favor of node-gyp.\n\n### `index.js`\n\nIf the json file does not exist, but there is a `index.js` file\npresent instead, and that file has a package comment, then it will try\nto parse the package comment, and use that as the data instead.\n\nA package comment looks like this:\n\n```javascript\n/**package\n * { "name": "my-bare-module"\n * , "version": "1.2.3"\n * , "description": "etc...." }\n **/\n\n// or...\n\n/**package\n{ "name": "my-bare-module"\n, "version": "1.2.3"\n, "description": "etc...." }\n**/\n```\n\nThe important thing is that it starts with `/**package`, and ends with\n`**/`.  If the package.json file exists, then the index.js is not\nparsed.\n\n### `{directories.man}/*.[0-9]`\n\nIf there is not already a `man` field defined as an array of files or a\nsingle file, and\nthere is a `directories.man` field defined, then that directory will\nbe searched for manpages.\n\nAny valid manpages found in that directory will be assigned to the `man`\narray, and installed in the appropriate man directory at package install\ntime, when installed globally on a Unix system.\n\n### `{directories.bin}/*`\n\nIf there is not already a `bin` field defined as a string filename or a\nhash of `<name> : <filename>` pairs, then the `directories.bin`\ndirectory will be searched and all the files within it will be linked as\nexecutables at install time.\n\nWhen installing locally, npm links bins into `node_modules/.bin`, which\nis in the `PATH` environ when npm runs scripts.  When\ninstalling globally, they are linked into `{prefix}/bin`, which is\npresumably in the `PATH` environment variable.\n',
15747 silly resolved     readmeFilename: 'README.md',
15747 silly resolved     bugs: { url: 'https://github.com/isaacs/read-package-json/issues' },
15747 silly resolved     homepage: 'https://github.com/isaacs/read-package-json',
15747 silly resolved     _id: 'read-package-json@0.4.1',
15747 silly resolved     dist: { shasum: '3a7ad86d6cad5bb5d8388e1fee5093f0596a2375' },
15747 silly resolved     _from: 'read-package-json@0',
15747 silly resolved     _resolved: 'https://registry.npmjs.org/read-package-json/-/read-package-json-0.4.1.tgz' } ]
15748 info install npmlog@0.0.6 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
15749 info install slide@1.1.5 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
15750 info install graceful-fs@1.1.14 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
15751 info install read-package-json@0.4.1 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed
15752 info installOne npmlog@0.0.6
15753 info installOne slide@1.1.5
15754 info installOne graceful-fs@1.1.14
15755 info installOne read-package-json@0.4.1
15756 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog unbuild
15757 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide unbuild
15758 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs unbuild
15759 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/read-package-json unbuild
15760 verbose tar unpack /home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15761 silly lockFile a445fbd7-ad-installed-node-modules-npmlog tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
15762 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog /home/lerenzo/.npm/a445fbd7-ad-installed-node-modules-npmlog.lock
15763 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15764 verbose lock tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz /home/lerenzo/.npm/213b80e8-nzo-npm-npmlog-0-0-6-package-tgz.lock
15765 verbose tar unpack /home/lerenzo/.npm/slide/1.1.5/package.tgz
15766 silly lockFile 3d89c5e8-ead-installed-node-modules-slide tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide
15767 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide /home/lerenzo/.npm/3d89c5e8-ead-installed-node-modules-slide.lock
15768 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15769 verbose lock tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz /home/lerenzo/.npm/b530b79b-enzo-npm-slide-1-1-5-package-tgz.lock
15770 verbose tar unpack /home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15771 silly lockFile fa888ea8-stalled-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs
15772 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs /home/lerenzo/.npm/fa888ea8-stalled-node-modules-graceful-fs.lock
15773 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15774 verbose lock tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz /home/lerenzo/.npm/67c41f81-m-graceful-fs-1-1-14-package-tgz.lock
15775 verbose tar unpack /home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15776 silly lockFile 908de3b4-d-node-modules-read-package-json tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/read-package-json
15777 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/read-package-json /home/lerenzo/.npm/908de3b4-d-node-modules-read-package-json.lock
15778 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15779 verbose lock tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz /home/lerenzo/.npm/16b446f7-d-package-json-0-4-1-package-tgz.lock
15780 silly gunzTarPerm modes [ '755', '644' ]
15781 silly gunzTarPerm modes [ '755', '644' ]
15782 silly gunzTarPerm modes [ '755', '644' ]
15783 silly gunzTarPerm modes [ '755', '644' ]
15784 silly gunzTarPerm extractEntry package.json
15785 silly gunzTarPerm extractEntry package.json
15786 silly gunzTarPerm extractEntry package.json
15787 silly gunzTarPerm extractEntry package.json
15788 silly gunzTarPerm extractEntry README.md
15789 silly gunzTarPerm extractEntry LICENSE
15790 silly gunzTarPerm extractEntry README.md
15791 silly gunzTarPerm extractEntry LICENSE
15792 silly gunzTarPerm extractEntry .npmignore
15793 silly gunzTarPerm extractEntry README.md
15794 silly gunzTarPerm extractEntry README.md
15795 silly gunzTarPerm extractEntry LICENSE
15796 silly gunzTarPerm extractEntry example.js
15797 silly gunzTarPerm extractEntry log.js
15798 silly gunzTarPerm extractEntry index.js
15799 silly gunzTarPerm extractEntry lib/async-map-ordered.js
15800 silly gunzTarPerm extractEntry LICENSE
15801 silly gunzTarPerm extractEntry graceful-fs.js
15802 silly gunzTarPerm extractEntry read-json.js
15803 silly gunzTarPerm extractEntry test/basic.js
15804 silly gunzTarPerm extractEntry test/bom.js
15805 silly gunzTarPerm extractEntry test/non-json.js
15806 silly gunzTarPerm extractEntry test/fixtures/bom.json
15807 silly gunzTarPerm extractEntry test/fixtures/nobom.json
15808 silly gunzTarPerm extractEntry test/fixtures/not-json.css
15809 silly gunzTarPerm extractEntry test/open.js
15810 silly gunzTarPerm extractEntry test/basic.js
15811 silly gunzTarPerm extractEntry lib/async-map.js
15812 silly gunzTarPerm extractEntry lib/bind-actor.js
15813 silly gunzTarPerm extractEntry lib/chain.js
15814 silly gunzTarPerm extractEntry lib/slide.js
15815 silly lockFile fa888ea8-stalled-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs
15816 silly lockFile fa888ea8-stalled-node-modules-graceful-fs tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs
15817 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15818 silly lockFile 67c41f81-m-graceful-fs-1-1-14-package-tgz tar:///home/lerenzo/.npm/graceful-fs/1.1.14/package.tgz
15819 info preinstall graceful-fs@1.1.14
15820 verbose readDependencies using package.json deps
15821 verbose readDependencies using package.json deps
15822 silly resolved []
15823 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs
15824 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/graceful-fs
15825 verbose linkStuff [ true,
15825 verbose linkStuff   '/usr/local/lib/node_modules',
15825 verbose linkStuff   false,
15825 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules' ]
15826 info linkStuff graceful-fs@1.1.14
15827 verbose linkBins graceful-fs@1.1.14
15828 verbose linkMans graceful-fs@1.1.14
15829 verbose rebuildBundles graceful-fs@1.1.14
15830 info install graceful-fs@1.1.14
15831 info postinstall graceful-fs@1.1.14
15832 silly lockFile a445fbd7-ad-installed-node-modules-npmlog tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
15833 silly lockFile a445fbd7-ad-installed-node-modules-npmlog tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
15834 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15835 silly lockFile 213b80e8-nzo-npm-npmlog-0-0-6-package-tgz tar:///home/lerenzo/.npm/npmlog/0.0.6/package.tgz
15836 silly lockFile 3d89c5e8-ead-installed-node-modules-slide tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide
15837 silly lockFile 3d89c5e8-ead-installed-node-modules-slide tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide
15838 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15839 silly lockFile b530b79b-enzo-npm-slide-1-1-5-package-tgz tar:///home/lerenzo/.npm/slide/1.1.5/package.tgz
15840 info preinstall npmlog@0.0.6
15841 info preinstall slide@1.1.5
15842 verbose readDependencies using package.json deps
15843 verbose readDependencies using package.json deps
15844 verbose readDependencies using package.json deps
15845 verbose readDependencies using package.json deps
15846 silly resolved []
15847 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide
15848 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/slide
15849 verbose linkStuff [ true,
15849 verbose linkStuff   '/usr/local/lib/node_modules',
15849 verbose linkStuff   false,
15849 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules' ]
15850 info linkStuff slide@1.1.5
15851 verbose linkBins slide@1.1.5
15852 verbose linkMans slide@1.1.5
15853 verbose rebuildBundles slide@1.1.5
15854 verbose cache add [ 'ansi@~0.2.1', null ]
15855 verbose cache add name=undefined spec="ansi@~0.2.1" args=["ansi@~0.2.1",null]
15856 verbose parsed url { protocol: null,
15856 verbose parsed url   slashes: null,
15856 verbose parsed url   auth: null,
15856 verbose parsed url   host: null,
15856 verbose parsed url   port: null,
15856 verbose parsed url   hostname: null,
15856 verbose parsed url   hash: null,
15856 verbose parsed url   search: null,
15856 verbose parsed url   query: null,
15856 verbose parsed url   pathname: 'ansi@~0.2.1',
15856 verbose parsed url   path: 'ansi@~0.2.1',
15856 verbose parsed url   href: 'ansi@~0.2.1' }
15857 verbose cache add name="ansi" spec="~0.2.1" args=["ansi","~0.2.1"]
15858 verbose parsed url { protocol: null,
15858 verbose parsed url   slashes: null,
15858 verbose parsed url   auth: null,
15858 verbose parsed url   host: null,
15858 verbose parsed url   port: null,
15858 verbose parsed url   hostname: null,
15858 verbose parsed url   hash: null,
15858 verbose parsed url   search: null,
15858 verbose parsed url   query: null,
15858 verbose parsed url   pathname: '~0.2.1',
15858 verbose parsed url   path: '~0.2.1',
15858 verbose parsed url   href: '~0.2.1' }
15859 verbose addNamed [ 'ansi', '~0.2.1' ]
15860 verbose addNamed [ null, '>=0.2.1-0 <0.3.0-0' ]
15861 silly lockFile 36148370-ansi-0-2-1 ansi@~0.2.1
15862 verbose lock ansi@~0.2.1 /home/lerenzo/.npm/36148370-ansi-0-2-1.lock
15863 info install slide@1.1.5
15864 silly addNameRange { name: 'ansi', range: '>=0.2.1-0 <0.3.0-0', hasData: false }
15865 info postinstall slide@1.1.5
15866 verbose url raw ansi
15867 verbose url resolving [ 'https://registry.npmjs.org/', './ansi' ]
15868 verbose url resolved https://registry.npmjs.org/ansi
15869 info trying registry request attempt 1 at 14:13:10
15870 http GET https://registry.npmjs.org/ansi
15871 silly lockFile 908de3b4-d-node-modules-read-package-json tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/read-package-json
15872 silly lockFile 908de3b4-d-node-modules-read-package-json tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/read-package-json
15873 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15874 silly lockFile 16b446f7-d-package-json-0-4-1-package-tgz tar:///home/lerenzo/.npm/read-package-json/0.4.1/package.tgz
15875 info preinstall read-package-json@0.4.1
15876 verbose readDependencies using package.json deps
15877 verbose readDependencies using package.json deps
15878 verbose cache add [ 'glob@~3.2.1', null ]
15879 verbose cache add name=undefined spec="glob@~3.2.1" args=["glob@~3.2.1",null]
15880 verbose parsed url { protocol: null,
15880 verbose parsed url   slashes: null,
15880 verbose parsed url   auth: null,
15880 verbose parsed url   host: null,
15880 verbose parsed url   port: null,
15880 verbose parsed url   hostname: null,
15880 verbose parsed url   hash: null,
15880 verbose parsed url   search: null,
15880 verbose parsed url   query: null,
15880 verbose parsed url   pathname: 'glob@~3.2.1',
15880 verbose parsed url   path: 'glob@~3.2.1',
15880 verbose parsed url   href: 'glob@~3.2.1' }
15881 verbose cache add name="glob" spec="~3.2.1" args=["glob","~3.2.1"]
15882 verbose parsed url { protocol: null,
15882 verbose parsed url   slashes: null,
15882 verbose parsed url   auth: null,
15882 verbose parsed url   host: null,
15882 verbose parsed url   port: null,
15882 verbose parsed url   hostname: null,
15882 verbose parsed url   hash: null,
15882 verbose parsed url   search: null,
15882 verbose parsed url   query: null,
15882 verbose parsed url   pathname: '~3.2.1',
15882 verbose parsed url   path: '~3.2.1',
15882 verbose parsed url   href: '~3.2.1' }
15883 verbose addNamed [ 'glob', '~3.2.1' ]
15884 verbose addNamed [ null, '>=3.2.1-0 <3.3.0-0' ]
15885 silly lockFile c4e56cfb-glob-3-2-1 glob@~3.2.1
15886 verbose lock glob@~3.2.1 /home/lerenzo/.npm/c4e56cfb-glob-3-2-1.lock
15887 verbose cache add [ 'lru-cache@2', null ]
15888 verbose cache add name=undefined spec="lru-cache@2" args=["lru-cache@2",null]
15889 verbose parsed url { protocol: null,
15889 verbose parsed url   slashes: null,
15889 verbose parsed url   auth: null,
15889 verbose parsed url   host: null,
15889 verbose parsed url   port: null,
15889 verbose parsed url   hostname: null,
15889 verbose parsed url   hash: null,
15889 verbose parsed url   search: null,
15889 verbose parsed url   query: null,
15889 verbose parsed url   pathname: 'lru-cache@2',
15889 verbose parsed url   path: 'lru-cache@2',
15889 verbose parsed url   href: 'lru-cache@2' }
15890 verbose cache add name="lru-cache" spec="2" args=["lru-cache","2"]
15891 verbose parsed url { protocol: null,
15891 verbose parsed url   slashes: null,
15891 verbose parsed url   auth: null,
15891 verbose parsed url   host: null,
15891 verbose parsed url   port: null,
15891 verbose parsed url   hostname: null,
15891 verbose parsed url   hash: null,
15891 verbose parsed url   search: null,
15891 verbose parsed url   query: null,
15891 verbose parsed url   pathname: '2',
15891 verbose parsed url   path: '2',
15891 verbose parsed url   href: '2' }
15892 verbose addNamed [ 'lru-cache', '2' ]
15893 verbose addNamed [ null, '>=2.0.0-0 <3.0.0-0' ]
15894 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
15895 verbose lock lru-cache@2 /home/lerenzo/.npm/b4f9d1ff-lru-cache-2.lock
15896 verbose cache add [ 'normalize-package-data@~0.1.2', null ]
15897 verbose cache add name=undefined spec="normalize-package-data@~0.1.2" args=["normalize-package-data@~0.1.2",null]
15898 verbose parsed url { protocol: null,
15898 verbose parsed url   slashes: null,
15898 verbose parsed url   auth: null,
15898 verbose parsed url   host: null,
15898 verbose parsed url   port: null,
15898 verbose parsed url   hostname: null,
15898 verbose parsed url   hash: null,
15898 verbose parsed url   search: null,
15898 verbose parsed url   query: null,
15898 verbose parsed url   pathname: 'normalize-package-data@~0.1.2',
15898 verbose parsed url   path: 'normalize-package-data@~0.1.2',
15898 verbose parsed url   href: 'normalize-package-data@~0.1.2' }
15899 verbose cache add name="normalize-package-data" spec="~0.1.2" args=["normalize-package-data","~0.1.2"]
15900 verbose parsed url { protocol: null,
15900 verbose parsed url   slashes: null,
15900 verbose parsed url   auth: null,
15900 verbose parsed url   host: null,
15900 verbose parsed url   port: null,
15900 verbose parsed url   hostname: null,
15900 verbose parsed url   hash: null,
15900 verbose parsed url   search: null,
15900 verbose parsed url   query: null,
15900 verbose parsed url   pathname: '~0.1.2',
15900 verbose parsed url   path: '~0.1.2',
15900 verbose parsed url   href: '~0.1.2' }
15901 verbose addNamed [ 'normalize-package-data', '~0.1.2' ]
15902 verbose addNamed [ null, '>=0.1.2-0 <0.2.0-0' ]
15903 silly lockFile a13b9870-normalize-package-data-0-1-2 normalize-package-data@~0.1.2
15904 verbose lock normalize-package-data@~0.1.2 /home/lerenzo/.npm/a13b9870-normalize-package-data-0-1-2.lock
15905 silly addNameRange { name: 'glob', range: '>=3.2.1-0 <3.3.0-0', hasData: false }
15906 verbose cache add [ 'graceful-fs@~1.2', null ]
15907 verbose cache add name=undefined spec="graceful-fs@~1.2" args=["graceful-fs@~1.2",null]
15908 verbose parsed url { protocol: null,
15908 verbose parsed url   slashes: null,
15908 verbose parsed url   auth: null,
15908 verbose parsed url   host: null,
15908 verbose parsed url   port: null,
15908 verbose parsed url   hostname: null,
15908 verbose parsed url   hash: null,
15908 verbose parsed url   search: null,
15908 verbose parsed url   query: null,
15908 verbose parsed url   pathname: 'graceful-fs@~1.2',
15908 verbose parsed url   path: 'graceful-fs@~1.2',
15908 verbose parsed url   href: 'graceful-fs@~1.2' }
15909 verbose cache add name="graceful-fs" spec="~1.2" args=["graceful-fs","~1.2"]
15910 verbose parsed url { protocol: null,
15910 verbose parsed url   slashes: null,
15910 verbose parsed url   auth: null,
15910 verbose parsed url   host: null,
15910 verbose parsed url   port: null,
15910 verbose parsed url   hostname: null,
15910 verbose parsed url   hash: null,
15910 verbose parsed url   search: null,
15910 verbose parsed url   query: null,
15910 verbose parsed url   pathname: '~1.2',
15910 verbose parsed url   path: '~1.2',
15910 verbose parsed url   href: '~1.2' }
15911 verbose addNamed [ 'graceful-fs', '~1.2' ]
15912 verbose addNamed [ null, '>=1.2.0-0 <1.3.0-0' ]
15913 silly lockFile ef839b18-graceful-fs-1-2 graceful-fs@~1.2
15914 verbose lock graceful-fs@~1.2 /home/lerenzo/.npm/ef839b18-graceful-fs-1-2.lock
15915 silly addNameRange { name: 'lru-cache',
15915 silly addNameRange   range: '>=2.0.0-0 <3.0.0-0',
15915 silly addNameRange   hasData: false }
15916 verbose url raw glob
15917 verbose url resolving [ 'https://registry.npmjs.org/', './glob' ]
15918 verbose url resolved https://registry.npmjs.org/glob
15919 info trying registry request attempt 1 at 14:13:10
15920 http GET https://registry.npmjs.org/glob
15921 silly addNameRange { name: 'normalize-package-data',
15921 silly addNameRange   range: '>=0.1.2-0 <0.2.0-0',
15921 silly addNameRange   hasData: false }
15922 silly addNameRange { name: 'graceful-fs',
15922 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
15922 silly addNameRange   hasData: false }
15923 verbose url raw normalize-package-data
15924 verbose url resolving [ 'https://registry.npmjs.org/', './normalize-package-data' ]
15925 verbose url resolved https://registry.npmjs.org/normalize-package-data
15926 info trying registry request attempt 1 at 14:13:10
15927 http GET https://registry.npmjs.org/normalize-package-data
15928 verbose url raw lru-cache
15929 verbose url resolving [ 'https://registry.npmjs.org/', './lru-cache' ]
15930 verbose url resolved https://registry.npmjs.org/lru-cache
15931 info trying registry request attempt 1 at 14:13:10
15932 verbose etag "EVMUW224SL57QIO1QJYZN9ABH"
15933 http GET https://registry.npmjs.org/lru-cache
15934 verbose url raw graceful-fs
15935 verbose url resolving [ 'https://registry.npmjs.org/', './graceful-fs' ]
15936 verbose url resolved https://registry.npmjs.org/graceful-fs
15937 info trying registry request attempt 1 at 14:13:10
15938 verbose etag "8VTIGE3KHXX4861152PVTWGF8"
15939 http GET https://registry.npmjs.org/graceful-fs
15940 http 200 https://registry.npmjs.org/pkginfo
15941 silly registry.get cb [ 200,
15941 silly registry.get   { vary: 'Accept',
15941 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15941 silly registry.get     etag: '"8NFZE186SC0218SIA7RX07BZM"',
15941 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:10 GMT',
15941 silly registry.get     'content-type': 'application/json',
15941 silly registry.get     'content-length': '6804' } ]
15942 silly addNameRange number 2 { name: 'pkginfo', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
15943 silly addNameRange versions [ 'pkginfo', [ '0.2.1', '0.2.2', '0.2.3', '0.3.0' ] ]
15944 verbose addNamed [ 'pkginfo', '0.2.3' ]
15945 verbose addNamed [ '0.2.3', '0.2.3' ]
15946 silly lockFile d1747791-pkginfo-0-2-3 pkginfo@0.2.3
15947 verbose lock pkginfo@0.2.3 /home/lerenzo/.npm/d1747791-pkginfo-0-2-3.lock
15948 silly lockFile 4ce9af93-js-org-pkginfo-pkginfo-0-2-3-tgz https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz
15949 verbose lock https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz /home/lerenzo/.npm/4ce9af93-js-org-pkginfo-pkginfo-0-2-3-tgz.lock
15950 verbose addRemoteTarball [ 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz',
15950 verbose addRemoteTarball   '7239c42a5ef6c30b8f328439d9b9ff71042490f8' ]
15951 info retry fetch attempt 1 at 14:13:11
15952 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz
15953 http GET https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz
15954 http 200 https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz
15955 http 200 https://registry.npmjs.org/primus/-/primus-1.4.6.tgz
15956 http 200 https://registry.npmjs.org/stack-trace
15957 silly registry.get cb [ 200,
15957 silly registry.get   { vary: 'Accept',
15957 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
15957 silly registry.get     etag: '"CMDWWSGEUUKCL9AMHVLR58M1T"',
15957 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:11 GMT',
15957 silly registry.get     'content-type': 'application/json',
15957 silly registry.get     'content-length': '11992' } ]
15958 silly addNameRange number 2 { name: 'stack-trace',
15958 silly addNameRange   range: '>=0.0.0-0 <0.1.0-0',
15958 silly addNameRange   hasData: true }
15959 silly addNameRange versions [ 'stack-trace',
15959 silly addNameRange   [ '0.0.1', '0.0.2', '0.0.3', '0.0.4', '0.0.5', '0.0.6', '0.0.7' ] ]
15960 verbose addNamed [ 'stack-trace', '0.0.7' ]
15961 verbose addNamed [ '0.0.7', '0.0.7' ]
15962 silly lockFile ac7c6080-stack-trace-0-0-7 stack-trace@0.0.7
15963 verbose lock stack-trace@0.0.7 /home/lerenzo/.npm/ac7c6080-stack-trace-0-0-7.lock
15964 silly lockFile 3f4c75f8-tack-trace-stack-trace-0-0-7-tgz https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz
15965 verbose lock https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz /home/lerenzo/.npm/3f4c75f8-tack-trace-stack-trace-0-0-7-tgz.lock
15966 verbose addRemoteTarball [ 'https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz',
15966 verbose addRemoteTarball   'c72e089744fc3659f508cdce3621af5634ec0fff' ]
15967 info retry fetch attempt 1 at 14:13:12
15968 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz
15969 http GET https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz
15970 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz
15971 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
15972 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package /home/lerenzo/.npm/b2271e59-849-0-010150270769372582-package.lock
15973 silly lockFile 94957478-849-0-010150270769372582-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz
15974 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz /home/lerenzo/.npm/94957478-849-0-010150270769372582-tmp-tgz.lock
15975 silly gunzTarPerm modes [ '755', '644' ]
15976 silly gunzTarPerm extractEntry AUTHORS
15977 silly gunzTarPerm extractEntry fiber.js
15978 silly gunzTarPerm extractEntry LICENSE
15979 silly gunzTarPerm extractEntry package.json
15980 silly gunzTarPerm extractEntry README.md
15981 silly gunzTarPerm extractEntry rimraf.js
15982 silly gunzTarPerm extractEntry test/
15983 silly gunzTarPerm extractEntry test/run.sh
15984 silly gunzTarPerm extractEntry test/setup.sh
15985 silly gunzTarPerm extractEntry test/test-async.js
15986 silly gunzTarPerm extractEntry test/test-fiber.js
15987 silly gunzTarPerm extractEntry test/test-sync.js
15988 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
15989 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
15990 silly lockFile 94957478-849-0-010150270769372582-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz
15991 silly lockFile 94957478-849-0-010150270769372582-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/tmp.tgz
15992 verbose tar pack [ '/home/lerenzo/.npm/rimraf/1.0.9/package.tgz',
15992 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package' ]
15993 verbose tarball /home/lerenzo/.npm/rimraf/1.0.9/package.tgz
15994 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
15995 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
15996 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package /home/lerenzo/.npm/b2271e59-849-0-010150270769372582-package.lock
15997 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
15998 verbose lock tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz /home/lerenzo/.npm/94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz.lock
15999 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
16000 silly lockFile b2271e59-849-0-010150270769372582-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387849-0.010150270769372582/package
16001 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16002 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16003 silly lockFile 9837feb0-lerenzo-npm-rimraf-1-0-9-package /home/lerenzo/.npm/rimraf/1.0.9/package
16004 verbose lock /home/lerenzo/.npm/rimraf/1.0.9/package /home/lerenzo/.npm/9837feb0-lerenzo-npm-rimraf-1-0-9-package.lock
16005 silly lockFile 9837feb0-lerenzo-npm-rimraf-1-0-9-package /home/lerenzo/.npm/rimraf/1.0.9/package
16006 silly lockFile 9837feb0-lerenzo-npm-rimraf-1-0-9-package /home/lerenzo/.npm/rimraf/1.0.9/package
16007 verbose tar unpack /home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16008 silly lockFile 5fe9ca1d-lerenzo-npm-rimraf-1-0-9-package tar:///home/lerenzo/.npm/rimraf/1.0.9/package
16009 verbose lock tar:///home/lerenzo/.npm/rimraf/1.0.9/package /home/lerenzo/.npm/5fe9ca1d-lerenzo-npm-rimraf-1-0-9-package.lock
16010 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16011 verbose lock tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz /home/lerenzo/.npm/94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz.lock
16012 silly gunzTarPerm modes [ '755', '644' ]
16013 silly gunzTarPerm extractEntry package.json
16014 silly gunzTarPerm extractEntry README.md
16015 silly gunzTarPerm extractEntry LICENSE
16016 silly gunzTarPerm extractEntry fiber.js
16017 silly gunzTarPerm extractEntry rimraf.js
16018 silly gunzTarPerm extractEntry AUTHORS
16019 silly gunzTarPerm extractEntry test/test-async.js
16020 silly gunzTarPerm extractEntry test/test-fiber.js
16021 silly gunzTarPerm extractEntry test/test-sync.js
16022 silly gunzTarPerm extractEntry test/run.sh
16023 silly gunzTarPerm extractEntry test/setup.sh
16024 silly lockFile 5fe9ca1d-lerenzo-npm-rimraf-1-0-9-package tar:///home/lerenzo/.npm/rimraf/1.0.9/package
16025 silly lockFile 5fe9ca1d-lerenzo-npm-rimraf-1-0-9-package tar:///home/lerenzo/.npm/rimraf/1.0.9/package
16026 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16027 silly lockFile 94b4e4a6-nzo-npm-rimraf-1-0-9-package-tgz tar:///home/lerenzo/.npm/rimraf/1.0.9/package.tgz
16028 verbose chmod /home/lerenzo/.npm/rimraf/1.0.9/package.tgz 644
16029 verbose chown /home/lerenzo/.npm/rimraf/1.0.9/package.tgz [ 1000, 1000 ]
16030 silly lockFile 1c85334f-pmjs-org-rimraf-rimraf-1-0-9-tgz https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz
16031 silly lockFile 1c85334f-pmjs-org-rimraf-rimraf-1-0-9-tgz https://registry.npmjs.org/rimraf/-/rimraf-1.0.9.tgz
16032 silly lockFile 67d50f11-rimraf-1-0-9 rimraf@1.0.9
16033 silly lockFile 67d50f11-rimraf-1-0-9 rimraf@1.0.9
16034 silly lockFile 42682ec2-rimraf-1-x-x rimraf@1.x.x
16035 silly lockFile 42682ec2-rimraf-1-x-x rimraf@1.x.x
16036 http 200 https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz
16037 info trying registry request attempt 2 at 14:13:14
16038 http GET https://registry.npmjs.org/ncp
16039 http 200 https://registry.npmjs.org/i/-/i-0.3.2.tgz
16040 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz
16041 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16042 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package /home/lerenzo/.npm/a7397764-83376-0-6055823327042162-package.lock
16043 silly lockFile 2f245c3f-83376-0-6055823327042162-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz
16044 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz /home/lerenzo/.npm/2f245c3f-83376-0-6055823327042162-tmp-tgz.lock
16045 silly gunzTarPerm modes [ '755', '644' ]
16046 silly gunzTarPerm extractEntry package.json
16047 silly gunzTarPerm extractEntry index.js
16048 silly gunzTarPerm extractEntry .travis.yml
16049 silly gunzTarPerm extractEntry README.markdown
16050 silly gunzTarPerm extractEntry example/cmp.js
16051 silly gunzTarPerm extractEntry test/cmp.js
16052 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16053 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16054 silly lockFile 2f245c3f-83376-0-6055823327042162-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz
16055 silly lockFile 2f245c3f-83376-0-6055823327042162-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/tmp.tgz
16056 verbose tar pack [ '/home/lerenzo/.npm/deep-equal/0.1.0/package.tgz',
16056 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package' ]
16057 verbose tarball /home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16058 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16059 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16060 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package /home/lerenzo/.npm/a7397764-83376-0-6055823327042162-package.lock
16061 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16062 verbose lock tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz /home/lerenzo/.npm/38d89b13-npm-deep-equal-0-1-0-package-tgz.lock
16063 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz
16064 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16065 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package /home/lerenzo/.npm/db784ffa-91410-0-3914605702739209-package.lock
16066 silly lockFile 80248f99-91410-0-3914605702739209-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz
16067 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz /home/lerenzo/.npm/80248f99-91410-0-3914605702739209-tmp-tgz.lock
16068 silly gunzTarPerm modes [ '755', '644' ]
16069 silly gunzTarPerm extractEntry .gitignore
16070 silly gunzTarPerm extractEntry package.json
16071 silly gunzTarPerm extractEntry README.md
16072 silly gunzTarPerm extractEntry docs/docco.css
16073 silly gunzTarPerm extractEntry docs/pkginfo.html
16074 silly gunzTarPerm extractEntry lib/pkginfo.js
16075 silly gunzTarPerm extractEntry test/pkginfo-test.js
16076 silly gunzTarPerm extractEntry examples/all-properties.js
16077 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16078 silly lockFile a7397764-83376-0-6055823327042162-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572383376-0.6055823327042162/package
16079 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16080 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16081 silly lockFile 06076cc7-nzo-npm-deep-equal-0-1-0-package /home/lerenzo/.npm/deep-equal/0.1.0/package
16082 verbose lock /home/lerenzo/.npm/deep-equal/0.1.0/package /home/lerenzo/.npm/06076cc7-nzo-npm-deep-equal-0-1-0-package.lock
16083 silly gunzTarPerm extractEntry examples/array-argument.js
16084 silly gunzTarPerm extractEntry examples/multiple-properties.js
16085 silly lockFile 06076cc7-nzo-npm-deep-equal-0-1-0-package /home/lerenzo/.npm/deep-equal/0.1.0/package
16086 silly lockFile 06076cc7-nzo-npm-deep-equal-0-1-0-package /home/lerenzo/.npm/deep-equal/0.1.0/package
16087 verbose tar unpack /home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16088 silly lockFile 76bb7b03-nzo-npm-deep-equal-0-1-0-package tar:///home/lerenzo/.npm/deep-equal/0.1.0/package
16089 verbose lock tar:///home/lerenzo/.npm/deep-equal/0.1.0/package /home/lerenzo/.npm/76bb7b03-nzo-npm-deep-equal-0-1-0-package.lock
16090 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16091 verbose lock tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz /home/lerenzo/.npm/38d89b13-npm-deep-equal-0-1-0-package-tgz.lock
16092 silly gunzTarPerm modes [ '755', '644' ]
16093 silly gunzTarPerm extractEntry package.json
16094 silly gunzTarPerm extractEntry index.js
16095 silly gunzTarPerm extractEntry .travis.yml
16096 silly gunzTarPerm extractEntry README.markdown
16097 silly gunzTarPerm extractEntry example/cmp.js
16098 silly gunzTarPerm extractEntry examples/object-argument.js
16099 silly gunzTarPerm extractEntry examples/package.json
16100 silly gunzTarPerm extractEntry test/cmp.js
16101 silly gunzTarPerm extractEntry examples/single-property.js
16102 silly lockFile 76bb7b03-nzo-npm-deep-equal-0-1-0-package tar:///home/lerenzo/.npm/deep-equal/0.1.0/package
16103 silly lockFile 76bb7b03-nzo-npm-deep-equal-0-1-0-package tar:///home/lerenzo/.npm/deep-equal/0.1.0/package
16104 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16105 silly lockFile 38d89b13-npm-deep-equal-0-1-0-package-tgz tar:///home/lerenzo/.npm/deep-equal/0.1.0/package.tgz
16106 verbose chmod /home/lerenzo/.npm/deep-equal/0.1.0/package.tgz 644
16107 verbose chown /home/lerenzo/.npm/deep-equal/0.1.0/package.tgz [ 1000, 1000 ]
16108 silly lockFile 4897c8e7--deep-equal-deep-equal-0-1-0-tgz https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz
16109 silly lockFile 4897c8e7--deep-equal-deep-equal-0-1-0-tgz https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.0.tgz
16110 silly lockFile e8edd534-deep-equal-0-1-0 deep-equal@0.1.0
16111 silly lockFile e8edd534-deep-equal-0-1-0 deep-equal@0.1.0
16112 silly lockFile 2aa4e33c-deep-equal deep-equal@*
16113 silly lockFile 2aa4e33c-deep-equal deep-equal@*
16114 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16115 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16116 silly lockFile 80248f99-91410-0-3914605702739209-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz
16117 silly lockFile 80248f99-91410-0-3914605702739209-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/tmp.tgz
16118 verbose tar pack [ '/home/lerenzo/.npm/pkginfo/0.2.3/package.tgz',
16118 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package' ]
16119 verbose tarball /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16120 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16121 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16122 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package /home/lerenzo/.npm/db784ffa-91410-0-3914605702739209-package.lock
16123 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16124 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
16125 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16126 silly lockFile db784ffa-91410-0-3914605702739209-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572391410-0.3914605702739209/package
16127 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16128 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16129 silly lockFile 558f81ce-erenzo-npm-pkginfo-0-2-3-package /home/lerenzo/.npm/pkginfo/0.2.3/package
16130 verbose lock /home/lerenzo/.npm/pkginfo/0.2.3/package /home/lerenzo/.npm/558f81ce-erenzo-npm-pkginfo-0-2-3-package.lock
16131 silly lockFile 558f81ce-erenzo-npm-pkginfo-0-2-3-package /home/lerenzo/.npm/pkginfo/0.2.3/package
16132 silly lockFile 558f81ce-erenzo-npm-pkginfo-0-2-3-package /home/lerenzo/.npm/pkginfo/0.2.3/package
16133 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16134 silly lockFile 7629c432-erenzo-npm-pkginfo-0-2-3-package tar:///home/lerenzo/.npm/pkginfo/0.2.3/package
16135 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package /home/lerenzo/.npm/7629c432-erenzo-npm-pkginfo-0-2-3-package.lock
16136 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16137 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
16138 silly gunzTarPerm modes [ '755', '644' ]
16139 silly gunzTarPerm extractEntry package.json
16140 silly gunzTarPerm extractEntry .npmignore
16141 silly gunzTarPerm extractEntry README.md
16142 silly gunzTarPerm extractEntry docs/docco.css
16143 silly gunzTarPerm extractEntry docs/pkginfo.html
16144 silly gunzTarPerm extractEntry examples/package.json
16145 silly gunzTarPerm extractEntry examples/all-properties.js
16146 silly gunzTarPerm extractEntry examples/array-argument.js
16147 silly gunzTarPerm extractEntry examples/multiple-properties.js
16148 silly gunzTarPerm extractEntry examples/object-argument.js
16149 silly gunzTarPerm extractEntry examples/single-property.js
16150 silly gunzTarPerm extractEntry lib/pkginfo.js
16151 silly gunzTarPerm extractEntry test/pkginfo-test.js
16152 silly lockFile 7629c432-erenzo-npm-pkginfo-0-2-3-package tar:///home/lerenzo/.npm/pkginfo/0.2.3/package
16153 silly lockFile 7629c432-erenzo-npm-pkginfo-0-2-3-package tar:///home/lerenzo/.npm/pkginfo/0.2.3/package
16154 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16155 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
16156 verbose chmod /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz 644
16157 verbose chown /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz [ 1000, 1000 ]
16158 silly lockFile 4ce9af93-js-org-pkginfo-pkginfo-0-2-3-tgz https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz
16159 silly lockFile 4ce9af93-js-org-pkginfo-pkginfo-0-2-3-tgz https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz
16160 silly lockFile d1747791-pkginfo-0-2-3 pkginfo@0.2.3
16161 silly lockFile d1747791-pkginfo-0-2-3 pkginfo@0.2.3
16162 silly lockFile f898f07d-pkginfo-0-2-x pkginfo@0.2.x
16163 silly lockFile f898f07d-pkginfo-0-2-x pkginfo@0.2.x
16164 http 304 https://registry.npmjs.org/mkdirp
16165 silly registry.get cb [ 304,
16165 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
16165 silly registry.get     etag: '"2FCGN661Y5J8YJFE1Z01DF3KM"',
16165 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:16 GMT',
16165 silly registry.get     'content-length': '0' } ]
16166 verbose etag mkdirp from cache
16167 silly addNameRange number 2 { name: 'mkdirp', range: '>=0.0.0-0 <1.0.0-0', hasData: true }
16168 silly addNameRange versions [ 'mkdirp',
16168 silly addNameRange   [ '0.0.1',
16168 silly addNameRange     '0.0.2',
16168 silly addNameRange     '0.0.3',
16168 silly addNameRange     '0.0.4',
16168 silly addNameRange     '0.0.5',
16168 silly addNameRange     '0.0.6',
16168 silly addNameRange     '0.0.7',
16168 silly addNameRange     '0.1.0',
16168 silly addNameRange     '0.2.0',
16168 silly addNameRange     '0.2.1',
16168 silly addNameRange     '0.2.2',
16168 silly addNameRange     '0.3.0',
16168 silly addNameRange     '0.3.1',
16168 silly addNameRange     '0.3.2',
16168 silly addNameRange     '0.3.3',
16168 silly addNameRange     '0.3.4',
16168 silly addNameRange     '0.3.5' ] ]
16169 verbose addNamed [ 'mkdirp', '0.3.5' ]
16170 verbose addNamed [ '0.3.5', '0.3.5' ]
16171 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
16172 verbose lock mkdirp@0.3.5 /home/lerenzo/.npm/67d2df2a-mkdirp-0-3-5.lock
16173 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
16174 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
16175 silly lockFile 0cdf6d66-mkdirp-0-x-x mkdirp@0.x.x
16176 silly lockFile 0cdf6d66-mkdirp-0-x-x mkdirp@0.x.x
16177 http 200 https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz
16178 http 200 https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz
16179 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz
16180 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16181 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package /home/lerenzo/.npm/c1c4a23d-90386-0-4128426113165915-package.lock
16182 silly lockFile a45a5cba-90386-0-4128426113165915-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz
16183 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz /home/lerenzo/.npm/a45a5cba-90386-0-4128426113165915-tmp-tgz.lock
16184 silly gunzTarPerm modes [ '755', '644' ]
16185 silly gunzTarPerm extractEntry package.json
16186 silly gunzTarPerm extractEntry README.md
16187 silly gunzTarPerm extractEntry cycle.js
16188 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16189 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16190 silly lockFile a45a5cba-90386-0-4128426113165915-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz
16191 silly lockFile a45a5cba-90386-0-4128426113165915-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/tmp.tgz
16192 verbose tar pack [ '/home/lerenzo/.npm/cycle/1.0.2/package.tgz',
16192 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package' ]
16193 verbose tarball /home/lerenzo/.npm/cycle/1.0.2/package.tgz
16194 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16195 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16196 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package /home/lerenzo/.npm/c1c4a23d-90386-0-4128426113165915-package.lock
16197 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16198 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
16199 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16200 silly lockFile c1c4a23d-90386-0-4128426113165915-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572390386-0.4128426113165915/package
16201 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16202 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16203 silly lockFile 3ac3b20a--lerenzo-npm-cycle-1-0-2-package /home/lerenzo/.npm/cycle/1.0.2/package
16204 verbose lock /home/lerenzo/.npm/cycle/1.0.2/package /home/lerenzo/.npm/3ac3b20a--lerenzo-npm-cycle-1-0-2-package.lock
16205 silly lockFile 3ac3b20a--lerenzo-npm-cycle-1-0-2-package /home/lerenzo/.npm/cycle/1.0.2/package
16206 silly lockFile 3ac3b20a--lerenzo-npm-cycle-1-0-2-package /home/lerenzo/.npm/cycle/1.0.2/package
16207 verbose tar unpack /home/lerenzo/.npm/cycle/1.0.2/package.tgz
16208 silly lockFile dd8e8da0--lerenzo-npm-cycle-1-0-2-package tar:///home/lerenzo/.npm/cycle/1.0.2/package
16209 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package /home/lerenzo/.npm/dd8e8da0--lerenzo-npm-cycle-1-0-2-package.lock
16210 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16211 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
16212 silly gunzTarPerm modes [ '755', '644' ]
16213 silly gunzTarPerm extractEntry package.json
16214 silly gunzTarPerm extractEntry README.md
16215 silly gunzTarPerm extractEntry cycle.js
16216 silly lockFile dd8e8da0--lerenzo-npm-cycle-1-0-2-package tar:///home/lerenzo/.npm/cycle/1.0.2/package
16217 silly lockFile dd8e8da0--lerenzo-npm-cycle-1-0-2-package tar:///home/lerenzo/.npm/cycle/1.0.2/package
16218 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16219 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
16220 verbose chmod /home/lerenzo/.npm/cycle/1.0.2/package.tgz 644
16221 verbose chown /home/lerenzo/.npm/cycle/1.0.2/package.tgz [ 1000, 1000 ]
16222 silly lockFile 3ff54e6a--npmjs-org-cycle-cycle-1-0-2-tgz https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz
16223 silly lockFile 3ff54e6a--npmjs-org-cycle-cycle-1-0-2-tgz https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz
16224 silly lockFile 67c36329-cycle-1-0-2 cycle@1.0.2
16225 silly lockFile 67c36329-cycle-1-0-2 cycle@1.0.2
16226 silly lockFile dfb63733-cycle-1-0-x cycle@1.0.x
16227 silly lockFile dfb63733-cycle-1-0-x cycle@1.0.x
16228 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz
16229 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16230 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package /home/lerenzo/.npm/fde8a38f-92397-0-5334512423723936-package.lock
16231 silly lockFile e78ae270-92397-0-5334512423723936-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz
16232 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz /home/lerenzo/.npm/e78ae270-92397-0-5334512423723936-tmp-tgz.lock
16233 silly gunzTarPerm modes [ '755', '644' ]
16234 silly gunzTarPerm extractEntry package.json
16235 silly gunzTarPerm extractEntry .npmignore
16236 silly gunzTarPerm extractEntry License
16237 silly gunzTarPerm extractEntry Makefile
16238 silly gunzTarPerm extractEntry Readme.md
16239 silly gunzTarPerm extractEntry lib/stack-trace.js
16240 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16241 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16242 silly lockFile e78ae270-92397-0-5334512423723936-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz
16243 silly lockFile e78ae270-92397-0-5334512423723936-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/tmp.tgz
16244 verbose tar pack [ '/home/lerenzo/.npm/stack-trace/0.0.7/package.tgz',
16244 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package' ]
16245 verbose tarball /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16246 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16247 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16248 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package /home/lerenzo/.npm/fde8a38f-92397-0-5334512423723936-package.lock
16249 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16250 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
16251 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16252 silly lockFile fde8a38f-92397-0-5334512423723936-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572392397-0.5334512423723936/package
16253 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16254 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16255 silly lockFile a50b9bad-zo-npm-stack-trace-0-0-7-package /home/lerenzo/.npm/stack-trace/0.0.7/package
16256 verbose lock /home/lerenzo/.npm/stack-trace/0.0.7/package /home/lerenzo/.npm/a50b9bad-zo-npm-stack-trace-0-0-7-package.lock
16257 silly lockFile a50b9bad-zo-npm-stack-trace-0-0-7-package /home/lerenzo/.npm/stack-trace/0.0.7/package
16258 silly lockFile a50b9bad-zo-npm-stack-trace-0-0-7-package /home/lerenzo/.npm/stack-trace/0.0.7/package
16259 verbose tar unpack /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16260 silly lockFile bd241c46-zo-npm-stack-trace-0-0-7-package tar:///home/lerenzo/.npm/stack-trace/0.0.7/package
16261 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package /home/lerenzo/.npm/bd241c46-zo-npm-stack-trace-0-0-7-package.lock
16262 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16263 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
16264 silly gunzTarPerm modes [ '755', '644' ]
16265 silly gunzTarPerm extractEntry package.json
16266 silly gunzTarPerm extractEntry .npmignore
16267 silly gunzTarPerm extractEntry License
16268 silly gunzTarPerm extractEntry Makefile
16269 silly gunzTarPerm extractEntry Readme.md
16270 silly gunzTarPerm extractEntry lib/stack-trace.js
16271 silly lockFile bd241c46-zo-npm-stack-trace-0-0-7-package tar:///home/lerenzo/.npm/stack-trace/0.0.7/package
16272 silly lockFile bd241c46-zo-npm-stack-trace-0-0-7-package tar:///home/lerenzo/.npm/stack-trace/0.0.7/package
16273 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16274 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
16275 verbose chmod /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz 644
16276 verbose chown /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz [ 1000, 1000 ]
16277 silly lockFile 3f4c75f8-tack-trace-stack-trace-0-0-7-tgz https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz
16278 silly lockFile 3f4c75f8-tack-trace-stack-trace-0-0-7-tgz https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz
16279 silly lockFile ac7c6080-stack-trace-0-0-7 stack-trace@0.0.7
16280 silly lockFile ac7c6080-stack-trace-0-0-7 stack-trace@0.0.7
16281 silly lockFile 00b1025d-stack-trace-0-0-x stack-trace@0.0.x
16282 silly lockFile 00b1025d-stack-trace-0-0-x stack-trace@0.0.x
16283 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz
16284 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16285 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package /home/lerenzo/.npm/76d85743-87241-0-5070211952552199-package.lock
16286 silly lockFile f38b9f91-87241-0-5070211952552199-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz
16287 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz /home/lerenzo/.npm/f38b9f91-87241-0-5070211952552199-tmp-tgz.lock
16288 silly gunzTarPerm modes [ '755', '644' ]
16289 silly gunzTarPerm extractEntry package.json
16290 silly gunzTarPerm extractEntry .npmignore
16291 silly gunzTarPerm extractEntry README.md
16292 silly gunzTarPerm extractEntry LICENSE
16293 silly gunzTarPerm extractEntry .travis.yml
16294 silly gunzTarPerm extractEntry lib/defaults.js
16295 silly gunzTarPerm extractEntry lib/inflect.js
16296 silly gunzTarPerm extractEntry lib/inflections.js
16297 silly gunzTarPerm extractEntry lib/methods.js
16298 silly gunzTarPerm extractEntry lib/native.js
16299 silly gunzTarPerm extractEntry lib/util.js
16300 silly gunzTarPerm extractEntry test/inflector/cases.js
16301 silly gunzTarPerm extractEntry test/inflector/inflections-test.js
16302 silly gunzTarPerm extractEntry test/inflector/methods-test.js
16303 silly gunzTarPerm extractEntry test/utils/array-test.js
16304 silly gunzTarPerm extractEntry test/utils/string-test.js
16305 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16306 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16307 silly lockFile f38b9f91-87241-0-5070211952552199-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz
16308 silly lockFile f38b9f91-87241-0-5070211952552199-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/tmp.tgz
16309 verbose tar pack [ '/home/lerenzo/.npm/i/0.3.2/package.tgz',
16309 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package' ]
16310 verbose tarball /home/lerenzo/.npm/i/0.3.2/package.tgz
16311 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16312 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16313 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package /home/lerenzo/.npm/76d85743-87241-0-5070211952552199-package.lock
16314 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16315 verbose lock tar:///home/lerenzo/.npm/i/0.3.2/package.tgz /home/lerenzo/.npm/946a166e--lerenzo-npm-i-0-3-2-package-tgz.lock
16316 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16317 silly lockFile 76d85743-87241-0-5070211952552199-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572387241-0.5070211952552199/package
16318 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16319 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16320 silly lockFile 23c89da1-home-lerenzo-npm-i-0-3-2-package /home/lerenzo/.npm/i/0.3.2/package
16321 verbose lock /home/lerenzo/.npm/i/0.3.2/package /home/lerenzo/.npm/23c89da1-home-lerenzo-npm-i-0-3-2-package.lock
16322 silly lockFile 23c89da1-home-lerenzo-npm-i-0-3-2-package /home/lerenzo/.npm/i/0.3.2/package
16323 silly lockFile 23c89da1-home-lerenzo-npm-i-0-3-2-package /home/lerenzo/.npm/i/0.3.2/package
16324 verbose tar unpack /home/lerenzo/.npm/i/0.3.2/package.tgz
16325 silly lockFile b8f3bf40-home-lerenzo-npm-i-0-3-2-package tar:///home/lerenzo/.npm/i/0.3.2/package
16326 verbose lock tar:///home/lerenzo/.npm/i/0.3.2/package /home/lerenzo/.npm/b8f3bf40-home-lerenzo-npm-i-0-3-2-package.lock
16327 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16328 verbose lock tar:///home/lerenzo/.npm/i/0.3.2/package.tgz /home/lerenzo/.npm/946a166e--lerenzo-npm-i-0-3-2-package-tgz.lock
16329 silly gunzTarPerm modes [ '755', '644' ]
16330 silly gunzTarPerm extractEntry package.json
16331 silly gunzTarPerm extractEntry .npmignore
16332 silly gunzTarPerm extractEntry README.md
16333 silly gunzTarPerm extractEntry LICENSE
16334 silly gunzTarPerm extractEntry .travis.yml
16335 silly gunzTarPerm extractEntry lib/defaults.js
16336 silly gunzTarPerm extractEntry lib/inflect.js
16337 silly gunzTarPerm extractEntry lib/inflections.js
16338 silly gunzTarPerm extractEntry lib/methods.js
16339 silly gunzTarPerm extractEntry lib/native.js
16340 silly gunzTarPerm extractEntry lib/util.js
16341 silly gunzTarPerm extractEntry test/inflector/cases.js
16342 silly gunzTarPerm extractEntry test/inflector/inflections-test.js
16343 silly gunzTarPerm extractEntry test/inflector/methods-test.js
16344 silly gunzTarPerm extractEntry test/utils/array-test.js
16345 silly gunzTarPerm extractEntry test/utils/string-test.js
16346 silly lockFile b8f3bf40-home-lerenzo-npm-i-0-3-2-package tar:///home/lerenzo/.npm/i/0.3.2/package
16347 silly lockFile b8f3bf40-home-lerenzo-npm-i-0-3-2-package tar:///home/lerenzo/.npm/i/0.3.2/package
16348 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16349 silly lockFile 946a166e--lerenzo-npm-i-0-3-2-package-tgz tar:///home/lerenzo/.npm/i/0.3.2/package.tgz
16350 verbose chmod /home/lerenzo/.npm/i/0.3.2/package.tgz 644
16351 verbose chown /home/lerenzo/.npm/i/0.3.2/package.tgz [ 1000, 1000 ]
16352 silly lockFile 5ca230cd-registry-npmjs-org-i-i-0-3-2-tgz https://registry.npmjs.org/i/-/i-0.3.2.tgz
16353 silly lockFile 5ca230cd-registry-npmjs-org-i-i-0-3-2-tgz https://registry.npmjs.org/i/-/i-0.3.2.tgz
16354 silly lockFile 80e1c2cf-i-0-3-2 i@0.3.2
16355 silly lockFile 80e1c2cf-i-0-3-2 i@0.3.2
16356 silly lockFile 2b556e57-i-0-3-x i@0.3.x
16357 silly lockFile 2b556e57-i-0-3-x i@0.3.x
16358 http 200 https://registry.npmjs.org/ini
16359 silly registry.get cb [ 200,
16359 silly registry.get   { vary: 'Accept',
16359 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
16359 silly registry.get     etag: '"ZJNRPZ9SLUUIQB56VZSG1X63"',
16359 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:16 GMT',
16359 silly registry.get     'content-type': 'application/json',
16359 silly registry.get     'content-length': '16969' } ]
16360 silly addNameRange number 2 { name: 'ini', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
16361 silly addNameRange versions [ 'ini',
16361 silly addNameRange   [ '1.0.0', '1.0.1', '1.0.2', '1.0.3', '1.0.4', '1.0.5', '1.1.0' ] ]
16362 verbose addNamed [ 'ini', '1.1.0' ]
16363 verbose addNamed [ '1.1.0', '1.1.0' ]
16364 silly lockFile f80c58e4-ini-1-1-0 ini@1.1.0
16365 verbose lock ini@1.1.0 /home/lerenzo/.npm/f80c58e4-ini-1-1-0.lock
16366 silly lockFile 0256e224-stry-npmjs-org-ini-ini-1-1-0-tgz https://registry.npmjs.org/ini/-/ini-1.1.0.tgz
16367 verbose lock https://registry.npmjs.org/ini/-/ini-1.1.0.tgz /home/lerenzo/.npm/0256e224-stry-npmjs-org-ini-ini-1-1-0-tgz.lock
16368 verbose addRemoteTarball [ 'https://registry.npmjs.org/ini/-/ini-1.1.0.tgz',
16368 verbose addRemoteTarball   '4e808c2ce144c6c1788918e034d6797bc6cf6281' ]
16369 info retry fetch attempt 1 at 14:13:18
16370 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz
16371 http GET https://registry.npmjs.org/ini/-/ini-1.1.0.tgz
16372 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz
16373 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16374 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package /home/lerenzo/.npm/3b883e09-4374-0-10748690413311124-package.lock
16375 silly lockFile 8f09dc59-4374-0-10748690413311124-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz
16376 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz /home/lerenzo/.npm/8f09dc59-4374-0-10748690413311124-tmp-tgz.lock
16377 silly gunzTarPerm modes [ '755', '644' ]
16378 silly gunzTarPerm extractEntry package.json
16379 silly gunzTarPerm extractEntry .npmignore
16380 silly gunzTarPerm extractEntry README.md
16381 silly gunzTarPerm extractEntry errors.js
16382 silly gunzTarPerm extractEntry forwarded.js
16383 silly gunzTarPerm extractEntry index.js
16384 silly gunzTarPerm extractEntry primus.js
16385 silly gunzTarPerm extractEntry spark.js
16386 silly gunzTarPerm extractEntry transformer.js
16387 silly gunzTarPerm extractEntry parsers.json
16388 silly gunzTarPerm extractEntry example/echo/package.json
16389 silly gunzTarPerm extractEntry example/echo/README.md
16390 silly gunzTarPerm extractEntry example/echo/connect.js
16391 silly gunzTarPerm extractEntry example/echo/index.js
16392 silly gunzTarPerm extractEntry example/echo/index.html
16393 silly gunzTarPerm extractEntry transformers.json
16394 silly gunzTarPerm extractEntry test/browserchannel.integration.js
16395 silly gunzTarPerm extractEntry test/engine.io.integration.js
16396 silly gunzTarPerm extractEntry test/transformer.base.js
16397 silly gunzTarPerm extractEntry test/spark.test.js
16398 silly gunzTarPerm extractEntry test/sockjs.integration.js
16399 silly gunzTarPerm extractEntry test/plugin.test.js
16400 silly gunzTarPerm extractEntry test/common.js
16401 silly gunzTarPerm extractEntry test/primus.parsers.test.js
16402 silly gunzTarPerm extractEntry test/primus.test.js
16403 silly gunzTarPerm extractEntry test/socket.io.integration.js
16404 silly gunzTarPerm extractEntry test/websockets.integration.js
16405 silly gunzTarPerm extractEntry test/primus.browser.js
16406 silly gunzTarPerm extractEntry test/nodejitsu/package.json
16407 silly gunzTarPerm extractEntry test/nodejitsu/index.js
16408 silly gunzTarPerm extractEntry test/mocha.opts
16409 silly gunzTarPerm extractEntry test/fixture/generate.js
16410 silly gunzTarPerm extractEntry test/fixture/primus.engine.io.js
16411 silly gunzTarPerm extractEntry test/fixture/primus.jsonh.js
16412 silly gunzTarPerm extractEntry test/fixture/primus.websocket.js
16413 silly gunzTarPerm extractEntry .travis.yml
16414 silly gunzTarPerm extractEntry transformers/browserchannel/client.js
16415 silly gunzTarPerm extractEntry transformers/browserchannel/index.js
16416 silly gunzTarPerm extractEntry transformers/browserchannel/server.js
16417 silly gunzTarPerm extractEntry transformers/engine.io/README.md
16418 silly gunzTarPerm extractEntry transformers/engine.io/client.js
16419 silly gunzTarPerm extractEntry transformers/engine.io/index.js
16420 silly gunzTarPerm extractEntry transformers/engine.io/library.js
16421 silly gunzTarPerm extractEntry transformers/engine.io/server.js
16422 silly gunzTarPerm extractEntry transformers/faye/client.js
16423 silly gunzTarPerm extractEntry transformers/faye/index.js
16424 silly gunzTarPerm extractEntry transformers/faye/server.js
16425 silly gunzTarPerm extractEntry transformers/socket.io/client.js
16426 silly gunzTarPerm extractEntry transformers/socket.io/index.js
16427 silly gunzTarPerm extractEntry transformers/socket.io/server.js
16428 silly gunzTarPerm extractEntry transformers/sockjs/client.js
16429 silly gunzTarPerm extractEntry transformers/sockjs/index.js
16430 silly gunzTarPerm extractEntry transformers/sockjs/library.js
16431 silly gunzTarPerm extractEntry transformers/sockjs/server.js
16432 silly gunzTarPerm extractEntry transformers/websockets/client.js
16433 silly gunzTarPerm extractEntry transformers/websockets/index.js
16434 silly gunzTarPerm extractEntry transformers/websockets/server.js
16435 silly gunzTarPerm extractEntry parsers/binary.js
16436 silly gunzTarPerm extractEntry parsers/ejson.js
16437 silly gunzTarPerm extractEntry parsers/json.js
16438 silly gunzTarPerm extractEntry parsers/jsonh.js
16439 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16440 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16441 silly lockFile 8f09dc59-4374-0-10748690413311124-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz
16442 silly lockFile 8f09dc59-4374-0-10748690413311124-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/tmp.tgz
16443 verbose tar pack [ '/home/lerenzo/.npm/primus/1.4.6/package.tgz',
16443 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package' ]
16444 verbose tarball /home/lerenzo/.npm/primus/1.4.6/package.tgz
16445 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16446 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16447 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package /home/lerenzo/.npm/3b883e09-4374-0-10748690413311124-package.lock
16448 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16449 verbose lock tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz /home/lerenzo/.npm/a03fe6de-nzo-npm-primus-1-4-6-package-tgz.lock
16450 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16451 silly lockFile 3b883e09-4374-0-10748690413311124-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572384374-0.10748690413311124/package
16452 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16453 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16454 silly lockFile 2f6369d1-lerenzo-npm-primus-1-4-6-package /home/lerenzo/.npm/primus/1.4.6/package
16455 verbose lock /home/lerenzo/.npm/primus/1.4.6/package /home/lerenzo/.npm/2f6369d1-lerenzo-npm-primus-1-4-6-package.lock
16456 silly lockFile 2f6369d1-lerenzo-npm-primus-1-4-6-package /home/lerenzo/.npm/primus/1.4.6/package
16457 silly lockFile 2f6369d1-lerenzo-npm-primus-1-4-6-package /home/lerenzo/.npm/primus/1.4.6/package
16458 verbose tar unpack /home/lerenzo/.npm/primus/1.4.6/package.tgz
16459 silly lockFile 119fe0e5-lerenzo-npm-primus-1-4-6-package tar:///home/lerenzo/.npm/primus/1.4.6/package
16460 verbose lock tar:///home/lerenzo/.npm/primus/1.4.6/package /home/lerenzo/.npm/119fe0e5-lerenzo-npm-primus-1-4-6-package.lock
16461 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16462 verbose lock tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz /home/lerenzo/.npm/a03fe6de-nzo-npm-primus-1-4-6-package-tgz.lock
16463 silly gunzTarPerm modes [ '755', '644' ]
16464 silly gunzTarPerm extractEntry package.json
16465 silly gunzTarPerm extractEntry .npmignore
16466 silly gunzTarPerm extractEntry README.md
16467 silly gunzTarPerm extractEntry errors.js
16468 silly gunzTarPerm extractEntry forwarded.js
16469 silly gunzTarPerm extractEntry index.js
16470 silly gunzTarPerm extractEntry primus.js
16471 silly gunzTarPerm extractEntry spark.js
16472 silly gunzTarPerm extractEntry transformer.js
16473 silly gunzTarPerm extractEntry parsers.json
16474 silly gunzTarPerm extractEntry example/echo/package.json
16475 silly gunzTarPerm extractEntry example/echo/README.md
16476 silly gunzTarPerm extractEntry example/echo/connect.js
16477 silly gunzTarPerm extractEntry example/echo/index.js
16478 silly gunzTarPerm extractEntry example/echo/index.html
16479 silly gunzTarPerm extractEntry transformers.json
16480 silly gunzTarPerm extractEntry test/browserchannel.integration.js
16481 silly gunzTarPerm extractEntry test/engine.io.integration.js
16482 silly gunzTarPerm extractEntry test/transformer.base.js
16483 silly gunzTarPerm extractEntry test/spark.test.js
16484 silly gunzTarPerm extractEntry test/sockjs.integration.js
16485 silly gunzTarPerm extractEntry test/plugin.test.js
16486 silly gunzTarPerm extractEntry test/common.js
16487 silly gunzTarPerm extractEntry test/primus.parsers.test.js
16488 silly gunzTarPerm extractEntry test/primus.test.js
16489 silly gunzTarPerm extractEntry test/socket.io.integration.js
16490 silly gunzTarPerm extractEntry test/websockets.integration.js
16491 silly gunzTarPerm extractEntry test/primus.browser.js
16492 silly gunzTarPerm extractEntry test/nodejitsu/package.json
16493 silly gunzTarPerm extractEntry test/nodejitsu/index.js
16494 silly gunzTarPerm extractEntry test/mocha.opts
16495 silly gunzTarPerm extractEntry test/fixture/generate.js
16496 silly gunzTarPerm extractEntry test/fixture/primus.engine.io.js
16497 silly gunzTarPerm extractEntry test/fixture/primus.jsonh.js
16498 silly gunzTarPerm extractEntry test/fixture/primus.websocket.js
16499 silly gunzTarPerm extractEntry .travis.yml
16500 silly gunzTarPerm extractEntry transformers/browserchannel/client.js
16501 silly gunzTarPerm extractEntry transformers/browserchannel/index.js
16502 silly gunzTarPerm extractEntry transformers/browserchannel/server.js
16503 silly gunzTarPerm extractEntry transformers/engine.io/README.md
16504 silly gunzTarPerm extractEntry transformers/engine.io/client.js
16505 silly gunzTarPerm extractEntry transformers/engine.io/index.js
16506 silly gunzTarPerm extractEntry transformers/engine.io/library.js
16507 silly gunzTarPerm extractEntry transformers/engine.io/server.js
16508 silly gunzTarPerm extractEntry transformers/faye/client.js
16509 silly gunzTarPerm extractEntry transformers/faye/index.js
16510 silly gunzTarPerm extractEntry transformers/faye/server.js
16511 silly gunzTarPerm extractEntry transformers/socket.io/client.js
16512 silly gunzTarPerm extractEntry transformers/socket.io/index.js
16513 silly gunzTarPerm extractEntry transformers/socket.io/server.js
16514 silly gunzTarPerm extractEntry transformers/sockjs/client.js
16515 silly gunzTarPerm extractEntry transformers/sockjs/index.js
16516 silly gunzTarPerm extractEntry transformers/sockjs/library.js
16517 silly gunzTarPerm extractEntry transformers/sockjs/server.js
16518 silly gunzTarPerm extractEntry transformers/websockets/client.js
16519 silly gunzTarPerm extractEntry transformers/websockets/index.js
16520 silly gunzTarPerm extractEntry transformers/websockets/server.js
16521 silly gunzTarPerm extractEntry parsers/binary.js
16522 silly gunzTarPerm extractEntry parsers/ejson.js
16523 silly gunzTarPerm extractEntry parsers/json.js
16524 silly gunzTarPerm extractEntry parsers/jsonh.js
16525 silly lockFile 119fe0e5-lerenzo-npm-primus-1-4-6-package tar:///home/lerenzo/.npm/primus/1.4.6/package
16526 silly lockFile 119fe0e5-lerenzo-npm-primus-1-4-6-package tar:///home/lerenzo/.npm/primus/1.4.6/package
16527 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16528 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16529 verbose chmod /home/lerenzo/.npm/primus/1.4.6/package.tgz 644
16530 verbose chown /home/lerenzo/.npm/primus/1.4.6/package.tgz [ 1000, 1000 ]
16531 silly lockFile 896fddc3-pmjs-org-primus-primus-1-4-6-tgz https://registry.npmjs.org/primus/-/primus-1.4.6.tgz
16532 silly lockFile 896fddc3-pmjs-org-primus-primus-1-4-6-tgz https://registry.npmjs.org/primus/-/primus-1.4.6.tgz
16533 silly lockFile 02d28e67-primus-1-4-6 primus@1.4.6
16534 silly lockFile 02d28e67-primus-1-4-6 primus@1.4.6
16535 silly lockFile 13c3ee02-primus-1-4-0 primus@~1.4.0
16536 silly lockFile 13c3ee02-primus-1-4-0 primus@~1.4.0
16537 silly resolved [ { author:
16537 silly resolved      { name: 'Einar Otto Stangvik',
16537 silly resolved        email: 'einaros@gmail.com',
16537 silly resolved        url: 'http://2x.io' },
16537 silly resolved     name: 'ws',
16537 silly resolved     description: 'simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js, up-to-date against RFC-6455',
16537 silly resolved     version: '0.4.31',
16537 silly resolved     keywords:
16537 silly resolved      [ 'Hixie',
16537 silly resolved        'HyBi',
16537 silly resolved        'Push',
16537 silly resolved        'RFC-6455',
16537 silly resolved        'WebSocket',
16537 silly resolved        'WebSockets',
16537 silly resolved        'real-time' ],
16537 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/ws.git' },
16537 silly resolved     bin: { wscat: './bin/wscat' },
16537 silly resolved     scripts:
16537 silly resolved      { test: 'make test',
16537 silly resolved        install: '(node-gyp rebuild 2> builderror.log) || (exit 0)' },
16537 silly resolved     engines: { node: '>=0.4.0' },
16537 silly resolved     dependencies:
16537 silly resolved      { commander: '~0.6.1',
16537 silly resolved        nan: '~0.3.0',
16537 silly resolved        tinycolor: '0.x',
16537 silly resolved        options: '>=0.0.5' },
16537 silly resolved     devDependencies:
16537 silly resolved      { mocha: '1.12.0',
16537 silly resolved        should: '1.2.x',
16537 silly resolved        'expect.js': '0.2.x',
16537 silly resolved        benchmark: '0.3.x',
16537 silly resolved        ansi: 'latest' },
16537 silly resolved     browser: './lib/browser.js',
16537 silly resolved     component: { scripts: [Object] },
16537 silly resolved     gypfile: true,
16537 silly resolved     readme: '[![Build Status](https://secure.travis-ci.org/einaros/ws.png)](http://travis-ci.org/einaros/ws)\n\n# ws: a node.js websocket library #\n\n`ws` is a simple to use websocket implementation, up-to-date against RFC-6455, and [probably the fastest WebSocket library for node.js](http://web.archive.org/web/20130314230536/http://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejs).\n\nPasses the quite extensive Autobahn test suite. See http://einaros.github.com/ws for the full reports.\n\nComes with a command line utility, `wscat`, which can either act as a server (--listen), or client (--connect); Use it to debug simple websocket services.\n\n## Protocol support ##\n\n* **Hixie draft 76** (Old and deprecated, but still in use by Safari and Opera. Added to ws version 0.4.2, but server only. Can be disabled by setting the `disableHixie` option to true.)\n* **HyBi drafts 07-12** (Use the option `protocolVersion: 8`, or argument `-p 8` for wscat)\n* **HyBi drafts 13-17** (Current default, alternatively option `protocolVersion: 13`, or argument `-p 13` for wscat)\n\n_See the echo.websocket.org example below for how to use the `protocolVersion` option._\n\n## Usage ##\n\n### Installing ###\n\n`npm install ws`\n\n### Sending and receiving text data ###\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://www.host.com/path\');\nws.on(\'open\', function() {\n    ws.send(\'something\');\n});\nws.on(\'message\', function(data, flags) {\n    // flags.binary will be set if a binary data is received\n    // flags.masked will be set if the data was masked\n});\n```\n\n### Sending binary data ###\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://www.host.com/path\');\nws.on(\'open\', function() {\n    var array = new Float32Array(5);\n    for (var i = 0; i < array.length; ++i) array[i] = i / 2;\n    ws.send(array, {binary: true, mask: true});\n});\n```\n\nSetting `mask`, as done for the send options above, will cause the data to be masked according to the websocket protocol. The same option applies for text data.\n\n### Server example ###\n\n```js\nvar WebSocketServer = require(\'ws\').Server\n  , wss = new WebSocketServer({port: 8080});\nwss.on(\'connection\', function(ws) {\n    ws.on(\'message\', function(message) {\n        console.log(\'received: %s\', message);\n    });\n    ws.send(\'something\');\n});\n```\n\n### Server sending broadcast data ###\n\n```js\nvar WebSocketServer = require(\'ws\').Server\n  , wss = new WebSocketServer({port: 8080});\n  \nwss.broadcast = function(data) {\n\tfor(var i in this.clients)\n\t\tthis.clients[i].send(data);\n};\n```\n\n### Error handling best practices ###\n\n```js\n// If the WebSocket is closed before the following send is attempted\nws.send(\'something\');\n\n// Errors (both immediate and async write errors) can be detected in an optional callback.\n// The callback is also the only way of being notified that data has actually been sent.\nws.send(\'something\', function(error) {\n    // if error is null, the send has been completed,\n    // otherwise the error object will indicate what failed.\n});\n\n// Immediate errors can also be handled with try/catch-blocks, but **note**\n// that since sends are inherently asynchronous, socket write failures will *not*\n// be captured when this technique is used.\ntry {\n    ws.send(\'something\');\n}\ncatch (e) {\n    // handle error\n}\n```\n\n### echo.websocket.org demo ###\n\n```js\nvar WebSocket = require(\'ws\');\nvar ws = new WebSocket(\'ws://echo.websocket.org/\', {protocolVersion: 8, origin: \'http://websocket.org\'});\nws.on(\'open\', function() {\n    console.log(\'connected\');\n    ws.send(Date.now().toString(), {mask: true});\n});\nws.on(\'close\', function() {\n    console.log(\'disconnected\');\n});\nws.on(\'message\', function(data, flags) {\n    console.log(\'Roundtrip time: \' + (Date.now() - parseInt(data)) + \'ms\', flags);\n    setTimeout(function() {\n        ws.send(Date.now().toString(), {mask: true});\n    }, 500);\n});\n```\n\n### wscat against echo.websocket.org ###\n\n    $ npm install -g ws\n    $ wscat -c ws://echo.websocket.org -p 8\n    connected (press CTRL+C to quit)\n    > hi there\n    < hi there\n    > are you a happy parrot?\n    < are you a happy parrot?\n\n### Other examples ###\n\nFor a full example with a browser client communicating with a ws server, see the examples folder.\n\nNote that the usage together with Express 3.0 is quite different from Express 2.x. The difference is expressed in the two different serverstats-examples.\n\nOtherwise, see the test cases.\n\n### Running the tests ###\n\n`make test`\n\n## API Docs ##\n\nSee the doc/ directory for Node.js-like docs for the ws classes.\n\n## License ##\n\n(The MIT License)\n\nCopyright (c) 2011 Einar Otto Stangvik &lt;einaros@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
16537 silly resolved     readmeFilename: 'README.md',
16537 silly resolved     bugs: { url: 'https://github.com/einaros/ws/issues' },
16537 silly resolved     homepage: 'https://github.com/einaros/ws',
16537 silly resolved     _id: 'ws@0.4.31',
16537 silly resolved     _from: 'ws@~0.4.28' },
16537 silly resolved   { name: 'primus',
16537 silly resolved     version: '1.4.6',
16537 silly resolved     description: 'Primus is a simple abstraction around real-time frameworks. It allows you to easily switch between different frameworks without any code changes.',
16537 silly resolved     main: 'index.js',
16537 silly resolved     scripts:
16537 silly resolved      { integration: 'NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name \'*.integration.js\')',
16537 silly resolved        test: 'NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name \'*.test.js\')',
16537 silly resolved        browserify: 'browserify example/primus.js -o example/primus.browserify.js --standalone Primus' },
16537 silly resolved     repository: { type: 'git', url: 'git://github.com/primus/primus.git' },
16537 silly resolved     keywords:
16537 silly resolved      [ 'primus',
16537 silly resolved        'real-time',
16537 silly resolved        'realtime',
16537 silly resolved        'websocket',
16537 silly resolved        'ws',
16537 silly resolved        'engine.io',
16537 silly resolved        'socket.io',
16537 silly resolved        'transformer' ],
16537 silly resolved     author: { name: 'Arnout Kazemier' },
16537 silly resolved     license: 'MIT',
16537 silly resolved     dependencies: { extendable: '0.0.x', load: '1.0.x' },
16537 silly resolved     devDependencies:
16537 silly resolved      { browserchannel: '1.0.x',
16537 silly resolved        chai: '1.7.x',
16537 silly resolved        'engine.io': 'git://github.com/3rd-Eden/engine.io.git#issue/178',
16537 silly resolved        'engine.io-client': '0.6.x',
16537 silly resolved        jsonh: '0.0.x',
16537 silly resolved        mocha: '1.11.x',
16537 silly resolved        'pre-commit': '0.0.x',
16537 silly resolved        'socket.io': '0.9.x',
16537 silly resolved        'socket.io-client': '0.9.x',
16537 silly resolved        sockjs: '0.3.x',
16537 silly resolved        ws: '0.4.x',
16537 silly resolved        'sockjs-client-node': '0.0.x',
16537 silly resolved        request: '2.21.x',
16537 silly resolved        'binary-pack': '0.0.x',
16537 silly resolved        'e-json': '0.0.x' },
16537 silly resolved     readme: '# Primus\n\n[![Build Status](https://travis-ci.org/primus/primus.png)](https://travis-ci.org/primus/primus)\n[![NPM version](https://badge.fury.io/js/primus.png)](http://badge.fury.io/js/primus)\n\nPrimus, the creator god of transformers but now also known as universal wrapper\nfor real-time frameworks. There are a lot of real-time frameworks available for\nNode.js and they all have different opinions on how real-time should be done.\nPrimus provides a common low level interface to communicate in real-time using\nvarious of real-time frameworks.\n\n### Advantages\n\n1. Effortless switching between real-time frameworks by changing one single line\n   of code. No more API rewrites needed when your project requirements change,\n   the framework get abandoned or simply breaks down.\n2. Build-in reconnect, it just works. The reconnect is controlled by an\n   randomized exponential backoff algorithm to reduce server stress.\n3. Offline detection, Primus is smart enough to detect when a users drop their\n   internet connection (switching WIFI points/cell towers for example) and\n   reconnects when they are back online.\n4. Automatically encodes and decodes messages using custom parsers. Can be\n   easily switched for binary encoding for example.\n5. A clean and stream compatible interface for the client and server. You can\n   just `stream#pipe` data around. In addition to that, the client works on\n   Node.js as well, write once, run it everywhere.\n6. Fixes various of bugs in the supported frameworks and additions stability\n   patches to improve real-time communication.\n8. Comes with an amazing plugin interface to keep the core library as fast and\n   lean as possible while still allowing the server and the client to be\n   extended.\n9. Last but not least, Primus is build with love, passion and dedication to the\n   real-time web.\n\n### Installation\n\nPrimus is released in `npm` and can be installed using:\n\n```\nnpm install primus --save\n```\n\n### Table of Contents\n\n- [Introduction](#primus)\n  - [Highlights](#highlights)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n- [Connecting from the server](#connecting-from-the-server)\n  - [Broadcasting](#broadcasting)\n  - [Destruction](#destruction)\n- [Connecting from the browser](#connecting-from-the-browser)\n- [Events](#events)\n- [Supported real-time frameworks](#supported-real-time-frameworks)\n  - [Engine.IO](#engineio)\n  - [WebSockets](#websockets)\n  - [BrowserChannel](#browserchannel)\n  - [SockJS](#sockjs)\n  - [Socket.IO](#socketio)\n- [Transformer Inconsistencies](#transformer-inconsistencies)\n- [Plugins](#plugins)\n  - [Extending the Spark/socket](#extending-the-spark--socket)\n  - [Transforming and intercepting messages](#transforming-and-intercepting-messages)\n  - [Community Plugins](#community-plugins)\n- [Example](#example)\n- [FAQ](#FAQ)\n  - [Scaling](#scaling)\n  - [Express](#express)\n- [Versioning](#versioning)\n  - [History](#history)\n  - [Convention](#convention)\n  - [Release cycle](#release-cycle)\n- [License](#license)\n\n### Getting Started\n\nPrimus doesn\'t ship with real-time frameworks as dependencies, it assumes that\nyou as user adds them your self as a dependency. This is done to keep the module\nas light weight as possible. This works because `require` in will walk through\nyour directories searching for `node_module` folders that have these matching\ndependencies.\n\nPrimus needs to be "attached" to a HTTP compatible server. These includes the\nbuild in `http` and `https` servers but also the `spdy` module as it has the\nsame API as node servers. Creating a new Primus instance is relatively straight\nforward:\n\n```js\n\'use strict\';\n\nvar Primus = require(\'primus\')\n  , http = require(\'http\');\n\nvar server = http.createServer(/* request handler */)\n  , primus = new Primus(server, {/* options */});\n```\n\nIn addition to support different frameworks we\'ve also made it possible to use\ncustom encoding and decoding libraries. We\'re using `JSON` by default but you\ncould also use `msgpack` or `JSONH` for example (but these parsers need to be\nsupported by Primus, so check out the parser folder for examples). To set parser\nyou can supply a `parser` configuration option:\n\n```js\nvar primus = new Primus(server, { parser: \'JSON\' });\n```\n\nAll parsers have an `async` interface for error handling.\n\nAs most libraries come with their own client-side framework for making the\nconnection we\'ve also created a small wrapper for this. The library can be\nretrieved using:\n\n```js\nprimus.library();\n```\n\nWhich returns the client-side library. It\'s not minified as that is out of the\nscope of this project. You can store this on a CDN or on your static server. Do\nwhat ever you want with it, but I would advice you to regenerate that file every\ntime you redeploy so it always contains a client side library that is compatible\nwith your back-end. To save the file you can use:\n\n```js\nprimus.save(__dirname +\'/primus.js\');\n```\n\nThis will store the compiled library in your current directory. If you want to\nsave it asynchronously, you can supply the method with an callback method:\n\n```js\nprimus.save(__dirname +\'/primus.js\', function save(err) {\n\n});\n```\n\nBut to make it easier for you during development we\'ve automatically added an\nextra route to the supplied HTTP server, this will serve the library for you so\nyou don\'t have to save it. Please note, that this route isn\'t optimized for\nserving static assets and should only be used during development. In your HTML\npage add:\n\n```html\n<script src="/primus/primus.js"></script>\n```\n\nIf you\'ve configured a different `pathname` in the options deploy on a different\ndomain then your Primus server you would of course need to update the `src`\nattribute to the correct location. It\'s always available at:\n\n```\n<protocol>://<server location>/<pathname>/primus.js\n```\n\nThe client is cross domain compatible so you don\'t have to serve it from the\nsame domain you\'re running Primus on. But please note, that the real-time\nframework you\'re using might be tied to same domain restrictions.\n\nOnce you\'re all set up you can start listening for connections. These\nconnections are announced through the `connection` event.\n\n```js\nprimus.on(\'connection\', function (spark) {\n  // spark is the new connection.\n});\n```\n\nDisconnects are announced using a `disconnection` event:\n\n```js\nprimus.on(\'disconnection\', function (spark) {\n  // the spark that disconnected\n});\n```\n\nThe `spark` the actual real-time socket/connection. Sparks have a really low\nlevel interface and only expose a couple properties that are cross engine\nsupported. The interface is modeled towards a Node.js stream compatible\ninterface. So this will include all methods that are available on the \n[stream interface](http://nodejs.org/api/stream.html) including `Spark#pipe`.\n\n#### spark.headers\n\nThe `spark.headers` property contains contains the headers of either the request\nthat started a handshake with the server or the headers of the actual real-time\nconnection. This depends on the module you are using.\n\n#### spark.address\n\nThe `spark.address` property contains the `ip` and `port` of the\nconnection. If you\'re running your server behind a reverse proxy it will\nautomatically use the `x-forwarded-for` headers. This way you will always have\nthe address of the connecting client and not the IP address of your proxy.\n\n*Please note that the `port` is probably out of date by the time you\'re going\nto read it as it\'s retrieved from an old request, not the request that is\nactive at the time you access this property.*\n\n#### spark.query\n\nThe `spark.query` contains the query string you used to connect to server. It\'s\nparsed to a object. Please note that this is not available for all supported\ntransformers, but it\'s proven to be to useful to not implement it because one\nsilly transformer refuses to support it. Yes.. I\'m looking at you SockJS.\n\n#### spark.id\n\nThis is the connection id we use to identify the connection. This should not be\nseen as a "session id" and can change between disconnects and reconnects.\n\n#### spark.write(data)\n\nYou can use the `spark.write` method to send data over the socket. The data is\nautomatically encoded for you using the `parser` that you\'ve set while creating\nthe Primus instance. This method always returns `true` so back pressure isn\'t\nhandled.\n\n```js\nspark.write({ foo: \'bar\' });\n```\n\n#### spark.end()\n\nThe `spark.end()` closes the connection.\n\n#### spark.emits(event, parser)\n\nThis method is mostly used internally. It returns a function that emits assigned\n`event` every time it\'s called. It only emits the first received argument or the\nresult of the optional `parser` call. The `parser` function receives all\narguments and can parse it down to a single value or just extracts the useful\ninformation from the data. Please note that the data that is received here isn\'t\ndecoded yet.\n\n```js\nspark.emits(\'event\', function parser(structure) {\n  return structure.data;\n});\n```\n\n#### spark.on(\'data\')\n\nThe `data` event is emitted when a message is received from the client. It\'s\nautomatically decoded by the specified decoder.\n\n```js\nspark.on(\'data\', function message(data) {\n  // the message we\'ve received.\n});\n```\n\n#### spark.on(\'end\')\n\nThe `end` event is emitted when the client has disconnected.\n\n```js\nprimus.on(\'connection\', function (spark) {\n  console.log(\'connection has the following headers\', spark.headers);\n  console.log(\'connection was made from\', spark.address);\n  console.log(\'connection id\', spark.id);\n\n  spark.on(\'data\', function (data) {\n    console.log(\'received data from the client\', data);\n\n    //\n    // Always close the connection if we didn\'t receive our secret imaginary handshake.\n    //\n    if (\'foo\' !== data.secrethandshake) spark.end();\n    spark.write({ foo: \'bar\' });\n    spark.write(\'banana\');\n  });\n\n  spark.write(\'Hello world\');\n})\n```\n\n### Broadcasting\n\nBroadcasting allows you to write a message to every connected `Spark` on your server.\nThere are 2 different ways of doing broadcasting in Primus. The easiest way is to\nuse the `Primus#write` method which will write a message to every connected user:\n\n```js\nprimus.write(message);\n```\n\nThere are cases where you only want to broadcast a message to a smaller group of\nusers. To make it easier to do this, we\'ve added a `Primus#forEach` method which\nallows you to iterate over all active connections.\n\n```js\nprimus.forEach(function (spark, id, connections) {\n  if (spark.query.foo !== \'bar\') return;\n\n  spark.write(\'message\');\n});\n```\n\n### Authorization\n\nPrimus has a built in auth hook that allows you to leverage the basic auth\nheader to validate the connection. To setup the optional auth hook, use the\n`Primus#authorize` method:\n\n```js\nvar authParser = require(\'basic-auth-parser\');\n\n//\n// Add hook on server\n//\nprimus.authorize(function (req, done) {\n  var auth;\n\n  try { auth = authParser(req.headers[\'authorization\']) }\n  catch (ex) { /* Sad face */ }\n\n  //\n  // Do some async auth check\n  //\n  authCheck(auth, done);\n});\n\nprimus.on(\'connection\', function (spark) {\n  //\n  // You only get here if you make it through the auth hook!\n  //\n});\n```\n\nIn this particular case, if an error is returned from the `authCheck` function,\nthe connection attempt will never make it to the `primus.on(\'connection\')`.\n\n### Destruction\n\nIn rare cases you might need to destroy the Primus instance you\'ve created. You\ncan use the `primus.destroy()` or `primus.end()` method for this. This method\naccepts an Object which allows you to configure how you want the connections to\nbe destroyed:\n\n- `close` Close the HTTP server that Primus received. Defaults to `true`.\n- `end` End all active connections. Defaults to `true`.\n- `timeout` Clean up the server and optionally, it\'s active connections after\n  the specified amount of timeout. Defaults to `0`.\n\nThe timeout is especially useful if you want gracefully shutdown your server but\nreally don\'t want to wait an infinite amount of time.\n\n```js\nprimus.destroy({ timeout: 10000 });\n```\n\n### Connecting from the Browser.\n\nPrimus comes with its client framework which can be compiled using\n`primus.library()` as mentioned above. To create a connection you can simply\ncreate a new Primus instance:\n\n```js\nvar primus = new Primus(url, { options });\n\n//\n// But it can be easier, with some syntax sugar.\n//\nvar primus = Primus.connect(url, { options });\n```\n\nThe following options can be provided:\n\nName                | Description                             | Default       \n--------------------|-----------------------------------------|---------------\n[reconnect]         | Configures the exponential back off     | `{}`\ntimeout             | Connect time out                        | `10000` ms\nping                | Ping interval to test connection        | `25000` ms\npong                | Time the server has to respond to ping  | `10000` ms\n[strategy]          | Our reconnect strategies                | `"disconnect,online,timeout"`\nmanual              | Manually open the connection            | `false`\nwebsockets          | Should we AVOID the usage of WebSockets | Boolean, is detected.\nnetwork             | Use native `online`/`offline` detection | Boolean, is feature detected.\n\nThere are 2 important options that we\'re going to look a bit closer at.\n\n##### Reconnect\n\nWhen the connection goes down unexpectedly a automatic reconnect process is\nstarted. It\'s using a randomized exponential backoff algorithm to prevent\nclients to DDOS your server when you reboot as they will all be re-connecting at\ndifferent times. The reconnection can be configured using the `options` argument\nin `Primus` and you should add these options to the `reconnect` property:\n\nName                | Description                             | Default       \n--------------------|-----------------------------------------|---------------\nmaxDelay            | The maximum delay of a reconnect        | `Infinity`\nminDelay            | The minium delay of the reconnect       | `500`\nretries             | Amount of allowed reconnects.           | 10\n\n```js\nprimus = Primus.connect(url, {\n  reconnect: {\n      maxDelay: Infinity // Number: The max delay for a reconnect retry.\n    , minDelay: 500 // Number: The minimum delay before we reconnect.\n    , retries: 10 // Number: How many times should we attempt to reconnect.\n  }\n});\n```\n\nWhen you\'re going to customize the delays do take in to account they they will\ngrow exponentially e.g. `500 -> 1000 -> 2000 -> 4000 -> 8000` and are randomized\nso the actual values might be slightly higher or lower then this.\n\nPlease do note when we reconnect, you will receive a new `connection` event on\nthe server. As the previous connection was completely dead and should there for\nbe considered a new connection as well as an `open` event on the client.\n\nIf you are interested in learning more about the backoff algorithm you might\nwant to read http://dthain.blogspot.nl/2009/02/exponential-backoff-in-distributed.html\n\n##### Strategy\n\nThe strategy allows you to configure when you want a `reconnect` operation to\nkick in. We\'re providing some **sane** defaults for this but we still want to\nprovide users with highest level of customization:\n\n<dl>\n  <dt>disconnect</dt>\n  <dd>\n    Reconnect when we detect an unintential disconnect in the connection.\n  </dd>\n  <dt>online</dt>\n  <dd>\n    Reconnect when the browser went from an offline event to an online event.\n  </dd>\n  <dt>timeout</dt>\n  <dd>\n    Reconnect when we failed to establish our initial connection. This can\n    happen because we took to long to connect or because there was an error\n    while we tried to connect (which happens when you connect to a dead server)\n  </dd>\n</dl>\n\nYou can supply these options as a comma separated `String`:\n\n```js\nvar primus = new Primus(url, { strategy: \'online, timeout ,diScoNNect\' })\n```\n\nOr as an `Array`:\n\n```js\nvar primus = new Primus(url, { strategy: [ \'online\', \'timeout\', \'diScoNNect\' ]});\n```\n\nWe\'ll try to normalize everything as much as possible, we `toLowerCase` everything\nand join it back to a readable string.\n\n**If you are using authentication you should disable the `timeout` strategy as\nthere is no way of detecting the difference between a failed authorization and a\nfailed connect. If you leave this enabled with authorization every unauthorized\naccess will try to reconect again**.\n\nWe automatically disable this for you when you\'ve setup the authorization before\nyou save the library.\n\n[reconnect]: #reconnect\n[strategy]: #strategy\n\n#### primus.write(message)\n\nOnce you\'ve created your Primus instance you\'re ready to go. When you want to\nwrite data to your server you can just call the `.write` method:\n\n```js\nprimus.write(\'message\');\n```\n\nIt automatically encodes your messages using the parser that you\'ve specified on\nthe server. So sending objects back and forth between the server is nothing\ndifferent then just writing:\n\n```js\nprimus.write({ foo: \'bar\' });\n```\n\nWhen you are sending messages to the server, you don\'t have to wait for the\n`open` event to happen, the client will automatically buffer all the data you\'ve\nsend and automatically write it to the server once it\'s connected. The client\nsupports a couple of different events.\n\n#### primus.on(\'data\')\n\nThe `data` event is the most important event of the whole library. It\'s emitted\nwhen we receive data from the server. The data that is received is already\ndecoded by the specified parser.\n\n```js\nprimus.on(\'data\', function message(data) {\n  console.log(\'Received a new message from the server\', data);\n});\n```\n\n#### primus.on(\'open\')\n\nThe `open` event is emitted when we\'ve successfully created a connection with\nthe server. It will also be emitted when we\'ve successfully reconnected when the\nconnection goes down unintentionally.\n\n```js\nprimus.on(\'open\', function open() {\n  console.log(\'Connection is alive and kicking\');\n});\n```\n\n#### primus.on(\'error\')\n\nThe `error` event is emitted when something breaks that is out of our control.\nUnlike Node.js, we do not throw an error if no error event listener is\nspecified. The cause of an error could be that we\'ve failed to encode or decode\na message or we failed to create a connection.\n\n```js\nprimus.on(\'error\', function error(err) {\n  console.error(\'Something horrible has happened\', err, err.message);\n});\n```\n\n#### primus.on(\'reconnect\')\n\nThe `reconnect` event is emitted when we\'re attempting to reconnect to the\nserver. This all happens transparently and it\'s just a way for you to know when\nthese reconnects are actually happening.\n\n```js\nprimus.on(\'reconnect\', function () {\n  console.log(\'Reconnect attempt started\');\n});\n```\n\n### primus.on(\'reconnecting\')\n\nLooks a lot like the `reconnect` event mentioned above, but it\'s emitted when\nwe\'ve detected that connection went/is down and we\'re going to start a reconnect\noperation. This event would be ideal to update your application\'s UI that you\'re\nconnection is down and you are trying to reconnect in x seconds.\n\n```js\nprimus.on(\'reconnecting\', function (opts) {\n  console.log(\'Reconnecting in %d ms\', opts.timeout);\n  console.log(\'This is attempt %d out of %d\', opts.attempt, opts.retries);\n});\n```\n\n#### primus.on(\'end\')\n\nThe `end` event is emitted when we\'ve closed the connection. When this event is\nemitted you should consider your connection to be fully dead with no way of\nreconnecting. But it\'s also emitted when the server closes the connection.\n\n```js\nprimus.on(\'end\', function () {\n  console.log(\'Connection closed\');\n});\n```\n\n#### primus.end()\n\nWhen you want to close the connection you can call the `primus.end()` method.\nAfter this the connection should be considered dead and a new connection needs\nto be made using `Primus.connect(url)` or `primus = new Primus(url)` if you want\nto talk with the server again.\n\n```js\nprimus.end();\n```\n\n### Connecting from the server\n\nThe client-side library has been made compatible with Node.js so the same code\nbase can be re-used for server side connections. There are two ways of creating\na server side client.\n\n1. When you\'ve created your `primus` instance you can access the `Socket`\n   property on it. This `Socket` is automatically configured to connect to the\n   correct pathname, using the same `transformer` and `parser` that you\'ve\n   specified when you created your `primus` instance.\n\n   ```js\n   var primus = new Primus(server, { transformer: transformer, parser: parser })\n     , Socket = primus.Socket;\n\n   var client = new Socket(\'http://localhost:8080\');\n   //\n   // It has the same interface as the client, so you can just socket.write or\n   // listen for the `open` events etc.\n   //\n   ```\n2. You might need to connect from a different node process where you don\'t have\n   access to your `primus` instance and the compatible `Socket` instance. For\n   these cases there a special `createSocket` method where you can specify the\n   `transformer`, `parser`, `plugin` that you are using on your server to create\n   another compatible socket.\n\n   ```js\n   var Socket = Primus.createSocket({ transformer: transformer, parser: parser })\n     , client = new Socket(\'http://localhost:8080\');\n  ```\n\n  If you do not know which transformers, parsers are used on the server, we\n  expose a small JSON "spec" file that exposes this information. The\n  specification can be reached on the `/<pathname>/spec` and will output the\n  following JSON document:\n\n  ```json\n  {\n    "version":"1.0.1",\n    "pathname":"/primus",\n    "parser":"json",\n    "transformer":"websockets"\n  }\n  ```\n\n### Events\n\nPrimus is build upon the Stream and EventEmitter interfaces. This is a summary\nof the events emitted by Primus.\n\nEvent                 | Usage       | Location      | Description\n----------------------|-------------|---------------|----------------------------------------\n`outgoing::reconnect` | private     | client        | Transformer should reconnect.\n`reconnecting`        | **public**  | client        | We\'re scheduling a reconnect.\n`reconnect`           | **public**  | client        | Reconnect attempt is about to be made.\n`timeout`             | **public**  | client        | Failed to connect to server.\n`outgoing::open`      | private     | client/spark  | Transformer should connect.\n`incoming::open`      | private     | client/spark  | Transformer has connected.\n`open`                | **public**  | client        | Connection is open.\n`incoming::error`     | private     | client        | Transformer received error.\n`error`               | **public**  | client/spark  | An error happened.\n`incoming::data`      | private     | client/server | Transformer received data.\n`outgoing::data`      | private     | client/spark  | Transformer should write data.\n`data`                | **public**  | client/spark  | We received data.\n`incoming::end`       | private     | client/spark  | Transformer closed the connection.\n`outgoing::end`       | private     | client/spark  | Transformer should close connection.\n`end`                 | **public**  | client        | Primus has ended.\n`close`               | **public**  | client        | The underlaying connection is closed, we might retry.\n`connection`          | **public**  | server        | We received a new connection.\n`disconnection`       | **public**  | server        | A connection closed.\n`initialised`         | **public**  | server        | The server is initialised.\n`close`               | **public**  | server        | The server has been destroyed.\n`incoming::pong`      | private     | server        | We received a pong message.\n`outgoing::pong`      | private     | server        | We\'re sending a ping message.\n`online`              | **public**  | client        | We\'ve regained a network connection\n`offline`             | **public**  | client        | We\'ve lost our internet connection\n`log`                 | **public**  | server        | Log messages.\n\n### Supported Real-time Frameworks\n\nThe following transformers/transports are supported in Primus:\n\n#### Engine.IO\n\nEngine.IO is the low level transport functionality of Socket.IO 1.0. It supports\nmultiple transports for creating a real-time connection. It uses transport\nupgrading instead of downgrading which makes it more resilient to blocking\nproxies and firewalls. To enable `engine.io` you need to install the `engine.io`\nmodule:\n\n```\nnpm install engine.io --save\n```\n\nAnd tell `Primus` that you want to use `engine.io` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: \'engine.io\' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `engine.io-client`:\n\n```\nnpm install engine.io-client --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket;\n  , socket = new Socket(\'url\');\n```\n\n#### WebSockets\n\nIf you are targeting a high end audience or maybe just something for internal\nuses you can use a pure WebSocket server. This uses the `ws` WebSocket module\nwhich is known to be one if not the fastest WebSocket server available in\nNode.js and supports all protocol specifications. To use pure WebSockets you\nneed to install the `ws` module:\n\n```\nnpm install ws --save\n```\n\nAnd tell `Primus` that you want to use `WebSockets` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: \'websockets\' });\n```\n\nThe `WebSockets` transformer comes with built-in client support and can be\naccessed using:\n\n```js\nvar Socket = primus.Socket;\n  , socket = new Socket(\'url\');\n```\n\n#### BrowserChannel\n\nBrowserChannel was the original technology that GMail used for their real-time\ncommunication. It\'s designed for same domain communication and does not use\nWebSockets. To use BrowserChannel you need to install the `browserchannel`\nmodule:\n\n```\nnpm install browserchannel --save\n```\n\nAnd tell `Primus` that you want to use `browserchannel` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: \'browserchannel\' });\n```\n\nThe `browserchannel` transformer comes with build in node client support and can be\naccessed using:\n\n```js\nvar Socket = primus.Socket;\n  , socket = new Socket(\'url\');\n```\n\nPlease note that you should use at least version `1.0.6` which contains support\nfor query strings.\n\n#### SockJS\n\nSockJS is a real-time server that focuses on cross-domain connections and does\nthis by using multiple transports. To use SockJS you need to install the\n`sockjs` module:\n\n```\nnpm install sockjs --save\n```\n\nAnd tell `Primus` that you want to use `sockjs` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: \'sockjs\' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `sockjs-client-node` module:\n\n```\nnpm install sockjs-client-node --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket;\n  , socket = new Socket(\'url\');\n```\n\n#### Socket.IO\n\nThe Socket.IO transport was written against Socket.IO 0.9.x. It was one of the\nfirst real-time servers written on Node.js and is one of the most used modules\nin Node.js. It uses multiple transports to connect the server. To use Socket.IO\nyou need to install the `socket.io` module:\n\n```\nnpm install socket.io --save\n```\n\nAnd tell `Primus` that you want to use `socket.io` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: \'socket.io\' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `socket.io-client`:\n\n```\nnpm install socket.io-client --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket;\n  , socket = new Socket(\'url\');\n```\n\nAs you can see from the examples above, it doesn\'t matter how you write the name\nof the transformer, we just `toLowerCase()` everything.\n\n### Transformer Inconsistencies\n\n- BrowserChannel does not give you access to the `remotePort` of the incoming\n  connection. So when you access `spark.address` the `port` property will be set\n  to `1337` by default.\n- SockJS does not support connections with query strings. You can still supply a\n  query string in the `new Primus(\'http://localhost:80?q=s\')` but it will not be\n  accessible in the `spark.query` property. As it will be an empty object.\n- BrowserChannel is the only transformer that does not support cross domain\n  connections.\n- SockJS and BrowserChannel are originally written in CoffeeScript which can\n  make it harder to debug when their internals are failing.\n- Engine.IO and SockJS do not ship their client-side library with their server\n  side component. We\'re bundling a snapshot of these libraries inside of Primus.\n  We will always be targeting the latest version of these transformers when we\n  bundle the library.\n- There are small bugs in Engine.IO that are causing our tests to fail. I\'ve\n  submitted patches for these bugs, but they have been reject for silly reasons.\n  The bug causes closed connections to say open. If you\'re experiencing this you\n  can apply this [patch](http://github.com/3rd-Eden/engine.io/commit/0cf81270e9d5700).\n\n### Plugins\n\nPrimus was build as low level interface where you can build your applications\nupon. At it\'s core, it\'s nothing more than something that passes messages back\nand forth between the client and server. To make it easier for developers to\nswitch to Primus we\'ve developed a simple but effective plugin system that\nallows you to extend Primus\'s functionality.\n\nPlugins are added on the server side in the form of an `Object`:\n\n```js\nprimus.use(\'name\', {\n  server: function (primus, options) {},\n  client: function (primus, options) {},\n  library: \'client side library\'\n});\n```\n\nOr you can pass the plugin `Object` directly in to the constructor:\n\n```js\nvar primus = new Primus(server, { plugin: {\n  name: {\n    server: function (primus, options) {},\n    client: function (primus, options) {},\n    library: \'client side library\'\n  }\n}})\n```\n\nThe server function is only executed on the server side and receives 2\narguments:\n\n1. A reference to the initialized Primus server.\n2. The options that we\'re passed in to the `new Primus(server, { options })`\n   constructor. So the plugins can be configured through the same interface.\n\nThe client receives the same arguments:\n\n1. A reference to the initialized Primus client.\n2. The options that we\'re passed in the `new Primus(url, { options })`\n   constructor. So the plugin in configured through the same interface.\n\nThe only thing you need to remember is that the client is stored in the library\nusing `toString()` so it cannot have any references out side the client\'s\nclosure. But luckily, there\'s a `library` property that will also be included on\nthe client side when it\'s specified.\n\n#### Extending the Spark / Socket\n\nThe server has a `.Spark` property that can be extended. This allows you to\neasily add new functionality to the socket. For example adding join room\nfunction would be as easy as:\n\n```js\nprimus.use(\'rooms\', {\n  server: function (primus) {\n    var Spark = primus.Spark;\n\n    Spark.prototype.join = function () {\n      // implement room functionality.\n    };\n  }\n});\n```\n\n#### Transforming and intercepting messages\n\nIntercepting and transforming messages in something that a lot of plugins\nrequire. When your building an `EventEmitter` plugin or something else you\nprobably don\'t want the default `data` event to be emitted but your custom\nevent. There are 2 different types of messages that can be transformed:\n\n1. `incoming` These messages are being received by the server.\n2. `outgoing` These messages are being send to the client.\n\nThe transformer is available on both the client and the server and share, like\nyou would have expected the same identical API. Adding a new transformer is\nrelatively straight forward:\n\n```js\nprimus.transform(\'incoming\', function (packet) {\n  //\n  // The packet.data contains the actual message that either received or\n  // transformed.\n  //\n\n  // This would transform all incoming messages to foo;\n  packet.data = \'foo\';\n\n  // If you are handling the message and want to prevent the `data` event from\n  // happening, simply `return false` at the end of your function. No new\n  // transformers will be called, and the event won\'t be emitted.\n});\n```\n\nThese transformations can easily be done in the plugins:\n\n```js\nprimus.use(\'name\', {\n  server: function (primus) {\n    primus.transform(\'outgoing\', function (packet) {\n      packet.data = \'foo\';\n    });\n\n    primus.transform(\'incoming\', function (packet) {\n      if (packet.data === \'foo\') packet.data = \'bar\';\n    });\n  },\n\n  client: function (primus) {\n    primus.transform(\'outgoing\', function (packet) {\n      packet.data = \'foo\';\n    });\n\n    primus.transform(\'incoming\', function (packet) {\n      if (packet.data === \'foo\') packet.data = \'bar\';\n    });\n  }\n});\n```\n\n#### Community Plugins\n\nThese are plugins created by our amazing community. Do you have a module that\nyou want to have listed here? Make sure it has test suite and runs on [Travis CI].\nAfter that open a pull request where you added your module to this README.md and\nsee it be merged automatically.\n\n<dl>\n  <dt><a href="http://github.com/cayasso/primus-rooms">primus-rooms</a></dt>\n  <dd>\n    A module that adds rooms capabilities to Primus. It\'s based on the rooms\n    implementation of Socket.IO.\n  </dd>\n  <dd>\n    <a href="https://travis-ci.org/cayasso/primus-rooms">\n      <img src="https://travis-ci.org/cayasso/primus-rooms.png?branch=master" alt="Build Status" />\n    </a>\n    <a href="http://badge.fury.io/js/primus-rooms">\n      <img src="https://badge.fury.io/js/primus-rooms.png" alt="NPM version" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href="http://github.com/cayasso/primus-multiplex">primus-multiplex</a></dt>\n  <dd>\n    A module that adds multiplexing capabilities to Primus.\n  </dd>\n  <dd>\n    <a href="https://travis-ci.org/cayasso/primus-multiplex">\n      <img src="https://travis-ci.org/cayasso/primus-multiplex.png?branch=master" alt="Build Status" />\n    </a>\n    <a href="http://badge.fury.io/js/primus-multiplex">\n      <img src="https://badge.fury.io/js/primus-multiplex.png" alt="NPM version" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href="http://github.com/cayasso/primus-emitter">primus-emitter</a></dt>\n  <dd>\n    A module that adds emitter capabilities to Primus.\n  </dd>\n  <dd>\n    <a href="https://travis-ci.org/cayasso/primus-emitter">\n      <img src="https://travis-ci.org/cayasso/primus-emitter.png?branch=master" alt="Build Status" />\n    </a>\n    <a href="http://badge.fury.io/js/primus-emitter">\n      <img src="https://badge.fury.io/js/primus-emitter.png" alt="NPM version" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href="http://github.com/swissmanu/primus-responder">primus-responder</a></dt>\n  <dd>\n    Client and server plugin that adds a request/response cycle to Primus.\n  </dd>\n  <dd>\n    <a href="https://travis-ci.org/swissmanu/primus-responder">\n      <img src="https://travis-ci.org/swissmanu/primus-responder.png?branch=master" alt="Build Status" />\n    </a>\n    <a href="http://badge.fury.io/js/primus-responder">\n      <img src="https://badge.fury.io/js/primus-responder.png" alt="NPM version" />\n    </a>\n  </dd>\n</dl>\n\nIn addition to these community provided plugins, the Primus project also\nprovides the following plugins:\n\n<dl>\n  <dt><a href="http://github.com/primus/substream">substream</a></dt>\n  <dd>\n    Substream is an opinionated but stream compatible connection multiplexer on\n    top of the Primus connections. These streams can be created without\n    pre-defining them on the server or client.\n  </dd>\n  <dd>\n    <a href="https://travis-ci.org/primus/substream">\n      <img src="https://travis-ci.org/primus/substream.png?branch=master" alt="Build Status" />\n    </a>\n    <a href="http://badge.fury.io/js/substream">\n      <img src="https://badge.fury.io/js/substream.png" alt="NPM version" />\n    </a>\n  </dd>\n</dl>\n\n[Travis CI]: https://travis-ci.org/\n\n### Example\n\nThere is a small example folder included in this repository which allows to\neasily play with the real-time connection. The code in the example is heavily\ncommented for your reading pleasures. The example does require some extra\ndependencies so don\'t forget to run `npm install .` in the folder. The example\ncan be ran using `npm start` or if you want to customize the\nparsers/transformers you can use:\n\n```\nnode index.js --transformer <name> --parser <name> --port <number>\n```\n\nThe example is also hosted on [Nodejitsu] an can be accessed at:\n\nhttp://primus-example.nodejitsu.com/\n\n[Nodejitsu]: https://www.nodejitsu.com/\n\n### FAQ\n\n#### Scaling\n\nScaling Primus is as simple as sticking it behind a load balancer that supports\nsticky sessions and run multiple versions of your application. This is a vital\nfeature that your load balancer needs to support. This ensures that the incoming\nrequests always go back to the same server. If your load balancer does not\nsupport sticky sessions, get an other one. I highly recommend\n[HAProxy](http://haproxy.1wt.eu/). According to my own testing it the fastest\nand best proxy available that supports WebSockets. See\nhttps://github.com/observing/balancerbattle for more detailed information.\n\n#### Express\n\nExpress 3\'s `express()` instance isn\'t a valid HTTP server. In order to make it\nwork with `Primus` and other real-time transformers you need to feed the instance\nto a real `http` server and supply this server. See example below:\n\n```js\n\'use strict\';\n\nvar express = require(\'express\')\n  , Primus = require(\'primus\')\n  , app = express();\n\n//\n// Do your express magic.\n//\n\nvar server = require(\'http\').createServer(app)\n  , primus = new Primus(server, { options });\n\nserver.listen(port);\n```\n\n#### Require.js\n\nRequire.js is supported to a certain degree. The `primus.js` core file should be\ncompatible with require.js but it could be that the transformer of your choosing\nisn\'t compatible with require.js. For example `engine.io` uses `component` which\nintroduces it\'s own `require` function that causes issues. In addition to that,\nthere are plugins which might use these modules that break require.js. The\ngeneral advice for this is drop require.js in favour for plain script loading or\nuse browserify where possible. If you feel strongly about require.js we accept\npull requests that improve this behaviour or helps us save guard against these\nissues.\n\n### Versioning\n\n#### History\n\nYou can discover the version history and change logs on the\n[Releases](https://github.com/primus/primus/releases) page\n\n#### Convention\n\nAll `0.x.x` releases should be considered unstable and not ready for production.\nThe version number is laid out as: `major.minor.patch` and tries to follow\nsemver as closely as possible but this is how we use our version numbering:\n\n<dl>\n  <dt>major</dt>\n  <dd>\n    <p>\n      A major and possible breaking change has been made in the primus core.\n      These changes are not backwards compatible with older versions.\n    </p>\n  </dd>\n  <dt>minor</dt>\n  <dd>\n    <p>\n      New features are added or a big change has happened with one of the\n      real-time libraries that we\'re supporting.\n    </p>\n  </dd>\n  <dt>patch</dt>\n  <dd>\n    <p>\n      A bug has been fixed, without any major internal and breaking changes.\n    </p>\n  </dd>\n</dl>\n\n#### Release cycle\n\nThere isn\'t a steady or monthly release cycle. I usually release a new \nversion when:\n\n1. A critical bug is discovered.\n2. There has been a lot of minor changes.\n3. A framework did an incompatible update.\n4. A new framework is added\n5. People ask for it.\n\n### License\n\nMIT\n',
16537 silly resolved     readmeFilename: 'README.md',
16537 silly resolved     bugs: { url: 'https://github.com/primus/primus/issues' },
16537 silly resolved     homepage: 'https://github.com/primus/primus',
16537 silly resolved     _id: 'primus@1.4.6',
16537 silly resolved     dist: { shasum: 'f24a3a38ad70460dffe5d2ec01a9810babe5cbec' },
16537 silly resolved     _from: 'primus@~1.4.0',
16537 silly resolved     _resolved: 'https://registry.npmjs.org/primus/-/primus-1.4.6.tgz' } ]
16538 info install ws@0.4.31 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api
16539 info install primus@1.4.6 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api
16540 info installOne ws@0.4.31
16541 info installOne primus@1.4.6
16542 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws unbuild
16543 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/primus unbuild
16544 verbose tar unpack /home/lerenzo/.npm/ws/0.4.31/package.tgz
16545 silly lockFile 88f7f076-les-preacher-api-node-modules-ws tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
16546 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws /home/lerenzo/.npm/88f7f076-les-preacher-api-node-modules-ws.lock
16547 silly lockFile 0bcd4b6f-erenzo-npm-ws-0-4-31-package-tgz tar:///home/lerenzo/.npm/ws/0.4.31/package.tgz
16548 verbose lock tar:///home/lerenzo/.npm/ws/0.4.31/package.tgz /home/lerenzo/.npm/0bcd4b6f-erenzo-npm-ws-0-4-31-package-tgz.lock
16549 verbose tar unpack /home/lerenzo/.npm/primus/1.4.6/package.tgz
16550 silly lockFile 170614ca-preacher-api-node-modules-primus tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/primus
16551 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/primus /home/lerenzo/.npm/170614ca-preacher-api-node-modules-primus.lock
16552 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16553 verbose lock tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz /home/lerenzo/.npm/a03fe6de-nzo-npm-primus-1-4-6-package-tgz.lock
16554 silly gunzTarPerm modes [ '755', '644' ]
16555 silly gunzTarPerm modes [ '755', '644' ]
16556 silly gunzTarPerm extractEntry package.json
16557 silly gunzTarPerm extractEntry .npmignore
16558 silly gunzTarPerm extractEntry README.md
16559 silly gunzTarPerm extractEntry errors.js
16560 silly gunzTarPerm extractEntry forwarded.js
16561 silly gunzTarPerm extractEntry index.js
16562 silly gunzTarPerm extractEntry primus.js
16563 silly gunzTarPerm extractEntry spark.js
16564 silly gunzTarPerm extractEntry transformer.js
16565 silly gunzTarPerm extractEntry parsers.json
16566 silly gunzTarPerm extractEntry example/echo/package.json
16567 silly gunzTarPerm extractEntry example/echo/README.md
16568 silly gunzTarPerm extractEntry example/echo/connect.js
16569 silly gunzTarPerm extractEntry example/echo/index.js
16570 silly gunzTarPerm extractEntry example/echo/index.html
16571 silly gunzTarPerm extractEntry transformers.json
16572 silly gunzTarPerm extractEntry test/browserchannel.integration.js
16573 silly gunzTarPerm extractEntry test/engine.io.integration.js
16574 silly gunzTarPerm extractEntry test/transformer.base.js
16575 silly gunzTarPerm extractEntry test/spark.test.js
16576 silly gunzTarPerm extractEntry test/sockjs.integration.js
16577 silly gunzTarPerm extractEntry test/plugin.test.js
16578 silly gunzTarPerm extractEntry test/common.js
16579 silly gunzTarPerm extractEntry test/primus.parsers.test.js
16580 silly gunzTarPerm extractEntry test/primus.test.js
16581 silly gunzTarPerm extractEntry test/socket.io.integration.js
16582 silly gunzTarPerm extractEntry test/websockets.integration.js
16583 silly gunzTarPerm extractEntry package.json
16584 silly gunzTarPerm extractEntry .npmignore
16585 silly gunzTarPerm extractEntry README.md
16586 silly gunzTarPerm extractEntry test/primus.browser.js
16587 silly gunzTarPerm extractEntry test/nodejitsu/package.json
16588 silly gunzTarPerm extractEntry index.js
16589 silly gunzTarPerm extractEntry test/BufferPool.test.js
16590 silly gunzTarPerm extractEntry test/Sender.hixie.test.js
16591 silly gunzTarPerm extractEntry test/nodejitsu/index.js
16592 silly gunzTarPerm extractEntry test/mocha.opts
16593 silly gunzTarPerm extractEntry test/Sender.test.js
16594 silly gunzTarPerm extractEntry test/fixture/generate.js
16595 silly gunzTarPerm extractEntry test/fixture/primus.engine.io.js
16596 silly gunzTarPerm extractEntry test/fixture/primus.jsonh.js
16597 silly gunzTarPerm extractEntry test/fixture/primus.websocket.js
16598 silly gunzTarPerm extractEntry test/Validation.test.js
16599 silly gunzTarPerm extractEntry test/Receiver.test.js
16600 silly gunzTarPerm extractEntry .travis.yml
16601 silly gunzTarPerm extractEntry transformers/browserchannel/client.js
16602 silly gunzTarPerm extractEntry test/Receiver.hixie.test.js
16603 silly gunzTarPerm extractEntry test/WebSocketServer.test.js
16604 silly gunzTarPerm extractEntry test/autobahn-server.js
16605 silly gunzTarPerm extractEntry test/autobahn.js
16606 silly gunzTarPerm extractEntry test/hybi-common.js
16607 silly gunzTarPerm extractEntry test/WebSocket.integration.js
16608 silly gunzTarPerm extractEntry test/testserver.js
16609 silly gunzTarPerm extractEntry test/WebSocket.test.js
16610 silly gunzTarPerm extractEntry test/fixtures/agent1-cert.pem
16611 silly gunzTarPerm extractEntry test/fixtures/agent1-key.pem
16612 silly gunzTarPerm extractEntry transformers/browserchannel/index.js
16613 silly gunzTarPerm extractEntry transformers/browserchannel/server.js
16614 silly gunzTarPerm extractEntry test/fixtures/ca1-cert.pem
16615 silly gunzTarPerm extractEntry test/fixtures/ca1-key.pem
16616 silly gunzTarPerm extractEntry transformers/engine.io/README.md
16617 silly gunzTarPerm extractEntry transformers/engine.io/client.js
16618 silly gunzTarPerm extractEntry transformers/engine.io/index.js
16619 silly gunzTarPerm extractEntry transformers/engine.io/library.js
16620 silly gunzTarPerm extractEntry test/fixtures/certificate.pem
16621 silly gunzTarPerm extractEntry test/fixtures/key.pem
16622 silly gunzTarPerm extractEntry transformers/engine.io/server.js
16623 silly gunzTarPerm extractEntry transformers/faye/client.js
16624 silly gunzTarPerm extractEntry transformers/faye/index.js
16625 silly gunzTarPerm extractEntry transformers/faye/server.js
16626 silly gunzTarPerm extractEntry transformers/socket.io/client.js
16627 silly gunzTarPerm extractEntry transformers/socket.io/index.js
16628 silly gunzTarPerm extractEntry transformers/socket.io/server.js
16629 silly gunzTarPerm extractEntry transformers/sockjs/client.js
16630 silly gunzTarPerm extractEntry transformers/sockjs/index.js
16631 silly gunzTarPerm extractEntry transformers/sockjs/library.js
16632 silly gunzTarPerm extractEntry transformers/sockjs/server.js
16633 silly gunzTarPerm extractEntry test/fixtures/request.pem
16634 silly gunzTarPerm extractEntry test/fixtures/textfile
16635 silly gunzTarPerm extractEntry transformers/websockets/client.js
16636 silly gunzTarPerm extractEntry transformers/websockets/index.js
16637 silly gunzTarPerm extractEntry transformers/websockets/server.js
16638 silly gunzTarPerm extractEntry parsers/binary.js
16639 silly gunzTarPerm extractEntry bench/parser.benchmark.js
16640 silly gunzTarPerm extractEntry bench/sender.benchmark.js
16641 silly gunzTarPerm extractEntry bench/speed.js
16642 silly gunzTarPerm extractEntry bench/util.js
16643 silly gunzTarPerm extractEntry parsers/ejson.js
16644 silly gunzTarPerm extractEntry parsers/json.js
16645 silly gunzTarPerm extractEntry parsers/jsonh.js
16646 silly gunzTarPerm extractEntry bin/wscat
16647 silly gunzTarPerm extractEntry .travis.yml
16648 silly gunzTarPerm extractEntry doc/ws.md
16649 silly gunzTarPerm extractEntry examples/ssl.js
16650 silly gunzTarPerm extractEntry examples/fileapi/package.json
16651 silly gunzTarPerm extractEntry examples/fileapi/.npmignore
16652 silly gunzTarPerm extractEntry examples/fileapi/server.js
16653 silly gunzTarPerm extractEntry examples/fileapi/public/app.js
16654 silly gunzTarPerm extractEntry examples/fileapi/public/uploader.js
16655 silly gunzTarPerm extractEntry examples/fileapi/public/index.html
16656 silly gunzTarPerm extractEntry examples/serverstats/package.json
16657 silly gunzTarPerm extractEntry examples/serverstats/server.js
16658 silly gunzTarPerm extractEntry examples/serverstats/public/index.html
16659 silly gunzTarPerm extractEntry examples/serverstats-express_3/package.json
16660 silly gunzTarPerm extractEntry examples/serverstats-express_3/server.js
16661 silly gunzTarPerm extractEntry examples/serverstats-express_3/public/index.html
16662 silly gunzTarPerm extractEntry History.md
16663 silly gunzTarPerm extractEntry lib/BufferPool.js
16664 silly gunzTarPerm extractEntry lib/ErrorCodes.js
16665 silly gunzTarPerm extractEntry lib/Receiver.hixie.js
16666 silly gunzTarPerm extractEntry lib/Receiver.js
16667 silly gunzTarPerm extractEntry lib/BufferUtil.js
16668 silly gunzTarPerm extractEntry lib/Sender.js
16669 silly gunzTarPerm extractEntry lib/Validation.fallback.js
16670 silly gunzTarPerm extractEntry lib/Validation.js
16671 silly gunzTarPerm extractEntry lib/WebSocket.js
16672 silly gunzTarPerm extractEntry lib/WebSocketServer.js
16673 silly gunzTarPerm extractEntry lib/BufferUtil.fallback.js
16674 silly gunzTarPerm extractEntry lib/browser.js
16675 silly gunzTarPerm extractEntry lib/Sender.hixie.js
16676 silly gunzTarPerm extractEntry Makefile
16677 silly gunzTarPerm extractEntry src/bufferutil.cc
16678 silly gunzTarPerm extractEntry src/validation.cc
16679 silly gunzTarPerm extractEntry binding.gyp
16680 silly lockFile 170614ca-preacher-api-node-modules-primus tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/primus
16681 silly lockFile 170614ca-preacher-api-node-modules-primus tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/primus
16682 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16683 silly lockFile a03fe6de-nzo-npm-primus-1-4-6-package-tgz tar:///home/lerenzo/.npm/primus/1.4.6/package.tgz
16684 info preinstall primus@1.4.6
16685 verbose readDependencies using package.json deps
16686 verbose readDependencies using package.json deps
16687 silly lockFile 88f7f076-les-preacher-api-node-modules-ws tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
16688 silly lockFile 88f7f076-les-preacher-api-node-modules-ws tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
16689 silly lockFile 0bcd4b6f-erenzo-npm-ws-0-4-31-package-tgz tar:///home/lerenzo/.npm/ws/0.4.31/package.tgz
16690 silly lockFile 0bcd4b6f-erenzo-npm-ws-0-4-31-package-tgz tar:///home/lerenzo/.npm/ws/0.4.31/package.tgz
16691 info preinstall ws@0.4.31
16692 verbose cache add [ 'extendable@0.0.x', null ]
16693 verbose cache add name=undefined spec="extendable@0.0.x" args=["extendable@0.0.x",null]
16694 verbose parsed url { protocol: null,
16694 verbose parsed url   slashes: null,
16694 verbose parsed url   auth: null,
16694 verbose parsed url   host: null,
16694 verbose parsed url   port: null,
16694 verbose parsed url   hostname: null,
16694 verbose parsed url   hash: null,
16694 verbose parsed url   search: null,
16694 verbose parsed url   query: null,
16694 verbose parsed url   pathname: 'extendable@0.0.x',
16694 verbose parsed url   path: 'extendable@0.0.x',
16694 verbose parsed url   href: 'extendable@0.0.x' }
16695 verbose cache add name="extendable" spec="0.0.x" args=["extendable","0.0.x"]
16696 verbose parsed url { protocol: null,
16696 verbose parsed url   slashes: null,
16696 verbose parsed url   auth: null,
16696 verbose parsed url   host: null,
16696 verbose parsed url   port: null,
16696 verbose parsed url   hostname: null,
16696 verbose parsed url   hash: null,
16696 verbose parsed url   search: null,
16696 verbose parsed url   query: null,
16696 verbose parsed url   pathname: '0.0.x',
16696 verbose parsed url   path: '0.0.x',
16696 verbose parsed url   href: '0.0.x' }
16697 verbose addNamed [ 'extendable', '0.0.x' ]
16698 verbose addNamed [ null, '>=0.0.0-0 <0.1.0-0' ]
16699 silly lockFile 9b413a1a-extendable-0-0-x extendable@0.0.x
16700 verbose lock extendable@0.0.x /home/lerenzo/.npm/9b413a1a-extendable-0-0-x.lock
16701 verbose cache add [ 'load@1.0.x', null ]
16702 verbose cache add name=undefined spec="load@1.0.x" args=["load@1.0.x",null]
16703 verbose parsed url { protocol: null,
16703 verbose parsed url   slashes: null,
16703 verbose parsed url   auth: null,
16703 verbose parsed url   host: null,
16703 verbose parsed url   port: null,
16703 verbose parsed url   hostname: null,
16703 verbose parsed url   hash: null,
16703 verbose parsed url   search: null,
16703 verbose parsed url   query: null,
16703 verbose parsed url   pathname: 'load@1.0.x',
16703 verbose parsed url   path: 'load@1.0.x',
16703 verbose parsed url   href: 'load@1.0.x' }
16704 verbose cache add name="load" spec="1.0.x" args=["load","1.0.x"]
16705 verbose parsed url { protocol: null,
16705 verbose parsed url   slashes: null,
16705 verbose parsed url   auth: null,
16705 verbose parsed url   host: null,
16705 verbose parsed url   port: null,
16705 verbose parsed url   hostname: null,
16705 verbose parsed url   hash: null,
16705 verbose parsed url   search: null,
16705 verbose parsed url   query: null,
16705 verbose parsed url   pathname: '1.0.x',
16705 verbose parsed url   path: '1.0.x',
16705 verbose parsed url   href: '1.0.x' }
16706 verbose addNamed [ 'load', '1.0.x' ]
16707 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
16708 silly lockFile 8f7127d2-load-1-0-x load@1.0.x
16709 verbose lock load@1.0.x /home/lerenzo/.npm/8f7127d2-load-1-0-x.lock
16710 verbose readDependencies using package.json deps
16711 silly addNameRange { name: 'extendable',
16711 silly addNameRange   range: '>=0.0.0-0 <0.1.0-0',
16711 silly addNameRange   hasData: false }
16712 silly addNameRange { name: 'load', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
16713 verbose readDependencies using package.json deps
16714 verbose url raw extendable
16715 verbose url resolving [ 'https://registry.npmjs.org/', './extendable' ]
16716 verbose url resolved https://registry.npmjs.org/extendable
16717 info trying registry request attempt 1 at 14:13:19
16718 http GET https://registry.npmjs.org/extendable
16719 verbose url raw load
16720 verbose url resolving [ 'https://registry.npmjs.org/', './load' ]
16721 verbose url resolved https://registry.npmjs.org/load
16722 info trying registry request attempt 1 at 14:13:19
16723 http GET https://registry.npmjs.org/load
16724 verbose cache add [ 'tinycolor@0.x', null ]
16725 verbose cache add name=undefined spec="tinycolor@0.x" args=["tinycolor@0.x",null]
16726 verbose parsed url { protocol: null,
16726 verbose parsed url   slashes: null,
16726 verbose parsed url   auth: null,
16726 verbose parsed url   host: null,
16726 verbose parsed url   port: null,
16726 verbose parsed url   hostname: null,
16726 verbose parsed url   hash: null,
16726 verbose parsed url   search: null,
16726 verbose parsed url   query: null,
16726 verbose parsed url   pathname: 'tinycolor@0.x',
16726 verbose parsed url   path: 'tinycolor@0.x',
16726 verbose parsed url   href: 'tinycolor@0.x' }
16727 verbose cache add name="tinycolor" spec="0.x" args=["tinycolor","0.x"]
16728 verbose parsed url { protocol: null,
16728 verbose parsed url   slashes: null,
16728 verbose parsed url   auth: null,
16728 verbose parsed url   host: null,
16728 verbose parsed url   port: null,
16728 verbose parsed url   hostname: null,
16728 verbose parsed url   hash: null,
16728 verbose parsed url   search: null,
16728 verbose parsed url   query: null,
16728 verbose parsed url   pathname: '0.x',
16728 verbose parsed url   path: '0.x',
16728 verbose parsed url   href: '0.x' }
16729 verbose addNamed [ 'tinycolor', '0.x' ]
16730 verbose addNamed [ null, '>=0.0.0-0 <1.0.0-0' ]
16731 silly lockFile 8f23180d-tinycolor-0-x tinycolor@0.x
16732 verbose lock tinycolor@0.x /home/lerenzo/.npm/8f23180d-tinycolor-0-x.lock
16733 verbose cache add [ 'commander@~0.6.1', null ]
16734 verbose cache add name=undefined spec="commander@~0.6.1" args=["commander@~0.6.1",null]
16735 verbose parsed url { protocol: null,
16735 verbose parsed url   slashes: null,
16735 verbose parsed url   auth: null,
16735 verbose parsed url   host: null,
16735 verbose parsed url   port: null,
16735 verbose parsed url   hostname: null,
16735 verbose parsed url   hash: null,
16735 verbose parsed url   search: null,
16735 verbose parsed url   query: null,
16735 verbose parsed url   pathname: 'commander@~0.6.1',
16735 verbose parsed url   path: 'commander@~0.6.1',
16735 verbose parsed url   href: 'commander@~0.6.1' }
16736 verbose cache add name="commander" spec="~0.6.1" args=["commander","~0.6.1"]
16737 verbose parsed url { protocol: null,
16737 verbose parsed url   slashes: null,
16737 verbose parsed url   auth: null,
16737 verbose parsed url   host: null,
16737 verbose parsed url   port: null,
16737 verbose parsed url   hostname: null,
16737 verbose parsed url   hash: null,
16737 verbose parsed url   search: null,
16737 verbose parsed url   query: null,
16737 verbose parsed url   pathname: '~0.6.1',
16737 verbose parsed url   path: '~0.6.1',
16737 verbose parsed url   href: '~0.6.1' }
16738 verbose addNamed [ 'commander', '~0.6.1' ]
16739 verbose addNamed [ null, '>=0.6.1-0 <0.7.0-0' ]
16740 silly lockFile 5c53196d-commander-0-6-1 commander@~0.6.1
16741 verbose lock commander@~0.6.1 /home/lerenzo/.npm/5c53196d-commander-0-6-1.lock
16742 verbose cache add [ 'nan@~0.3.0', null ]
16743 verbose cache add name=undefined spec="nan@~0.3.0" args=["nan@~0.3.0",null]
16744 verbose parsed url { protocol: null,
16744 verbose parsed url   slashes: null,
16744 verbose parsed url   auth: null,
16744 verbose parsed url   host: null,
16744 verbose parsed url   port: null,
16744 verbose parsed url   hostname: null,
16744 verbose parsed url   hash: null,
16744 verbose parsed url   search: null,
16744 verbose parsed url   query: null,
16744 verbose parsed url   pathname: 'nan@~0.3.0',
16744 verbose parsed url   path: 'nan@~0.3.0',
16744 verbose parsed url   href: 'nan@~0.3.0' }
16745 verbose cache add name="nan" spec="~0.3.0" args=["nan","~0.3.0"]
16746 verbose parsed url { protocol: null,
16746 verbose parsed url   slashes: null,
16746 verbose parsed url   auth: null,
16746 verbose parsed url   host: null,
16746 verbose parsed url   port: null,
16746 verbose parsed url   hostname: null,
16746 verbose parsed url   hash: null,
16746 verbose parsed url   search: null,
16746 verbose parsed url   query: null,
16746 verbose parsed url   pathname: '~0.3.0',
16746 verbose parsed url   path: '~0.3.0',
16746 verbose parsed url   href: '~0.3.0' }
16747 verbose addNamed [ 'nan', '~0.3.0' ]
16748 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
16749 silly lockFile 7bcce2a2-nan-0-3-0 nan@~0.3.0
16750 verbose lock nan@~0.3.0 /home/lerenzo/.npm/7bcce2a2-nan-0-3-0.lock
16751 verbose cache add [ 'options@>=0.0.5', null ]
16752 verbose cache add name=undefined spec="options@>=0.0.5" args=["options@>=0.0.5",null]
16753 verbose parsed url { protocol: null,
16753 verbose parsed url   slashes: null,
16753 verbose parsed url   auth: null,
16753 verbose parsed url   host: null,
16753 verbose parsed url   port: null,
16753 verbose parsed url   hostname: null,
16753 verbose parsed url   hash: null,
16753 verbose parsed url   search: null,
16753 verbose parsed url   query: null,
16753 verbose parsed url   pathname: 'options@%3E=0.0.5',
16753 verbose parsed url   path: 'options@%3E=0.0.5',
16753 verbose parsed url   href: 'options@%3E=0.0.5' }
16754 verbose cache add name="options" spec=">=0.0.5" args=["options",">=0.0.5"]
16755 verbose parsed url { protocol: null,
16755 verbose parsed url   slashes: null,
16755 verbose parsed url   auth: null,
16755 verbose parsed url   host: null,
16755 verbose parsed url   port: null,
16755 verbose parsed url   hostname: null,
16755 verbose parsed url   hash: null,
16755 verbose parsed url   search: null,
16755 verbose parsed url   query: null,
16755 verbose parsed url   pathname: '%3E=0.0.5',
16755 verbose parsed url   path: '%3E=0.0.5',
16755 verbose parsed url   href: '%3E=0.0.5' }
16756 verbose addNamed [ 'options', '>=0.0.5' ]
16757 verbose addNamed [ null, '>=0.0.5' ]
16758 silly lockFile 073a6bb3-options-0-0-5 options@>=0.0.5
16759 verbose lock options@>=0.0.5 /home/lerenzo/.npm/073a6bb3-options-0-0-5.lock
16760 silly addNameRange { name: 'tinycolor',
16760 silly addNameRange   range: '>=0.0.0-0 <1.0.0-0',
16760 silly addNameRange   hasData: false }
16761 silly addNameRange { name: 'commander',
16761 silly addNameRange   range: '>=0.6.1-0 <0.7.0-0',
16761 silly addNameRange   hasData: false }
16762 silly addNameRange { name: 'nan', range: '>=0.3.0-0 <0.4.0-0', hasData: false }
16763 silly addNameRange { name: 'options', range: '>=0.0.5', hasData: false }
16764 verbose url raw tinycolor
16765 verbose url resolving [ 'https://registry.npmjs.org/', './tinycolor' ]
16766 verbose url resolved https://registry.npmjs.org/tinycolor
16767 info trying registry request attempt 1 at 14:13:19
16768 verbose etag "8W12H9TBKF43FVM0CVCT1ZOT"
16769 http GET https://registry.npmjs.org/tinycolor
16770 verbose url raw commander
16771 verbose url resolving [ 'https://registry.npmjs.org/', './commander' ]
16772 verbose url resolved https://registry.npmjs.org/commander
16773 info trying registry request attempt 1 at 14:13:19
16774 verbose etag "4TCRTLPBQW4XLXUO0M7R72HI4"
16775 http GET https://registry.npmjs.org/commander
16776 verbose url raw options
16777 verbose url resolving [ 'https://registry.npmjs.org/', './options' ]
16778 verbose url resolved https://registry.npmjs.org/options
16779 info trying registry request attempt 1 at 14:13:20
16780 verbose etag "ABOD09DZE9FBSZ7TLPXGFT76S"
16781 http GET https://registry.npmjs.org/options
16782 verbose url raw nan
16783 verbose url resolving [ 'https://registry.npmjs.org/', './nan' ]
16784 verbose url resolved https://registry.npmjs.org/nan
16785 info trying registry request attempt 1 at 14:13:20
16786 verbose etag "ESALFKE8SEQGC5PVJ17ODCBDG"
16787 http GET https://registry.npmjs.org/nan
16788 http 200 https://registry.npmjs.org/traverse
16789 silly registry.get cb [ 200,
16789 silly registry.get   { vary: 'Accept',
16789 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
16789 silly registry.get     etag: '"5MJ3ZJZKSDQZ3XVA6083BWUPU"',
16789 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:18 GMT',
16789 silly registry.get     'content-type': 'application/json',
16789 silly registry.get     'content-length': '40901' } ]
16790 silly addNameRange number 2 { name: 'traverse', range: '>=0.5.1-0 <0.6.0-0', hasData: true }
16791 silly addNameRange versions [ 'traverse',
16791 silly addNameRange   [ '0.1.2',
16791 silly addNameRange     '0.1.3',
16791 silly addNameRange     '0.2.0',
16791 silly addNameRange     '0.2.1',
16791 silly addNameRange     '0.2.2',
16791 silly addNameRange     '0.2.3',
16791 silly addNameRange     '0.2.4',
16791 silly addNameRange     '0.3.0',
16791 silly addNameRange     '0.3.1',
16791 silly addNameRange     '0.2.5',
16791 silly addNameRange     '0.2.6',
16791 silly addNameRange     '0.3.2',
16791 silly addNameRange     '0.3.3',
16791 silly addNameRange     '0.3.4',
16791 silly addNameRange     '0.3.5',
16791 silly addNameRange     '0.3.6',
16791 silly addNameRange     '0.3.7',
16791 silly addNameRange     '0.3.8',
16791 silly addNameRange     '0.4.0',
16791 silly addNameRange     '0.4.1',
16791 silly addNameRange     '0.4.2',
16791 silly addNameRange     '0.3.9',
16791 silly addNameRange     '0.4.3',
16791 silly addNameRange     '0.4.4',
16791 silly addNameRange     '0.4.5',
16791 silly addNameRange     '0.4.6',
16791 silly addNameRange     '0.5.0',
16791 silly addNameRange     '0.5.1',
16791 silly addNameRange     '0.5.2',
16791 silly addNameRange     '0.6.0',
16791 silly addNameRange     '0.6.1',
16791 silly addNameRange     '0.6.2',
16791 silly addNameRange     '0.6.3',
16791 silly addNameRange     '0.6.5',
16791 silly addNameRange     '0.6.6' ] ]
16792 verbose addNamed [ 'traverse', '0.5.2' ]
16793 verbose addNamed [ '0.5.2', '0.5.2' ]
16794 silly lockFile a0b87686-traverse-0-5-2 traverse@0.5.2
16795 verbose lock traverse@0.5.2 /home/lerenzo/.npm/a0b87686-traverse-0-5-2.lock
16796 silly lockFile 7826de69--org-traverse-traverse-0-5-2-tgz https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz
16797 verbose lock https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz /home/lerenzo/.npm/7826de69--org-traverse-traverse-0-5-2-tgz.lock
16798 verbose addRemoteTarball [ 'https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz',
16798 verbose addRemoteTarball   'e203c58d5f7f0e37db6e74c0acb929bb09b61d85' ]
16799 info retry fetch attempt 1 at 14:13:20
16800 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz
16801 http GET https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz
16802 http 200 https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz
16803 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz
16804 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16805 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package /home/lerenzo/.npm/1ddbb20e-00834-0-9745492769870907-package.lock
16806 silly lockFile 0038297b-00834-0-9745492769870907-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz
16807 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz /home/lerenzo/.npm/0038297b-00834-0-9745492769870907-tmp-tgz.lock
16808 silly gunzTarPerm modes [ '755', '644' ]
16809 silly gunzTarPerm extractEntry index.js
16810 silly gunzTarPerm extractEntry .npmignore
16811 silly gunzTarPerm extractEntry main.js
16812 silly gunzTarPerm extractEntry package.json
16813 silly gunzTarPerm extractEntry README.markdown
16814 silly gunzTarPerm extractEntry LICENSE
16815 silly gunzTarPerm extractEntry examples/negative.js
16816 silly gunzTarPerm extractEntry examples/scrub.js
16817 silly gunzTarPerm extractEntry examples/leaves.js
16818 silly gunzTarPerm extractEntry examples/json.js
16819 silly gunzTarPerm extractEntry examples/stringify.js
16820 silly gunzTarPerm extractEntry test/negative.js
16821 silly gunzTarPerm extractEntry test/interface.js
16822 silly gunzTarPerm extractEntry test/obj.js
16823 silly gunzTarPerm extractEntry test/keys.js
16824 silly gunzTarPerm extractEntry test/instance.js
16825 silly gunzTarPerm extractEntry test/stop.js
16826 silly gunzTarPerm extractEntry test/date.js
16827 silly gunzTarPerm extractEntry test/leaves.js
16828 silly gunzTarPerm extractEntry test/subexpr.js
16829 silly gunzTarPerm extractEntry test/json.js
16830 silly gunzTarPerm extractEntry test/mutability.js
16831 silly gunzTarPerm extractEntry test/stringify.js
16832 silly gunzTarPerm extractEntry test/super_deep.js
16833 silly gunzTarPerm extractEntry test/circular.js
16834 silly gunzTarPerm extractEntry test/siblings.js
16835 silly gunzTarPerm extractEntry test/equal.js
16836 silly gunzTarPerm extractEntry test/lib/deep_equal.js
16837 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16838 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16839 silly lockFile 0038297b-00834-0-9745492769870907-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz
16840 silly lockFile 0038297b-00834-0-9745492769870907-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/tmp.tgz
16841 verbose tar pack [ '/home/lerenzo/.npm/traverse/0.5.2/package.tgz',
16841 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package' ]
16842 verbose tarball /home/lerenzo/.npm/traverse/0.5.2/package.tgz
16843 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16844 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16845 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package /home/lerenzo/.npm/1ddbb20e-00834-0-9745492769870907-package.lock
16846 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16847 verbose lock tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz /home/lerenzo/.npm/df3427f4-o-npm-traverse-0-5-2-package-tgz.lock
16848 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16849 silly lockFile 1ddbb20e-00834-0-9745492769870907-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572400834-0.9745492769870907/package
16850 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16851 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16852 silly lockFile 212037e2-renzo-npm-traverse-0-5-2-package /home/lerenzo/.npm/traverse/0.5.2/package
16853 verbose lock /home/lerenzo/.npm/traverse/0.5.2/package /home/lerenzo/.npm/212037e2-renzo-npm-traverse-0-5-2-package.lock
16854 silly lockFile 212037e2-renzo-npm-traverse-0-5-2-package /home/lerenzo/.npm/traverse/0.5.2/package
16855 silly lockFile 212037e2-renzo-npm-traverse-0-5-2-package /home/lerenzo/.npm/traverse/0.5.2/package
16856 verbose tar unpack /home/lerenzo/.npm/traverse/0.5.2/package.tgz
16857 silly lockFile 4a3c51a0-renzo-npm-traverse-0-5-2-package tar:///home/lerenzo/.npm/traverse/0.5.2/package
16858 verbose lock tar:///home/lerenzo/.npm/traverse/0.5.2/package /home/lerenzo/.npm/4a3c51a0-renzo-npm-traverse-0-5-2-package.lock
16859 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16860 verbose lock tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz /home/lerenzo/.npm/df3427f4-o-npm-traverse-0-5-2-package-tgz.lock
16861 silly gunzTarPerm modes [ '755', '644' ]
16862 silly gunzTarPerm extractEntry package.json
16863 silly gunzTarPerm extractEntry .npmignore
16864 silly gunzTarPerm extractEntry LICENSE
16865 silly gunzTarPerm extractEntry index.js
16866 silly gunzTarPerm extractEntry main.js
16867 silly gunzTarPerm extractEntry README.markdown
16868 silly gunzTarPerm extractEntry examples/json.js
16869 silly gunzTarPerm extractEntry examples/leaves.js
16870 silly gunzTarPerm extractEntry examples/negative.js
16871 silly gunzTarPerm extractEntry examples/scrub.js
16872 silly gunzTarPerm extractEntry examples/stringify.js
16873 silly gunzTarPerm extractEntry test/circular.js
16874 silly gunzTarPerm extractEntry test/json.js
16875 silly gunzTarPerm extractEntry test/keys.js
16876 silly gunzTarPerm extractEntry test/leaves.js
16877 silly gunzTarPerm extractEntry test/interface.js
16878 silly gunzTarPerm extractEntry test/mutability.js
16879 silly gunzTarPerm extractEntry test/negative.js
16880 silly gunzTarPerm extractEntry test/obj.js
16881 silly gunzTarPerm extractEntry test/siblings.js
16882 silly gunzTarPerm extractEntry test/stop.js
16883 silly gunzTarPerm extractEntry test/instance.js
16884 silly gunzTarPerm extractEntry test/stringify.js
16885 silly gunzTarPerm extractEntry test/equal.js
16886 silly gunzTarPerm extractEntry test/subexpr.js
16887 silly gunzTarPerm extractEntry test/date.js
16888 silly gunzTarPerm extractEntry test/super_deep.js
16889 silly gunzTarPerm extractEntry test/lib/deep_equal.js
16890 silly lockFile 4a3c51a0-renzo-npm-traverse-0-5-2-package tar:///home/lerenzo/.npm/traverse/0.5.2/package
16891 silly lockFile 4a3c51a0-renzo-npm-traverse-0-5-2-package tar:///home/lerenzo/.npm/traverse/0.5.2/package
16892 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16893 silly lockFile df3427f4-o-npm-traverse-0-5-2-package-tgz tar:///home/lerenzo/.npm/traverse/0.5.2/package.tgz
16894 verbose chmod /home/lerenzo/.npm/traverse/0.5.2/package.tgz 644
16895 verbose chown /home/lerenzo/.npm/traverse/0.5.2/package.tgz [ 1000, 1000 ]
16896 silly lockFile 7826de69--org-traverse-traverse-0-5-2-tgz https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz
16897 silly lockFile 7826de69--org-traverse-traverse-0-5-2-tgz https://registry.npmjs.org/traverse/-/traverse-0.5.2.tgz
16898 silly lockFile a0b87686-traverse-0-5-2 traverse@0.5.2
16899 silly lockFile a0b87686-traverse-0-5-2 traverse@0.5.2
16900 silly lockFile 0201121e-traverse-0-5-1 traverse@~0.5.1
16901 silly lockFile 0201121e-traverse-0-5-1 traverse@~0.5.1
16902 http 200 https://registry.npmjs.org/hawk
16903 silly registry.get cb [ 200,
16903 silly registry.get   { vary: 'Accept',
16903 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
16903 silly registry.get     etag: '"4V6F9H6DH8DYRLRIEZ2D4XVFW"',
16903 silly registry.get     date: 'Wed, 27 Nov 2013 17:11:43 GMT',
16903 silly registry.get     'content-type': 'application/json',
16903 silly registry.get     'content-length': '955995' } ]
16904 info retry will retry, error on last attempt: Error: socket hang up
16905 silly addNameRange number 2 { name: 'hawk', range: '>=0.10.2-0 <0.11.0-0', hasData: true }
16906 silly addNameRange versions [ 'hawk',
16906 silly addNameRange   [ '0.0.1',
16906 silly addNameRange     '0.0.2',
16906 silly addNameRange     '0.0.3',
16906 silly addNameRange     '0.0.4',
16906 silly addNameRange     '0.0.5',
16906 silly addNameRange     '0.0.6',
16906 silly addNameRange     '0.0.7',
16906 silly addNameRange     '0.0.8',
16906 silly addNameRange     '0.1.0',
16906 silly addNameRange     '0.2.0',
16906 silly addNameRange     '0.3.0',
16906 silly addNameRange     '0.4.0',
16906 silly addNameRange     '0.5.0',
16906 silly addNameRange     '0.5.1',
16906 silly addNameRange     '0.5.2',
16906 silly addNameRange     '0.5.3',
16906 silly addNameRange     '0.6.0',
16906 silly addNameRange     '0.6.1',
16906 silly addNameRange     '0.7.0',
16906 silly addNameRange     '0.7.1',
16906 silly addNameRange     '0.8.1',
16906 silly addNameRange     '0.9.0',
16906 silly addNameRange     '0.10.0',
16906 silly addNameRange     '0.10.1',
16906 silly addNameRange     '0.10.2',
16906 silly addNameRange     '0.11.0',
16906 silly addNameRange     '0.11.1',
16906 silly addNameRange     '0.12.0',
16906 silly addNameRange     '0.12.1',
16906 silly addNameRange     '0.12.2',
16906 silly addNameRange     '0.13.0',
16906 silly addNameRange     '0.13.1',
16906 silly addNameRange     '0.14.0',
16906 silly addNameRange     '0.15.0',
16906 silly addNameRange     '1.0.0',
16906 silly addNameRange     '1.1.0-pre',
16906 silly addNameRange     '1.1.1',
16906 silly addNameRange     '1.1.2' ] ]
16907 verbose addNamed [ 'hawk', '0.10.2' ]
16908 verbose addNamed [ '0.10.2', '0.10.2' ]
16909 silly lockFile 887f3c04-hawk-0-10-2 hawk@0.10.2
16910 verbose lock hawk@0.10.2 /home/lerenzo/.npm/887f3c04-hawk-0-10-2.lock
16911 silly lockFile 98c82a5a-y-npmjs-org-hawk-hawk-0-10-2-tgz https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz
16912 verbose lock https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz /home/lerenzo/.npm/98c82a5a-y-npmjs-org-hawk-hawk-0-10-2-tgz.lock
16913 verbose addRemoteTarball [ 'https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz',
16913 verbose addRemoteTarball   '9b361dee95a931640e6d504e05609a8fc3ac45d2' ]
16914 info retry fetch attempt 1 at 14:13:29
16915 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz
16916 http GET https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz
16917 http 200 https://registry.npmjs.org/ini/-/ini-1.1.0.tgz
16918 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz
16919 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16920 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package /home/lerenzo/.npm/298dad23-98580-0-5355850032065064-package.lock
16921 silly lockFile eaaf767e-98580-0-5355850032065064-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz
16922 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz /home/lerenzo/.npm/eaaf767e-98580-0-5355850032065064-tmp-tgz.lock
16923 silly gunzTarPerm modes [ '755', '644' ]
16924 silly gunzTarPerm extractEntry package.json
16925 silly gunzTarPerm extractEntry README.md
16926 silly gunzTarPerm extractEntry LICENSE
16927 silly gunzTarPerm extractEntry ini.js
16928 silly gunzTarPerm extractEntry test/bar.js
16929 silly gunzTarPerm extractEntry test/foo.js
16930 silly gunzTarPerm extractEntry test/fixtures/foo.ini
16931 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16932 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16933 silly lockFile eaaf767e-98580-0-5355850032065064-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz
16934 silly lockFile eaaf767e-98580-0-5355850032065064-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/tmp.tgz
16935 verbose tar pack [ '/home/lerenzo/.npm/ini/1.1.0/package.tgz',
16935 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package' ]
16936 verbose tarball /home/lerenzo/.npm/ini/1.1.0/package.tgz
16937 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16938 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16939 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package /home/lerenzo/.npm/298dad23-98580-0-5355850032065064-package.lock
16940 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16941 verbose lock tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz /home/lerenzo/.npm/79b88ee3-erenzo-npm-ini-1-1-0-package-tgz.lock
16942 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16943 silly lockFile 298dad23-98580-0-5355850032065064-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572398580-0.5355850032065064/package
16944 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16945 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16946 silly lockFile 8fed489f-me-lerenzo-npm-ini-1-1-0-package /home/lerenzo/.npm/ini/1.1.0/package
16947 verbose lock /home/lerenzo/.npm/ini/1.1.0/package /home/lerenzo/.npm/8fed489f-me-lerenzo-npm-ini-1-1-0-package.lock
16948 silly lockFile 8fed489f-me-lerenzo-npm-ini-1-1-0-package /home/lerenzo/.npm/ini/1.1.0/package
16949 silly lockFile 8fed489f-me-lerenzo-npm-ini-1-1-0-package /home/lerenzo/.npm/ini/1.1.0/package
16950 verbose tar unpack /home/lerenzo/.npm/ini/1.1.0/package.tgz
16951 silly lockFile 0a2a463f-me-lerenzo-npm-ini-1-1-0-package tar:///home/lerenzo/.npm/ini/1.1.0/package
16952 verbose lock tar:///home/lerenzo/.npm/ini/1.1.0/package /home/lerenzo/.npm/0a2a463f-me-lerenzo-npm-ini-1-1-0-package.lock
16953 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16954 verbose lock tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz /home/lerenzo/.npm/79b88ee3-erenzo-npm-ini-1-1-0-package-tgz.lock
16955 silly gunzTarPerm modes [ '755', '644' ]
16956 silly gunzTarPerm extractEntry package.json
16957 silly gunzTarPerm extractEntry README.md
16958 silly gunzTarPerm extractEntry LICENSE
16959 silly gunzTarPerm extractEntry ini.js
16960 silly gunzTarPerm extractEntry test/bar.js
16961 silly gunzTarPerm extractEntry test/foo.js
16962 silly gunzTarPerm extractEntry test/fixtures/foo.ini
16963 silly lockFile 0a2a463f-me-lerenzo-npm-ini-1-1-0-package tar:///home/lerenzo/.npm/ini/1.1.0/package
16964 silly lockFile 0a2a463f-me-lerenzo-npm-ini-1-1-0-package tar:///home/lerenzo/.npm/ini/1.1.0/package
16965 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16966 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
16967 verbose chmod /home/lerenzo/.npm/ini/1.1.0/package.tgz 644
16968 verbose chown /home/lerenzo/.npm/ini/1.1.0/package.tgz [ 1000, 1000 ]
16969 silly lockFile 0256e224-stry-npmjs-org-ini-ini-1-1-0-tgz https://registry.npmjs.org/ini/-/ini-1.1.0.tgz
16970 silly lockFile 0256e224-stry-npmjs-org-ini-ini-1-1-0-tgz https://registry.npmjs.org/ini/-/ini-1.1.0.tgz
16971 silly lockFile f80c58e4-ini-1-1-0 ini@1.1.0
16972 silly lockFile f80c58e4-ini-1-1-0 ini@1.1.0
16973 silly lockFile 60d1e4cf-ini-1-x-x ini@1.x.x
16974 silly lockFile 60d1e4cf-ini-1-x-x ini@1.x.x
16975 http 200 https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz
16976 http 200 https://registry.npmjs.org/hawk
16977 silly registry.get cb [ 200,
16977 silly registry.get   { vary: 'Accept',
16977 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
16977 silly registry.get     etag: '"4V6F9H6DH8DYRLRIEZ2D4XVFW"',
16977 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:13 GMT',
16977 silly registry.get     'content-type': 'application/json',
16977 silly registry.get     'content-length': '955995' } ]
16978 info retry will retry, error on last attempt: Error: socket hang up
16979 silly addNameRange number 2 { name: 'hawk', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
16980 silly addNameRange versions [ 'hawk',
16980 silly addNameRange   [ '0.0.1',
16980 silly addNameRange     '0.0.2',
16980 silly addNameRange     '0.0.3',
16980 silly addNameRange     '0.0.4',
16980 silly addNameRange     '0.0.5',
16980 silly addNameRange     '0.0.6',
16980 silly addNameRange     '0.0.7',
16980 silly addNameRange     '0.0.8',
16980 silly addNameRange     '0.1.0',
16980 silly addNameRange     '0.2.0',
16980 silly addNameRange     '0.3.0',
16980 silly addNameRange     '0.4.0',
16980 silly addNameRange     '0.5.0',
16980 silly addNameRange     '0.5.1',
16980 silly addNameRange     '0.5.2',
16980 silly addNameRange     '0.5.3',
16980 silly addNameRange     '0.6.0',
16980 silly addNameRange     '0.6.1',
16980 silly addNameRange     '0.7.0',
16980 silly addNameRange     '0.7.1',
16980 silly addNameRange     '0.8.1',
16980 silly addNameRange     '0.9.0',
16980 silly addNameRange     '0.10.0',
16980 silly addNameRange     '0.10.1',
16980 silly addNameRange     '0.10.2',
16980 silly addNameRange     '0.11.0',
16980 silly addNameRange     '0.11.1',
16980 silly addNameRange     '0.12.0',
16980 silly addNameRange     '0.12.1',
16980 silly addNameRange     '0.12.2',
16980 silly addNameRange     '0.13.0',
16980 silly addNameRange     '0.13.1',
16980 silly addNameRange     '0.14.0',
16980 silly addNameRange     '0.15.0',
16980 silly addNameRange     '1.0.0',
16980 silly addNameRange     '1.1.0-pre',
16980 silly addNameRange     '1.1.1',
16980 silly addNameRange     '1.1.2' ] ]
16981 verbose addNamed [ 'hawk', '1.0.0' ]
16982 verbose addNamed [ '1.0.0', '1.0.0' ]
16983 silly lockFile 1ca87dbe-hawk-1-0-0 hawk@1.0.0
16984 verbose lock hawk@1.0.0 /home/lerenzo/.npm/1ca87dbe-hawk-1-0-0.lock
16985 silly lockFile 082d118a-ry-npmjs-org-hawk-hawk-1-0-0-tgz https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz
16986 verbose lock https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz /home/lerenzo/.npm/082d118a-ry-npmjs-org-hawk-hawk-1-0-0-tgz.lock
16987 verbose addRemoteTarball [ 'https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz',
16987 verbose addRemoteTarball   'b90bb169807285411da7ffcb8dd2598502d3b52d' ]
16988 info retry fetch attempt 1 at 14:13:37
16989 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz
16990 http GET https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz
16991 info trying registry request attempt 2 at 14:13:39
16992 http GET https://registry.npmjs.org/ansi
16993 http 200 https://registry.npmjs.org/request
16994 silly registry.get cb [ 200,
16994 silly registry.get   { vary: 'Accept',
16994 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
16994 silly registry.get     etag: '"7YFR6HSLDUZKES4SQFK7DSYZG"',
16994 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:12 GMT',
16994 silly registry.get     'content-type': 'application/json',
16994 silly registry.get     'content-length': '415719' } ]
16995 info retry will retry, error on last attempt: Error: socket hang up
16996 silly addNameRange number 2 { name: 'request', range: '>=2.9.0-0 <2.10.0-0', hasData: true }
16997 silly addNameRange versions [ 'request',
16997 silly addNameRange   [ '0.10.0',
16997 silly addNameRange     '0.8.3',
16997 silly addNameRange     '0.9.0',
16997 silly addNameRange     '0.9.1',
16997 silly addNameRange     '0.9.5',
16997 silly addNameRange     '1.0.0',
16997 silly addNameRange     '1.1.0',
16997 silly addNameRange     '1.1.1',
16997 silly addNameRange     '1.2.0',
16997 silly addNameRange     '1.9.0',
16997 silly addNameRange     '1.9.1',
16997 silly addNameRange     '1.9.2',
16997 silly addNameRange     '1.9.3',
16997 silly addNameRange     '1.9.5',
16997 silly addNameRange     '1.9.7',
16997 silly addNameRange     '1.9.8',
16997 silly addNameRange     '1.9.9',
16997 silly addNameRange     '2.0.0',
16997 silly addNameRange     '2.0.1',
16997 silly addNameRange     '2.0.2',
16997 silly addNameRange     '2.0.3',
16997 silly addNameRange     '2.0.4',
16997 silly addNameRange     '2.0.5',
16997 silly addNameRange     '2.1.0',
16997 silly addNameRange     '2.1.1',
16997 silly addNameRange     '2.2.0',
16997 silly addNameRange     '2.2.5',
16997 silly addNameRange     '2.2.6',
16997 silly addNameRange     '2.2.9',
16997 silly addNameRange     '2.9.0',
16997 silly addNameRange     '2.9.1',
16997 silly addNameRange     '2.9.2',
16997 silly addNameRange     '2.9.3',
16997 silly addNameRange     '2.9.100',
16997 silly addNameRange     '2.9.150',
16997 silly addNameRange     '2.9.151',
16997 silly addNameRange     '2.9.152',
16997 silly addNameRange     '2.9.153',
16997 silly addNameRange     '2.9.200',
16997 silly addNameRange     '2.9.201',
16997 silly addNameRange     '2.9.202',
16997 silly addNameRange     '2.9.203',
16997 silly addNameRange     '2.10.0',
16997 silly addNameRange     '2.11.0',
16997 silly addNameRange     '2.11.1',
16997 silly addNameRange     '2.11.2',
16997 silly addNameRange     '2.11.3',
16997 silly addNameRange     '2.11.4',
16997 silly addNameRange     '2.12.0',
16997 silly addNameRange     '2.14.0',
16997 silly addNameRange     '2.16.0',
16997 silly addNameRange     '2.16.2',
16997 silly addNameRange     '2.16.4',
16997 silly addNameRange     '2.16.6',
16997 silly addNameRange     '2.18.0',
16997 silly addNameRange     '2.19.0',
16997 silly addNameRange     '2.20.0',
16997 silly addNameRange     '2.21.0',
16997 silly addNameRange     '2.22.0',
16997 silly addNameRange     '2.23.0',
16997 silly addNameRange     '2.24.0',
16997 silly addNameRange     '2.25.0',
16997 silly addNameRange     '2.26.0',
16997 silly addNameRange     '2.27.0' ] ]
16998 verbose addNamed [ 'request', '2.9.203' ]
16999 verbose addNamed [ '2.9.203', '2.9.203' ]
17000 silly lockFile 3887d89d-request-2-9-203 request@2.9.203
17001 verbose lock request@2.9.203 /home/lerenzo/.npm/3887d89d-request-2-9-203.lock
17002 silly lockFile 96e7181b--org-request-request-2-9-203-tgz https://registry.npmjs.org/request/-/request-2.9.203.tgz
17003 verbose lock https://registry.npmjs.org/request/-/request-2.9.203.tgz /home/lerenzo/.npm/96e7181b--org-request-request-2-9-203-tgz.lock
17004 verbose addRemoteTarball [ 'https://registry.npmjs.org/request/-/request-2.9.203.tgz',
17004 verbose addRemoteTarball   '6c1711a5407fb94a114219563e44145bcbf4723a' ]
17005 info retry fetch attempt 1 at 14:13:44
17006 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz
17007 http GET https://registry.npmjs.org/request/-/request-2.9.203.tgz
17008 http 200 https://registry.npmjs.org/async
17009 silly registry.get cb [ 200,
17009 silly registry.get   { vary: 'Accept',
17009 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17009 silly registry.get     etag: '"7E0IPNSW1RSEG1H124PUN9R66"',
17009 silly registry.get     date: 'Wed, 27 Nov 2013 17:12:43 GMT',
17009 silly registry.get     'content-type': 'application/json',
17009 silly registry.get     'content-length': '676684' } ]
17010 info retry will retry, error on last attempt: Error: socket hang up
17011 silly addNameRange number 2 { name: 'async', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
17012 silly addNameRange versions [ 'async',
17012 silly addNameRange   [ '0.1.0',
17012 silly addNameRange     '0.1.1',
17012 silly addNameRange     '0.1.2',
17012 silly addNameRange     '0.1.3',
17012 silly addNameRange     '0.1.4',
17012 silly addNameRange     '0.1.5',
17012 silly addNameRange     '0.1.6',
17012 silly addNameRange     '0.1.7',
17012 silly addNameRange     '0.1.8',
17012 silly addNameRange     '0.1.9',
17012 silly addNameRange     '0.1.10',
17012 silly addNameRange     '0.1.11',
17012 silly addNameRange     '0.1.12',
17012 silly addNameRange     '0.1.13',
17012 silly addNameRange     '0.1.14',
17012 silly addNameRange     '0.1.15',
17012 silly addNameRange     '0.1.16',
17012 silly addNameRange     '0.1.17',
17012 silly addNameRange     '0.1.18',
17012 silly addNameRange     '0.1.19',
17012 silly addNameRange     '0.1.20',
17012 silly addNameRange     '0.1.21',
17012 silly addNameRange     '0.1.22',
17012 silly addNameRange     '0.2.0',
17012 silly addNameRange     '0.2.1',
17012 silly addNameRange     '0.2.2',
17012 silly addNameRange     '0.2.3',
17012 silly addNameRange     '0.2.4',
17012 silly addNameRange     '0.2.5',
17012 silly addNameRange     '0.2.6',
17012 silly addNameRange     '0.2.7',
17012 silly addNameRange     '0.2.8',
17012 silly addNameRange     '0.2.9' ] ]
17013 verbose addNamed [ 'async', '0.1.22' ]
17014 verbose addNamed [ '0.1.22', '0.1.22' ]
17015 silly lockFile 09d21715-async-0-1-22 async@0.1.22
17016 verbose lock async@0.1.22 /home/lerenzo/.npm/09d21715-async-0-1-22.lock
17017 silly lockFile d8129da7-npmjs-org-async-async-0-1-22-tgz https://registry.npmjs.org/async/-/async-0.1.22.tgz
17018 verbose lock https://registry.npmjs.org/async/-/async-0.1.22.tgz /home/lerenzo/.npm/d8129da7-npmjs-org-async-async-0-1-22-tgz.lock
17019 verbose addRemoteTarball [ 'https://registry.npmjs.org/async/-/async-0.1.22.tgz',
17019 verbose addRemoteTarball   '0fc1aaa088a0e3ef0ebe2d8831bab0dcf8845061' ]
17020 info retry fetch attempt 1 at 14:13:44
17021 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz
17022 http GET https://registry.npmjs.org/async/-/async-0.1.22.tgz
17023 http 304 https://registry.npmjs.org/lru-cache
17024 silly registry.get cb [ 304,
17024 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17024 silly registry.get     etag: '"EVMUW224SL57QIO1QJYZN9ABH"',
17024 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:44 GMT',
17024 silly registry.get     'content-length': '0' } ]
17025 verbose etag lru-cache from cache
17026 silly addNameRange number 2 { name: 'lru-cache', range: '>=2.0.0-0 <3.0.0-0', hasData: true }
17027 silly addNameRange versions [ 'lru-cache',
17027 silly addNameRange   [ '1.0.1',
17027 silly addNameRange     '1.0.2',
17027 silly addNameRange     '1.0.3',
17027 silly addNameRange     '1.0.4',
17027 silly addNameRange     '1.0.5',
17027 silly addNameRange     '1.0.6',
17027 silly addNameRange     '1.1.0',
17027 silly addNameRange     '1.1.1',
17027 silly addNameRange     '2.0.0',
17027 silly addNameRange     '2.0.1',
17027 silly addNameRange     '2.0.2',
17027 silly addNameRange     '2.0.3',
17027 silly addNameRange     '2.0.4',
17027 silly addNameRange     '2.1.0',
17027 silly addNameRange     '2.2.0',
17027 silly addNameRange     '2.2.1',
17027 silly addNameRange     '2.2.2',
17027 silly addNameRange     '2.2.4',
17027 silly addNameRange     '2.3.0',
17027 silly addNameRange     '2.3.1',
17027 silly addNameRange     '2.5.0' ] ]
17028 verbose addNamed [ 'lru-cache', '2.5.0' ]
17029 verbose addNamed [ '2.5.0', '2.5.0' ]
17030 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
17031 verbose lock lru-cache@2.5.0 /home/lerenzo/.npm/30aa630e-lru-cache-2-5-0.lock
17032 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
17033 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
17034 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
17035 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
17036 http 304 https://registry.npmjs.org/tinycolor
17037 silly registry.get cb [ 304,
17037 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17037 silly registry.get     etag: '"8W12H9TBKF43FVM0CVCT1ZOT"',
17037 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:45 GMT',
17037 silly registry.get     'content-length': '0' } ]
17038 verbose etag tinycolor from cache
17039 silly addNameRange number 2 { name: 'tinycolor', range: '>=0.0.0-0 <1.0.0-0', hasData: true }
17040 silly addNameRange versions [ 'tinycolor', [ '0.0.1' ] ]
17041 verbose addNamed [ 'tinycolor', '0.0.1' ]
17042 verbose addNamed [ '0.0.1', '0.0.1' ]
17043 silly lockFile 8ace0652-tinycolor-0-0-1 tinycolor@0.0.1
17044 verbose lock tinycolor@0.0.1 /home/lerenzo/.npm/8ace0652-tinycolor-0-0-1.lock
17045 silly lockFile 8ace0652-tinycolor-0-0-1 tinycolor@0.0.1
17046 silly lockFile 8ace0652-tinycolor-0-0-1 tinycolor@0.0.1
17047 silly lockFile 8f23180d-tinycolor-0-x tinycolor@0.x
17048 silly lockFile 8f23180d-tinycolor-0-x tinycolor@0.x
17049 http 304 https://registry.npmjs.org/commander
17050 silly registry.get cb [ 304,
17050 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17050 silly registry.get     etag: '"4TCRTLPBQW4XLXUO0M7R72HI4"',
17050 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:45 GMT',
17050 silly registry.get     'content-length': '0' } ]
17051 verbose etag commander from cache
17052 silly addNameRange number 2 { name: 'commander', range: '>=0.6.1-0 <0.7.0-0', hasData: true }
17053 silly addNameRange versions [ 'commander',
17053 silly addNameRange   [ '0.0.1',
17053 silly addNameRange     '0.0.3',
17053 silly addNameRange     '0.0.4',
17053 silly addNameRange     '0.0.5',
17053 silly addNameRange     '0.1.0',
17053 silly addNameRange     '0.2.0',
17053 silly addNameRange     '0.2.1',
17053 silly addNameRange     '0.3.0',
17053 silly addNameRange     '0.3.1',
17053 silly addNameRange     '0.3.2',
17053 silly addNameRange     '0.3.3',
17053 silly addNameRange     '0.4.0',
17053 silly addNameRange     '0.4.1',
17053 silly addNameRange     '0.4.2',
17053 silly addNameRange     '0.4.3',
17053 silly addNameRange     '0.5.0',
17053 silly addNameRange     '0.5.1',
17053 silly addNameRange     '0.6.0',
17053 silly addNameRange     '0.6.1',
17053 silly addNameRange     '0.5.2',
17053 silly addNameRange     '1.0.0',
17053 silly addNameRange     '1.0.1',
17053 silly addNameRange     '1.0.2',
17053 silly addNameRange     '1.0.3',
17053 silly addNameRange     '1.0.4',
17053 silly addNameRange     '1.0.5',
17053 silly addNameRange     '1.1.0',
17053 silly addNameRange     '1.1.1',
17053 silly addNameRange     '1.2.0',
17053 silly addNameRange     '1.3.0',
17053 silly addNameRange     '1.3.1',
17053 silly addNameRange     '1.3.2',
17053 silly addNameRange     '2.0.0',
17053 silly addNameRange     '2.1.0' ] ]
17054 verbose addNamed [ 'commander', '0.6.1' ]
17055 verbose addNamed [ '0.6.1', '0.6.1' ]
17056 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
17057 verbose lock commander@0.6.1 /home/lerenzo/.npm/fa16a2ce-commander-0-6-1.lock
17058 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
17059 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
17060 silly lockFile 5c53196d-commander-0-6-1 commander@~0.6.1
17061 silly lockFile 5c53196d-commander-0-6-1 commander@~0.6.1
17062 http 304 https://registry.npmjs.org/options
17063 silly registry.get cb [ 304,
17063 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17063 silly registry.get     etag: '"ABOD09DZE9FBSZ7TLPXGFT76S"',
17063 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:46 GMT',
17063 silly registry.get     'content-length': '0' } ]
17064 verbose etag options from cache
17065 silly addNameRange number 2 { name: 'options', range: '>=0.0.5', hasData: true }
17066 silly addNameRange versions [ 'options', [ '0.0.1', '0.0.2', '0.0.3', '0.0.4', '0.0.5' ] ]
17067 verbose addNamed [ 'options', '0.0.5' ]
17068 verbose addNamed [ '0.0.5', '0.0.5' ]
17069 silly lockFile dc9591a5-options-0-0-5 options@0.0.5
17070 verbose lock options@0.0.5 /home/lerenzo/.npm/dc9591a5-options-0-0-5.lock
17071 silly lockFile dc9591a5-options-0-0-5 options@0.0.5
17072 silly lockFile dc9591a5-options-0-0-5 options@0.0.5
17073 silly lockFile 073a6bb3-options-0-0-5 options@>=0.0.5
17074 silly lockFile 073a6bb3-options-0-0-5 options@>=0.0.5
17075 http 200 https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz
17076 http 304 https://registry.npmjs.org/nan
17077 silly registry.get cb [ 304,
17077 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17077 silly registry.get     etag: '"ESALFKE8SEQGC5PVJ17ODCBDG"',
17077 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:47 GMT',
17077 silly registry.get     'content-length': '0' } ]
17078 verbose etag nan from cache
17079 silly addNameRange number 2 { name: 'nan', range: '>=0.3.0-0 <0.4.0-0', hasData: true }
17080 silly addNameRange versions [ 'nan',
17080 silly addNameRange   [ '0.3.0-wip',
17080 silly addNameRange     '0.3.0-wip2',
17080 silly addNameRange     '0.3.0',
17080 silly addNameRange     '0.3.1',
17080 silly addNameRange     '0.3.2',
17080 silly addNameRange     '0.4.0',
17080 silly addNameRange     '0.4.1',
17080 silly addNameRange     '0.4.2',
17080 silly addNameRange     '0.4.3',
17080 silly addNameRange     '0.4.4',
17080 silly addNameRange     '0.5.0',
17080 silly addNameRange     '0.5.1',
17080 silly addNameRange     '0.5.2',
17080 silly addNameRange     '0.6.0' ] ]
17081 verbose addNamed [ 'nan', '0.3.2' ]
17082 verbose addNamed [ '0.3.2', '0.3.2' ]
17083 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
17084 verbose lock nan@0.3.2 /home/lerenzo/.npm/98ceedb5-nan-0-3-2.lock
17085 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
17086 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
17087 silly lockFile 7bcce2a2-nan-0-3-0 nan@~0.3.0
17088 silly lockFile 7bcce2a2-nan-0-3-0 nan@~0.3.0
17089 silly resolved [ { author:
17089 silly resolved      { name: 'Einar Otto Stangvik',
17089 silly resolved        email: 'einaros@gmail.com',
17089 silly resolved        url: 'http://2x.io' },
17089 silly resolved     name: 'tinycolor',
17089 silly resolved     description: 'a to-the-point color module for node',
17089 silly resolved     version: '0.0.1',
17089 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/tinycolor.git' },
17089 silly resolved     engines: { node: '>=0.4.0' },
17089 silly resolved     dependencies: {},
17089 silly resolved     devDependencies: {},
17089 silly resolved     main: 'tinycolor',
17089 silly resolved     readme: '# tinycolor #\n\nThis is a no-fuzz, barebone, zero muppetry color module for node.js.',
17089 silly resolved     readmeFilename: 'README.md',
17089 silly resolved     bugs: { url: 'https://github.com/einaros/tinycolor/issues' },
17089 silly resolved     homepage: 'https://github.com/einaros/tinycolor',
17089 silly resolved     _id: 'tinycolor@0.0.1',
17089 silly resolved     _from: 'tinycolor@0.x' },
17089 silly resolved   { name: 'commander',
17089 silly resolved     version: '0.6.1',
17089 silly resolved     description: 'the complete solution for node.js command-line programs',
17089 silly resolved     keywords: [ 'command', 'option', 'parser', 'prompt', 'stdin' ],
17089 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
17089 silly resolved     repository:
17089 silly resolved      { type: 'git',
17089 silly resolved        url: 'https://github.com/visionmedia/commander.js.git' },
17089 silly resolved     dependencies: {},
17089 silly resolved     devDependencies: { should: '>= 0.0.1' },
17089 silly resolved     scripts: { test: 'make test' },
17089 silly resolved     main: 'index',
17089 silly resolved     engines: { node: '>= 0.4.x' },
17089 silly resolved     readme: '# Commander.js\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby\'s [commander](https://github.com/visionmedia/commander).\n\n [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\n Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'commander\');\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-p, --peppers\', \'Add peppers\')\n  .option(\'-P, --pineapple\', \'Add pineapple\')\n  .option(\'-b, --bbq\', \'Add bbq sauce\')\n  .option(\'-c, --cheese [type]\', \'Add the specified type of cheese [marble]\', \'marble\')\n  .parse(process.argv);\n\nconsole.log(\'you ordered a pizza with:\');\nif (program.peppers) console.log(\'  - peppers\');\nif (program.pineapple) console.log(\'  - pineappe\');\nif (program.bbq) console.log(\'  - bbq\');\nconsole.log(\'  - %s cheese\', program.cheese);\n```\n\n Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   Options:\n\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineappe\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -h, --help           output usage information\n\n```\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split(\'..\').map(Number);\n}\n\nfunction list(val) {\n  return val.split(\',\');\n}\n\nprogram\n  .version(\'0.0.1\')\n  .usage(\'[options] <file ...>\')\n  .option(\'-i, --integer <n>\', \'An integer argument\', parseInt)\n  .option(\'-f, --float <n>\', \'A float argument\', parseFloat)\n  .option(\'-r, --range <a>..<b>\', \'A range\', range)\n  .option(\'-l, --list <items>\', \'A list\', list)\n  .option(\'-o, --optional [value]\', \'An optional value\')\n  .parse(process.argv);\n\nconsole.log(\' int: %j\', program.integer);\nconsole.log(\' float: %j\', program.float);\nconsole.log(\' optional: %j\', program.optional);\nprogram.range = program.range || [];\nconsole.log(\' range: %j..%j\', program.range[0], program.range[1]);\nconsole.log(\' list: %j\', program.list);\nconsole.log(\' args: %j\', program.args);\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for "--help". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable "stuff" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'../\');\n\nfunction list(val) {\n  return val.split(\',\').map(Number);\n}\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-f, --foo\', \'enable some foo\')\n  .option(\'-b, --bar\', \'enable some bar\')\n  .option(\'-B, --baz\', \'enable some baz\');\n\n// must be before .parse() since\n// node\'s emit() is immediate\n\nprogram.on(\'--help\', function(){\n  console.log(\'  Examples:\');\n  console.log(\'\');\n  console.log(\'    $ custom-help --help\');\n  console.log(\'    $ custom-help -h\');\n  console.log(\'\');\n});\n\nprogram.parse(process.argv);\n\nconsole.log(\'stuff\');\n```\n\nyielding the following help output:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .prompt(msg, fn)\n\n Single-line prompt:\n\n```js\nprogram.prompt(\'name: \', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Multi-line prompt:\n\n```js\nprogram.prompt(\'description:\', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Coercion:\n\n```js\nprogram.prompt(\'Age: \', Number, function(age){\n  console.log(\'age: %j\', age);\n});\n```\n\n```js\nprogram.prompt(\'Birthdate: \', Date, function(date){\n  console.log(\'date: %s\', date);\n});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password(\'Password: \', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\nPrompt for password with mask char "*":\n\n```js\nprogram.password(\'Password: \', \'*\', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\n## .confirm(msg, fn)\n\n Confirm with the given `msg`:\n\n```js\nprogram.confirm(\'continue? \', function(ok){\n  console.log(\' got %j\', ok);\n});\n```\n\n## .choose(list, fn)\n\n Let the user choose from a `list`:\n\n```js\nvar list = [\'tobi\', \'loki\', \'jane\', \'manny\', \'luna\'];\n\nconsole.log(\'Choose the coolest pet:\');\nprogram.choose(list, function(i){\n  console.log(\'you chose %d "%s"\', i, list[i]);\n});\n```\n\n## Links\n\n - [API documentation](http://visionmedia.github.com/commander.js/)\n - [ascii tables](https://github.com/LearnBoost/cli-table)\n - [progress bars](https://github.com/visionmedia/node-progress)\n - [more progress bars](https://github.com/substack/node-multimeter)\n - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
17089 silly resolved     readmeFilename: 'Readme.md',
17089 silly resolved     bugs: { url: 'https://github.com/visionmedia/commander.js/issues' },
17089 silly resolved     homepage: 'https://github.com/visionmedia/commander.js',
17089 silly resolved     _id: 'commander@0.6.1',
17089 silly resolved     _from: 'commander@~0.6.1' },
17089 silly resolved   { author:
17089 silly resolved      { name: 'Einar Otto Stangvik',
17089 silly resolved        email: 'einaros@gmail.com',
17089 silly resolved        url: 'http://2x.io' },
17089 silly resolved     name: 'options',
17089 silly resolved     description: 'A very light-weight in-code option parsers for node.js.',
17089 silly resolved     version: '0.0.5',
17089 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/options.js.git' },
17089 silly resolved     main: 'lib/options',
17089 silly resolved     scripts: { test: 'make test' },
17089 silly resolved     engines: { node: '>=0.4.0' },
17089 silly resolved     dependencies: {},
17089 silly resolved     devDependencies: { mocha: 'latest' },
17089 silly resolved     readme: '# options.js #\n\nA very light-weight in-code option parsers for node.js.\n\n## License ##\n\n(The MIT License)\n\nCopyright (c) 2012 Einar Otto Stangvik &lt;einaros@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
17089 silly resolved     readmeFilename: 'README.md',
17089 silly resolved     bugs: { url: 'https://github.com/einaros/options.js/issues' },
17089 silly resolved     homepage: 'https://github.com/einaros/options.js',
17089 silly resolved     _id: 'options@0.0.5',
17089 silly resolved     _from: 'options@>=0.0.5' },
17089 silly resolved   { name: 'nan',
17089 silly resolved     version: '0.3.2',
17089 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
17089 silly resolved     main: '.index.js',
17089 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
17089 silly resolved     contributors: [ [Object], [Object], [Object] ],
17089 silly resolved     license: 'MIT',
17089 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making addon development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 0.3.2*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for changelog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true&stars=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n```js\n"dependencies": {\n    ...\n    "nan" : "~0.3.1"\n    ...\n}\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include "nan.h"` in your *.cpp*:\n\n```js\n"include_dirs" : [\n    ...\n    "<!(node -p -e \\"require(\'path\').dirname(require.resolve(\'nan\'))\\")"\n    ...\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include "nan.h"\n// ...\n\nusing namespace v8;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanSymbol("calculateSync"),\n    FunctionTemplate::New(CalculateSync)->GetFunction());\n\n  exports->Set(NanSymbol("calculateAsync"),\n    FunctionTemplate::New(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include "nan.h"\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include "nan.h"\n#include "sync.h"\n// ...\n\nusing namespace v8;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(Number::New(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include "nan.h"\n#include "async.h"\n\n// ...\n\nusing namespace v8;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        Local<Value>::New(Null())\n      , Number::New(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <a href="#api_nan_make_weak"><b><code>NanMakeWeak</code></b></a>\n * <a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_from_v8_string"><b><code>NanFromV8String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_persistent_to_local"><b><code>NanPersistentToLocal</code></b></a>\n * <a href="#api_nan_dispose"><b><code>NanDispose</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_init_persistent"><b><code>NanInitPersistent</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_SETTER`.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_SETTER`.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(type, cbname)\n\nUse `NAN_WEAK_CALLBACK` to declare your V8 WeakReference callbacks. There is an object argument accessible through `NAN_WEAK_CALLBACK_OBJECT`. The `type` argument gives the type of the `data` argument, accessible through `NAN_WEAK_CALLBACK_DATA(type)`.\n\n```c++\nstatic NAN_WEAK_CALLBACK(BufferReference*, WeakCheck) {\n  if (NAN_WEAK_CALLBACK_DATA(BufferReference*)->noLongerNeeded_) {\n    delete NAN_WEAK_CALLBACK_DATA(BufferReference*);\n  } else {\n    // Still in use, revive, prevent GC\n    NanMakeWeak(NAN_WEAK_CALLBACK_OBJECT, NAN_WEAK_CALLBACK_DATA(BufferReference*), &WeakCheck);\n  }\n}\n\n```\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanPersistentToLocal(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(String::NewSymbol("end"))\n```\n\n<a name="api_nan_make_weak"></a>\n### NanMakeWeak(Persistent&lt;T&gt;, parameter, callback)\n\nMake a persistent reference weak.\n\n<a name="api_nan_symbol"></a>\n### String NanSymbol(char *)\n\nThis isn\'t strictly about compatibility, it\'s just an easier way to create string symbol objects (i.e. `String::NewSymbol(x)`), for getting and setting object properties, or names of objects.\n\n```c++\nbool foo = false;\nif (obj->Has(NanSymbol("foo")))\n  foo = optionsObj->Get(NanSymbol("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply return `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_from_v8_string"></a>\n### char* NanFromV8String(Handle&lt;Value&gt;[, enum Nan::Encoding, size_t *, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a `char*` use `NanFromV8String`. It is possible to define an encoding that defaults to `Nan::UTF8` as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `String::HINT_MANY_WRITES_EXPECTED | String::NO_NULL_TERMINATION`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanFromV8String(args[0]);\nchar* decoded = NanFromV8String(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\nchar param_copy[count];\nmemcpy(param_copy, decoded, count);\ndelete[] decoded;\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanSymbol("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanSymbol("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanSymbol("count"), 1024);\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects. You should `return` this call:\n\n```c++\nreturn NanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NAN_WEAK_CALLBACK` and a hint for the garbage collector, when dealing with weak references.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_persistent_to_local"></a>\n### Local&lt;Type&gt; NanPersistentToLocal(Persistent&lt;Type&gt;&)\n\nAside from `FunctionCallbackInfo`, the biggest and most painful change to V8 in Node 0.11 is the many restrictions now placed on `Persistent` handles. They are difficult to assign and difficult to fetch the original value out of.\n\nUse `NanPersistentToLocal` to convert a `Persistent` handle back to a `Local` handle.\n\n```c++\nLocal<Object> handle = NanPersistentToLocal(persistentHandle);\n```\n\n<a href="#api_nan_new_context_handle">\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = FunctionTemplate::New();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_dispose"></a>\n### void NanDispose(Persistent&lt;T&gt; &)\n\nUse `NanDispose` to dispose a `Persistent` handle.\n\n```c++\nNanDispose(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(type, handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(Object, persistentHandle, obj)\n```\n\n<a name="api_nan_init_persistent"></a>\n### NanInitPersistent(type, name, object)\n\nUser `NanInitPersistent` to declare and initialize a new `Persistent` with the supplied object. The assignment operator for `Persistent` is no longer public in Node 0.11, so this macro makes it easier to declare and initializing a new `Persistent`. See <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a> for more information.\n\n```c++\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanInitPersistent(Object, persistentHandle, obj);\n```\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Local<Function>` handles is annoyingly tricky. `NanCallback` makes it easier by taking your `Local` handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = callback = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nLocal<Value> argv[] = {\n  Exception::Error(String::New("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nLocal<Value> argv[] = {\n  Local<Value>::New(Null()),\n  String::New("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use to fetch a local handle to the underlying callback function if you need it.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `char *errmsg` property and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then allocate `errmsg` to to a message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\nprotected:\n  // Set this if there is an error, otherwise it\'s NULL\n  const char *errmsg;\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SavePersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2013 Rod Vagg & NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
17089 silly resolved     readmeFilename: 'README.md',
17089 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
17089 silly resolved     homepage: 'https://github.com/rvagg/nan',
17089 silly resolved     _id: 'nan@0.3.2',
17089 silly resolved     _from: 'nan@~0.3.0' } ]
17090 info install tinycolor@0.0.1 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17091 info install commander@0.6.1 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17092 info install options@0.0.5 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17093 info install nan@0.3.2 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17094 info installOne tinycolor@0.0.1
17095 info installOne commander@0.6.1
17096 info installOne options@0.0.5
17097 info installOne nan@0.3.2
17098 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor unbuild
17099 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander unbuild
17100 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options unbuild
17101 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan unbuild
17102 verbose tar unpack /home/lerenzo/.npm/tinycolor/0.0.1/package.tgz
17103 silly lockFile 28982bdb-odules-ws-node-modules-tinycolor tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor
17104 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor /home/lerenzo/.npm/28982bdb-odules-ws-node-modules-tinycolor.lock
17105 silly lockFile 02296ae6--npm-tinycolor-0-0-1-package-tgz tar:///home/lerenzo/.npm/tinycolor/0.0.1/package.tgz
17106 verbose lock tar:///home/lerenzo/.npm/tinycolor/0.0.1/package.tgz /home/lerenzo/.npm/02296ae6--npm-tinycolor-0-0-1-package-tgz.lock
17107 verbose tar unpack /home/lerenzo/.npm/commander/0.6.1/package.tgz
17108 silly lockFile c7cd4f9c-odules-ws-node-modules-commander tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander
17109 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander /home/lerenzo/.npm/c7cd4f9c-odules-ws-node-modules-commander.lock
17110 silly lockFile ebe55b03--npm-commander-0-6-1-package-tgz tar:///home/lerenzo/.npm/commander/0.6.1/package.tgz
17111 verbose lock tar:///home/lerenzo/.npm/commander/0.6.1/package.tgz /home/lerenzo/.npm/ebe55b03--npm-commander-0-6-1-package-tgz.lock
17112 verbose tar unpack /home/lerenzo/.npm/options/0.0.5/package.tgz
17113 silly lockFile 24179aef--modules-ws-node-modules-options tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options
17114 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options /home/lerenzo/.npm/24179aef--modules-ws-node-modules-options.lock
17115 silly lockFile 25ac5514-zo-npm-options-0-0-5-package-tgz tar:///home/lerenzo/.npm/options/0.0.5/package.tgz
17116 verbose lock tar:///home/lerenzo/.npm/options/0.0.5/package.tgz /home/lerenzo/.npm/25ac5514-zo-npm-options-0-0-5-package-tgz.lock
17117 verbose tar unpack /home/lerenzo/.npm/nan/0.3.2/package.tgz
17118 silly lockFile 6e2cf287-node-modules-ws-node-modules-nan tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan
17119 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan /home/lerenzo/.npm/6e2cf287-node-modules-ws-node-modules-nan.lock
17120 silly lockFile 05afac8f-erenzo-npm-nan-0-3-2-package-tgz tar:///home/lerenzo/.npm/nan/0.3.2/package.tgz
17121 verbose lock tar:///home/lerenzo/.npm/nan/0.3.2/package.tgz /home/lerenzo/.npm/05afac8f-erenzo-npm-nan-0-3-2-package-tgz.lock
17122 silly gunzTarPerm modes [ '755', '644' ]
17123 silly gunzTarPerm modes [ '755', '644' ]
17124 silly gunzTarPerm modes [ '755', '644' ]
17125 silly gunzTarPerm modes [ '755', '644' ]
17126 silly gunzTarPerm extractEntry package.json
17127 silly gunzTarPerm extractEntry package.json
17128 silly gunzTarPerm extractEntry package.json
17129 silly gunzTarPerm extractEntry .npmignore
17130 silly gunzTarPerm extractEntry README.md
17131 silly gunzTarPerm extractEntry .npmignore
17132 silly gunzTarPerm extractEntry index.js
17133 silly gunzTarPerm extractEntry .npmignore
17134 silly gunzTarPerm extractEntry README.md
17135 silly gunzTarPerm extractEntry example.js
17136 silly gunzTarPerm extractEntry tinycolor.js
17137 silly gunzTarPerm extractEntry .travis.yml
17138 silly gunzTarPerm extractEntry History.md
17139 silly gunzTarPerm extractEntry Makefile
17140 silly gunzTarPerm extractEntry lib/options.js
17141 silly gunzTarPerm extractEntry package.json
17142 silly gunzTarPerm extractEntry Makefile
17143 silly gunzTarPerm extractEntry Readme.md
17144 silly gunzTarPerm extractEntry test/options.test.js
17145 silly gunzTarPerm extractEntry test/fixtures/test.conf
17146 silly gunzTarPerm extractEntry README.md
17147 silly gunzTarPerm extractEntry LICENSE
17148 silly gunzTarPerm extractEntry .index.js
17149 silly gunzTarPerm extractEntry nan.h
17150 silly gunzTarPerm extractEntry lib/commander.js
17151 silly lockFile 28982bdb-odules-ws-node-modules-tinycolor tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor
17152 silly lockFile 28982bdb-odules-ws-node-modules-tinycolor tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor
17153 silly lockFile 02296ae6--npm-tinycolor-0-0-1-package-tgz tar:///home/lerenzo/.npm/tinycolor/0.0.1/package.tgz
17154 silly lockFile 02296ae6--npm-tinycolor-0-0-1-package-tgz tar:///home/lerenzo/.npm/tinycolor/0.0.1/package.tgz
17155 info preinstall tinycolor@0.0.1
17156 verbose readDependencies using package.json deps
17157 verbose readDependencies using package.json deps
17158 silly resolved []
17159 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor
17160 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/tinycolor
17161 verbose linkStuff [ true,
17161 verbose linkStuff   '/usr/local/lib/node_modules',
17161 verbose linkStuff   false,
17161 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules' ]
17162 info linkStuff tinycolor@0.0.1
17163 verbose linkBins tinycolor@0.0.1
17164 verbose linkMans tinycolor@0.0.1
17165 verbose rebuildBundles tinycolor@0.0.1
17166 info install tinycolor@0.0.1
17167 info postinstall tinycolor@0.0.1
17168 silly lockFile 24179aef--modules-ws-node-modules-options tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options
17169 silly lockFile 24179aef--modules-ws-node-modules-options tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options
17170 silly lockFile 25ac5514-zo-npm-options-0-0-5-package-tgz tar:///home/lerenzo/.npm/options/0.0.5/package.tgz
17171 silly lockFile 25ac5514-zo-npm-options-0-0-5-package-tgz tar:///home/lerenzo/.npm/options/0.0.5/package.tgz
17172 info preinstall options@0.0.5
17173 verbose readDependencies using package.json deps
17174 verbose readDependencies using package.json deps
17175 silly resolved []
17176 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options
17177 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/options
17178 verbose linkStuff [ true,
17178 verbose linkStuff   '/usr/local/lib/node_modules',
17178 verbose linkStuff   false,
17178 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules' ]
17179 info linkStuff options@0.0.5
17180 verbose linkBins options@0.0.5
17181 verbose linkMans options@0.0.5
17182 verbose rebuildBundles options@0.0.5
17183 info install options@0.0.5
17184 info postinstall options@0.0.5
17185 info trying registry request attempt 2 at 14:13:47
17186 http GET https://registry.npmjs.org/normalize-package-data
17187 silly lockFile c7cd4f9c-odules-ws-node-modules-commander tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander
17188 silly lockFile c7cd4f9c-odules-ws-node-modules-commander tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander
17189 silly lockFile ebe55b03--npm-commander-0-6-1-package-tgz tar:///home/lerenzo/.npm/commander/0.6.1/package.tgz
17190 silly lockFile ebe55b03--npm-commander-0-6-1-package-tgz tar:///home/lerenzo/.npm/commander/0.6.1/package.tgz
17191 info preinstall commander@0.6.1
17192 verbose readDependencies using package.json deps
17193 verbose readDependencies using package.json deps
17194 silly resolved []
17195 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander
17196 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/commander
17197 verbose linkStuff [ true,
17197 verbose linkStuff   '/usr/local/lib/node_modules',
17197 verbose linkStuff   false,
17197 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules' ]
17198 info linkStuff commander@0.6.1
17199 verbose linkBins commander@0.6.1
17200 verbose linkMans commander@0.6.1
17201 verbose rebuildBundles commander@0.6.1
17202 info install commander@0.6.1
17203 info postinstall commander@0.6.1
17204 silly lockFile 6e2cf287-node-modules-ws-node-modules-nan tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan
17205 silly lockFile 6e2cf287-node-modules-ws-node-modules-nan tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan
17206 silly lockFile 05afac8f-erenzo-npm-nan-0-3-2-package-tgz tar:///home/lerenzo/.npm/nan/0.3.2/package.tgz
17207 silly lockFile 05afac8f-erenzo-npm-nan-0-3-2-package-tgz tar:///home/lerenzo/.npm/nan/0.3.2/package.tgz
17208 info preinstall nan@0.3.2
17209 verbose readDependencies using package.json deps
17210 verbose readDependencies using package.json deps
17211 silly resolved []
17212 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan
17213 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules/nan
17214 verbose linkStuff [ true,
17214 verbose linkStuff   '/usr/local/lib/node_modules',
17214 verbose linkStuff   false,
17214 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws/node_modules' ]
17215 info linkStuff nan@0.3.2
17216 verbose linkBins nan@0.3.2
17217 verbose linkMans nan@0.3.2
17218 verbose rebuildBundles nan@0.3.2
17219 info install nan@0.3.2
17220 info postinstall nan@0.3.2
17221 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17222 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/ws
17223 verbose linkStuff [ true,
17223 verbose linkStuff   '/usr/local/lib/node_modules',
17223 verbose linkStuff   false,
17223 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules' ]
17224 info linkStuff ws@0.4.31
17225 verbose linkBins ws@0.4.31
17226 verbose link bins [ { wscat: './bin/wscat' },
17226 verbose link bins   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/preacher-api/node_modules/.bin',
17226 verbose link bins   false ]
17227 verbose linkMans ws@0.4.31
17228 verbose rebuildBundles ws@0.4.31
17229 verbose rebuildBundles [ 'commander', 'nan', 'options', 'tinycolor' ]
17230 info install ws@0.4.31
17231 verbose unsafe-perm in lifecycle false
17232 http 200 https://registry.npmjs.org/async/-/async-0.1.22.tgz
17233 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz
17234 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17235 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package /home/lerenzo/.npm/c1f8d7b3-4885-0-22667591297067702-package.lock
17236 silly lockFile bc6fdbb6-4885-0-22667591297067702-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz
17237 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz /home/lerenzo/.npm/bc6fdbb6-4885-0-22667591297067702-tmp-tgz.lock
17238 silly gunzTarPerm modes [ '755', '644' ]
17239 silly gunzTarPerm extractEntry package.json
17240 silly gunzTarPerm extractEntry .npmignore
17241 silly gunzTarPerm extractEntry README.md
17242 silly gunzTarPerm extractEntry LICENSE
17243 silly gunzTarPerm extractEntry index.js
17244 silly gunzTarPerm extractEntry Makefile
17245 silly gunzTarPerm extractEntry lib/async.js
17246 silly gunzTarPerm extractEntry .gitmodules
17247 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17248 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17249 silly lockFile bc6fdbb6-4885-0-22667591297067702-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz
17250 silly lockFile bc6fdbb6-4885-0-22667591297067702-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/tmp.tgz
17251 verbose tar pack [ '/home/lerenzo/.npm/async/0.1.22/package.tgz',
17251 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package' ]
17252 verbose tarball /home/lerenzo/.npm/async/0.1.22/package.tgz
17253 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17254 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17255 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package /home/lerenzo/.npm/c1f8d7b3-4885-0-22667591297067702-package.lock
17256 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17257 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
17258 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17259 silly lockFile c1f8d7b3-4885-0-22667591297067702-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424885-0.22667591297067702/package
17260 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17261 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17262 silly lockFile f0dcde7d-lerenzo-npm-async-0-1-22-package /home/lerenzo/.npm/async/0.1.22/package
17263 verbose lock /home/lerenzo/.npm/async/0.1.22/package /home/lerenzo/.npm/f0dcde7d-lerenzo-npm-async-0-1-22-package.lock
17264 silly lockFile f0dcde7d-lerenzo-npm-async-0-1-22-package /home/lerenzo/.npm/async/0.1.22/package
17265 silly lockFile f0dcde7d-lerenzo-npm-async-0-1-22-package /home/lerenzo/.npm/async/0.1.22/package
17266 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
17267 silly lockFile 504e0846-lerenzo-npm-async-0-1-22-package tar:///home/lerenzo/.npm/async/0.1.22/package
17268 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package /home/lerenzo/.npm/504e0846-lerenzo-npm-async-0-1-22-package.lock
17269 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17270 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
17271 silly gunzTarPerm modes [ '755', '644' ]
17272 silly gunzTarPerm extractEntry package.json
17273 silly gunzTarPerm extractEntry .npmignore
17274 silly gunzTarPerm extractEntry README.md
17275 silly gunzTarPerm extractEntry LICENSE
17276 silly gunzTarPerm extractEntry index.js
17277 silly gunzTarPerm extractEntry .gitmodules
17278 silly gunzTarPerm extractEntry Makefile
17279 silly gunzTarPerm extractEntry lib/async.js
17280 silly lockFile 504e0846-lerenzo-npm-async-0-1-22-package tar:///home/lerenzo/.npm/async/0.1.22/package
17281 silly lockFile 504e0846-lerenzo-npm-async-0-1-22-package tar:///home/lerenzo/.npm/async/0.1.22/package
17282 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17283 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17284 verbose chmod /home/lerenzo/.npm/async/0.1.22/package.tgz 644
17285 verbose chown /home/lerenzo/.npm/async/0.1.22/package.tgz [ 1000, 1000 ]
17286 silly lockFile d8129da7-npmjs-org-async-async-0-1-22-tgz https://registry.npmjs.org/async/-/async-0.1.22.tgz
17287 silly lockFile d8129da7-npmjs-org-async-async-0-1-22-tgz https://registry.npmjs.org/async/-/async-0.1.22.tgz
17288 silly lockFile 09d21715-async-0-1-22 async@0.1.22
17289 silly lockFile 09d21715-async-0-1-22 async@0.1.22
17290 silly lockFile 463e1c03-async-0-1-x async@0.1.x
17291 silly lockFile 463e1c03-async-0-1-x async@0.1.x
17292 silly resolved [ { name: 'pkginfo',
17292 silly resolved     version: '0.2.3',
17292 silly resolved     description: 'An easy way to expose properties on a module from a package.json',
17292 silly resolved     author: { name: 'Charlie Robbins', email: 'charlie.robbins@gmail.com' },
17292 silly resolved     repository:
17292 silly resolved      { type: 'git',
17292 silly resolved        url: 'http://github.com/indexzero/node-pkginfo.git' },
17292 silly resolved     keywords: [ 'info', 'tools', 'package.json' ],
17292 silly resolved     devDependencies: { vows: '0.6.x' },
17292 silly resolved     main: './lib/pkginfo',
17292 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
17292 silly resolved     engines: { node: '>= 0.4.0' },
17292 silly resolved     readme: '# node-pkginfo\n\nAn easy way to expose properties on a module from a package.json\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing pkginfo\n```\n  [sudo] npm install pkginfo\n```\n\n## Motivation\nHow often when writing node.js modules have you written the following line(s) of code? \n\n* Hard code your version string into your code\n\n``` js\n  exports.version = \'0.1.0\';\n```\n\n* Programmatically expose the version from the package.json\n\n``` js\n  exports.version = JSON.parse(fs.readFileSync(\'/path/to/package.json\', \'utf8\')).version;\n```\n\nIn other words, how often have you wanted to expose basic information from your package.json onto your module programmatically? **WELL NOW YOU CAN!**\n\n## Usage\n\nUsing `pkginfo` is idiot-proof, just require and invoke it. \n\n``` js\n  var pkginfo = require(\'pkginfo\')(module);\n  \n  console.dir(module.exports);\n```\n\nBy invoking the `pkginfo` module all of the properties in your `package.json` file will be automatically exposed on the callee module (i.e. the parent module of `pkginfo`). \n\nHere\'s a sample of the output:\n\n```\n  { name: \'simple-app\',\n    description: \'A test fixture for pkginfo\',\n    version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\',\n    keywords: [ \'test\', \'fixture\' ],\n    main: \'./index.js\',\n    scripts: { test: \'vows test/*-test.js --spec\' },\n    engines: { node: \'>= 0.4.0\' } }\n```\n\n### Expose specific properties\nIf you don\'t want to expose **all** properties on from your `package.json` on your module then simple pass those properties to the `pkginfo` function:\n\n``` js\n  var pkginfo = require(\'pkginfo\')(module, \'version\', \'author\');\n  \n  console.dir(module.exports);\n```\n\n```\n  { version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\' }\n```\n\nIf you\'re looking for further usage see the [examples][0] included in this repository. \n\n## Run Tests\nTests are written in [vows][1] and give complete coverage of all APIs.\n\n```\n  vows test/*-test.js --spec\n```\n\n[0]: https://github.com/indexzero/node-pkginfo/tree/master/examples\n[1]: http://vowsjs.org\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)',
17292 silly resolved     readmeFilename: 'README.md',
17292 silly resolved     bugs: { url: 'https://github.com/indexzero/node-pkginfo/issues' },
17292 silly resolved     homepage: 'https://github.com/indexzero/node-pkginfo',
17292 silly resolved     _id: 'pkginfo@0.2.3',
17292 silly resolved     dist: { shasum: 'bc4d08892eea7e47359d0b3dd256e5349fcd0d1e' },
17292 silly resolved     _from: 'pkginfo@0.2.x',
17292 silly resolved     _resolved: 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz' },
17292 silly resolved   { author:
17292 silly resolved      { name: 'Isaac Z. Schlueter',
17292 silly resolved        email: 'i@izs.me',
17292 silly resolved        url: 'http://blog.izs.me/' },
17292 silly resolved     name: 'ini',
17292 silly resolved     description: 'An ini encoder/decoder for node',
17292 silly resolved     version: '1.1.0',
17292 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/ini.git' },
17292 silly resolved     main: 'ini.js',
17292 silly resolved     scripts: { test: 'tap test/*.js' },
17292 silly resolved     engines: { node: '*' },
17292 silly resolved     dependencies: {},
17292 silly resolved     devDependencies: { tap: '~0.0.9' },
17292 silly resolved     readme: 'An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n    array[] = first value\n    array[] = second value\n    array[] = third value\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require(\'fs\')\n      , ini = require(\'ini\')\n\n    var config = ini.parse(fs.readFileSync(\'./config.ini\', \'utf-8\'))\n\n    config.scope = \'local\'\n    config.database.database = \'use_another_database\'\n    config.paths.default.tmpdir = \'/tmp\'\n    delete config.paths.default.datadir\n    config.paths.default.array.push(\'fourth value\')\n\n    fs.writeFileSync(\'./config_modified.ini\', ini.stringify(config, \'section\'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n    array[] = first value\n    array[] = second value\n    array[] = third value\n    array[] = fourth value\n\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe(\'"unsafe string"\')\n\nwould result in\n\n    "\\"unsafe string\\""\n\n### unsafe(val)\nUnescapes the string `val`\n',
17292 silly resolved     readmeFilename: 'README.md',
17292 silly resolved     bugs: { url: 'https://github.com/isaacs/ini/issues' },
17292 silly resolved     homepage: 'https://github.com/isaacs/ini',
17292 silly resolved     _id: 'ini@1.1.0',
17292 silly resolved     dist: { shasum: 'c83f431157d0eee189c6427cde545b213e936325' },
17292 silly resolved     _from: 'ini@1.x.x',
17292 silly resolved     _resolved: 'https://registry.npmjs.org/ini/-/ini-1.1.0.tgz' },
17292 silly resolved   { name: 'async',
17292 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
17292 silly resolved     main: './index',
17292 silly resolved     author: { name: 'Caolan McMahon' },
17292 silly resolved     version: '0.1.22',
17292 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
17292 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
17292 silly resolved     licenses: [ [Object] ],
17292 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
17292 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
17292 silly resolved     readmeFilename: 'README.md',
17292 silly resolved     homepage: 'https://github.com/caolan/async',
17292 silly resolved     _id: 'async@0.1.22',
17292 silly resolved     dist: { shasum: '16e128d886add7ca553a871f9fcb0cc189befa58' },
17292 silly resolved     _from: 'async@0.1.x',
17292 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.1.22.tgz' } ]
17293 info install pkginfo@0.2.3 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
17294 info install ini@1.1.0 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
17295 info install async@0.1.22 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
17296 info installOne pkginfo@0.2.3
17297 info installOne ini@1.1.0
17298 info installOne async@0.1.22
17299 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo unbuild
17300 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini unbuild
17301 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async unbuild
17302 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
17303 silly lockFile c1dfca16-dules-nconf-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo
17304 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo /home/lerenzo/.npm/c1dfca16-dules-nconf-node-modules-pkginfo.lock
17305 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
17306 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
17307 verbose tar unpack /home/lerenzo/.npm/ini/1.1.0/package.tgz
17308 silly lockFile 23cd2cb6-e-modules-nconf-node-modules-ini tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini
17309 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini /home/lerenzo/.npm/23cd2cb6-e-modules-nconf-node-modules-ini.lock
17310 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
17311 verbose lock tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz /home/lerenzo/.npm/79b88ee3-erenzo-npm-ini-1-1-0-package-tgz.lock
17312 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
17313 silly lockFile b7aed7dd-modules-nconf-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async
17314 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async /home/lerenzo/.npm/b7aed7dd-modules-nconf-node-modules-async.lock
17315 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17316 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
17317 silly gunzTarPerm modes [ '755', '644' ]
17318 silly gunzTarPerm modes [ '755', '644' ]
17319 silly gunzTarPerm modes [ '755', '644' ]
17320 silly gunzTarPerm extractEntry package.json
17321 silly gunzTarPerm extractEntry package.json
17322 silly gunzTarPerm extractEntry package.json
17323 silly gunzTarPerm extractEntry .npmignore
17324 silly gunzTarPerm extractEntry README.md
17325 silly gunzTarPerm extractEntry README.md
17326 silly gunzTarPerm extractEntry LICENSE
17327 silly gunzTarPerm extractEntry .npmignore
17328 silly gunzTarPerm extractEntry README.md
17329 silly gunzTarPerm extractEntry docs/docco.css
17330 silly gunzTarPerm extractEntry docs/pkginfo.html
17331 silly gunzTarPerm extractEntry ini.js
17332 silly gunzTarPerm extractEntry test/bar.js
17333 silly gunzTarPerm extractEntry LICENSE
17334 silly gunzTarPerm extractEntry examples/package.json
17335 silly gunzTarPerm extractEntry index.js
17336 silly gunzTarPerm extractEntry .gitmodules
17337 silly gunzTarPerm extractEntry test/foo.js
17338 silly gunzTarPerm extractEntry test/fixtures/foo.ini
17339 silly gunzTarPerm extractEntry examples/all-properties.js
17340 silly gunzTarPerm extractEntry examples/array-argument.js
17341 silly gunzTarPerm extractEntry examples/multiple-properties.js
17342 silly gunzTarPerm extractEntry examples/object-argument.js
17343 silly lockFile 23cd2cb6-e-modules-nconf-node-modules-ini tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini
17344 silly lockFile 23cd2cb6-e-modules-nconf-node-modules-ini tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini
17345 silly gunzTarPerm extractEntry Makefile
17346 silly gunzTarPerm extractEntry lib/async.js
17347 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
17348 silly lockFile 79b88ee3-erenzo-npm-ini-1-1-0-package-tgz tar:///home/lerenzo/.npm/ini/1.1.0/package.tgz
17349 silly gunzTarPerm extractEntry examples/single-property.js
17350 silly gunzTarPerm extractEntry lib/pkginfo.js
17351 info preinstall ini@1.1.0
17352 verbose readDependencies using package.json deps
17353 verbose readDependencies using package.json deps
17354 silly resolved []
17355 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini
17356 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/ini
17357 verbose linkStuff [ true,
17357 verbose linkStuff   '/usr/local/lib/node_modules',
17357 verbose linkStuff   false,
17357 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules' ]
17358 info linkStuff ini@1.1.0
17359 verbose linkBins ini@1.1.0
17360 verbose linkMans ini@1.1.0
17361 verbose rebuildBundles ini@1.1.0
17362 info install ini@1.1.0
17363 silly gunzTarPerm extractEntry test/pkginfo-test.js
17364 info postinstall ini@1.1.0
17365 silly lockFile c1dfca16-dules-nconf-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo
17366 silly lockFile c1dfca16-dules-nconf-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo
17367 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
17368 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
17369 silly lockFile b7aed7dd-modules-nconf-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async
17370 silly lockFile b7aed7dd-modules-nconf-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async
17371 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17372 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
17373 info preinstall pkginfo@0.2.3
17374 info preinstall async@0.1.22
17375 verbose readDependencies using package.json deps
17376 verbose readDependencies using package.json deps
17377 silly resolved []
17378 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo
17379 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/pkginfo
17380 verbose linkStuff [ true,
17380 verbose linkStuff   '/usr/local/lib/node_modules',
17380 verbose linkStuff   false,
17380 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules' ]
17381 info linkStuff pkginfo@0.2.3
17382 verbose linkBins pkginfo@0.2.3
17383 verbose linkMans pkginfo@0.2.3
17384 verbose rebuildBundles pkginfo@0.2.3
17385 info install pkginfo@0.2.3
17386 verbose readDependencies using package.json deps
17387 verbose readDependencies using package.json deps
17388 silly resolved []
17389 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async
17390 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules/async
17391 verbose linkStuff [ true,
17391 verbose linkStuff   '/usr/local/lib/node_modules',
17391 verbose linkStuff   false,
17391 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf/node_modules' ]
17392 info linkStuff async@0.1.22
17393 verbose linkBins async@0.1.22
17394 verbose linkMans async@0.1.22
17395 verbose rebuildBundles async@0.1.22
17396 info postinstall pkginfo@0.2.3
17397 info install async@0.1.22
17398 info postinstall async@0.1.22
17399 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
17400 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/nconf
17401 verbose linkStuff [ true,
17401 verbose linkStuff   '/usr/local/lib/node_modules',
17401 verbose linkStuff   false,
17401 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules' ]
17402 info linkStuff nconf@0.6.7
17403 verbose linkBins nconf@0.6.7
17404 verbose linkMans nconf@0.6.7
17405 verbose rebuildBundles nconf@0.6.7
17406 verbose rebuildBundles [ 'async', 'ini', 'pkginfo' ]
17407 info install nconf@0.6.7
17408 info postinstall nconf@0.6.7
17409 http 200 https://registry.npmjs.org/load
17410 silly registry.get cb [ 200,
17410 silly registry.get   { vary: 'Accept',
17410 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17410 silly registry.get     etag: '"IU11CIW9BKSHOZSND73W2CPM"',
17410 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:47 GMT',
17410 silly registry.get     'content-type': 'application/json',
17410 silly registry.get     'content-length': '19405' } ]
17411 silly addNameRange number 2 { name: 'load', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
17412 silly addNameRange versions [ 'load',
17412 silly addNameRange   [ '0.0.0',
17412 silly addNameRange     '0.0.1',
17412 silly addNameRange     '0.0.2',
17412 silly addNameRange     '0.0.3',
17412 silly addNameRange     '0.1.0',
17412 silly addNameRange     '0.1.1',
17412 silly addNameRange     '0.1.2',
17412 silly addNameRange     '0.1.3',
17412 silly addNameRange     '0.1.4',
17412 silly addNameRange     '1.0.0' ] ]
17413 verbose addNamed [ 'load', '1.0.0' ]
17414 verbose addNamed [ '1.0.0', '1.0.0' ]
17415 silly lockFile 9fe2265f-load-1-0-0 load@1.0.0
17416 verbose lock load@1.0.0 /home/lerenzo/.npm/9fe2265f-load-1-0-0.lock
17417 silly lockFile 39121c15-ry-npmjs-org-load-load-1-0-0-tgz https://registry.npmjs.org/load/-/load-1.0.0.tgz
17418 verbose lock https://registry.npmjs.org/load/-/load-1.0.0.tgz /home/lerenzo/.npm/39121c15-ry-npmjs-org-load-load-1-0-0-tgz.lock
17419 verbose addRemoteTarball [ 'https://registry.npmjs.org/load/-/load-1.0.0.tgz',
17419 verbose addRemoteTarball   '5d2879314508abbe255eca90c785e0c6e309b4a5' ]
17420 info retry fetch attempt 1 at 14:13:50
17421 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz
17422 http GET https://registry.npmjs.org/load/-/load-1.0.0.tgz
17423 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz
17424 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17425 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package /home/lerenzo/.npm/e04a230c-09804-0-5344019345939159-package.lock
17426 silly lockFile 0176a9c2-09804-0-5344019345939159-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz
17427 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz /home/lerenzo/.npm/0176a9c2-09804-0-5344019345939159-tmp-tgz.lock
17428 silly gunzTarPerm modes [ '755', '644' ]
17429 silly gunzTarPerm extractEntry package.json
17430 silly gunzTarPerm extractEntry .npmignore
17431 silly gunzTarPerm extractEntry README.md
17432 silly gunzTarPerm extractEntry LICENSE
17433 silly gunzTarPerm extractEntry index.js
17434 silly gunzTarPerm extractEntry lib/uri.js
17435 silly gunzTarPerm extractEntry lib/server.js
17436 silly gunzTarPerm extractEntry lib/utils.js
17437 silly gunzTarPerm extractEntry lib/crypto.js
17438 silly gunzTarPerm extractEntry lib/client.js
17439 silly gunzTarPerm extractEntry lib/index.js
17440 silly gunzTarPerm extractEntry images/logo.png
17441 silly gunzTarPerm extractEntry images/hawk.png
17442 silly gunzTarPerm extractEntry .travis.yml
17443 silly gunzTarPerm extractEntry example/usage.js
17444 silly gunzTarPerm extractEntry test/uri.js
17445 silly gunzTarPerm extractEntry test/server.js
17446 silly gunzTarPerm extractEntry test/utils.js
17447 silly gunzTarPerm extractEntry test/crypto.js
17448 silly gunzTarPerm extractEntry test/client.js
17449 silly gunzTarPerm extractEntry test/readme.js
17450 silly gunzTarPerm extractEntry test/index.js
17451 silly gunzTarPerm extractEntry Makefile
17452 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17453 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17454 silly lockFile 0176a9c2-09804-0-5344019345939159-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz
17455 silly lockFile 0176a9c2-09804-0-5344019345939159-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/tmp.tgz
17456 verbose tar pack [ '/home/lerenzo/.npm/hawk/0.10.2/package.tgz',
17456 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package' ]
17457 verbose tarball /home/lerenzo/.npm/hawk/0.10.2/package.tgz
17458 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17459 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17460 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package /home/lerenzo/.npm/e04a230c-09804-0-5344019345939159-package.lock
17461 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17462 verbose lock tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz /home/lerenzo/.npm/d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz.lock
17463 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17464 silly lockFile e04a230c-09804-0-5344019345939159-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572409804-0.5344019345939159/package
17465 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17466 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17467 silly lockFile 212729b2--lerenzo-npm-hawk-0-10-2-package /home/lerenzo/.npm/hawk/0.10.2/package
17468 verbose lock /home/lerenzo/.npm/hawk/0.10.2/package /home/lerenzo/.npm/212729b2--lerenzo-npm-hawk-0-10-2-package.lock
17469 silly lockFile 212729b2--lerenzo-npm-hawk-0-10-2-package /home/lerenzo/.npm/hawk/0.10.2/package
17470 silly lockFile 212729b2--lerenzo-npm-hawk-0-10-2-package /home/lerenzo/.npm/hawk/0.10.2/package
17471 verbose tar unpack /home/lerenzo/.npm/hawk/0.10.2/package.tgz
17472 silly lockFile 0be4e424--lerenzo-npm-hawk-0-10-2-package tar:///home/lerenzo/.npm/hawk/0.10.2/package
17473 verbose lock tar:///home/lerenzo/.npm/hawk/0.10.2/package /home/lerenzo/.npm/0be4e424--lerenzo-npm-hawk-0-10-2-package.lock
17474 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17475 verbose lock tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz /home/lerenzo/.npm/d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz.lock
17476 silly gunzTarPerm modes [ '755', '644' ]
17477 silly gunzTarPerm extractEntry package.json
17478 silly gunzTarPerm extractEntry .npmignore
17479 silly gunzTarPerm extractEntry README.md
17480 silly gunzTarPerm extractEntry LICENSE
17481 silly gunzTarPerm extractEntry index.js
17482 silly gunzTarPerm extractEntry .travis.yml
17483 silly gunzTarPerm extractEntry images/hawk.png
17484 silly gunzTarPerm extractEntry images/logo.png
17485 silly gunzTarPerm extractEntry Makefile
17486 silly gunzTarPerm extractEntry lib/client.js
17487 silly gunzTarPerm extractEntry lib/crypto.js
17488 silly gunzTarPerm extractEntry lib/index.js
17489 silly gunzTarPerm extractEntry lib/server.js
17490 silly gunzTarPerm extractEntry lib/uri.js
17491 silly gunzTarPerm extractEntry lib/utils.js
17492 silly gunzTarPerm extractEntry test/client.js
17493 silly gunzTarPerm extractEntry test/crypto.js
17494 silly gunzTarPerm extractEntry test/index.js
17495 silly gunzTarPerm extractEntry test/readme.js
17496 silly gunzTarPerm extractEntry test/server.js
17497 silly gunzTarPerm extractEntry test/uri.js
17498 silly gunzTarPerm extractEntry test/utils.js
17499 silly gunzTarPerm extractEntry example/usage.js
17500 silly lockFile 0be4e424--lerenzo-npm-hawk-0-10-2-package tar:///home/lerenzo/.npm/hawk/0.10.2/package
17501 silly lockFile 0be4e424--lerenzo-npm-hawk-0-10-2-package tar:///home/lerenzo/.npm/hawk/0.10.2/package
17502 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17503 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17504 verbose chmod /home/lerenzo/.npm/hawk/0.10.2/package.tgz 644
17505 verbose chown /home/lerenzo/.npm/hawk/0.10.2/package.tgz [ 1000, 1000 ]
17506 silly lockFile 98c82a5a-y-npmjs-org-hawk-hawk-0-10-2-tgz https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz
17507 silly lockFile 98c82a5a-y-npmjs-org-hawk-hawk-0-10-2-tgz https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz
17508 silly lockFile 887f3c04-hawk-0-10-2 hawk@0.10.2
17509 silly lockFile 887f3c04-hawk-0-10-2 hawk@0.10.2
17510 silly lockFile f84498ae-hawk-0-10-2 hawk@~0.10.2
17511 silly lockFile f84498ae-hawk-0-10-2 hawk@~0.10.2
17512 silly resolved [ { name: 'node-uuid',
17512 silly resolved     description: 'Rigorous implementation of RFC4122 (v1 and v4) UUIDs.',
17512 silly resolved     url: 'http://github.com/broofa/node-uuid',
17512 silly resolved     keywords: [ 'uuid', 'guid', 'rfc4122' ],
17512 silly resolved     author: { name: 'Robert Kieffer', email: 'robert@broofa.com' },
17512 silly resolved     contributors: [ [Object] ],
17512 silly resolved     lib: '.',
17512 silly resolved     main: './uuid.js',
17512 silly resolved     repository: { type: 'git', url: 'https://github.com/broofa/node-uuid.git' },
17512 silly resolved     version: '1.4.1',
17512 silly resolved     readme: '# node-uuid\n\nSimple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.\n\nFeatures:\n\n* Generate RFC4122 version 1 or version 4 UUIDs\n* Runs in node.js and all browsers.\n* Registered as a [ComponentJS](https://github.com/component/component) [component](https://github.com/component/component/wiki/Components) (\'broofa/node-uuid\').\n* Cryptographically strong random # generation on supporting platforms\n* 1.1K minified and gzip\'ed  (Want something smaller?  Check this [crazy shit](https://gist.github.com/982883) out! )\n* [Annotated source code](http://broofa.github.com/node-uuid/docs/uuid.html)\n\n## Getting Started\n\nInstall it in your browser:\n\n```html\n<script src="uuid.js"></script>\n```\n\nOr in node.js:\n\n```\nnpm install node-uuid\n```\n\n```javascript\nvar uuid = require(\'node-uuid\');\n```\n\nThen create some ids ...\n\n```javascript\n// Generate a v1 (time-based) id\nuuid.v1(); // -> \'6c84fb90-12c4-11e1-840d-7b25c5ee775a\'\n\n// Generate a v4 (random) id\nuuid.v4(); // -> \'110ec58a-a0f2-4ac4-8393-c866d813b8d1\'\n```\n\n## API\n\n### uuid.v1([`options` [, `buffer` [, `offset`]]])\n\nGenerate and return a RFC4122 v1 (timestamp-based) UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `node` - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.\n  * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.\n  * `msecs` - (Number | Date) Time in milliseconds since unix Epoch.  Default: The current time is used.\n  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nNotes:\n\n1. The randomly generated node id is only guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuid.v1({\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date(\'2011-11-01\').getTime(),\n  nsecs: 5678\n});   // -> "710b962e-041c-11e1-9234-0123456789ab"\n```\n\nExample: In-place generation of two binary IDs\n\n```javascript\n// Generate two ids in an array\nvar arr = new Array(32); // -> []\nuuid.v1(null, arr, 0);   // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\nuuid.v1(null, arr, 16);  // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\n\n// Optionally use uuid.unparse() to get stringify the ids\nuuid.unparse(buffer);    // -> \'02a2ce90-1432-11e1-8558-0b488e4fc115\'\nuuid.unparse(buffer, 16) // -> \'02a31cb0-1432-11e1-8558-0b488e4fc115\'\n```\n\n### uuid.v4([`options` [, `buffer` [, `offset`]]])\n\nGenerate and return a RFC4122 v4 UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `random` - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values\n  * `rng` - (Function) Random # generator to use.  Set to one of the built-in generators - `uuid.mathRNG` (all platforms), `uuid.nodeRNG` (node.js only), `uuid.whatwgRNG` (WebKit only) - or a custom function that returns an array[16] of byte values.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuid.v4({\n  random: [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n});\n// -> "109156be-c4fb-41ea-b1b4-efe1671c5836"\n```\n\nExample: Generate two IDs in a single buffer\n\n```javascript\nvar buffer = new Array(32); // (or \'new Buffer\' in node.js)\nuuid.v4(null, buffer, 0);\nuuid.v4(null, buffer, 16);\n```\n\n### uuid.parse(id[, buffer[, offset]])\n### uuid.unparse(buffer[, offset])\n\nParse and unparse UUIDs\n\n  * `id` - (String) UUID(-like) string\n  * `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used\n  * `offset` - (Number) Starting index in `buffer` at which to begin writing. Default: 0\n\nExample parsing and unparsing a UUID string\n\n```javascript\nvar bytes = uuid.parse(\'797ff043-11eb-11e1-80d6-510998755d10\'); // -> <Buffer 79 7f f0 43 11 eb 11 e1 80 d6 51 09 98 75 5d 10>\nvar string = uuid.unparse(bytes); // -> \'797ff043-11eb-11e1-80d6-510998755d10\'\n```\n\n### uuid.noConflict()\n\n(Browsers only) Set `uuid` property back to it\'s previous value.\n\nReturns the node-uuid object.\n\nExample:\n\n```javascript\nvar myUuid = uuid.noConflict();\nmyUuid.v1(); // -> \'6c84fb90-12c4-11e1-840d-7b25c5ee775a\'\n```\n\n## Deprecated APIs\n\nSupport for the following v1.2 APIs is available in v1.3, but is deprecated and will be removed in the next major version.\n\n### uuid([format [, buffer [, offset]]])\n\nuuid() has become uuid.v4(), and the `format` argument is now implicit in the `buffer` argument. (i.e. if you specify a buffer, the format is assumed to be binary).\n\n### uuid.BufferClass\n\nThe class of container created when generating binary uuid data if no buffer argument is specified.  This is expected to go away, with no replacement API.\n\n## Testing\n\nIn node.js\n\n```\n> cd test\n> node test.js\n```\n\nIn Browser\n\n```\nopen test/test.html\n```\n\n### Benchmarking\n\nRequires node.js\n\n```\nnpm install uuid uuid-js\nnode benchmark/benchmark.js\n```\n\nFor a more complete discussion of node-uuid performance, please see the `benchmark/README.md` file, and the [benchmark wiki](https://github.com/broofa/node-uuid/wiki/Benchmark)\n\nFor browser performance [checkout the JSPerf tests](http://jsperf.com/node-uuid-performance).\n\n## Release notes\n\n### 1.4.0\n\n* Improved module context detection\n* Removed public RNG functions\n\n### 1.3.2\n\n* Improve tests and handling of v1() options (Issue #24)\n* Expose RNG option to allow for perf testing with different generators\n\n### 1.3.0\n\n* Support for version 1 ids, thanks to [@ctavan](https://github.com/ctavan)!\n* Support for node.js crypto API\n* De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code\n',
17512 silly resolved     readmeFilename: 'README.md',
17512 silly resolved     bugs: { url: 'https://github.com/broofa/node-uuid/issues' },
17512 silly resolved     homepage: 'https://github.com/broofa/node-uuid',
17512 silly resolved     _id: 'node-uuid@1.4.1',
17512 silly resolved     dist: { shasum: 'ebcc5c713c080b466142b080f0debc063b42e125' },
17512 silly resolved     _from: 'node-uuid@~1.4.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Mikeal Rogers',
17512 silly resolved        email: 'mikeal.rogers@gmail.com',
17512 silly resolved        url: 'http://www.futurealoof.com' },
17512 silly resolved     name: 'cookie-jar',
17512 silly resolved     description: 'Cookie Jar. Originally pulled form tobi, maintained as vendor in request, now a standalone module.',
17512 silly resolved     version: '0.2.0',
17512 silly resolved     repository: { url: 'https://github.com/mikeal/cookie-jar' },
17512 silly resolved     main: 'index.js',
17512 silly resolved     scripts: { test: 'node tests/run.js' },
17512 silly resolved     dependencies: {},
17512 silly resolved     devDependencies: {},
17512 silly resolved     optionalDependencies: {},
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     bugs: { url: 'https://github.com/mikeal/cookie-jar/issues' },
17512 silly resolved     readme: 'ERROR: No README data found!',
17512 silly resolved     homepage: 'https://github.com/mikeal/cookie-jar',
17512 silly resolved     _id: 'cookie-jar@0.2.0',
17512 silly resolved     dist: { shasum: '8f0218cad490c99e306c7f768d7135728234d2bc' },
17512 silly resolved     _from: 'cookie-jar@~0.2.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.2.0.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Mikeal Rogers',
17512 silly resolved        email: 'mikeal.rogers@gmail.com',
17512 silly resolved        url: 'http://www.futurealoof.com' },
17512 silly resolved     name: 'aws-sign',
17512 silly resolved     description: 'AWS signing. Originally pulled from LearnBoost/knox, maintained as vendor in request, now a standalone module.',
17512 silly resolved     version: '0.2.0',
17512 silly resolved     repository: { url: 'https://github.com/mikeal/aws-sign' },
17512 silly resolved     main: 'index.js',
17512 silly resolved     dependencies: {},
17512 silly resolved     devDependencies: {},
17512 silly resolved     optionalDependencies: {},
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     bugs: { url: 'https://github.com/mikeal/aws-sign/issues' },
17512 silly resolved     readme: 'ERROR: No README data found!',
17512 silly resolved     homepage: 'https://github.com/mikeal/aws-sign',
17512 silly resolved     _id: 'aws-sign@0.2.0',
17512 silly resolved     dist: { shasum: '2b93c83e3a36f69f498c50170e01b1d2b1fe73a1' },
17512 silly resolved     _from: 'aws-sign@~0.2.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/aws-sign/-/aws-sign-0.2.0.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Robert Kieffer',
17512 silly resolved        email: 'robert@broofa.com',
17512 silly resolved        url: 'http://github.com/broofa' },
17512 silly resolved     contributors: [ [Object] ],
17512 silly resolved     dependencies: {},
17512 silly resolved     description: 'A comprehensive library for mime-type mapping',
17512 silly resolved     devDependencies: {},
17512 silly resolved     keywords: [ 'util', 'mime' ],
17512 silly resolved     main: 'mime.js',
17512 silly resolved     name: 'mime',
17512 silly resolved     repository: { url: 'https://github.com/broofa/node-mime', type: 'git' },
17512 silly resolved     version: '1.2.11',
17512 silly resolved     readme: '# mime\n\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last \'/\' or \'.\').  E.g.\n\n    var mime = require(\'mime\');\n\n    mime.lookup(\'/path/to/file.txt\');         // => \'text/plain\'\n    mime.lookup(\'file.txt\');                  // => \'text/plain\'\n    mime.lookup(\'.TXT\');                      // => \'text/plain\'\n    mime.lookup(\'htm\');                       // => \'text/html\'\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n    mime.extension(\'text/html\');                 // => \'html\'\n    mime.extension(\'application/octet-stream\');  // => \'bin\'\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n    mime.charsets.lookup(\'text/plain\');        // => \'UTF-8\'\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n    mime.define({\n        \'text/x-some-format\': [\'x-sf\', \'x-sft\', \'x-sfml\'],\n        \'application/x-my-type\': [\'x-mt\', \'x-mtt\'],\n        // etc ...\n    });\n\n    mime.lookup(\'x-sft\');                 // => \'text/x-some-format\'\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n    mime.extension(\'text/x-some-format\'); // => \'x-sf\'\n\n### mime.load(filepath)\n\nLoad mappings from an Apache ".types" format file\n\n    mime.load(\'./my_project.types\');\n\nThe .types file format is simple -  See the `types` dir for examples.\n',
17512 silly resolved     readmeFilename: 'README.md',
17512 silly resolved     bugs: { url: 'https://github.com/broofa/node-mime/issues' },
17512 silly resolved     homepage: 'https://github.com/broofa/node-mime',
17512 silly resolved     _id: 'mime@1.2.11',
17512 silly resolved     _from: 'mime@~1.2.9' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Mikeal Rogers',
17512 silly resolved        email: 'mikeal.rogers@gmail.com',
17512 silly resolved        url: 'http://www.futurealoof.com' },
17512 silly resolved     name: 'oauth-sign',
17512 silly resolved     description: 'OAuth 1 signing. Formerly a vendor lib in mikeal/request, now a standalone module.',
17512 silly resolved     version: '0.2.0',
17512 silly resolved     repository: { url: 'https://github.com/mikeal/oauth-sign' },
17512 silly resolved     main: 'index.js',
17512 silly resolved     dependencies: {},
17512 silly resolved     devDependencies: {},
17512 silly resolved     optionalDependencies: {},
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     scripts: { test: 'node test.js' },
17512 silly resolved     bugs: { url: 'https://github.com/mikeal/oauth-sign/issues' },
17512 silly resolved     readme: 'ERROR: No README data found!',
17512 silly resolved     homepage: 'https://github.com/mikeal/oauth-sign',
17512 silly resolved     _id: 'oauth-sign@0.2.0',
17512 silly resolved     dist: { shasum: 'c0c4a2074e9fc2681767f4a3a49418c733f54c7e' },
17512 silly resolved     _from: 'oauth-sign@~0.2.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.2.0.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Felix Geisendörfer',
17512 silly resolved        email: 'felix@debuggable.com',
17512 silly resolved        url: 'http://debuggable.com/' },
17512 silly resolved     name: 'form-data',
17512 silly resolved     description: 'A module to create readable `"multipart/form-data"` streams.  Can be used to submit forms and file uploads to other web applications.',
17512 silly resolved     version: '0.0.10',
17512 silly resolved     repository:
17512 silly resolved      { type: 'git',
17512 silly resolved        url: 'git://github.com/felixge/node-form-data.git' },
17512 silly resolved     main: './lib/form_data',
17512 silly resolved     scripts: { test: 'node test/run.js' },
17512 silly resolved     engines: { node: '>= 0.6' },
17512 silly resolved     dependencies: { 'combined-stream': '~0.0.4', mime: '~1.2.2', async: '~0.2.7' },
17512 silly resolved     devDependencies:
17512 silly resolved      { fake: '~0.2.1',
17512 silly resolved        far: '~0.0.7',
17512 silly resolved        formidable: '~1.0.13',
17512 silly resolved        request: '~2.16.6' },
17512 silly resolved     readme: '# Form-Data [![Build Status](https://travis-ci.org/alexindigo/node-form-data.png?branch=master)](https://travis-ci.org/alexindigo/node-form-data) [![Dependency Status](https://gemnasium.com/alexindigo/node-form-data.png)](https://gemnasium.com/alexindigo/node-form-data)\n\nA module to create readable `"multipart/form-data"` streams.  Can be used to\nsubmit forms and file uploads to other web applications.\n\nThe API of this module is inspired by the\n[XMLHttpRequest-2 FormData Interface][xhr2-fd].\n\n[xhr2-fd]: http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface\n\n## Install\n\n```\nnpm install form-data\n```\n\n## Usage\n\nIn this example we are constructing a form with 3 fields that contain a string,\na buffer and a file stream.\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar fs = require(\'fs\');\n\nvar form = new FormData();\nform.append(\'my_field\', \'my value\');\nform.append(\'my_buffer\', new Buffer(10));\nform.append(\'my_file\', fs.createReadStream(\'/foo/bar.jpg\'));\n```\n\nAlso you can use http-response stream:\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar http = require(\'http\');\n\nvar form = new FormData();\n\nhttp.request(\'http://nodejs.org/images/logo.png\', function(response) {\n  form.append(\'my_field\', \'my value\');\n  form.append(\'my_buffer\', new Buffer(10));\n  form.append(\'my_logo\', response);\n});\n```\n\nOr @mikeal\'s request stream:\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar request = require(\'request\');\n\nvar form = new FormData();\n\nform.append(\'my_field\', \'my value\');\nform.append(\'my_buffer\', new Buffer(10));\nform.append(\'my_logo\', request(\'http://nodejs.org/images/logo.png\'));\n```\n\nIn order to submit this form to a web application, you can use node\'s http\nclient interface:\n\n``` javascript\nvar http = require(\'http\');\n\nvar request = http.request({\n  method: \'post\',\n  host: \'example.org\',\n  path: \'/upload\',\n  headers: form.getHeaders()\n});\n\nform.pipe(request);\n\nrequest.on(\'response\', function(res) {\n  console.log(res.statusCode);\n});\n```\n\nOr if you would prefer the `\'Content-Length\'` header to be set for you:\n\n``` javascript\nform.submit(\'example.org/upload\', function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\nTo use custom headers and pre-known length in parts:\n\n``` javascript\nvar CRLF = \'\\r\\n\';\nvar form = new FormData();\n\nvar options = {\n  header: CRLF + \'--\' + form.getBoundary() + CRLF + \'X-Custom-Header: 123\' + CRLF + CRLF,\n  knownLength: 1\n};\n\nform.append(\'my_buffer\', buffer, options);\n\nform.submit(\'http://example.com/\', function(err, res) {\n  if (err) throw err;\n  console.log(\'Done\');\n});\n```\n\nForm-Data can recognize and fetch all the required information from common types of streams (fs.readStream, http.response and mikeal\'s request), for some other types of streams you\'d need to provide "file"-related information manually:\n\n``` javascript\nsomeModule.stream(function(err, stdout, stderr) {\n  if (err) throw err;\n\n  var form = new FormData();\n\n  form.append(\'file\', stdout, {\n    filename: \'unicycle.jpg\',\n    contentType: \'image/jpg\',\n    knownLength: 19806\n  });\n\n  form.submit(\'http://example.com/\', function(err, res) {\n    if (err) throw err;\n    console.log(\'Done\');\n  });\n});\n```\n\nFor edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to `form.submit()` as first parameter:\n\n``` javascript\nform.submit({\n  host: \'example.com\',\n  path: \'/probably.php?extra=params\',\n  auth: \'username:password\'\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n## TODO\n\n- Add new streams (0.10) support and try really hard not to break it for 0.8.x.\n\n## License\n\nForm-Data is licensed under the MIT license.\n',
17512 silly resolved     readmeFilename: 'Readme.md',
17512 silly resolved     bugs: { url: 'https://github.com/felixge/node-form-data/issues' },
17512 silly resolved     homepage: 'https://github.com/felixge/node-form-data',
17512 silly resolved     _id: 'form-data@0.0.10',
17512 silly resolved     dist: { shasum: '3bf4aac9dfc873c1be5bfc9262e1890a7ee2a72e' },
17512 silly resolved     _from: 'form-data@~0.0.3',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/form-data/-/form-data-0.0.10.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Mikeal Rogers',
17512 silly resolved        email: 'mikeal.rogers@gmail.com',
17512 silly resolved        url: 'http://www.futurealoof.com' },
17512 silly resolved     name: 'tunnel-agent',
17512 silly resolved     description: 'HTTP proxy tunneling agent. Formerly part of mikeal/request, now a standalone module.',
17512 silly resolved     version: '0.2.0',
17512 silly resolved     repository: { url: 'https://github.com/mikeal/tunnel-agent' },
17512 silly resolved     main: 'index.js',
17512 silly resolved     dependencies: {},
17512 silly resolved     devDependencies: {},
17512 silly resolved     optionalDependencies: {},
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     bugs: { url: 'https://github.com/mikeal/tunnel-agent/issues' },
17512 silly resolved     readme: 'ERROR: No README data found!',
17512 silly resolved     homepage: 'https://github.com/mikeal/tunnel-agent',
17512 silly resolved     _id: 'tunnel-agent@0.2.0',
17512 silly resolved     dist: { shasum: '21a1a7ca01a5686d809a8b9630faae159b05b4ca' },
17512 silly resolved     _from: 'tunnel-agent@~0.2.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.2.0.tgz' },
17512 silly resolved   { name: 'json-stringify-safe',
17512 silly resolved     version: '3.0.0',
17512 silly resolved     description: 'Like JSON.stringify, but doesn\'t blow up on circular refs',
17512 silly resolved     main: 'stringify.js',
17512 silly resolved     scripts: { test: 'node test.js' },
17512 silly resolved     repository:
17512 silly resolved      { type: 'git',
17512 silly resolved        url: 'git://github.com/isaacs/json-stringify-safe' },
17512 silly resolved     keywords: [ 'json', 'stringify', 'circular', 'safe' ],
17512 silly resolved     author:
17512 silly resolved      { name: 'Isaac Z. Schlueter',
17512 silly resolved        email: 'i@izs.me',
17512 silly resolved        url: 'http://blog.izs.me' },
17512 silly resolved     license: 'BSD',
17512 silly resolved     readmeFilename: 'README.md',
17512 silly resolved     readme: '# json-stringify-safe\n\nLike JSON.stringify, but doesn\'t throw on circular references.\n\n## Usage\n\nTakes the same arguments as `JSON.stringify`.\n\n```javascript\nvar stringify = require(\'json-stringify-safe\');\nvar circularObj = {};\ncircularObj.circularRef = circularObj;\ncircularObj.list = [ circularObj, circularObj ];\nconsole.log(stringify(circularObj, null, 2));\n```\n\nOutput:\n\n```json\n{\n  "circularRef": "[Circular]",\n  "list": [\n    "[Circular]",\n    "[Circular]"\n  ]\n}\n```\n',
17512 silly resolved     bugs: { url: 'https://github.com/isaacs/json-stringify-safe/issues' },
17512 silly resolved     homepage: 'https://github.com/isaacs/json-stringify-safe',
17512 silly resolved     _id: 'json-stringify-safe@3.0.0',
17512 silly resolved     dist: { shasum: '6e3dfeb7f930e969efe3ca9f2deadce9021d2c66' },
17512 silly resolved     _from: 'json-stringify-safe@~3.0.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-3.0.0.tgz' },
17512 silly resolved   { author:
17512 silly resolved      { name: 'Mikeal Rogers',
17512 silly resolved        email: 'mikeal.rogers@gmail.com',
17512 silly resolved        url: 'http://www.futurealoof.com' },
17512 silly resolved     name: 'forever-agent',
17512 silly resolved     description: 'HTTP Agent that keeps socket connections alive between keep-alive requests. Formerly part of mikeal/request, now a standalone module.',
17512 silly resolved     version: '0.2.0',
17512 silly resolved     repository: { url: 'https://github.com/mikeal/forever-agent' },
17512 silly resolved     main: 'index.js',
17512 silly resolved     dependencies: {},
17512 silly resolved     devDependencies: {},
17512 silly resolved     optionalDependencies: {},
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     bugs: { url: 'https://github.com/mikeal/forever-agent/issues' },
17512 silly resolved     readme: 'ERROR: No README data found!',
17512 silly resolved     homepage: 'https://github.com/mikeal/forever-agent',
17512 silly resolved     _id: 'forever-agent@0.2.0',
17512 silly resolved     dist: { shasum: '96c177c092278eb645457990478cba962d889df2' },
17512 silly resolved     _from: 'forever-agent@~0.2.0',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/forever-agent/-/forever-agent-0.2.0.tgz' },
17512 silly resolved   { name: 'qs',
17512 silly resolved     description: 'querystring parser',
17512 silly resolved     version: '0.5.6',
17512 silly resolved     keywords: [ 'query string', 'parser', 'component' ],
17512 silly resolved     repository:
17512 silly resolved      { type: 'git',
17512 silly resolved        url: 'git://github.com/visionmedia/node-querystring.git' },
17512 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*' },
17512 silly resolved     component: { scripts: [Object] },
17512 silly resolved     author:
17512 silly resolved      { name: 'TJ Holowaychuk',
17512 silly resolved        email: 'tj@vision-media.ca',
17512 silly resolved        url: 'http://tjholowaychuk.com' },
17512 silly resolved     main: 'index',
17512 silly resolved     engines: { node: '*' },
17512 silly resolved     readme: '# node-querystring\n\n  query string parser for node and the browser supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others.\n\n## Installation\n\n    $ npm install qs\n\n## Examples\n\n```js\nvar qs = require(\'qs\');\n\nqs.parse(\'user[name][first]=Tobi&user[email]=tobi@learnboost.com\');\n// => { user: { name: { first: \'Tobi\' }, email: \'tobi@learnboost.com\' } }\n\nqs.stringify({ user: { name: \'Tobi\', email: \'tobi@learnboost.com\' }})\n// => user[name]=Tobi&user[email]=tobi%40learnboost.com\n```\n\n## Testing\n\nInstall dev dependencies:\n\n    $ npm install -d\n\nand execute:\n\n    $ make test\n\nbrowser:\n\n    $ open test/browser/index.html\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
17512 silly resolved     readmeFilename: 'Readme.md',
17512 silly resolved     bugs: { url: 'https://github.com/visionmedia/node-querystring/issues' },
17512 silly resolved     homepage: 'https://github.com/visionmedia/node-querystring',
17512 silly resolved     _id: 'qs@0.5.6',
17512 silly resolved     dist: { shasum: 'cbd0d6a73bc48d151895bfff0cd17c4414ceccf7' },
17512 silly resolved     _from: 'qs@~0.5.4',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/qs/-/qs-0.5.6.tgz' },
17512 silly resolved   { name: 'hawk',
17512 silly resolved     description: 'HTTP Hawk Authentication Scheme',
17512 silly resolved     version: '0.10.2',
17512 silly resolved     author:
17512 silly resolved      { name: 'Eran Hammer',
17512 silly resolved        email: 'eran@hueniverse.com',
17512 silly resolved        url: 'http://hueniverse.com' },
17512 silly resolved     contributors: [],
17512 silly resolved     repository: { type: 'git', url: 'git://github.com/hueniverse/hawk' },
17512 silly resolved     main: 'index',
17512 silly resolved     keywords: [ 'http', 'authentication', 'scheme', 'hawk' ],
17512 silly resolved     engines: { node: '0.8.x' },
17512 silly resolved     dependencies:
17512 silly resolved      { hoek: '0.7.x',
17512 silly resolved        boom: '0.3.x',
17512 silly resolved        cryptiles: '0.1.x',
17512 silly resolved        sntp: '0.1.x' },
17512 silly resolved     devDependencies: { lab: '0.0.x', 'complexity-report': '0.x.x' },
17512 silly resolved     scripts: { test: 'make test-cov' },
17512 silly resolved     licenses: [ [Object] ],
17512 silly resolved     readme: '![hawk Logo](https://raw.github.com/hueniverse/hawk/master/images/hawk.png)\r\n\r\n<img align="right" src="https://raw.github.com/hueniverse/hawk/master/images/logo.png" /> **Hawk** is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial\r\nHTTP request cryptographic verification. For more complex use cases such as access delegation, see [Oz](https://github.com/hueniverse/oz).\r\n\r\nCurrent version: **0.10.1**\r\n\r\n[![Build Status](https://secure.travis-ci.org/hueniverse/hawk.png)](http://travis-ci.org/hueniverse/hawk)\r\n\r\n# Table of Content\r\n\r\n- [**Introduction**](#introduction)\r\n  - [Replay Protection](#replay-protection)\r\n  - [Usage Example](#usage-example)\r\n  - [Protocol Example](#protocol-example)\r\n    - [Payload Validation](#payload-validation)\r\n    - [Response Payload Validation](#response-payload-validation)\r\n<p></p>\r\n- [**Single URI Authorization**](#single-uri-authorization)\r\n  - [Usage Example](#bewit-usage-example)\r\n<p></p>\r\n- [**Security Considerations**](#security-considerations)\r\n  - [MAC Keys Transmission](#mac-keys-transmission)\r\n  - [Confidentiality of Requests](#confidentiality-of-requests)\r\n  - [Spoofing by Counterfeit Servers](#spoofing-by-counterfeit-servers)\r\n  - [Plaintext Storage of Credentials](#plaintext-storage-of-credentials)\r\n  - [Entropy of Keys](#entropy-of-keys)\r\n  - [Coverage Limitations](#coverage-limitations)\r\n  - [Future Time Manipulation](#future-time-manipulation)\r\n  - [Client Clock Poisoning](#client-clock-poisoning)\r\n  - [Bewit Limitations](#bewit-limitations)\r\n<p></p>\r\n- [**Frequently Asked Questions**](#frequently-asked-questions)\r\n<p></p>\r\n- [**Acknowledgements**](#acknowledgements)\r\n\r\n# Introduction\r\n\r\n**Hawk** is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with\r\npartial cryptographic verification of the request and response, covering the HTTP method, request URI, host,\r\nand optionally the request payload.\r\n\r\nSimilar to the HTTP [Digest access authentication schemes](http://www.ietf.org/rfc/rfc2617.txt), **Hawk** uses a set of\r\nclient credentials which include an identifier (e.g. username) and key (e.g. password). Likewise, just as with the Digest scheme,\r\nthe key is never included in authenticated requests. Instead, it is used to calculate a request MAC value which is\r\nincluded in its place.\r\n\r\nHowever, **Hawk** has several differences from Digest. In particular, while both use a nonce to limit the possibility of\r\nreplay attacks, in **Hawk** the client generates the nonce and uses it in combination with a timestamp, leading to less\r\n"chattiness" (interaction with the server).\r\n\r\nAlso unlike Digest, this scheme is not intended to protect the key itself (the password in Digest) because\r\nthe client and server must both have access to the key material in the clear.\r\n\r\nThe primary design goals of this scheme are to:\r\n* simplify and improve HTTP authentication for services that are unwilling or unable to deploy TLS for all resources,\r\n* secure credentials against leakage (e.g., when the client uses some form of dynamic configuration to determine where\r\n  to send an authenticated request), and\r\n* avoid the exposure of credentials sent to a malicious server over an unauthenticated secure channel due to client\r\n  failure to validate the server\'s identity as part of its TLS handshake.\r\n\r\nIn addition, **Hawk** supports a method for granting third-parties temporary access to individual resources using\r\na query parameter called _bewit_ (in falconry, a leather strap used to attach a tracking device to the leg of a hawk).\r\n\r\nThe **Hawk** scheme requires the establishment of a shared symmetric key between the client and the server,\r\nwhich is beyond the scope of this module. Typically, the shared credentials are established via an initial\r\nTLS-protected phase or derived from some other shared confidential information available to both the client\r\nand the server.\r\n\r\n\r\n## Replay Protection\r\n\r\nWithout replay protection, an attacker can use a compromised (but otherwise valid and authenticated) request more \r\nthan once, gaining access to a protected resource. To mitigate this, clients include both a nonce and a timestamp when \r\nmaking requests. This gives the server enough information to prevent replay attacks.\r\n\r\nThe nonce is generated by the client, and is a string unique across all requests with the same timestamp and\r\nkey identifier combination. \r\n\r\nThe timestamp enables the server to restrict the validity period of the credentials where requests occuring afterwards\r\nare rejected. It also removes the need for the server to retain an unbounded number of nonce values for future checks.\r\nBy default, **Hawk** uses a time window of 1 minute to allow for time skew between the client and server (which in\r\npractice translates to a maximum of 2 minutes as the skew can be positive or negative).\r\n\r\nUsing a timestamp requires the client\'s clock to be in sync with the server\'s clock. **Hawk** requires both the client\r\nclock and the server clock to use NTP to ensure synchronization. However, given the limitations of some client types\r\n(e.g. browsers) to deploy NTP, the server provides the client with its current time in response to a bad timestamp.\r\n\r\nThere is no expectation that the client will adjust its system clock to match the server (in fact, this would be a\r\npotential attack vector). Instead, the client only uses the server\'s time to calculate an offset used only\r\nfor communications with that particular server. The protocol rewards clients with synchronized clocks by reducing\r\nthe number of round trips required to authenticate the first request.\r\n\r\n\r\n## Usage Example\r\n\r\nServer code:\r\n\r\n```javascript\r\nvar Http = require(\'http\');\r\nvar Hawk = require(\'hawk\');\r\n\r\n\r\n// Credentials lookup function\r\n\r\nvar credentialsFunc = function (id, callback) {\r\n\r\n    var credentials = {\r\n        key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\r\n        algorithm: \'sha256\',\r\n        user: \'Steve\'\r\n    };\r\n\r\n    return callback(null, credentials);\r\n};\r\n\r\n// Create HTTP server\r\n\r\nvar handler = function (req, res) {\r\n\r\n    // Authenticate incoming request\r\n\r\n    Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) {\r\n\r\n        // Prepare response\r\n\r\n        var payload = (!err ? \'Hello \' + credentials.user + \' \' + artifacts.ext : \'Shoosh!\');\r\n        var headers = { \'Content-Type\': \'text/plain\' };\r\n\r\n        // Generate Server-Authorization response header\r\n\r\n        var header = Hawk.server.header(artifacts, { payload: payload, contentType: headers[\'Content-Type\'] });\r\n        headers[\'Server-Authorization\'] = header;\r\n\r\n        // Send the response back\r\n\r\n        res.writeHead(!err ? 200 : 401, headers);\r\n        res.end(payload);\r\n    });\r\n};\r\n\r\n// Start server\r\n\r\nHttp.createServer(handler).listen(8000, \'example.com\');\r\n```\r\n\r\nClient code:\r\n\r\n```javascript\r\nvar Request = require(\'request\');\r\nvar Hawk = require(\'hawk\');\r\n\r\n\r\n// Client credentials\r\n\r\nvar credentials = {\r\n    id: \'dh37fgj492je\',\r\n    key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\r\n    algorithm: \'sha256\'\r\n}\r\n\r\n// Request options\r\n\r\nvar requestOptions = {\r\n    uri: \'http://example.com:8000/resource/1?b=1&a=2\',\r\n    method: \'GET\',\r\n    headers: {}\r\n};\r\n\r\n// Generate Authorization request header\r\n\r\nvar header = Hawk.client.header(\'http://example.com:8000/resource/1?b=1&a=2\', \'GET\', { credentials: credentials, ext: \'some-app-data\' });\r\nrequestOptions.headers.Authorization = header.field;\r\n\r\n// Send authenticated request\r\n\r\nRequest(requestOptions, function (error, response, body) {\r\n\r\n    // Authenticate the server\'s response\r\n\r\n    var isValid = Hawk.client.authenticate(response, header.artifacts, { payload: body });\r\n\r\n    // Output results\r\n\r\n    console.log(response.statusCode + \': \' + body + (isValid ? \' (valid)\' : \' (invalid)\'));\r\n});\r\n```\r\n\r\n**Hawk** utilized the [**SNTP**](https://github.com/hueniverse/sntp) module for time sync management. By default, the local\r\nmachine time is used. To automatically retrieve and synchronice the clock within the application, use the SNTP \'start()\' method.\r\n\r\n```javascript\r\nHawk.sntp.start();\r\n```\r\n\r\n\r\n## Protocol Example\r\n\r\nThe client attempts to access a protected resource without authentication, sending the following HTTP request to\r\nthe resource server:\r\n\r\n```\r\nGET /resource/1?b=1&a=2 HTTP/1.1\r\nHost: example.com:8000\r\n```\r\n\r\nThe resource server returns an authentication challenge.\r\n\r\n```\r\nHTTP/1.1 401 Unauthorized\r\nWWW-Authenticate: Hawk\r\n```\r\n\r\nThe client has previously obtained a set of **Hawk** credentials for accessing resources on the "http://example.com/"\r\nserver. The **Hawk** credentials issued to the client include the following attributes:\r\n\r\n* Key identifier: dh37fgj492je\r\n* Key: werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\r\n* Algorithm: sha256\r\n\r\nThe client generates the authentication header by calculating a timestamp (e.g. the number of seconds since January 1,\r\n1970 00:00:00 GMT), generating a nonce, and constructing the normalized request string (each value followed by a newline\r\ncharacter):\r\n\r\n```\r\nhawk.1.header\r\n1353832234\r\nj4h3g2\r\nGET\r\n/resource?a=1&b=2\r\nexample.com\r\n8000\r\n\r\nsome-app-ext-data\r\n\r\n```\r\n\r\nThe request MAC is calculated using HMAC with the specified hash algorithm "sha256" and the key over the normalized request string.\r\nThe result is base64-encoded to produce the request MAC:\r\n\r\n```\r\n6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\r\n```\r\n\r\nThe client includes the **Hawk** key identifier, timestamp, nonce, application specific data, and request MAC with the request using\r\nthe HTTP `Authorization` request header field:\r\n\r\n```\r\nGET /resource/1?b=1&a=2 HTTP/1.1\r\nHost: example.com:8000\r\nAuthorization: Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", ext="some-app-ext-data", mac="6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE="\r\n```\r\n\r\nThe server validates the request by calculating the request MAC again based on the request received and verifies the validity\r\nand scope of the **Hawk** credentials. If valid, the server responds with the requested resource.\r\n\r\n\r\n### Payload Validation\r\n\r\n**Hawk** provides optional payload validation. When generating the authentication header, the client calculates a payload hash\r\nusing the specified hash algorithm. The hash is calculated over the concatenated value of (each followed by a newline character):\r\n* `hawk.1.payload`\r\n* the content-type in lowercase, without any parameters (e.g. `application/json`)\r\n* the request payload prior to any content encoding (the exact representation requirements should be specified by the server for payloads other than simple single-part ascii to ensure interoperability)\r\n\r\nFor example:\r\n\r\n* Payload: `Thank you for flying Hawk`\r\n* Content Type: `text/plain`\r\n* Hash (sha256): `Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=`\r\n\r\nResults in the following input to the payload hash function (newline terminated values):\r\n\r\n```\r\nhawk.1.payload\r\ntext/plain\r\nThank you for flying Hawk\r\n\r\n```\r\n\r\nWhich produces the following hash value:\r\n\r\n```\r\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\r\n```\r\n\r\nThe client constructs the normalized request string (newline terminated values):\r\n\r\n```\r\nhawk.1.header\r\n1353832234\r\nj4h3g2\r\nPOST\r\n/resource?a=1&b=2\r\nexample.com\r\n8000\r\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\r\nsome-app-ext-data\r\n\r\n```\r\n\r\nThen calculates the request MAC and includes the **Hawk** key identifier, timestamp, nonce, payload hash, application specific data,\r\nand request MAC, with the request using the HTTP `Authorization` request header field:\r\n\r\n```\r\nPOST /resource/1 HTTP/1.1\r\nHost: example.com:8000\r\nAuthorization: Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", hash="Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=", ext="some-app-ext-data", mac="aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw="\r\n```\r\n\r\nIt is up to the server if and when it validates the payload for any given request, based solely on it\'s security policy\r\nand the nature of the data included.\r\n\r\nIf the payload is available at the time of authentication, the server uses the hash value provided by the client to construct\r\nthe normalized string and validates the MAC. If the MAC is valid, the server calculates the payload hash and compares the value\r\nwith the provided payload hash in the header. In many cases, checking the MAC first is faster than calculating the payload hash.\r\n\r\nHowever, if the payload is not available at authentication time (e.g. too large to fit in memory, streamed elsewhere, or processed\r\nat a different stage in the application), the server may choose to defer payload validation for later by retaining the hash value\r\nprovided by the client after validating the MAC.\r\n\r\nIt is important to note that MAC validation does not mean the hash value provided by the client is valid, only that the value\r\nincluded in the header was not modified. Without calculating the payload hash on the server and comparing it to the value provided\r\nby the client, the payload may be modified by an attacker.\r\n\r\n\r\n## Response Payload Validation\r\n\r\n**Hawk** provides partial response payload validation. The server includes the `Server-Authorization` response header which enables the\r\nclient to authenticate the response and ensure it is talking to the right server. **Hawk** defines the HTTP `Server-Authorization` header\r\nas a response header using the exact same syntax as the `Authorization` request header field.\r\n\r\nThe header is contructed using the same process as the client\'s request header. The server uses the same credentials and other\r\nartifacts provided by the client to constructs the normalized request string. The `ext` and `hash` values are replaced with\r\nnew values based on the server response. The rest as identical to those used by the client.\r\n\r\nThe result MAC digest is included with the optional `hash` and `ext` values:\r\n\r\n```\r\nServer-Authorization: Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"\r\n```\r\n\r\n\r\n# Single URI Authorization\r\n\r\nThere are cases in which limited and short-term access to a protected resource is granted to a third party which does not\r\nhave access to the shared credentials. For example, displaying a protected image on a web page accessed by anyone. **Hawk**\r\nprovides limited support for such URIs in the form of a _bewit_ - a URI query parameter appended to the request URI which contains\r\nthe necessary credentials to authenticate the request.\r\n\r\nBecause of the significant security risks involved in issuing such access, bewit usage is purposely limited only to GET requests\r\nand for a finite period of time. Both the client and server can issue bewit credentials, however, the server should not use the same\r\ncredentials as the client to maintain clear traceability as to who issued which credentials.\r\n\r\nIn order to simplify implementation, bewit credentials do not support single-use policy and can be replayed multiple times within\r\nthe granted access timeframe. \r\n\r\n\r\n## Bewit Usage Example\r\n\r\nServer code:\r\n\r\n```javascript\r\nvar Http = require(\'http\');\r\nvar Hawk = require(\'hawk\');\r\n\r\n\r\n// Credentials lookup function\r\n\r\nvar credentialsFunc = function (id, callback) {\r\n\r\n    var credentials = {\r\n        key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\r\n        algorithm: \'sha256\'\r\n    };\r\n\r\n    return callback(null, credentials);\r\n};\r\n\r\n// Create HTTP server\r\n\r\nvar handler = function (req, res) {\r\n\r\n    Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {\r\n\r\n        res.writeHead(!err ? 200 : 401, { \'Content-Type\': \'text/plain\' });\r\n        res.end(!err ? \'Access granted\' : \'Shoosh!\');\r\n    });\r\n};\r\n\r\nHttp.createServer(handler).listen(8000, \'example.com\');\r\n```\r\n\r\nBewit code generation:\r\n\r\n```javascript\r\nvar Request = require(\'request\');\r\nvar Hawk = require(\'hawk\');\r\n\r\n\r\n// Client credentials\r\n\r\nvar credentials = {\r\n    id: \'dh37fgj492je\',\r\n    key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\r\n    algorithm: \'sha256\'\r\n}\r\n\r\n// Generate bewit\r\n\r\nvar duration = 60 * 5;      // 5 Minutes\r\nvar bewit = Hawk.uri.getBewit(\'http://example.com:8080/resource/1?b=1&a=2\', { credentials: credentials, ttlSec: duration, ext: \'some-app-data\' });\r\nvar uri = \'http://example.com:8000/resource/1?b=1&a=2\' + \'&bewit=\' + bewit;\r\n```\r\n\r\n\r\n# Security Considerations\r\n\r\nThe greatest sources of security risks are usually found not in **Hawk** but in the policies and procedures surrounding its use.\r\nImplementers are strongly encouraged to assess how this module addresses their security requirements. This section includes\r\nan incomplete list of security considerations that must be reviewed and understood before deploying **Hawk** on the server.\r\nMany of the protections provided in **Hawk** depends on whether and how they are used.\r\n\r\n### MAC Keys Transmission\r\n\r\n**Hawk** does not provide any mechanism for obtaining or transmitting the set of shared credentials required. Any mechanism used\r\nto obtain **Hawk** credentials must ensure that these transmissions are protected using transport-layer mechanisms such as TLS.\r\n\r\n### Confidentiality of Requests\r\n\r\nWhile **Hawk** provides a mechanism for verifying the integrity of HTTP requests, it provides no guarantee of request\r\nconfidentiality. Unless other precautions are taken, eavesdroppers will have full access to the request content. Servers should\r\ncarefully consider the types of data likely to be sent as part of such requests, and employ transport-layer security mechanisms\r\nto protect sensitive resources.\r\n\r\n### Spoofing by Counterfeit Servers\r\n\r\n**Hawk** provides limited verification of the server authenticity. When receiving a response back from the server, the server\r\nmay choose to include a response `Server-Authorization` header which the client can use to verify the response. However, it is up to\r\nthe server to determine when such measure is included, to up to the client to enforce that policy.\r\n\r\nA hostile party could take advantage of this by intercepting the client\'s requests and returning misleading or otherwise\r\nincorrect responses. Service providers should consider such attacks when developing services using this protocol, and should\r\nrequire transport-layer security for any requests where the authenticity of the resource server or of server responses is an issue.\r\n\r\n### Plaintext Storage of Credentials\r\n\r\nThe **Hawk** key functions the same way passwords do in traditional authentication systems. In order to compute the request MAC,\r\nthe server must have access to the key in plaintext form. This is in contrast, for example, to modern operating systems, which\r\nstore only a one-way hash of user credentials.\r\n\r\nIf an attacker were to gain access to these keys - or worse, to the server\'s database of all such keys - he or she would be able\r\nto perform any action on behalf of any resource owner. Accordingly, it is critical that servers protect these keys from unauthorized\r\naccess.\r\n\r\n### Entropy of Keys\r\n\r\nUnless a transport-layer security protocol is used, eavesdroppers will have full access to authenticated requests and request\r\nMAC values, and will thus be able to mount offline brute-force attacks to recover the key used. Servers should be careful to\r\nassign keys which are long enough, and random enough, to resist such attacks for at least the length of time that the **Hawk**\r\ncredentials are valid.\r\n\r\nFor example, if the credentials are valid for two weeks, servers should ensure that it is not possible to mount a brute force\r\nattack that recovers the key in less than two weeks. Of course, servers are urged to err on the side of caution, and use the\r\nlongest key reasonable.\r\n\r\nIt is equally important that the pseudo-random number generator (PRNG) used to generate these keys be of sufficiently high\r\nquality. Many PRNG implementations generate number sequences that may appear to be random, but which nevertheless exhibit\r\npatterns or other weaknesses which make cryptanalysis or brute force attacks easier. Implementers should be careful to use\r\ncryptographically secure PRNGs to avoid these problems.\r\n\r\n### Coverage Limitations\r\n\r\nThe request MAC only covers the HTTP `Host` header and optionally the `Content-Type` header. It does not cover any other headers\r\nwhich can often affect how the request body is interpreted by the server. If the server behavior is influenced by the presence\r\nor value of such headers, an attacker can manipulate the request headers without being detected. Implementers should use the\r\n`ext` feature to pass application-specific information via the `Authorization` header which is protected by the request MAC.\r\n\r\nThe response authentication, when performed, only covers the response payload, content-type, and the request information \r\nprovided by the client in it\'s request (method, resource, timestamp, nonce, etc.). It does not cover the HTTP status code or\r\nany other response header field (e.g. Location) which can affect the client\'s behaviour.\r\n\r\n### Future Time Manipulation\r\n\r\nThe protocol relies on a clock sync between the client and server. To accomplish this, the server informs the client of its\r\ncurrent time when an invalid timestamp is received.\r\n\r\nIf an attacker is able to manipulate this information and cause the client to use an incorrect time, it would be able to cause\r\nthe client to generate authenticated requests using time in the future. Such requests will fail when sent by the client, and will\r\nnot likely leave a trace on the server (given the common implementation of nonce, if at all enforced). The attacker will then\r\nbe able to replay the request at the correct time without detection.\r\n\r\nThe client must only use the time information provided by the server if:\r\n* it was delivered over a TLS connection and the server identity has been verified, or\r\n* the `tsm` MAC digest calculated using the same client credentials over the timestamp has been verified.\r\n\r\n### Client Clock Poisoning\r\n\r\nWhen receiving a request with a bad timestamp, the server provides the client with its current time. The client must never use\r\nthe time received from the server to adjust its own clock, and must only use it to calculate an offset for communicating with\r\nthat particular server.\r\n\r\n### Bewit Limitations\r\n\r\nSpecial care must be taken when issuing bewit credentials to third parties. Bewit credentials are valid until expiration and cannot\r\nbe revoked or limited without using other means. Whatever resource they grant access to will be completely exposed to anyone with\r\naccess to the bewit credentials which act as bearer credentials for that particular resource. While bewit usage is limited to GET\r\nrequests only and therefore cannot be used to perform transactions or change server state, it can still be used to expose private\r\nand sensitive information.\r\n\r\n\r\n# Frequently Asked Questions\r\n\r\n### Where is the protocol specification?\r\n\r\nIf you are looking for some prose explaining how all this works, **this is it**. **Hawk** is being developed as an open source\r\nproject instead of a standard. In other words, the [code](/hueniverse/hawk/tree/master/lib) is the specification. Not sure about\r\nsomething? Open an issue!\r\n\r\n### Is it done?\r\n\r\nAt if version 0.10.0, **Hawk** is feature-complete. However, until this module reaches version 1.0.0 it is considered experimental\r\nand is likely to change. This also means your feedback and contribution are very welcome. Feel free to open issues with questions\r\nand suggestions.\r\n\r\n### Where can I find **Hawk** implementations in other languages?\r\n\r\n**Hawk**\'s only reference implementation is provided in JavaScript as a node.js module. However, others are actively porting it to other\r\nplatforms. There is already a [PHP](https://github.com/alexbilbie/PHP-Hawk),\r\n[.NET](https://github.com/pcibraro/hawknet), and [JAVA](https://github.com/wealdtech/hawk) libraries available. The full list\r\nis maintained [here](https://github.com/hueniverse/hawk/issues?labels=port). Please add an issue if you are working on another\r\nport. A cross-platform test-suite is in the works.\r\n\r\n### Why isn\'t the algorithm part of the challenge or dynamically negotiated?\r\n\r\nThe algorithm used is closely related to the key issued as different algorithms require different key sizes (and other\r\nrequirements). While some keys can be used for multiple algorithm, the protocol is designed to closely bind the key and algorithm\r\ntogether as part of the issued credentials.\r\n\r\n### Why is Host and Content-Type the only headers covered by the request MAC?\r\n\r\nIt is really hard to include other headers. Headers can be changed by proxies and other intermediaries and there is no\r\nwell-established way to normalize them. Many platforms change the case of header field names and values. The only\r\nstraight-forward solution is to include the headers in some blob (say, base64 encoded JSON) and include that with the request,\r\nan approach taken by JWT and other such formats. However, that design violates the HTTP header boundaries, repeats information,\r\nand introduces other security issues because firewalls will not be aware of these "hidden" headers. In addition, any information\r\nrepeated must be compared to the duplicated information in the header and therefore only moves the problem elsewhere.\r\n\r\n### Why not just use HTTP Digest?\r\n\r\nDigest requires pre-negotiation to establish a nonce. This means you can\'t just make a request - you must first send\r\na protocol handshake to the server. This pattern has become unacceptable for most web services, especially mobile\r\nwhere extra round-trip are costly.\r\n\r\n### Why bother with all this nonce and timestamp business?\r\n\r\n**Hawk** is an attempt to find a reasonable, practical compromise between security and usability. OAuth 1.0 got timestamp\r\nand nonces halfway right but failed when it came to scalability and consistent developer experience. **Hawk** addresses\r\nit by requiring the client to sync its clock, but provides it with tools to accomplish it.\r\n\r\nIn general, replay protection is a matter of application-specific threat model. It is less of an issue on a TLS-protected\r\nsystem where the clients are implemented using best practices and are under the control of the server. Instead of dropping\r\nreplay protection, **Hawk** offers a required time window and an optional nonce verification. Together, it provides developers\r\nwith the ability to decide how to enforce their security policy without impacting the client\'s implementation.\r\n\r\n### What are `app` and `dlg` in the authorization header and normalized mac string?\r\n\r\nThe original motivation for **Hawk** was to replace the OAuth 1.0 use cases. This included both a simple client-server mode which\r\nthis module is specifically designed for, and a delegated access mode which is being developed separately in\r\n[Oz](https://github.com/hueniverse/oz). In addition to the **Hawk** use cases, Oz requires another attribute: the application id `app`.\r\nThis provides binding between the credentials and the application in a way that prevents an attacker from tricking an application\r\nto use credentials issued to someone else. It also has an optional \'delegated-by\' attribute `dlg` which is the application id of the\r\napplication the credentials were directly issued to. The goal of these two additions is to allow Oz to utilize **Hawk** directly,\r\nbut with the additional security of delegated credentials.\r\n\r\n### What is the purpose of the static strings used in each normalized MAC input?\r\n\r\nWhen calculating a hash or MAC, a static prefix (tag) is added. The prefix is used to prevent MAC values from being\r\nused or reused for a purpose other than what they were created for (i.e. prevents switching MAC values between a request,\r\nresponse, and a bewit use cases). It also protects against expliots created after a potential change in how the protocol\r\ncreates the normalized string. For example, if a future version would switch the order of nonce and timestamp, it\r\ncan create an exploit opportunity for cases where the nonce is similar in format to a timestamp.\r\n\r\n### Does **Hawk** have anything to do with OAuth?\r\n\r\nShort answer: no.\r\n\r\n**Hawk** was originally proposed as the OAuth MAC Token specification. However, the OAuth working group in its consistent\r\nincompetence failed to produce a final, usable solution to address one of the most popular use cases of OAuth 1.0 - using it\r\nto authenticate simple client-server transactions (i.e. two-legged). As you can guess, the OAuth working group is still hard\r\nat work to produce more garbage.\r\n\r\n**Hawk** provides a simple HTTP authentication scheme for making client-server requests. It does not address the OAuth use case\r\nof delegating access to a third party. If you are looking for an OAuth alternative, check out [Oz](/hueniverse/oz).\r\n\r\n\r\n# Acknowledgements\r\n\r\n**Hawk** is a derivative work of the [HTTP MAC Authentication Scheme](http://tools.ietf.org/html/draft-hammer-oauth-v2-mac-token-05) proposal\r\nco-authored by Ben Adida, Adam Barth, and Eran Hammer, which in turn was based on the OAuth 1.0 community specification.\r\n\r\nSpecial thanks to Ben Laurie for his always insightful feedback and advice.\r\n\r\nThe **Hawk** logo was created by [Chris Carrasco](http://chriscarrasco.com).\r\n',
17512 silly resolved     readmeFilename: 'README.md',
17512 silly resolved     bugs: { url: 'https://github.com/hueniverse/hawk/issues' },
17512 silly resolved     homepage: 'https://github.com/hueniverse/hawk',
17512 silly resolved     _id: 'hawk@0.10.2',
17512 silly resolved     dist: { shasum: 'd3f30c13be40d97bc4f17d3d95db0d133afee261' },
17512 silly resolved     _from: 'hawk@~0.10.2',
17512 silly resolved     _resolved: 'https://registry.npmjs.org/hawk/-/hawk-0.10.2.tgz' } ]
17513 info install node-uuid@1.4.1 into /usr/local/lib/node_modules/jitsu/node_modules/request
17514 info install cookie-jar@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17515 info install aws-sign@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17516 info install mime@1.2.11 into /usr/local/lib/node_modules/jitsu/node_modules/request
17517 info install oauth-sign@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17518 info install form-data@0.0.10 into /usr/local/lib/node_modules/jitsu/node_modules/request
17519 info install tunnel-agent@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17520 info install json-stringify-safe@3.0.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17521 info install forever-agent@0.2.0 into /usr/local/lib/node_modules/jitsu/node_modules/request
17522 info install qs@0.5.6 into /usr/local/lib/node_modules/jitsu/node_modules/request
17523 info install hawk@0.10.2 into /usr/local/lib/node_modules/jitsu/node_modules/request
17524 info installOne node-uuid@1.4.1
17525 info installOne cookie-jar@0.2.0
17526 info installOne aws-sign@0.2.0
17527 info installOne mime@1.2.11
17528 info installOne oauth-sign@0.2.0
17529 info installOne form-data@0.0.10
17530 info installOne tunnel-agent@0.2.0
17531 info installOne json-stringify-safe@3.0.0
17532 info installOne forever-agent@0.2.0
17533 info installOne qs@0.5.6
17534 info installOne hawk@0.10.2
17535 warn engine hawk@0.10.2: wanted: {"node":"0.8.x"} (current: {"node":"v0.10.22","npm":"1.3.14"})
17536 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid unbuild
17537 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar unbuild
17538 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign unbuild
17539 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime unbuild
17540 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign unbuild
17541 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data unbuild
17542 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent unbuild
17543 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe unbuild
17544 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent unbuild
17545 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs unbuild
17546 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/hawk unbuild
17547 verbose tar unpack /home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
17548 silly lockFile e7bec3f0-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid
17549 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid /home/lerenzo/.npm/e7bec3f0-s-request-node-modules-node-uuid.lock
17550 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
17551 verbose lock tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz /home/lerenzo/.npm/97bc16a5--npm-node-uuid-1-4-1-package-tgz.lock
17552 verbose tar unpack /home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
17553 silly lockFile e8fe11b2--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar
17554 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar /home/lerenzo/.npm/e8fe11b2--request-node-modules-cookie-jar.lock
17555 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
17556 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz /home/lerenzo/.npm/c420ea2f-npm-cookie-jar-0-2-0-package-tgz.lock
17557 verbose tar unpack /home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
17558 silly lockFile 3c03fa12-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign
17559 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign /home/lerenzo/.npm/3c03fa12-es-request-node-modules-aws-sign.lock
17560 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
17561 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz /home/lerenzo/.npm/cbb60012-o-npm-aws-sign-0-2-0-package-tgz.lock
17562 verbose tar unpack /home/lerenzo/.npm/mime/1.2.11/package.tgz
17563 silly lockFile 23093206-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime
17564 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime /home/lerenzo/.npm/23093206-odules-request-node-modules-mime.lock
17565 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
17566 verbose lock tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz /home/lerenzo/.npm/dba079eb-enzo-npm-mime-1-2-11-package-tgz.lock
17567 verbose tar unpack /home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
17568 silly lockFile c00c3b56--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign
17569 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign /home/lerenzo/.npm/c00c3b56--request-node-modules-oauth-sign.lock
17570 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
17571 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz /home/lerenzo/.npm/600f978d-npm-oauth-sign-0-2-0-package-tgz.lock
17572 verbose tar unpack /home/lerenzo/.npm/form-data/0.0.10/package.tgz
17573 silly lockFile a1a68290-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data
17574 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data /home/lerenzo/.npm/a1a68290-s-request-node-modules-form-data.lock
17575 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
17576 verbose lock tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz /home/lerenzo/.npm/5584112f-npm-form-data-0-0-10-package-tgz.lock
17577 verbose tar unpack /home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
17578 silly lockFile 079b98d4-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent
17579 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent /home/lerenzo/.npm/079b98d4-equest-node-modules-tunnel-agent.lock
17580 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
17581 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz /home/lerenzo/.npm/d340c51b-m-tunnel-agent-0-2-0-package-tgz.lock
17582 verbose tar unpack /home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
17583 silly lockFile c46a1b6d-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe
17584 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe /home/lerenzo/.npm/c46a1b6d-node-modules-json-stringify-safe.lock
17585 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
17586 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz /home/lerenzo/.npm/9b21beca-stringify-safe-3-0-0-package-tgz.lock
17587 verbose tar unpack /home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
17588 silly lockFile cf5590bd-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent
17589 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent /home/lerenzo/.npm/cf5590bd-quest-node-modules-forever-agent.lock
17590 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
17591 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz /home/lerenzo/.npm/60adcac6--forever-agent-0-2-0-package-tgz.lock
17592 verbose tar unpack /home/lerenzo/.npm/qs/0.5.6/package.tgz
17593 silly lockFile fd9a6da8--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs
17594 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs /home/lerenzo/.npm/fd9a6da8--modules-request-node-modules-qs.lock
17595 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
17596 verbose lock tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz /home/lerenzo/.npm/7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz.lock
17597 verbose tar unpack /home/lerenzo/.npm/hawk/0.10.2/package.tgz
17598 silly lockFile 02de07b6-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/hawk
17599 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/hawk /home/lerenzo/.npm/02de07b6-odules-request-node-modules-hawk.lock
17600 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17601 verbose lock tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz /home/lerenzo/.npm/d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz.lock
17602 silly gunzTarPerm modes [ '755', '644' ]
17603 silly gunzTarPerm modes [ '755', '644' ]
17604 silly gunzTarPerm modes [ '755', '644' ]
17605 silly gunzTarPerm modes [ '755', '644' ]
17606 silly gunzTarPerm modes [ '755', '644' ]
17607 silly gunzTarPerm modes [ '755', '644' ]
17608 silly gunzTarPerm modes [ '755', '644' ]
17609 silly gunzTarPerm modes [ '755', '644' ]
17610 silly gunzTarPerm modes [ '755', '644' ]
17611 silly gunzTarPerm modes [ '755', '644' ]
17612 silly gunzTarPerm modes [ '755', '644' ]
17613 silly gunzTarPerm extractEntry package.json
17614 silly gunzTarPerm extractEntry package.json
17615 silly gunzTarPerm extractEntry package.json
17616 silly gunzTarPerm extractEntry package.json
17617 silly gunzTarPerm extractEntry package.json
17618 silly gunzTarPerm extractEntry package.json
17619 silly gunzTarPerm extractEntry package.json
17620 silly gunzTarPerm extractEntry package.json
17621 silly gunzTarPerm extractEntry package.json
17622 silly gunzTarPerm extractEntry package.json
17623 silly gunzTarPerm extractEntry .npmignore
17624 silly gunzTarPerm extractEntry README.md
17625 silly gunzTarPerm extractEntry index.js
17626 silly gunzTarPerm extractEntry jar.js
17627 silly gunzTarPerm extractEntry index.js
17628 silly gunzTarPerm extractEntry index.js
17629 silly gunzTarPerm extractEntry test.js
17630 silly gunzTarPerm extractEntry License
17631 silly gunzTarPerm extractEntry Readme.md
17632 silly gunzTarPerm extractEntry index.js
17633 silly gunzTarPerm extractEntry README.md
17634 silly gunzTarPerm extractEntry LICENSE
17635 silly gunzTarPerm extractEntry index.js
17636 silly gunzTarPerm extractEntry .npmignore
17637 silly gunzTarPerm extractEntry benchmark.js
17638 silly gunzTarPerm extractEntry .npmignore
17639 silly gunzTarPerm extractEntry README.md
17640 silly gunzTarPerm extractEntry uuid.js
17641 silly gunzTarPerm extractEntry LICENSE.md
17642 silly gunzTarPerm extractEntry benchmark/README.md
17643 silly gunzTarPerm extractEntry benchmark/benchmark.js
17644 silly gunzTarPerm extractEntry benchmark/bench.gnu
17645 silly gunzTarPerm extractEntry benchmark/bench.sh
17646 silly gunzTarPerm extractEntry benchmark/benchmark-native.c
17647 silly gunzTarPerm extractEntry component.json
17648 silly gunzTarPerm extractEntry test/compare_v1.js
17649 silly gunzTarPerm extractEntry test/test.js
17650 silly gunzTarPerm extractEntry test/test.html
17651 silly gunzTarPerm extractEntry tests/run.js
17652 silly gunzTarPerm extractEntry tests/test-cookie.js
17653 silly gunzTarPerm extractEntry stringify.js
17654 silly gunzTarPerm extractEntry test.js
17655 silly gunzTarPerm extractEntry lib/form_data.js
17656 silly gunzTarPerm extractEntry examples.js
17657 silly gunzTarPerm extractEntry index.js
17658 silly gunzTarPerm extractEntry LICENSE
17659 silly gunzTarPerm extractEntry package.json
17660 silly gunzTarPerm extractEntry README.md
17661 silly gunzTarPerm extractEntry LICENSE
17662 silly gunzTarPerm extractEntry Readme.md
17663 silly gunzTarPerm extractEntry .gitmodules
17664 silly gunzTarPerm extractEntry index.js
17665 silly gunzTarPerm extractEntry .travis.yml
17666 silly gunzTarPerm extractEntry tests/test-cookiejar.js
17667 silly lockFile cf5590bd-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent
17668 silly lockFile cf5590bd-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent
17669 silly gunzTarPerm extractEntry component.json
17670 silly lockFile 3c03fa12-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign
17671 silly lockFile 3c03fa12-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign
17672 silly gunzTarPerm extractEntry mime.js
17673 silly gunzTarPerm extractEntry test.js
17674 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
17675 silly lockFile 60adcac6--forever-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.2.0/package.tgz
17676 silly gunzTarPerm extractEntry .travis.yml
17677 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
17678 silly lockFile cbb60012-o-npm-aws-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.2.0/package.tgz
17679 info preinstall forever-agent@0.2.0
17680 info preinstall aws-sign@0.2.0
17681 silly lockFile 079b98d4-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent
17682 silly lockFile 079b98d4-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent
17683 silly lockFile c00c3b56--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign
17684 silly lockFile c00c3b56--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign
17685 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
17686 silly lockFile d340c51b-m-tunnel-agent-0-2-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.2.0/package.tgz
17687 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
17688 silly lockFile 600f978d-npm-oauth-sign-0-2-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.2.0/package.tgz
17689 verbose readDependencies using package.json deps
17690 verbose readDependencies using package.json deps
17691 verbose readDependencies using package.json deps
17692 silly resolved []
17693 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent
17694 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/forever-agent
17695 verbose linkStuff [ true,
17695 verbose linkStuff   '/usr/local/lib/node_modules',
17695 verbose linkStuff   false,
17695 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17696 info linkStuff forever-agent@0.2.0
17697 verbose linkBins forever-agent@0.2.0
17698 verbose linkMans forever-agent@0.2.0
17699 verbose rebuildBundles forever-agent@0.2.0
17700 verbose readDependencies using package.json deps
17701 silly resolved []
17702 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign
17703 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/aws-sign
17704 verbose linkStuff [ true,
17704 verbose linkStuff   '/usr/local/lib/node_modules',
17704 verbose linkStuff   false,
17704 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17705 info linkStuff aws-sign@0.2.0
17706 verbose linkBins aws-sign@0.2.0
17707 verbose linkMans aws-sign@0.2.0
17708 verbose rebuildBundles aws-sign@0.2.0
17709 silly gunzTarPerm extractEntry History.md
17710 silly gunzTarPerm extractEntry Makefile
17711 info install forever-agent@0.2.0
17712 info install aws-sign@0.2.0
17713 info preinstall tunnel-agent@0.2.0
17714 info preinstall oauth-sign@0.2.0
17715 info postinstall forever-agent@0.2.0
17716 info postinstall aws-sign@0.2.0
17717 silly gunzTarPerm extractEntry types/mime.types
17718 silly gunzTarPerm extractEntry types/node.types
17719 verbose readDependencies using package.json deps
17720 verbose readDependencies using package.json deps
17721 verbose readDependencies using package.json deps
17722 silly resolved []
17723 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent
17724 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/tunnel-agent
17725 verbose linkStuff [ true,
17725 verbose linkStuff   '/usr/local/lib/node_modules',
17725 verbose linkStuff   false,
17725 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17726 info linkStuff tunnel-agent@0.2.0
17727 verbose linkBins tunnel-agent@0.2.0
17728 verbose linkMans tunnel-agent@0.2.0
17729 verbose rebuildBundles tunnel-agent@0.2.0
17730 verbose readDependencies using package.json deps
17731 silly resolved []
17732 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign
17733 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/oauth-sign
17734 verbose linkStuff [ true,
17734 verbose linkStuff   '/usr/local/lib/node_modules',
17734 verbose linkStuff   false,
17734 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17735 info linkStuff oauth-sign@0.2.0
17736 verbose linkBins oauth-sign@0.2.0
17737 verbose linkMans oauth-sign@0.2.0
17738 verbose rebuildBundles oauth-sign@0.2.0
17739 info install tunnel-agent@0.2.0
17740 info install oauth-sign@0.2.0
17741 info postinstall tunnel-agent@0.2.0
17742 info postinstall oauth-sign@0.2.0
17743 silly lockFile c46a1b6d-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe
17744 silly lockFile c46a1b6d-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe
17745 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
17746 silly lockFile 9b21beca-stringify-safe-3-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/3.0.0/package.tgz
17747 silly gunzTarPerm extractEntry test/parse.js
17748 silly gunzTarPerm extractEntry test/stringify.js
17749 info preinstall json-stringify-safe@3.0.0
17750 verbose readDependencies using package.json deps
17751 verbose readDependencies using package.json deps
17752 silly resolved []
17753 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe
17754 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/json-stringify-safe
17755 verbose linkStuff [ true,
17755 verbose linkStuff   '/usr/local/lib/node_modules',
17755 verbose linkStuff   false,
17755 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17756 info linkStuff json-stringify-safe@3.0.0
17757 verbose linkBins json-stringify-safe@3.0.0
17758 verbose linkMans json-stringify-safe@3.0.0
17759 verbose rebuildBundles json-stringify-safe@3.0.0
17760 info install json-stringify-safe@3.0.0
17761 silly lockFile e8fe11b2--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar
17762 silly lockFile e8fe11b2--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar
17763 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
17764 silly lockFile c420ea2f-npm-cookie-jar-0-2-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.2.0/package.tgz
17765 info postinstall json-stringify-safe@3.0.0
17766 silly gunzTarPerm extractEntry test/browser/expect.js
17767 silly gunzTarPerm extractEntry test/browser/jquery.js
17768 silly lockFile a1a68290-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data
17769 silly lockFile a1a68290-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data
17770 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
17771 silly lockFile 5584112f-npm-form-data-0-0-10-package-tgz tar:///home/lerenzo/.npm/form-data/0.0.10/package.tgz
17772 info preinstall cookie-jar@0.2.0
17773 verbose readDependencies using package.json deps
17774 info preinstall form-data@0.0.10
17775 verbose readDependencies using package.json deps
17776 silly resolved []
17777 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar
17778 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/cookie-jar
17779 verbose linkStuff [ true,
17779 verbose linkStuff   '/usr/local/lib/node_modules',
17779 verbose linkStuff   false,
17779 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17780 info linkStuff cookie-jar@0.2.0
17781 verbose linkBins cookie-jar@0.2.0
17782 verbose linkMans cookie-jar@0.2.0
17783 verbose rebuildBundles cookie-jar@0.2.0
17784 info install cookie-jar@0.2.0
17785 silly gunzTarPerm extractEntry test/browser/mocha.js
17786 verbose readDependencies using package.json deps
17787 info postinstall cookie-jar@0.2.0
17788 verbose readDependencies using package.json deps
17789 silly gunzTarPerm extractEntry test/browser/qs.js
17790 silly gunzTarPerm extractEntry test/browser/index.html
17791 verbose cache add [ 'combined-stream@~0.0.4', null ]
17792 verbose cache add name=undefined spec="combined-stream@~0.0.4" args=["combined-stream@~0.0.4",null]
17793 verbose parsed url { protocol: null,
17793 verbose parsed url   slashes: null,
17793 verbose parsed url   auth: null,
17793 verbose parsed url   host: null,
17793 verbose parsed url   port: null,
17793 verbose parsed url   hostname: null,
17793 verbose parsed url   hash: null,
17793 verbose parsed url   search: null,
17793 verbose parsed url   query: null,
17793 verbose parsed url   pathname: 'combined-stream@~0.0.4',
17793 verbose parsed url   path: 'combined-stream@~0.0.4',
17793 verbose parsed url   href: 'combined-stream@~0.0.4' }
17794 verbose cache add name="combined-stream" spec="~0.0.4" args=["combined-stream","~0.0.4"]
17795 verbose parsed url { protocol: null,
17795 verbose parsed url   slashes: null,
17795 verbose parsed url   auth: null,
17795 verbose parsed url   host: null,
17795 verbose parsed url   port: null,
17795 verbose parsed url   hostname: null,
17795 verbose parsed url   hash: null,
17795 verbose parsed url   search: null,
17795 verbose parsed url   query: null,
17795 verbose parsed url   pathname: '~0.0.4',
17795 verbose parsed url   path: '~0.0.4',
17795 verbose parsed url   href: '~0.0.4' }
17796 verbose addNamed [ 'combined-stream', '~0.0.4' ]
17797 verbose addNamed [ null, '>=0.0.4-0 <0.1.0-0' ]
17798 silly lockFile 97e270a8-combined-stream-0-0-4 combined-stream@~0.0.4
17799 verbose lock combined-stream@~0.0.4 /home/lerenzo/.npm/97e270a8-combined-stream-0-0-4.lock
17800 verbose cache add [ 'async@~0.2.7', null ]
17801 verbose cache add name=undefined spec="async@~0.2.7" args=["async@~0.2.7",null]
17802 verbose parsed url { protocol: null,
17802 verbose parsed url   slashes: null,
17802 verbose parsed url   auth: null,
17802 verbose parsed url   host: null,
17802 verbose parsed url   port: null,
17802 verbose parsed url   hostname: null,
17802 verbose parsed url   hash: null,
17802 verbose parsed url   search: null,
17802 verbose parsed url   query: null,
17802 verbose parsed url   pathname: 'async@~0.2.7',
17802 verbose parsed url   path: 'async@~0.2.7',
17802 verbose parsed url   href: 'async@~0.2.7' }
17803 verbose cache add name="async" spec="~0.2.7" args=["async","~0.2.7"]
17804 verbose parsed url { protocol: null,
17804 verbose parsed url   slashes: null,
17804 verbose parsed url   auth: null,
17804 verbose parsed url   host: null,
17804 verbose parsed url   port: null,
17804 verbose parsed url   hostname: null,
17804 verbose parsed url   hash: null,
17804 verbose parsed url   search: null,
17804 verbose parsed url   query: null,
17804 verbose parsed url   pathname: '~0.2.7',
17804 verbose parsed url   path: '~0.2.7',
17804 verbose parsed url   href: '~0.2.7' }
17805 verbose addNamed [ 'async', '~0.2.7' ]
17806 verbose addNamed [ null, '>=0.2.7-0 <0.3.0-0' ]
17807 silly lockFile c1cfc253-async-0-2-7 async@~0.2.7
17808 verbose lock async@~0.2.7 /home/lerenzo/.npm/c1cfc253-async-0-2-7.lock
17809 silly gunzTarPerm extractEntry images/hawk.png
17810 silly gunzTarPerm extractEntry images/logo.png
17811 silly addNameRange { name: 'combined-stream',
17811 silly addNameRange   range: '>=0.0.4-0 <0.1.0-0',
17811 silly addNameRange   hasData: false }
17812 silly addNameRange { name: 'async', range: '>=0.2.7-0 <0.3.0-0', hasData: false }
17813 verbose url raw combined-stream
17814 verbose url resolving [ 'https://registry.npmjs.org/', './combined-stream' ]
17815 verbose url resolved https://registry.npmjs.org/combined-stream
17816 info trying registry request attempt 1 at 14:13:52
17817 http GET https://registry.npmjs.org/combined-stream
17818 silly gunzTarPerm extractEntry test/browser/mocha.css
17819 silly gunzTarPerm extractEntry test/browser/qs.css
17820 verbose registry.get async not expired, no request
17821 silly addNameRange number 2 { name: 'async', range: '>=0.2.7-0 <0.3.0-0', hasData: true }
17822 silly addNameRange versions [ 'async',
17822 silly addNameRange   [ '0.1.0',
17822 silly addNameRange     '0.1.1',
17822 silly addNameRange     '0.1.2',
17822 silly addNameRange     '0.1.3',
17822 silly addNameRange     '0.1.4',
17822 silly addNameRange     '0.1.5',
17822 silly addNameRange     '0.1.6',
17822 silly addNameRange     '0.1.7',
17822 silly addNameRange     '0.1.8',
17822 silly addNameRange     '0.1.9',
17822 silly addNameRange     '0.1.10',
17822 silly addNameRange     '0.1.11',
17822 silly addNameRange     '0.1.12',
17822 silly addNameRange     '0.1.13',
17822 silly addNameRange     '0.1.14',
17822 silly addNameRange     '0.1.15',
17822 silly addNameRange     '0.1.16',
17822 silly addNameRange     '0.1.17',
17822 silly addNameRange     '0.1.18',
17822 silly addNameRange     '0.1.19',
17822 silly addNameRange     '0.1.20',
17822 silly addNameRange     '0.1.21',
17822 silly addNameRange     '0.1.22',
17822 silly addNameRange     '0.2.0',
17822 silly addNameRange     '0.2.1',
17822 silly addNameRange     '0.2.2',
17822 silly addNameRange     '0.2.3',
17822 silly addNameRange     '0.2.4',
17822 silly addNameRange     '0.2.5',
17822 silly addNameRange     '0.2.6',
17822 silly addNameRange     '0.2.7',
17822 silly addNameRange     '0.2.8',
17822 silly addNameRange     '0.2.9' ] ]
17823 verbose addNamed [ 'async', '0.2.9' ]
17824 verbose addNamed [ '0.2.9', '0.2.9' ]
17825 silly lockFile be62480b-async-0-2-9 async@0.2.9
17826 verbose lock async@0.2.9 /home/lerenzo/.npm/be62480b-async-0-2-9.lock
17827 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
17828 verbose lock https://registry.npmjs.org/async/-/async-0.2.9.tgz /home/lerenzo/.npm/c060db57--npmjs-org-async-async-0-2-9-tgz.lock
17829 silly gunzTarPerm extractEntry Makefile
17830 verbose addRemoteTarball [ 'https://registry.npmjs.org/async/-/async-0.2.9.tgz',
17830 verbose addRemoteTarball   'df63060fbf3d33286a76aaf6d55a2986d9ff8619' ]
17831 info retry fetch attempt 1 at 14:13:52
17832 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz
17833 http GET https://registry.npmjs.org/async/-/async-0.2.9.tgz
17834 silly gunzTarPerm extractEntry lib/client.js
17835 silly gunzTarPerm extractEntry lib/crypto.js
17836 silly gunzTarPerm extractEntry lib/index.js
17837 silly gunzTarPerm extractEntry lib/server.js
17838 silly gunzTarPerm extractEntry lib/uri.js
17839 silly gunzTarPerm extractEntry lib/utils.js
17840 silly lockFile e7bec3f0-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid
17841 silly lockFile e7bec3f0-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid
17842 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
17843 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
17844 info preinstall node-uuid@1.4.1
17845 verbose readDependencies using package.json deps
17846 verbose readDependencies using package.json deps
17847 silly resolved []
17848 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid
17849 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/node-uuid
17850 verbose linkStuff [ true,
17850 verbose linkStuff   '/usr/local/lib/node_modules',
17850 verbose linkStuff   false,
17850 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17851 info linkStuff node-uuid@1.4.1
17852 verbose linkBins node-uuid@1.4.1
17853 verbose linkMans node-uuid@1.4.1
17854 verbose rebuildBundles node-uuid@1.4.1
17855 info install node-uuid@1.4.1
17856 info postinstall node-uuid@1.4.1
17857 silly lockFile 23093206-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime
17858 silly lockFile 23093206-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime
17859 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
17860 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
17861 info preinstall mime@1.2.11
17862 verbose readDependencies using package.json deps
17863 verbose readDependencies using package.json deps
17864 silly resolved []
17865 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime
17866 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/mime
17867 verbose linkStuff [ true,
17867 verbose linkStuff   '/usr/local/lib/node_modules',
17867 verbose linkStuff   false,
17867 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17868 info linkStuff mime@1.2.11
17869 verbose linkBins mime@1.2.11
17870 verbose linkMans mime@1.2.11
17871 verbose rebuildBundles mime@1.2.11
17872 info install mime@1.2.11
17873 info postinstall mime@1.2.11
17874 silly gunzTarPerm extractEntry test/client.js
17875 silly gunzTarPerm extractEntry test/crypto.js
17876 silly gunzTarPerm extractEntry test/index.js
17877 silly gunzTarPerm extractEntry test/readme.js
17878 silly gunzTarPerm extractEntry test/server.js
17879 silly gunzTarPerm extractEntry test/uri.js
17880 silly gunzTarPerm extractEntry test/utils.js
17881 silly gunzTarPerm extractEntry example/usage.js
17882 silly lockFile 02de07b6-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/hawk
17883 silly lockFile 02de07b6-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/hawk
17884 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17885 silly lockFile d52fe4ed-enzo-npm-hawk-0-10-2-package-tgz tar:///home/lerenzo/.npm/hawk/0.10.2/package.tgz
17886 info preinstall hawk@0.10.2
17887 verbose readDependencies using package.json deps
17888 verbose readDependencies using package.json deps
17889 verbose cache add [ 'hoek@0.7.x', null ]
17890 verbose cache add name=undefined spec="hoek@0.7.x" args=["hoek@0.7.x",null]
17891 verbose parsed url { protocol: null,
17891 verbose parsed url   slashes: null,
17891 verbose parsed url   auth: null,
17891 verbose parsed url   host: null,
17891 verbose parsed url   port: null,
17891 verbose parsed url   hostname: null,
17891 verbose parsed url   hash: null,
17891 verbose parsed url   search: null,
17891 verbose parsed url   query: null,
17891 verbose parsed url   pathname: 'hoek@0.7.x',
17891 verbose parsed url   path: 'hoek@0.7.x',
17891 verbose parsed url   href: 'hoek@0.7.x' }
17892 verbose cache add name="hoek" spec="0.7.x" args=["hoek","0.7.x"]
17893 verbose parsed url { protocol: null,
17893 verbose parsed url   slashes: null,
17893 verbose parsed url   auth: null,
17893 verbose parsed url   host: null,
17893 verbose parsed url   port: null,
17893 verbose parsed url   hostname: null,
17893 verbose parsed url   hash: null,
17893 verbose parsed url   search: null,
17893 verbose parsed url   query: null,
17893 verbose parsed url   pathname: '0.7.x',
17893 verbose parsed url   path: '0.7.x',
17893 verbose parsed url   href: '0.7.x' }
17894 verbose addNamed [ 'hoek', '0.7.x' ]
17895 verbose addNamed [ null, '>=0.7.0-0 <0.8.0-0' ]
17896 silly lockFile 102f8a33-hoek-0-7-x hoek@0.7.x
17897 verbose lock hoek@0.7.x /home/lerenzo/.npm/102f8a33-hoek-0-7-x.lock
17898 verbose cache add [ 'boom@0.3.x', null ]
17899 verbose cache add name=undefined spec="boom@0.3.x" args=["boom@0.3.x",null]
17900 verbose parsed url { protocol: null,
17900 verbose parsed url   slashes: null,
17900 verbose parsed url   auth: null,
17900 verbose parsed url   host: null,
17900 verbose parsed url   port: null,
17900 verbose parsed url   hostname: null,
17900 verbose parsed url   hash: null,
17900 verbose parsed url   search: null,
17900 verbose parsed url   query: null,
17900 verbose parsed url   pathname: 'boom@0.3.x',
17900 verbose parsed url   path: 'boom@0.3.x',
17900 verbose parsed url   href: 'boom@0.3.x' }
17901 verbose cache add name="boom" spec="0.3.x" args=["boom","0.3.x"]
17902 verbose parsed url { protocol: null,
17902 verbose parsed url   slashes: null,
17902 verbose parsed url   auth: null,
17902 verbose parsed url   host: null,
17902 verbose parsed url   port: null,
17902 verbose parsed url   hostname: null,
17902 verbose parsed url   hash: null,
17902 verbose parsed url   search: null,
17902 verbose parsed url   query: null,
17902 verbose parsed url   pathname: '0.3.x',
17902 verbose parsed url   path: '0.3.x',
17902 verbose parsed url   href: '0.3.x' }
17903 verbose addNamed [ 'boom', '0.3.x' ]
17904 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
17905 silly lockFile 3a42bd65-boom-0-3-x boom@0.3.x
17906 verbose lock boom@0.3.x /home/lerenzo/.npm/3a42bd65-boom-0-3-x.lock
17907 verbose cache add [ 'cryptiles@0.1.x', null ]
17908 verbose cache add name=undefined spec="cryptiles@0.1.x" args=["cryptiles@0.1.x",null]
17909 verbose parsed url { protocol: null,
17909 verbose parsed url   slashes: null,
17909 verbose parsed url   auth: null,
17909 verbose parsed url   host: null,
17909 verbose parsed url   port: null,
17909 verbose parsed url   hostname: null,
17909 verbose parsed url   hash: null,
17909 verbose parsed url   search: null,
17909 verbose parsed url   query: null,
17909 verbose parsed url   pathname: 'cryptiles@0.1.x',
17909 verbose parsed url   path: 'cryptiles@0.1.x',
17909 verbose parsed url   href: 'cryptiles@0.1.x' }
17910 verbose cache add name="cryptiles" spec="0.1.x" args=["cryptiles","0.1.x"]
17911 verbose parsed url { protocol: null,
17911 verbose parsed url   slashes: null,
17911 verbose parsed url   auth: null,
17911 verbose parsed url   host: null,
17911 verbose parsed url   port: null,
17911 verbose parsed url   hostname: null,
17911 verbose parsed url   hash: null,
17911 verbose parsed url   search: null,
17911 verbose parsed url   query: null,
17911 verbose parsed url   pathname: '0.1.x',
17911 verbose parsed url   path: '0.1.x',
17911 verbose parsed url   href: '0.1.x' }
17912 verbose addNamed [ 'cryptiles', '0.1.x' ]
17913 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
17914 silly lockFile 30375358-cryptiles-0-1-x cryptiles@0.1.x
17915 verbose lock cryptiles@0.1.x /home/lerenzo/.npm/30375358-cryptiles-0-1-x.lock
17916 silly addNameRange { name: 'hoek', range: '>=0.7.0-0 <0.8.0-0', hasData: false }
17917 silly addNameRange { name: 'boom', range: '>=0.3.0-0 <0.4.0-0', hasData: false }
17918 verbose url raw hoek
17919 verbose url resolving [ 'https://registry.npmjs.org/', './hoek' ]
17920 verbose url resolved https://registry.npmjs.org/hoek
17921 info trying registry request attempt 1 at 14:13:52
17922 http GET https://registry.npmjs.org/hoek
17923 verbose cache add [ 'sntp@0.1.x', null ]
17924 verbose cache add name=undefined spec="sntp@0.1.x" args=["sntp@0.1.x",null]
17925 verbose parsed url { protocol: null,
17925 verbose parsed url   slashes: null,
17925 verbose parsed url   auth: null,
17925 verbose parsed url   host: null,
17925 verbose parsed url   port: null,
17925 verbose parsed url   hostname: null,
17925 verbose parsed url   hash: null,
17925 verbose parsed url   search: null,
17925 verbose parsed url   query: null,
17925 verbose parsed url   pathname: 'sntp@0.1.x',
17925 verbose parsed url   path: 'sntp@0.1.x',
17925 verbose parsed url   href: 'sntp@0.1.x' }
17926 verbose cache add name="sntp" spec="0.1.x" args=["sntp","0.1.x"]
17927 verbose parsed url { protocol: null,
17927 verbose parsed url   slashes: null,
17927 verbose parsed url   auth: null,
17927 verbose parsed url   host: null,
17927 verbose parsed url   port: null,
17927 verbose parsed url   hostname: null,
17927 verbose parsed url   hash: null,
17927 verbose parsed url   search: null,
17927 verbose parsed url   query: null,
17927 verbose parsed url   pathname: '0.1.x',
17927 verbose parsed url   path: '0.1.x',
17927 verbose parsed url   href: '0.1.x' }
17928 verbose addNamed [ 'sntp', '0.1.x' ]
17929 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
17930 silly lockFile fcbf2e03-sntp-0-1-x sntp@0.1.x
17931 verbose lock sntp@0.1.x /home/lerenzo/.npm/fcbf2e03-sntp-0-1-x.lock
17932 silly addNameRange { name: 'cryptiles',
17932 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
17932 silly addNameRange   hasData: false }
17933 verbose url raw boom
17934 verbose url resolving [ 'https://registry.npmjs.org/', './boom' ]
17935 verbose url resolved https://registry.npmjs.org/boom
17936 info trying registry request attempt 1 at 14:13:52
17937 http GET https://registry.npmjs.org/boom
17938 verbose url raw cryptiles
17939 verbose url resolving [ 'https://registry.npmjs.org/', './cryptiles' ]
17940 verbose url resolved https://registry.npmjs.org/cryptiles
17941 info trying registry request attempt 1 at 14:13:52
17942 http GET https://registry.npmjs.org/cryptiles
17943 silly addNameRange { name: 'sntp', range: '>=0.1.0-0 <0.2.0-0', hasData: false }
17944 verbose url raw sntp
17945 verbose url resolving [ 'https://registry.npmjs.org/', './sntp' ]
17946 verbose url resolved https://registry.npmjs.org/sntp
17947 info trying registry request attempt 1 at 14:13:52
17948 http GET https://registry.npmjs.org/sntp
17949 silly lockFile fd9a6da8--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs
17950 silly lockFile fd9a6da8--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs
17951 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
17952 silly lockFile 7e5836ae-lerenzo-npm-qs-0-5-6-package-tgz tar:///home/lerenzo/.npm/qs/0.5.6/package.tgz
17953 info preinstall qs@0.5.6
17954 verbose readDependencies using package.json deps
17955 verbose readDependencies using package.json deps
17956 silly resolved []
17957 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs
17958 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/qs
17959 verbose linkStuff [ true,
17959 verbose linkStuff   '/usr/local/lib/node_modules',
17959 verbose linkStuff   false,
17959 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules' ]
17960 info linkStuff qs@0.5.6
17961 verbose linkBins qs@0.5.6
17962 verbose linkMans qs@0.5.6
17963 verbose rebuildBundles qs@0.5.6
17964 info install qs@0.5.6
17965 info postinstall qs@0.5.6
17966 http 200 https://registry.npmjs.org/ansi
17967 silly registry.get cb [ 200,
17967 silly registry.get   { vary: 'Accept',
17967 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
17967 silly registry.get     etag: '"DR38NPGBNJGS9OKALW7WTT1GT"',
17967 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:47 GMT',
17967 silly registry.get     'content-type': 'application/json',
17967 silly registry.get     'content-length': '19453' } ]
17968 silly addNameRange number 2 { name: 'ansi', range: '>=0.2.1-0 <0.3.0-0', hasData: true }
17969 silly addNameRange versions [ 'ansi',
17969 silly addNameRange   [ '0.0.1',
17969 silly addNameRange     '0.0.2',
17969 silly addNameRange     '0.0.3',
17969 silly addNameRange     '0.0.4',
17969 silly addNameRange     '0.1.0',
17969 silly addNameRange     '0.1.1',
17969 silly addNameRange     '0.1.2',
17969 silly addNameRange     '0.2.0',
17969 silly addNameRange     '0.2.1' ] ]
17970 verbose addNamed [ 'ansi', '0.2.1' ]
17971 verbose addNamed [ '0.2.1', '0.2.1' ]
17972 silly lockFile ce01b7e1-ansi-0-2-1 ansi@0.2.1
17973 verbose lock ansi@0.2.1 /home/lerenzo/.npm/ce01b7e1-ansi-0-2-1.lock
17974 silly lockFile 57de2c01-ry-npmjs-org-ansi-ansi-0-2-1-tgz https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz
17975 verbose lock https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz /home/lerenzo/.npm/57de2c01-ry-npmjs-org-ansi-ansi-0-2-1-tgz.lock
17976 verbose addRemoteTarball [ 'https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz',
17976 verbose addRemoteTarball   '3ab568ec18cd0ab7753c83117d57dad684a1c017' ]
17977 info retry fetch attempt 1 at 14:13:53
17978 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz
17979 http GET https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz
17980 info trying registry request attempt 2 at 14:13:54
17981 verbose etag "8VTIGE3KHXX4861152PVTWGF8"
17982 http GET https://registry.npmjs.org/graceful-fs
17983 info trying registry request attempt 2 at 14:13:54
17984 http GET https://registry.npmjs.org/extendable
17985 http 200 https://registry.npmjs.org/load/-/load-1.0.0.tgz
17986 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz
17987 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
17988 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package /home/lerenzo/.npm/e7205d52-0283-0-20415976527146995-package.lock
17989 silly lockFile 5951cd51-0283-0-20415976527146995-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz
17990 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz /home/lerenzo/.npm/5951cd51-0283-0-20415976527146995-tmp-tgz.lock
17991 silly gunzTarPerm modes [ '755', '644' ]
17992 silly gunzTarPerm extractEntry package.json
17993 silly gunzTarPerm extractEntry .npmignore
17994 silly gunzTarPerm extractEntry README.md
17995 silly gunzTarPerm extractEntry index.js
17996 silly gunzTarPerm extractEntry .travis.yml
17997 silly gunzTarPerm extractEntry CHANGELOG.md
17998 silly gunzTarPerm extractEntry test/index.js
17999 silly gunzTarPerm extractEntry test/.tern-port
18000 silly gunzTarPerm extractEntry test/fixtures/file.js
18001 silly gunzTarPerm extractEntry test/fixtures/file2.js
18002 silly gunzTarPerm extractEntry test/fixtures/file3.js
18003 silly gunzTarPerm extractEntry test/fixtures/globals.js
18004 silly gunzTarPerm extractEntry test/fixtures/.tern-port
18005 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18006 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18007 silly lockFile 5951cd51-0283-0-20415976527146995-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz
18008 silly lockFile 5951cd51-0283-0-20415976527146995-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/tmp.tgz
18009 verbose tar pack [ '/home/lerenzo/.npm/load/1.0.0/package.tgz',
18009 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package' ]
18010 verbose tarball /home/lerenzo/.npm/load/1.0.0/package.tgz
18011 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18012 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18013 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package /home/lerenzo/.npm/e7205d52-0283-0-20415976527146995-package.lock
18014 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18015 verbose lock tar:///home/lerenzo/.npm/load/1.0.0/package.tgz /home/lerenzo/.npm/e1e938a5-renzo-npm-load-1-0-0-package-tgz.lock
18016 http 200 https://registry.npmjs.org/async/-/async-0.2.9.tgz
18017 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18018 silly lockFile e7205d52-0283-0-20415976527146995-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572430283-0.20415976527146995/package
18019 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18020 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18021 silly lockFile 5aae626d-e-lerenzo-npm-load-1-0-0-package /home/lerenzo/.npm/load/1.0.0/package
18022 verbose lock /home/lerenzo/.npm/load/1.0.0/package /home/lerenzo/.npm/5aae626d-e-lerenzo-npm-load-1-0-0-package.lock
18023 silly lockFile 5aae626d-e-lerenzo-npm-load-1-0-0-package /home/lerenzo/.npm/load/1.0.0/package
18024 silly lockFile 5aae626d-e-lerenzo-npm-load-1-0-0-package /home/lerenzo/.npm/load/1.0.0/package
18025 verbose tar unpack /home/lerenzo/.npm/load/1.0.0/package.tgz
18026 silly lockFile 12b80d9f-e-lerenzo-npm-load-1-0-0-package tar:///home/lerenzo/.npm/load/1.0.0/package
18027 verbose lock tar:///home/lerenzo/.npm/load/1.0.0/package /home/lerenzo/.npm/12b80d9f-e-lerenzo-npm-load-1-0-0-package.lock
18028 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18029 verbose lock tar:///home/lerenzo/.npm/load/1.0.0/package.tgz /home/lerenzo/.npm/e1e938a5-renzo-npm-load-1-0-0-package-tgz.lock
18030 silly gunzTarPerm modes [ '755', '644' ]
18031 silly gunzTarPerm extractEntry package.json
18032 silly gunzTarPerm extractEntry .npmignore
18033 silly gunzTarPerm extractEntry README.md
18034 silly gunzTarPerm extractEntry index.js
18035 silly gunzTarPerm extractEntry .travis.yml
18036 silly gunzTarPerm extractEntry CHANGELOG.md
18037 silly gunzTarPerm extractEntry test/index.js
18038 silly gunzTarPerm extractEntry test/.tern-port
18039 silly gunzTarPerm extractEntry test/fixtures/file.js
18040 silly gunzTarPerm extractEntry test/fixtures/file2.js
18041 silly gunzTarPerm extractEntry test/fixtures/file3.js
18042 silly gunzTarPerm extractEntry test/fixtures/globals.js
18043 silly gunzTarPerm extractEntry test/fixtures/.tern-port
18044 silly lockFile 12b80d9f-e-lerenzo-npm-load-1-0-0-package tar:///home/lerenzo/.npm/load/1.0.0/package
18045 silly lockFile 12b80d9f-e-lerenzo-npm-load-1-0-0-package tar:///home/lerenzo/.npm/load/1.0.0/package
18046 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18047 silly lockFile e1e938a5-renzo-npm-load-1-0-0-package-tgz tar:///home/lerenzo/.npm/load/1.0.0/package.tgz
18048 verbose chmod /home/lerenzo/.npm/load/1.0.0/package.tgz 644
18049 verbose chown /home/lerenzo/.npm/load/1.0.0/package.tgz [ 1000, 1000 ]
18050 silly lockFile 39121c15-ry-npmjs-org-load-load-1-0-0-tgz https://registry.npmjs.org/load/-/load-1.0.0.tgz
18051 silly lockFile 39121c15-ry-npmjs-org-load-load-1-0-0-tgz https://registry.npmjs.org/load/-/load-1.0.0.tgz
18052 silly lockFile 9fe2265f-load-1-0-0 load@1.0.0
18053 silly lockFile 9fe2265f-load-1-0-0 load@1.0.0
18054 silly lockFile 8f7127d2-load-1-0-x load@1.0.x
18055 silly lockFile 8f7127d2-load-1-0-x load@1.0.x
18056 http 200 https://registry.npmjs.org/request/-/request-2.9.203.tgz
18057 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz
18058 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18059 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package /home/lerenzo/.npm/ae15aed0-2939-0-43157198932021856-package.lock
18060 silly lockFile ef24347a-2939-0-43157198932021856-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz
18061 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz /home/lerenzo/.npm/ef24347a-2939-0-43157198932021856-tmp-tgz.lock
18062 silly gunzTarPerm modes [ '755', '644' ]
18063 silly gunzTarPerm extractEntry package.json
18064 silly gunzTarPerm extractEntry README.md
18065 silly gunzTarPerm extractEntry LICENSE
18066 silly gunzTarPerm extractEntry component.json
18067 silly gunzTarPerm extractEntry lib/async.js
18068 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18069 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18070 silly lockFile ef24347a-2939-0-43157198932021856-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz
18071 silly lockFile ef24347a-2939-0-43157198932021856-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/tmp.tgz
18072 verbose tar pack [ '/home/lerenzo/.npm/async/0.2.9/package.tgz',
18072 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package' ]
18073 verbose tarball /home/lerenzo/.npm/async/0.2.9/package.tgz
18074 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18075 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18076 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package /home/lerenzo/.npm/ae15aed0-2939-0-43157198932021856-package.lock
18077 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18078 verbose lock tar:///home/lerenzo/.npm/async/0.2.9/package.tgz /home/lerenzo/.npm/a48b6624-enzo-npm-async-0-2-9-package-tgz.lock
18079 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18080 silly lockFile ae15aed0-2939-0-43157198932021856-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572432939-0.43157198932021856/package
18081 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18082 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18083 silly lockFile 45e89380--lerenzo-npm-async-0-2-9-package /home/lerenzo/.npm/async/0.2.9/package
18084 verbose lock /home/lerenzo/.npm/async/0.2.9/package /home/lerenzo/.npm/45e89380--lerenzo-npm-async-0-2-9-package.lock
18085 silly lockFile 45e89380--lerenzo-npm-async-0-2-9-package /home/lerenzo/.npm/async/0.2.9/package
18086 silly lockFile 45e89380--lerenzo-npm-async-0-2-9-package /home/lerenzo/.npm/async/0.2.9/package
18087 verbose tar unpack /home/lerenzo/.npm/async/0.2.9/package.tgz
18088 silly lockFile 08b94f6c--lerenzo-npm-async-0-2-9-package tar:///home/lerenzo/.npm/async/0.2.9/package
18089 verbose lock tar:///home/lerenzo/.npm/async/0.2.9/package /home/lerenzo/.npm/08b94f6c--lerenzo-npm-async-0-2-9-package.lock
18090 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18091 verbose lock tar:///home/lerenzo/.npm/async/0.2.9/package.tgz /home/lerenzo/.npm/a48b6624-enzo-npm-async-0-2-9-package-tgz.lock
18092 silly gunzTarPerm modes [ '755', '644' ]
18093 silly gunzTarPerm extractEntry package.json
18094 silly gunzTarPerm extractEntry README.md
18095 silly gunzTarPerm extractEntry LICENSE
18096 silly gunzTarPerm extractEntry component.json
18097 silly gunzTarPerm extractEntry lib/async.js
18098 silly lockFile 08b94f6c--lerenzo-npm-async-0-2-9-package tar:///home/lerenzo/.npm/async/0.2.9/package
18099 silly lockFile 08b94f6c--lerenzo-npm-async-0-2-9-package tar:///home/lerenzo/.npm/async/0.2.9/package
18100 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18101 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
18102 verbose chmod /home/lerenzo/.npm/async/0.2.9/package.tgz 644
18103 verbose chown /home/lerenzo/.npm/async/0.2.9/package.tgz [ 1000, 1000 ]
18104 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
18105 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
18106 silly lockFile be62480b-async-0-2-9 async@0.2.9
18107 silly lockFile be62480b-async-0-2-9 async@0.2.9
18108 silly lockFile c1cfc253-async-0-2-7 async@~0.2.7
18109 silly lockFile c1cfc253-async-0-2-7 async@~0.2.7
18110 http 200 https://registry.npmjs.org/combined-stream
18111 silly registry.get cb [ 200,
18111 silly registry.get   { vary: 'Accept',
18111 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18111 silly registry.get     etag: '"7GOPQ5A1IHQ6AIHJHIP2M1TQ1"',
18111 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:53 GMT',
18111 silly registry.get     'content-type': 'application/json',
18111 silly registry.get     'content-length': '9687' } ]
18112 silly addNameRange number 2 { name: 'combined-stream',
18112 silly addNameRange   range: '>=0.0.4-0 <0.1.0-0',
18112 silly addNameRange   hasData: true }
18113 silly addNameRange versions [ 'combined-stream',
18113 silly addNameRange   [ '0.0.0', '0.0.1', '0.0.2', '0.0.3', '0.0.4' ] ]
18114 verbose addNamed [ 'combined-stream', '0.0.4' ]
18115 verbose addNamed [ '0.0.4', '0.0.4' ]
18116 silly lockFile fa19b583-combined-stream-0-0-4 combined-stream@0.0.4
18117 verbose lock combined-stream@0.0.4 /home/lerenzo/.npm/fa19b583-combined-stream-0-0-4.lock
18118 silly lockFile f1cfa584-stream-combined-stream-0-0-4-tgz https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz
18119 verbose lock https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz /home/lerenzo/.npm/f1cfa584-stream-combined-stream-0-0-4-tgz.lock
18120 verbose addRemoteTarball [ 'https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz',
18120 verbose addRemoteTarball   '2d1a43347dbe9515a4a2796732e5b88473840b22' ]
18121 info retry fetch attempt 1 at 14:13:58
18122 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz
18123 http GET https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz
18124 http 200 https://registry.npmjs.org/ncp
18125 silly registry.get cb [ 200,
18125 silly registry.get   { vary: 'Accept',
18125 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18125 silly registry.get     etag: '"856X78QJAOSFALTQIHC5I7U6O"',
18125 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:55 GMT',
18125 silly registry.get     'content-type': 'application/json',
18125 silly registry.get     'content-length': '34989' } ]
18126 silly addNameRange number 2 { name: 'ncp', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
18127 silly addNameRange versions [ 'ncp',
18127 silly addNameRange   [ '0.0.0',
18127 silly addNameRange     '0.0.1',
18127 silly addNameRange     '0.0.2',
18127 silly addNameRange     '0.1.0',
18127 silly addNameRange     '0.1.1',
18127 silly addNameRange     '0.1.2',
18127 silly addNameRange     '0.2.0',
18127 silly addNameRange     '0.2.1',
18127 silly addNameRange     '0.2.2',
18127 silly addNameRange     '0.2.3',
18127 silly addNameRange     '0.2.4',
18127 silly addNameRange     '0.2.5',
18127 silly addNameRange     '0.2.6',
18127 silly addNameRange     '0.3.0',
18127 silly addNameRange     '0.4.0',
18127 silly addNameRange     '0.2.7',
18127 silly addNameRange     '0.4.1',
18127 silly addNameRange     '0.4.2' ] ]
18128 verbose addNamed [ 'ncp', '0.2.7' ]
18129 verbose addNamed [ '0.2.7', '0.2.7' ]
18130 silly lockFile e7e84fb9-ncp-0-2-7 ncp@0.2.7
18131 verbose lock ncp@0.2.7 /home/lerenzo/.npm/e7e84fb9-ncp-0-2-7.lock
18132 silly lockFile f2fbe518-stry-npmjs-org-ncp-ncp-0-2-7-tgz https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz
18133 verbose lock https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz /home/lerenzo/.npm/f2fbe518-stry-npmjs-org-ncp-ncp-0-2-7-tgz.lock
18134 verbose addRemoteTarball [ 'https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz',
18134 verbose addRemoteTarball   '46fac2b7dda2560a4cb7e628677bd5f64eac5be1' ]
18135 info retry fetch attempt 1 at 14:14:02
18136 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572442939-0.09003321686759591/tmp.tgz
18137 http GET https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz
18138 http 200 https://registry.npmjs.org/boom
18139 silly registry.get cb [ 200,
18139 silly registry.get   { vary: 'Accept',
18139 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18139 silly registry.get     etag: '"6GHAEEA4W4QUJHU43O5L64WE7"',
18139 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:03 GMT',
18139 silly registry.get     'content-type': 'application/json',
18139 silly registry.get     'content-length': '36716' } ]
18140 silly addNameRange number 2 { name: 'boom', range: '>=0.3.0-0 <0.4.0-0', hasData: true }
18141 silly addNameRange versions [ 'boom',
18141 silly addNameRange   [ '0.0.1',
18141 silly addNameRange     '0.0.2',
18141 silly addNameRange     '0.1.0',
18141 silly addNameRange     '0.2.0',
18141 silly addNameRange     '0.2.1',
18141 silly addNameRange     '0.3.0',
18141 silly addNameRange     '0.3.1',
18141 silly addNameRange     '0.3.2',
18141 silly addNameRange     '0.3.3',
18141 silly addNameRange     '0.3.4',
18141 silly addNameRange     '0.3.5',
18141 silly addNameRange     '0.3.6',
18141 silly addNameRange     '0.3.7',
18141 silly addNameRange     '0.3.8',
18141 silly addNameRange     '0.4.0',
18141 silly addNameRange     '0.4.1',
18141 silly addNameRange     '0.4.2',
18141 silly addNameRange     '1.0.0',
18141 silly addNameRange     '1.0.1',
18141 silly addNameRange     '1.0.2',
18141 silly addNameRange     '1.1.0',
18141 silly addNameRange     '1.1.1',
18141 silly addNameRange     '1.1.2',
18141 silly addNameRange     '1.2.0',
18141 silly addNameRange     '1.2.1' ] ]
18142 verbose addNamed [ 'boom', '0.3.8' ]
18143 verbose addNamed [ '0.3.8', '0.3.8' ]
18144 silly lockFile 886cb87b-boom-0-3-8 boom@0.3.8
18145 verbose lock boom@0.3.8 /home/lerenzo/.npm/886cb87b-boom-0-3-8.lock
18146 silly lockFile be966501-ry-npmjs-org-boom-boom-0-3-8-tgz https://registry.npmjs.org/boom/-/boom-0.3.8.tgz
18147 verbose lock https://registry.npmjs.org/boom/-/boom-0.3.8.tgz /home/lerenzo/.npm/be966501-ry-npmjs-org-boom-boom-0-3-8-tgz.lock
18148 verbose addRemoteTarball [ 'https://registry.npmjs.org/boom/-/boom-0.3.8.tgz',
18148 verbose addRemoteTarball   'c8cdb041435912741628c044ecc732d1d17c09ea' ]
18149 info retry fetch attempt 1 at 14:14:05
18150 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz
18151 http GET https://registry.npmjs.org/boom/-/boom-0.3.8.tgz
18152 http 200 https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz
18153 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz
18154 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18155 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package /home/lerenzo/.npm/21ed7497-17559-0-3826104283798486-package.lock
18156 silly lockFile 4274ac46-17559-0-3826104283798486-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz
18157 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz /home/lerenzo/.npm/4274ac46-17559-0-3826104283798486-tmp-tgz.lock
18158 silly gunzTarPerm modes [ '755', '644' ]
18159 silly gunzTarPerm extractEntry package.json
18160 silly gunzTarPerm extractEntry .npmignore
18161 silly gunzTarPerm extractEntry README.md
18162 silly gunzTarPerm extractEntry LICENSE
18163 silly gunzTarPerm extractEntry index.js
18164 silly gunzTarPerm extractEntry .travis.yml
18165 silly gunzTarPerm extractEntry images/hawk.png
18166 silly gunzTarPerm extractEntry images/logo.png
18167 silly gunzTarPerm extractEntry Makefile
18168 silly gunzTarPerm extractEntry lib/browser.js
18169 silly gunzTarPerm extractEntry lib/client.js
18170 silly gunzTarPerm extractEntry lib/crypto.js
18171 silly gunzTarPerm extractEntry lib/index.js
18172 silly gunzTarPerm extractEntry lib/server.js
18173 silly gunzTarPerm extractEntry lib/utils.js
18174 silly gunzTarPerm extractEntry test/browser.js
18175 silly gunzTarPerm extractEntry test/client.js
18176 silly gunzTarPerm extractEntry test/crypto.js
18177 silly gunzTarPerm extractEntry test/index.js
18178 silly gunzTarPerm extractEntry test/message.js
18179 silly gunzTarPerm extractEntry test/readme.js
18180 silly gunzTarPerm extractEntry test/server.js
18181 silly gunzTarPerm extractEntry test/uri.js
18182 silly gunzTarPerm extractEntry test/utils.js
18183 silly gunzTarPerm extractEntry example/usage.js
18184 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18185 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18186 silly lockFile 4274ac46-17559-0-3826104283798486-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz
18187 silly lockFile 4274ac46-17559-0-3826104283798486-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/tmp.tgz
18188 verbose tar pack [ '/home/lerenzo/.npm/hawk/1.0.0/package.tgz',
18188 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package' ]
18189 verbose tarball /home/lerenzo/.npm/hawk/1.0.0/package.tgz
18190 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18191 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18192 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package /home/lerenzo/.npm/21ed7497-17559-0-3826104283798486-package.lock
18193 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18194 verbose lock tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz /home/lerenzo/.npm/c401199b-renzo-npm-hawk-1-0-0-package-tgz.lock
18195 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18196 silly lockFile 21ed7497-17559-0-3826104283798486-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572417559-0.3826104283798486/package
18197 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18198 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18199 silly lockFile 2f6d98d3-e-lerenzo-npm-hawk-1-0-0-package /home/lerenzo/.npm/hawk/1.0.0/package
18200 verbose lock /home/lerenzo/.npm/hawk/1.0.0/package /home/lerenzo/.npm/2f6d98d3-e-lerenzo-npm-hawk-1-0-0-package.lock
18201 silly lockFile 2f6d98d3-e-lerenzo-npm-hawk-1-0-0-package /home/lerenzo/.npm/hawk/1.0.0/package
18202 silly lockFile 2f6d98d3-e-lerenzo-npm-hawk-1-0-0-package /home/lerenzo/.npm/hawk/1.0.0/package
18203 verbose tar unpack /home/lerenzo/.npm/hawk/1.0.0/package.tgz
18204 silly lockFile 416c1270-e-lerenzo-npm-hawk-1-0-0-package tar:///home/lerenzo/.npm/hawk/1.0.0/package
18205 verbose lock tar:///home/lerenzo/.npm/hawk/1.0.0/package /home/lerenzo/.npm/416c1270-e-lerenzo-npm-hawk-1-0-0-package.lock
18206 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18207 verbose lock tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz /home/lerenzo/.npm/c401199b-renzo-npm-hawk-1-0-0-package-tgz.lock
18208 silly gunzTarPerm modes [ '755', '644' ]
18209 silly gunzTarPerm extractEntry package.json
18210 silly gunzTarPerm extractEntry .npmignore
18211 silly gunzTarPerm extractEntry README.md
18212 silly gunzTarPerm extractEntry LICENSE
18213 silly gunzTarPerm extractEntry index.js
18214 silly gunzTarPerm extractEntry .travis.yml
18215 silly gunzTarPerm extractEntry images/hawk.png
18216 silly gunzTarPerm extractEntry images/logo.png
18217 silly gunzTarPerm extractEntry Makefile
18218 silly gunzTarPerm extractEntry lib/browser.js
18219 silly gunzTarPerm extractEntry lib/client.js
18220 silly gunzTarPerm extractEntry lib/crypto.js
18221 silly gunzTarPerm extractEntry lib/index.js
18222 silly gunzTarPerm extractEntry lib/server.js
18223 silly gunzTarPerm extractEntry lib/utils.js
18224 silly gunzTarPerm extractEntry test/browser.js
18225 silly gunzTarPerm extractEntry test/client.js
18226 silly gunzTarPerm extractEntry test/crypto.js
18227 silly gunzTarPerm extractEntry test/index.js
18228 silly gunzTarPerm extractEntry test/message.js
18229 silly gunzTarPerm extractEntry test/readme.js
18230 silly gunzTarPerm extractEntry test/server.js
18231 silly gunzTarPerm extractEntry test/uri.js
18232 silly gunzTarPerm extractEntry test/utils.js
18233 silly gunzTarPerm extractEntry example/usage.js
18234 silly lockFile 416c1270-e-lerenzo-npm-hawk-1-0-0-package tar:///home/lerenzo/.npm/hawk/1.0.0/package
18235 silly lockFile 416c1270-e-lerenzo-npm-hawk-1-0-0-package tar:///home/lerenzo/.npm/hawk/1.0.0/package
18236 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18237 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18238 verbose chmod /home/lerenzo/.npm/hawk/1.0.0/package.tgz 644
18239 verbose chown /home/lerenzo/.npm/hawk/1.0.0/package.tgz [ 1000, 1000 ]
18240 silly lockFile 082d118a-ry-npmjs-org-hawk-hawk-1-0-0-tgz https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz
18241 silly lockFile 082d118a-ry-npmjs-org-hawk-hawk-1-0-0-tgz https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz
18242 silly lockFile 1ca87dbe-hawk-1-0-0 hawk@1.0.0
18243 silly lockFile 1ca87dbe-hawk-1-0-0 hawk@1.0.0
18244 silly lockFile 327094b8-hawk-1-0-0 hawk@~1.0.0
18245 silly lockFile 327094b8-hawk-1-0-0 hawk@~1.0.0
18246 silly resolved [ { author:
18246 silly resolved      { name: 'Robert Kieffer',
18246 silly resolved        email: 'robert@broofa.com',
18246 silly resolved        url: 'http://github.com/broofa' },
18246 silly resolved     contributors: [ [Object] ],
18246 silly resolved     dependencies: {},
18246 silly resolved     description: 'A comprehensive library for mime-type mapping',
18246 silly resolved     devDependencies: {},
18246 silly resolved     keywords: [ 'util', 'mime' ],
18246 silly resolved     main: 'mime.js',
18246 silly resolved     name: 'mime',
18246 silly resolved     repository: { url: 'https://github.com/broofa/node-mime', type: 'git' },
18246 silly resolved     version: '1.2.11',
18246 silly resolved     readme: '# mime\n\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last \'/\' or \'.\').  E.g.\n\n    var mime = require(\'mime\');\n\n    mime.lookup(\'/path/to/file.txt\');         // => \'text/plain\'\n    mime.lookup(\'file.txt\');                  // => \'text/plain\'\n    mime.lookup(\'.TXT\');                      // => \'text/plain\'\n    mime.lookup(\'htm\');                       // => \'text/html\'\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n    mime.extension(\'text/html\');                 // => \'html\'\n    mime.extension(\'application/octet-stream\');  // => \'bin\'\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n    mime.charsets.lookup(\'text/plain\');        // => \'UTF-8\'\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n    mime.define({\n        \'text/x-some-format\': [\'x-sf\', \'x-sft\', \'x-sfml\'],\n        \'application/x-my-type\': [\'x-mt\', \'x-mtt\'],\n        // etc ...\n    });\n\n    mime.lookup(\'x-sft\');                 // => \'text/x-some-format\'\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n    mime.extension(\'text/x-some-format\'); // => \'x-sf\'\n\n### mime.load(filepath)\n\nLoad mappings from an Apache ".types" format file\n\n    mime.load(\'./my_project.types\');\n\nThe .types file format is simple -  See the `types` dir for examples.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/broofa/node-mime/issues' },
18246 silly resolved     homepage: 'https://github.com/broofa/node-mime',
18246 silly resolved     _id: 'mime@1.2.11',
18246 silly resolved     _from: 'mime@~1.2.9',
18246 silly resolved     scripts: {} },
18246 silly resolved   { name: 'json-stringify-safe',
18246 silly resolved     version: '5.0.0',
18246 silly resolved     description: 'Like JSON.stringify, but doesn\'t blow up on circular refs',
18246 silly resolved     main: 'stringify.js',
18246 silly resolved     scripts: { test: 'node test.js' },
18246 silly resolved     repository:
18246 silly resolved      { type: 'git',
18246 silly resolved        url: 'git://github.com/isaacs/json-stringify-safe' },
18246 silly resolved     keywords: [ 'json', 'stringify', 'circular', 'safe' ],
18246 silly resolved     author:
18246 silly resolved      { name: 'Isaac Z. Schlueter',
18246 silly resolved        email: 'i@izs.me',
18246 silly resolved        url: 'http://blog.izs.me' },
18246 silly resolved     license: 'BSD',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     readme: '# json-stringify-safe\n\nLike JSON.stringify, but doesn\'t throw on circular references.\n\n## Usage\n\nTakes the same arguments as `JSON.stringify`.\n\n```javascript\nvar stringify = require(\'json-stringify-safe\');\nvar circularObj = {};\ncircularObj.circularRef = circularObj;\ncircularObj.list = [ circularObj, circularObj ];\nconsole.log(stringify(circularObj, null, 2));\n```\n\nOutput:\n\n```json\n{\n  "circularRef": "[Circular]",\n  "list": [\n    "[Circular]",\n    "[Circular]"\n  ]\n}\n```\n\n## Details\n\n```\nstringify(obj, serializer, indent, decycler)\n```\n\nThe first three arguments are the same as to JSON.stringify.  The last\nis an argument that\'s only used when the object has been seen already.\n\nThe default `decycler` function returns the string `\'[Circular]\'`.\nIf, for example, you pass in `function(k,v){}` (return nothing) then it\nwill prune cycles.  If you pass in `function(k,v){ return {foo: \'bar\'}}`,\nthen cyclical objects will always be represented as `{"foo":"bar"}` in\nthe result.\n\n```\nstringify.getSerialize(serializer, decycler)\n```\n\nReturns a serializer that can be used elsewhere.  This is the actual\nfunction that\'s passed to JSON.stringify.\n',
18246 silly resolved     bugs: { url: 'https://github.com/isaacs/json-stringify-safe/issues' },
18246 silly resolved     homepage: 'https://github.com/isaacs/json-stringify-safe',
18246 silly resolved     _id: 'json-stringify-safe@5.0.0',
18246 silly resolved     dist: { shasum: '42de0e4afbc779e984da93cb0fafae2e647f0223' },
18246 silly resolved     _from: 'json-stringify-safe@~5.0.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Mikeal Rogers',
18246 silly resolved        email: 'mikeal.rogers@gmail.com',
18246 silly resolved        url: 'http://www.futurealoof.com' },
18246 silly resolved     name: 'tunnel-agent',
18246 silly resolved     description: 'HTTP proxy tunneling agent. Formerly part of mikeal/request, now a standalone module.',
18246 silly resolved     version: '0.3.0',
18246 silly resolved     repository: { url: 'https://github.com/mikeal/tunnel-agent' },
18246 silly resolved     main: 'index.js',
18246 silly resolved     dependencies: {},
18246 silly resolved     devDependencies: {},
18246 silly resolved     optionalDependencies: {},
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     readme: 'tunnel-agent\n============\n\nHTTP proxy tunneling agent. Formerly part of mikeal/request, now a standalone module.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/mikeal/tunnel-agent/issues' },
18246 silly resolved     homepage: 'https://github.com/mikeal/tunnel-agent',
18246 silly resolved     _id: 'tunnel-agent@0.3.0',
18246 silly resolved     dist: { shasum: '9327e5deaa41ffba0b9279555829afe6758aea9e' },
18246 silly resolved     _from: 'tunnel-agent@~0.3.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Mikeal Rogers',
18246 silly resolved        email: 'mikeal.rogers@gmail.com',
18246 silly resolved        url: 'http://www.futurealoof.com' },
18246 silly resolved     name: 'forever-agent',
18246 silly resolved     description: 'HTTP Agent that keeps socket connections alive between keep-alive requests. Formerly part of mikeal/request, now a standalone module.',
18246 silly resolved     version: '0.5.0',
18246 silly resolved     repository: { url: 'https://github.com/mikeal/forever-agent' },
18246 silly resolved     main: 'index.js',
18246 silly resolved     dependencies: {},
18246 silly resolved     devDependencies: {},
18246 silly resolved     optionalDependencies: {},
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     readme: 'forever-agent\n=============\n\nHTTP Agent that keeps socket connections alive between keep-alive requests. Formerly part of mikeal/request, now a standalone module.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/mikeal/forever-agent/issues' },
18246 silly resolved     homepage: 'https://github.com/mikeal/forever-agent',
18246 silly resolved     _id: 'forever-agent@0.5.0',
18246 silly resolved     dist: { shasum: '13dcae5391e0c8e23e2225e113cb78f4e090a722' },
18246 silly resolved     _from: 'forever-agent@~0.5.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Mikeal Rogers',
18246 silly resolved        email: 'mikeal.rogers@gmail.com',
18246 silly resolved        url: 'http://www.futurealoof.com' },
18246 silly resolved     name: 'oauth-sign',
18246 silly resolved     description: 'OAuth 1 signing. Formerly a vendor lib in mikeal/request, now a standalone module.',
18246 silly resolved     version: '0.3.0',
18246 silly resolved     repository: { url: 'https://github.com/mikeal/oauth-sign' },
18246 silly resolved     main: 'index.js',
18246 silly resolved     dependencies: {},
18246 silly resolved     devDependencies: {},
18246 silly resolved     optionalDependencies: {},
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     scripts: { test: 'node test.js' },
18246 silly resolved     readme: 'oauth-sign\n==========\n\nOAuth 1 signing. Formerly a vendor lib in mikeal/request, now a standalone module. \n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/mikeal/oauth-sign/issues' },
18246 silly resolved     homepage: 'https://github.com/mikeal/oauth-sign',
18246 silly resolved     _id: 'oauth-sign@0.3.0',
18246 silly resolved     dist: { shasum: 'ede953b25907f6c2353888b62a2f8a0297f69f1b' },
18246 silly resolved     _from: 'oauth-sign@~0.3.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Mikeal Rogers',
18246 silly resolved        email: 'mikeal.rogers@gmail.com',
18246 silly resolved        url: 'http://www.futurealoof.com' },
18246 silly resolved     name: 'aws-sign',
18246 silly resolved     description: 'AWS signing. Originally pulled from LearnBoost/knox, maintained as vendor in request, now a standalone module.',
18246 silly resolved     version: '0.3.0',
18246 silly resolved     repository: { url: 'https://github.com/mikeal/aws-sign' },
18246 silly resolved     main: 'index.js',
18246 silly resolved     dependencies: {},
18246 silly resolved     devDependencies: {},
18246 silly resolved     optionalDependencies: {},
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     readme: 'aws-sign\n========\n\nAWS signing. Originally pulled from LearnBoost/knox, maintained as vendor in request, now a standalone module.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/mikeal/aws-sign/issues' },
18246 silly resolved     homepage: 'https://github.com/mikeal/aws-sign',
18246 silly resolved     _id: 'aws-sign@0.3.0',
18246 silly resolved     dist: { shasum: '61a747cebf4a3e7205a384f247fee259d223e573' },
18246 silly resolved     _from: 'aws-sign@~0.3.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Mikeal Rogers',
18246 silly resolved        email: 'mikeal.rogers@gmail.com',
18246 silly resolved        url: 'http://www.futurealoof.com' },
18246 silly resolved     name: 'cookie-jar',
18246 silly resolved     description: 'Cookie Jar. Originally pulled form tobi, maintained as vendor in request, now a standalone module.',
18246 silly resolved     version: '0.3.0',
18246 silly resolved     repository: { url: 'https://github.com/mikeal/cookie-jar' },
18246 silly resolved     main: 'index.js',
18246 silly resolved     scripts: { test: 'node tests/run.js' },
18246 silly resolved     dependencies: {},
18246 silly resolved     devDependencies: {},
18246 silly resolved     optionalDependencies: {},
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     readme: 'cookie-jar\n==========\n\nCookie Jar. Originally pulled from LearnBoost/tobi, maintained as vendor in request, now a standalone module.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/mikeal/cookie-jar/issues' },
18246 silly resolved     homepage: 'https://github.com/mikeal/cookie-jar',
18246 silly resolved     _id: 'cookie-jar@0.3.0',
18246 silly resolved     dist: { shasum: 'a07eb22b9b302c3519c220a0d9848bc19df27c13' },
18246 silly resolved     _from: 'cookie-jar@~0.3.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz' },
18246 silly resolved   { author:
18246 silly resolved      { name: 'Felix Geisendörfer',
18246 silly resolved        email: 'felix@debuggable.com',
18246 silly resolved        url: 'http://debuggable.com/' },
18246 silly resolved     name: 'form-data',
18246 silly resolved     description: 'A module to create readable "multipart/form-data" streams.  Can be used to submit forms and file uploads to other web applications.',
18246 silly resolved     version: '0.1.2',
18246 silly resolved     repository:
18246 silly resolved      { type: 'git',
18246 silly resolved        url: 'git://github.com/felixge/node-form-data.git' },
18246 silly resolved     main: './lib/form_data',
18246 silly resolved     scripts: { test: 'node test/run.js' },
18246 silly resolved     engines: { node: '>= 0.6' },
18246 silly resolved     dependencies: { 'combined-stream': '~0.0.4', mime: '~1.2.11', async: '~0.2.9' },
18246 silly resolved     licenses: [ [Object] ],
18246 silly resolved     devDependencies:
18246 silly resolved      { fake: '~0.2.2',
18246 silly resolved        far: '~0.0.7',
18246 silly resolved        formidable: '~1.0.14',
18246 silly resolved        request: '~2.27.0' },
18246 silly resolved     readme: '# Form-Data [![Build Status](https://travis-ci.org/felixge/node-form-data.png?branch=master)](https://travis-ci.org/felixge/node-form-data) [![Dependency Status](https://gemnasium.com/felixge/node-form-data.png)](https://gemnasium.com/felixge/node-form-data)\n\nA module to create readable ```"multipart/form-data"``` streams. Can be used to submit forms and file uploads to other web applications.\n\nThe API of this module is inspired by the [XMLHttpRequest-2 FormData Interface][xhr2-fd].\n\n[xhr2-fd]: http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface\n[streams2-thing]: http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\n\n## Install\n\n```\nnpm install form-data\n```\n\n## Usage\n\nIn this example we are constructing a form with 3 fields that contain a string,\na buffer and a file stream.\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar fs = require(\'fs\');\n\nvar form = new FormData();\nform.append(\'my_field\', \'my value\');\nform.append(\'my_buffer\', new Buffer(10));\nform.append(\'my_file\', fs.createReadStream(\'/foo/bar.jpg\'));\n```\n\nAlso you can use http-response stream:\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar http = require(\'http\');\n\nvar form = new FormData();\n\nhttp.request(\'http://nodejs.org/images/logo.png\', function(response) {\n  form.append(\'my_field\', \'my value\');\n  form.append(\'my_buffer\', new Buffer(10));\n  form.append(\'my_logo\', response);\n});\n```\n\nOr @mikeal\'s request stream:\n\n``` javascript\nvar FormData = require(\'form-data\');\nvar request = require(\'request\');\n\nvar form = new FormData();\n\nform.append(\'my_field\', \'my value\');\nform.append(\'my_buffer\', new Buffer(10));\nform.append(\'my_logo\', request(\'http://nodejs.org/images/logo.png\'));\n```\n\nIn order to submit this form to a web application, call ```submit(url, [callback])``` method:\n\n``` javascript\nform.submit(\'http://example.org/\', function(err, res) {\n  // res – response object (http.IncomingMessage)  //\n  res.resume(); // for node-0.10.x\n});\n\n```\n\nFor more advanced request manipulations ```submit()``` method returns ```http.ClientRequest``` object, or you can choose from one of the alternative submission methods.\n\n### Alternative submission methods\n\nYou can use node\'s http client interface:\n\n``` javascript\nvar http = require(\'http\');\n\nvar request = http.request({\n  method: \'post\',\n  host: \'example.org\',\n  path: \'/upload\',\n  headers: form.getHeaders()\n});\n\nform.pipe(request);\n\nrequest.on(\'response\', function(res) {\n  console.log(res.statusCode);\n});\n```\n\nOr if you would prefer the `\'Content-Length\'` header to be set for you:\n\n``` javascript\nform.submit(\'example.org/upload\', function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\nTo use custom headers and pre-known length in parts:\n\n``` javascript\nvar CRLF = \'\\r\\n\';\nvar form = new FormData();\n\nvar options = {\n  header: CRLF + \'--\' + form.getBoundary() + CRLF + \'X-Custom-Header: 123\' + CRLF + CRLF,\n  knownLength: 1\n};\n\nform.append(\'my_buffer\', buffer, options);\n\nform.submit(\'http://example.com/\', function(err, res) {\n  if (err) throw err;\n  console.log(\'Done\');\n});\n```\n\nForm-Data can recognize and fetch all the required information from common types of streams (```fs.readStream```, ```http.response``` and ```mikeal\'s request```), for some other types of streams you\'d need to provide "file"-related information manually:\n\n``` javascript\nsomeModule.stream(function(err, stdout, stderr) {\n  if (err) throw err;\n\n  var form = new FormData();\n\n  form.append(\'file\', stdout, {\n    filename: \'unicycle.jpg\',\n    contentType: \'image/jpg\',\n    knownLength: 19806\n  });\n\n  form.submit(\'http://example.com/\', function(err, res) {\n    if (err) throw err;\n    console.log(\'Done\');\n  });\n});\n```\n\nFor edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to `form.submit()` as first parameter:\n\n``` javascript\nform.submit({\n  host: \'example.com\',\n  path: \'/probably.php?extra=params\',\n  auth: \'username:password\'\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n## Notes\n\n- ```getLengthSync()``` method DOESN\'T calculate length for streams, use ```knownLength``` options as workaround.\n- If it feels like FormData hangs after submit and you\'re on ```node-0.10```, please check [Compatibility with Older Node Versions][streams2-thing]\n\n## TODO\n\n- Add new streams (0.10) support and try really hard not to break it for 0.8.x.\n\n## License\n\nForm-Data is licensed under the MIT license.\n',
18246 silly resolved     readmeFilename: 'Readme.md',
18246 silly resolved     bugs: { url: 'https://github.com/felixge/node-form-data/issues' },
18246 silly resolved     homepage: 'https://github.com/felixge/node-form-data',
18246 silly resolved     _id: 'form-data@0.1.2',
18246 silly resolved     dist: { shasum: 'a2776685729e771eb60b3ee3d290122f78c97da2' },
18246 silly resolved     _from: 'form-data@~0.1.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/form-data/-/form-data-0.1.2.tgz' },
18246 silly resolved   { name: 'qs',
18246 silly resolved     description: 'querystring parser',
18246 silly resolved     version: '0.6.5',
18246 silly resolved     keywords: [ 'query string', 'parser', 'component' ],
18246 silly resolved     repository:
18246 silly resolved      { type: 'git',
18246 silly resolved        url: 'git://github.com/visionmedia/node-querystring.git' },
18246 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*' },
18246 silly resolved     scripts: { test: 'make test' },
18246 silly resolved     author:
18246 silly resolved      { name: 'TJ Holowaychuk',
18246 silly resolved        email: 'tj@vision-media.ca',
18246 silly resolved        url: 'http://tjholowaychuk.com' },
18246 silly resolved     main: 'index',
18246 silly resolved     engines: { node: '*' },
18246 silly resolved     readme: '# node-querystring\n\n  query string parser for node and the browser supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others.\n\n## Installation\n\n    $ npm install qs\n\n## Examples\n\n```js\nvar qs = require(\'qs\');\n\nqs.parse(\'user[name][first]=Tobi&user[email]=tobi@learnboost.com\');\n// => { user: { name: { first: \'Tobi\' }, email: \'tobi@learnboost.com\' } }\n\nqs.stringify({ user: { name: \'Tobi\', email: \'tobi@learnboost.com\' }})\n// => user[name]=Tobi&user[email]=tobi%40learnboost.com\n```\n\n## Testing\n\nInstall dev dependencies:\n\n    $ npm install -d\n\nand execute:\n\n    $ make test\n\nbrowser:\n\n    $ open test/browser/index.html\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
18246 silly resolved     readmeFilename: 'Readme.md',
18246 silly resolved     bugs: { url: 'https://github.com/visionmedia/node-querystring/issues' },
18246 silly resolved     homepage: 'https://github.com/visionmedia/node-querystring',
18246 silly resolved     _id: 'qs@0.6.5',
18246 silly resolved     _from: 'qs@~0.6.0' },
18246 silly resolved   { name: 'node-uuid',
18246 silly resolved     description: 'Rigorous implementation of RFC4122 (v1 and v4) UUIDs.',
18246 silly resolved     url: 'http://github.com/broofa/node-uuid',
18246 silly resolved     keywords: [ 'uuid', 'guid', 'rfc4122' ],
18246 silly resolved     author: { name: 'Robert Kieffer', email: 'robert@broofa.com' },
18246 silly resolved     contributors: [ [Object] ],
18246 silly resolved     lib: '.',
18246 silly resolved     main: './uuid.js',
18246 silly resolved     repository: { type: 'git', url: 'https://github.com/broofa/node-uuid.git' },
18246 silly resolved     version: '1.4.1',
18246 silly resolved     readme: '# node-uuid\n\nSimple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.\n\nFeatures:\n\n* Generate RFC4122 version 1 or version 4 UUIDs\n* Runs in node.js and all browsers.\n* Registered as a [ComponentJS](https://github.com/component/component) [component](https://github.com/component/component/wiki/Components) (\'broofa/node-uuid\').\n* Cryptographically strong random # generation on supporting platforms\n* 1.1K minified and gzip\'ed  (Want something smaller?  Check this [crazy shit](https://gist.github.com/982883) out! )\n* [Annotated source code](http://broofa.github.com/node-uuid/docs/uuid.html)\n\n## Getting Started\n\nInstall it in your browser:\n\n```html\n<script src="uuid.js"></script>\n```\n\nOr in node.js:\n\n```\nnpm install node-uuid\n```\n\n```javascript\nvar uuid = require(\'node-uuid\');\n```\n\nThen create some ids ...\n\n```javascript\n// Generate a v1 (time-based) id\nuuid.v1(); // -> \'6c84fb90-12c4-11e1-840d-7b25c5ee775a\'\n\n// Generate a v4 (random) id\nuuid.v4(); // -> \'110ec58a-a0f2-4ac4-8393-c866d813b8d1\'\n```\n\n## API\n\n### uuid.v1([`options` [, `buffer` [, `offset`]]])\n\nGenerate and return a RFC4122 v1 (timestamp-based) UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `node` - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.\n  * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.\n  * `msecs` - (Number | Date) Time in milliseconds since unix Epoch.  Default: The current time is used.\n  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nNotes:\n\n1. The randomly generated node id is only guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuid.v1({\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date(\'2011-11-01\').getTime(),\n  nsecs: 5678\n});   // -> "710b962e-041c-11e1-9234-0123456789ab"\n```\n\nExample: In-place generation of two binary IDs\n\n```javascript\n// Generate two ids in an array\nvar arr = new Array(32); // -> []\nuuid.v1(null, arr, 0);   // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\nuuid.v1(null, arr, 16);  // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\n\n// Optionally use uuid.unparse() to get stringify the ids\nuuid.unparse(buffer);    // -> \'02a2ce90-1432-11e1-8558-0b488e4fc115\'\nuuid.unparse(buffer, 16) // -> \'02a31cb0-1432-11e1-8558-0b488e4fc115\'\n```\n\n### uuid.v4([`options` [, `buffer` [, `offset`]]])\n\nGenerate and return a RFC4122 v4 UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `random` - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values\n  * `rng` - (Function) Random # generator to use.  Set to one of the built-in generators - `uuid.mathRNG` (all platforms), `uuid.nodeRNG` (node.js only), `uuid.whatwgRNG` (WebKit only) - or a custom function that returns an array[16] of byte values.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuid.v4({\n  random: [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n});\n// -> "109156be-c4fb-41ea-b1b4-efe1671c5836"\n```\n\nExample: Generate two IDs in a single buffer\n\n```javascript\nvar buffer = new Array(32); // (or \'new Buffer\' in node.js)\nuuid.v4(null, buffer, 0);\nuuid.v4(null, buffer, 16);\n```\n\n### uuid.parse(id[, buffer[, offset]])\n### uuid.unparse(buffer[, offset])\n\nParse and unparse UUIDs\n\n  * `id` - (String) UUID(-like) string\n  * `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used\n  * `offset` - (Number) Starting index in `buffer` at which to begin writing. Default: 0\n\nExample parsing and unparsing a UUID string\n\n```javascript\nvar bytes = uuid.parse(\'797ff043-11eb-11e1-80d6-510998755d10\'); // -> <Buffer 79 7f f0 43 11 eb 11 e1 80 d6 51 09 98 75 5d 10>\nvar string = uuid.unparse(bytes); // -> \'797ff043-11eb-11e1-80d6-510998755d10\'\n```\n\n### uuid.noConflict()\n\n(Browsers only) Set `uuid` property back to it\'s previous value.\n\nReturns the node-uuid object.\n\nExample:\n\n```javascript\nvar myUuid = uuid.noConflict();\nmyUuid.v1(); // -> \'6c84fb90-12c4-11e1-840d-7b25c5ee775a\'\n```\n\n## Deprecated APIs\n\nSupport for the following v1.2 APIs is available in v1.3, but is deprecated and will be removed in the next major version.\n\n### uuid([format [, buffer [, offset]]])\n\nuuid() has become uuid.v4(), and the `format` argument is now implicit in the `buffer` argument. (i.e. if you specify a buffer, the format is assumed to be binary).\n\n### uuid.BufferClass\n\nThe class of container created when generating binary uuid data if no buffer argument is specified.  This is expected to go away, with no replacement API.\n\n## Testing\n\nIn node.js\n\n```\n> cd test\n> node test.js\n```\n\nIn Browser\n\n```\nopen test/test.html\n```\n\n### Benchmarking\n\nRequires node.js\n\n```\nnpm install uuid uuid-js\nnode benchmark/benchmark.js\n```\n\nFor a more complete discussion of node-uuid performance, please see the `benchmark/README.md` file, and the [benchmark wiki](https://github.com/broofa/node-uuid/wiki/Benchmark)\n\nFor browser performance [checkout the JSPerf tests](http://jsperf.com/node-uuid-performance).\n\n## Release notes\n\n### 1.4.0\n\n* Improved module context detection\n* Removed public RNG functions\n\n### 1.3.2\n\n* Improve tests and handling of v1() options (Issue #24)\n* Expose RNG option to allow for perf testing with different generators\n\n### 1.3.0\n\n* Support for version 1 ids, thanks to [@ctavan](https://github.com/ctavan)!\n* Support for node.js crypto API\n* De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/broofa/node-uuid/issues' },
18246 silly resolved     homepage: 'https://github.com/broofa/node-uuid',
18246 silly resolved     _id: 'node-uuid@1.4.1',
18246 silly resolved     dist: { shasum: 'ebcc5c713c080b466142b080f0debc063b42e125' },
18246 silly resolved     _from: 'node-uuid@~1.4.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz',
18246 silly resolved     scripts: {} },
18246 silly resolved   { author: { name: 'Joyent, Inc' },
18246 silly resolved     name: 'http-signature',
18246 silly resolved     description: 'Reference implementation of Joyent\'s HTTP Signature Scheme',
18246 silly resolved     version: '0.10.0',
18246 silly resolved     repository:
18246 silly resolved      { type: 'git',
18246 silly resolved        url: 'git://github.com/joyent/node-http-signature.git' },
18246 silly resolved     engines: { node: '>=0.8' },
18246 silly resolved     main: 'lib/index.js',
18246 silly resolved     scripts: { test: './node_modules/.bin/tap tst/*.js' },
18246 silly resolved     dependencies: { 'assert-plus': '0.1.2', asn1: '0.1.11', ctype: '0.5.2' },
18246 silly resolved     devDependencies: { 'node-uuid': '1.4.0', tap: '0.4.2' },
18246 silly resolved     readme: '# node-http-signature\n\nnode-http-signature is a node.js library that has client and server components\nfor Joyent\'s [HTTP Signature Scheme](http_signing.md).\n\n## Usage\n\nNote the example below signs a request with the same key/cert used to start an\nHTTP server. This is almost certainly not what you actaully want, but is just\nused to illustrate the API calls; you will need to provide your own key\nmanagement in addition to this library.\n\n### Client\n\n    var fs = require(\'fs\');\n    var https = require(\'https\');\n    var httpSignature = require(\'http-signature\');\n\n    var key = fs.readFileSync(\'./key.pem\', \'ascii\');\n\n    var options = {\n      host: \'localhost\',\n      port: 8443,\n      path: \'/\',\n      method: \'GET\',\n      headers: {}\n    };\n\n    // Adds a \'Date\' header in, signs it, and adds the\n    // \'Authorization\' header in.\n    var req = https.request(options, function(res) {\n      console.log(res.statusCode);\n    });\n\n\n    httpSignature.sign(req, {\n      key: key,\n      keyId: \'./cert.pem\'\n    });\n\n    req.end();\n\n### Server\n\n    var fs = require(\'fs\');\n    var https = require(\'https\');\n    var httpSignature = require(\'http-signature\');\n\n    var options = {\n      key: fs.readFileSync(\'./key.pem\'),\n      cert: fs.readFileSync(\'./cert.pem\')\n    };\n\n    https.createServer(options, function (req, res) {\n      var rc = 200;\n      var parsed = httpSignature.parseRequest(req);\n      var pub = fs.readFileSync(parsed.keyId, \'ascii\');\n      if (!httpSignature.verifySignature(parsed, pub))\n        rc = 401;\n\n      res.writeHead(rc);\n      res.end();\n    }).listen(8443);\n\n## Installation\n\n    npm install http-signature\n\n## License\n\nMIT.\n\n## Bugs\n\nSee <https://github.com/joyent/node-http-signature/issues>.\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/joyent/node-http-signature/issues' },
18246 silly resolved     homepage: 'https://github.com/joyent/node-http-signature',
18246 silly resolved     _id: 'http-signature@0.10.0',
18246 silly resolved     dist: { shasum: '624c92d64e2b86416c8be76681dec50f5e5bea0b' },
18246 silly resolved     _from: 'http-signature@~0.10.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz' },
18246 silly resolved   { name: 'hawk',
18246 silly resolved     description: 'HTTP Hawk Authentication Scheme',
18246 silly resolved     version: '1.0.0',
18246 silly resolved     author:
18246 silly resolved      { name: 'Eran Hammer',
18246 silly resolved        email: 'eran@hueniverse.com',
18246 silly resolved        url: 'http://hueniverse.com' },
18246 silly resolved     contributors: [],
18246 silly resolved     repository: { type: 'git', url: 'git://github.com/hueniverse/hawk' },
18246 silly resolved     main: 'index',
18246 silly resolved     keywords: [ 'http', 'authentication', 'scheme', 'hawk' ],
18246 silly resolved     engines: { node: '>=0.8.0' },
18246 silly resolved     dependencies:
18246 silly resolved      { hoek: '0.9.x',
18246 silly resolved        boom: '0.4.x',
18246 silly resolved        cryptiles: '0.2.x',
18246 silly resolved        sntp: '0.2.x' },
18246 silly resolved     devDependencies:
18246 silly resolved      { lab: '0.1.x',
18246 silly resolved        'complexity-report': '0.x.x',
18246 silly resolved        localStorage: '1.0.x' },
18246 silly resolved     scripts: { test: 'make test-cov' },
18246 silly resolved     licenses: [ [Object] ],
18246 silly resolved     readme: '![hawk Logo](https://raw.github.com/hueniverse/hawk/master/images/hawk.png)\n\n<img align="right" src="https://raw.github.com/hueniverse/hawk/master/images/logo.png" /> **Hawk** is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial\nHTTP request cryptographic verification. For more complex use cases such as access delegation, see [Oz](https://github.com/hueniverse/oz).\n\nCurrent version: **1.0**\n\n[![Build Status](https://secure.travis-ci.org/hueniverse/hawk.png)](http://travis-ci.org/hueniverse/hawk)\n\n# Table of Content\n\n- [**Introduction**](#introduction)\n  - [Replay Protection](#replay-protection)\n  - [Usage Example](#usage-example)\n  - [Protocol Example](#protocol-example)\n    - [Payload Validation](#payload-validation)\n    - [Response Payload Validation](#response-payload-validation)\n  - [Browser Support and Considerations](#browser-support-and-considerations)\n<p></p>\n- [**Single URI Authorization**](#single-uri-authorization)\n  - [Usage Example](#bewit-usage-example)\n<p></p>\n- [**Security Considerations**](#security-considerations)\n  - [MAC Keys Transmission](#mac-keys-transmission)\n  - [Confidentiality of Requests](#confidentiality-of-requests)\n  - [Spoofing by Counterfeit Servers](#spoofing-by-counterfeit-servers)\n  - [Plaintext Storage of Credentials](#plaintext-storage-of-credentials)\n  - [Entropy of Keys](#entropy-of-keys)\n  - [Coverage Limitations](#coverage-limitations)\n  - [Future Time Manipulation](#future-time-manipulation)\n  - [Client Clock Poisoning](#client-clock-poisoning)\n  - [Bewit Limitations](#bewit-limitations)\n  - [Host Header Forgery](#host-header-forgery)\n<p></p>\n- [**Frequently Asked Questions**](#frequently-asked-questions)\n<p></p>\n- [**Acknowledgements**](#acknowledgements)\n\n# Introduction\n\n**Hawk** is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with\npartial cryptographic verification of the request and response, covering the HTTP method, request URI, host,\nand optionally the request payload.\n\nSimilar to the HTTP [Digest access authentication schemes](http://www.ietf.org/rfc/rfc2617.txt), **Hawk** uses a set of\nclient credentials which include an identifier (e.g. username) and key (e.g. password). Likewise, just as with the Digest scheme,\nthe key is never included in authenticated requests. Instead, it is used to calculate a request MAC value which is\nincluded in its place.\n\nHowever, **Hawk** has several differences from Digest. In particular, while both use a nonce to limit the possibility of\nreplay attacks, in **Hawk** the client generates the nonce and uses it in combination with a timestamp, leading to less\n"chattiness" (interaction with the server).\n\nAlso unlike Digest, this scheme is not intended to protect the key itself (the password in Digest) because\nthe client and server must both have access to the key material in the clear.\n\nThe primary design goals of this scheme are to:\n* simplify and improve HTTP authentication for services that are unwilling or unable to deploy TLS for all resources,\n* secure credentials against leakage (e.g., when the client uses some form of dynamic configuration to determine where\n  to send an authenticated request), and\n* avoid the exposure of credentials sent to a malicious server over an unauthenticated secure channel due to client\n  failure to validate the server\'s identity as part of its TLS handshake.\n\nIn addition, **Hawk** supports a method for granting third-parties temporary access to individual resources using\na query parameter called _bewit_ (in falconry, a leather strap used to attach a tracking device to the leg of a hawk).\n\nThe **Hawk** scheme requires the establishment of a shared symmetric key between the client and the server,\nwhich is beyond the scope of this module. Typically, the shared credentials are established via an initial\nTLS-protected phase or derived from some other shared confidential information available to both the client\nand the server.\n\n\n## Replay Protection\n\nWithout replay protection, an attacker can use a compromised (but otherwise valid and authenticated) request more \nthan once, gaining access to a protected resource. To mitigate this, clients include both a nonce and a timestamp when \nmaking requests. This gives the server enough information to prevent replay attacks.\n\nThe nonce is generated by the client, and is a string unique across all requests with the same timestamp and\nkey identifier combination. \n\nThe timestamp enables the server to restrict the validity period of the credentials where requests occuring afterwards\nare rejected. It also removes the need for the server to retain an unbounded number of nonce values for future checks.\nBy default, **Hawk** uses a time window of 1 minute to allow for time skew between the client and server (which in\npractice translates to a maximum of 2 minutes as the skew can be positive or negative).\n\nUsing a timestamp requires the client\'s clock to be in sync with the server\'s clock. **Hawk** requires both the client\nclock and the server clock to use NTP to ensure synchronization. However, given the limitations of some client types\n(e.g. browsers) to deploy NTP, the server provides the client with its current time (in seconds precision) in response\nto a bad timestamp.\n\nThere is no expectation that the client will adjust its system clock to match the server (in fact, this would be a\npotential attack vector). Instead, the client only uses the server\'s time to calculate an offset used only\nfor communications with that particular server. The protocol rewards clients with synchronized clocks by reducing\nthe number of round trips required to authenticate the first request.\n\n\n## Usage Example\n\nServer code:\n\n```javascript\nvar Http = require(\'http\');\nvar Hawk = require(\'hawk\');\n\n\n// Credentials lookup function\n\nvar credentialsFunc = function (id, callback) {\n\n    var credentials = {\n        key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\n        algorithm: \'sha256\',\n        user: \'Steve\'\n    };\n\n    return callback(null, credentials);\n};\n\n// Create HTTP server\n\nvar handler = function (req, res) {\n\n    // Authenticate incoming request\n\n    Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) {\n\n        // Prepare response\n\n        var payload = (!err ? \'Hello \' + credentials.user + \' \' + artifacts.ext : \'Shoosh!\');\n        var headers = { \'Content-Type\': \'text/plain\' };\n\n        // Generate Server-Authorization response header\n\n        var header = Hawk.server.header(credentials, artifacts, { payload: payload, contentType: headers[\'Content-Type\'] });\n        headers[\'Server-Authorization\'] = header;\n\n        // Send the response back\n\n        res.writeHead(!err ? 200 : 401, headers);\n        res.end(payload);\n    });\n};\n\n// Start server\n\nHttp.createServer(handler).listen(8000, \'example.com\');\n```\n\nClient code:\n\n```javascript\nvar Request = require(\'request\');\nvar Hawk = require(\'hawk\');\n\n\n// Client credentials\n\nvar credentials = {\n    id: \'dh37fgj492je\',\n    key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\n    algorithm: \'sha256\'\n}\n\n// Request options\n\nvar requestOptions = {\n    uri: \'http://example.com:8000/resource/1?b=1&a=2\',\n    method: \'GET\',\n    headers: {}\n};\n\n// Generate Authorization request header\n\nvar header = Hawk.client.header(\'http://example.com:8000/resource/1?b=1&a=2\', \'GET\', { credentials: credentials, ext: \'some-app-data\' });\nrequestOptions.headers.Authorization = header.field;\n\n// Send authenticated request\n\nRequest(requestOptions, function (error, response, body) {\n\n    // Authenticate the server\'s response\n\n    var isValid = Hawk.client.authenticate(response, credentials, header.artifacts, { payload: body });\n\n    // Output results\n\n    console.log(response.statusCode + \': \' + body + (isValid ? \' (valid)\' : \' (invalid)\'));\n});\n```\n\n**Hawk** utilized the [**SNTP**](https://github.com/hueniverse/sntp) module for time sync management. By default, the local\nmachine time is used. To automatically retrieve and synchronice the clock within the application, use the SNTP \'start()\' method.\n\n```javascript\nHawk.sntp.start();\n```\n\n\n## Protocol Example\n\nThe client attempts to access a protected resource without authentication, sending the following HTTP request to\nthe resource server:\n\n```\nGET /resource/1?b=1&a=2 HTTP/1.1\nHost: example.com:8000\n```\n\nThe resource server returns an authentication challenge.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: Hawk\n```\n\nThe client has previously obtained a set of **Hawk** credentials for accessing resources on the "http://example.com/"\nserver. The **Hawk** credentials issued to the client include the following attributes:\n\n* Key identifier: dh37fgj492je\n* Key: werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\n* Algorithm: sha256\n\nThe client generates the authentication header by calculating a timestamp (e.g. the number of seconds since January 1,\n1970 00:00:00 GMT), generating a nonce, and constructing the normalized request string (each value followed by a newline\ncharacter):\n\n```\nhawk.1.header\n1353832234\nj4h3g2\nGET\n/resource/1?b=1&a=2\nexample.com\n8000\n\nsome-app-ext-data\n\n```\n\nThe request MAC is calculated using HMAC with the specified hash algorithm "sha256" and the key over the normalized request string.\nThe result is base64-encoded to produce the request MAC:\n\n```\n6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\n```\n\nThe client includes the **Hawk** key identifier, timestamp, nonce, application specific data, and request MAC with the request using\nthe HTTP `Authorization` request header field:\n\n```\nGET /resource/1?b=1&a=2 HTTP/1.1\nHost: example.com:8000\nAuthorization: Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", ext="some-app-ext-data", mac="6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE="\n```\n\nThe server validates the request by calculating the request MAC again based on the request received and verifies the validity\nand scope of the **Hawk** credentials. If valid, the server responds with the requested resource.\n\n\n### Payload Validation\n\n**Hawk** provides optional payload validation. When generating the authentication header, the client calculates a payload hash\nusing the specified hash algorithm. The hash is calculated over the concatenated value of (each followed by a newline character):\n* `hawk.1.payload`\n* the content-type in lowercase, without any parameters (e.g. `application/json`)\n* the request payload prior to any content encoding (the exact representation requirements should be specified by the server for payloads other than simple single-part ascii to ensure interoperability)\n\nFor example:\n\n* Payload: `Thank you for flying Hawk`\n* Content Type: `text/plain`\n* Hash (sha256): `Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=`\n\nResults in the following input to the payload hash function (newline terminated values):\n\n```\nhawk.1.payload\ntext/plain\nThank you for flying Hawk\n\n```\n\nWhich produces the following hash value:\n\n```\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\n```\n\nThe client constructs the normalized request string (newline terminated values):\n\n```\nhawk.1.header\n1353832234\nj4h3g2\nPOST\n/resource/1?a=1&b=2\nexample.com\n8000\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\nsome-app-ext-data\n\n```\n\nThen calculates the request MAC and includes the **Hawk** key identifier, timestamp, nonce, payload hash, application specific data,\nand request MAC, with the request using the HTTP `Authorization` request header field:\n\n```\nPOST /resource/1?a=1&b=2 HTTP/1.1\nHost: example.com:8000\nAuthorization: Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", hash="Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=", ext="some-app-ext-data", mac="aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw="\n```\n\nIt is up to the server if and when it validates the payload for any given request, based solely on it\'s security policy\nand the nature of the data included.\n\nIf the payload is available at the time of authentication, the server uses the hash value provided by the client to construct\nthe normalized string and validates the MAC. If the MAC is valid, the server calculates the payload hash and compares the value\nwith the provided payload hash in the header. In many cases, checking the MAC first is faster than calculating the payload hash.\n\nHowever, if the payload is not available at authentication time (e.g. too large to fit in memory, streamed elsewhere, or processed\nat a different stage in the application), the server may choose to defer payload validation for later by retaining the hash value\nprovided by the client after validating the MAC.\n\nIt is important to note that MAC validation does not mean the hash value provided by the client is valid, only that the value\nincluded in the header was not modified. Without calculating the payload hash on the server and comparing it to the value provided\nby the client, the payload may be modified by an attacker.\n\n\n## Response Payload Validation\n\n**Hawk** provides partial response payload validation. The server includes the `Server-Authorization` response header which enables the\nclient to authenticate the response and ensure it is talking to the right server. **Hawk** defines the HTTP `Server-Authorization` header\nas a response header using the exact same syntax as the `Authorization` request header field.\n\nThe header is contructed using the same process as the client\'s request header. The server uses the same credentials and other\nartifacts provided by the client to constructs the normalized request string. The `ext` and `hash` values are replaced with\nnew values based on the server response. The rest as identical to those used by the client.\n\nThe result MAC digest is included with the optional `hash` and `ext` values:\n\n```\nServer-Authorization: Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"\n```\n\n\n## Browser Support and Considerations\n\nA browser script is provided for including using a `<script>` tag in [lib/browser.js](/lib/browser.js).\n\n**Hawk** relies on the _Server-Authorization_ and _WWW-Authenticate_ headers in its response to communicate with the client.\nTherefore, in case of CORS requests, it is important to consider sending _Access-Control-Expose-Headers_ with the value\n_"WWW-Authenticate, Server-Authorization"_ on each response from your server. As explained in the\n[specifications](http://www.w3.org/TR/cors/#access-control-expose-headers-response-header), it will indicate that these headers\ncan safely be accessed by the client (using getResponseHeader() on the XmlHttpRequest object). Otherwise you will be met with a\n["simple response header"](http://www.w3.org/TR/cors/#simple-response-header) which excludes these fields and would prevent the\nHawk client from authenticating the requests.You can read more about the why and how in this\n[article](http://www.html5rocks.com/en/tutorials/cors/#toc-adding-cors-support-to-the-server)\n\n\n# Single URI Authorization\n\nThere are cases in which limited and short-term access to a protected resource is granted to a third party which does not\nhave access to the shared credentials. For example, displaying a protected image on a web page accessed by anyone. **Hawk**\nprovides limited support for such URIs in the form of a _bewit_ - a URI query parameter appended to the request URI which contains\nthe necessary credentials to authenticate the request.\n\nBecause of the significant security risks involved in issuing such access, bewit usage is purposely limited only to GET requests\nand for a finite period of time. Both the client and server can issue bewit credentials, however, the server should not use the same\ncredentials as the client to maintain clear traceability as to who issued which credentials.\n\nIn order to simplify implementation, bewit credentials do not support single-use policy and can be replayed multiple times within\nthe granted access timeframe. \n\n\n## Bewit Usage Example\n\nServer code:\n\n```javascript\nvar Http = require(\'http\');\nvar Hawk = require(\'hawk\');\n\n\n// Credentials lookup function\n\nvar credentialsFunc = function (id, callback) {\n\n    var credentials = {\n        key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\n        algorithm: \'sha256\'\n    };\n\n    return callback(null, credentials);\n};\n\n// Create HTTP server\n\nvar handler = function (req, res) {\n\n    Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {\n\n        res.writeHead(!err ? 200 : 401, { \'Content-Type\': \'text/plain\' });\n        res.end(!err ? \'Access granted\' : \'Shoosh!\');\n    });\n};\n\nHttp.createServer(handler).listen(8000, \'example.com\');\n```\n\nBewit code generation:\n\n```javascript\nvar Request = require(\'request\');\nvar Hawk = require(\'hawk\');\n\n\n// Client credentials\n\nvar credentials = {\n    id: \'dh37fgj492je\',\n    key: \'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn\',\n    algorithm: \'sha256\'\n}\n\n// Generate bewit\n\nvar duration = 60 * 5;      // 5 Minutes\nvar bewit = Hawk.uri.getBewit(\'http://example.com:8080/resource/1?b=1&a=2\', { credentials: credentials, ttlSec: duration, ext: \'some-app-data\' });\nvar uri = \'http://example.com:8000/resource/1?b=1&a=2\' + \'&bewit=\' + bewit;\n```\n\n\n# Security Considerations\n\nThe greatest sources of security risks are usually found not in **Hawk** but in the policies and procedures surrounding its use.\nImplementers are strongly encouraged to assess how this module addresses their security requirements. This section includes\nan incomplete list of security considerations that must be reviewed and understood before deploying **Hawk** on the server.\nMany of the protections provided in **Hawk** depends on whether and how they are used.\n\n### MAC Keys Transmission\n\n**Hawk** does not provide any mechanism for obtaining or transmitting the set of shared credentials required. Any mechanism used\nto obtain **Hawk** credentials must ensure that these transmissions are protected using transport-layer mechanisms such as TLS.\n\n### Confidentiality of Requests\n\nWhile **Hawk** provides a mechanism for verifying the integrity of HTTP requests, it provides no guarantee of request\nconfidentiality. Unless other precautions are taken, eavesdroppers will have full access to the request content. Servers should\ncarefully consider the types of data likely to be sent as part of such requests, and employ transport-layer security mechanisms\nto protect sensitive resources.\n\n### Spoofing by Counterfeit Servers\n\n**Hawk** provides limited verification of the server authenticity. When receiving a response back from the server, the server\nmay choose to include a response `Server-Authorization` header which the client can use to verify the response. However, it is up to\nthe server to determine when such measure is included, to up to the client to enforce that policy.\n\nA hostile party could take advantage of this by intercepting the client\'s requests and returning misleading or otherwise\nincorrect responses. Service providers should consider such attacks when developing services using this protocol, and should\nrequire transport-layer security for any requests where the authenticity of the resource server or of server responses is an issue.\n\n### Plaintext Storage of Credentials\n\nThe **Hawk** key functions the same way passwords do in traditional authentication systems. In order to compute the request MAC,\nthe server must have access to the key in plaintext form. This is in contrast, for example, to modern operating systems, which\nstore only a one-way hash of user credentials.\n\nIf an attacker were to gain access to these keys - or worse, to the server\'s database of all such keys - he or she would be able\nto perform any action on behalf of any resource owner. Accordingly, it is critical that servers protect these keys from unauthorized\naccess.\n\n### Entropy of Keys\n\nUnless a transport-layer security protocol is used, eavesdroppers will have full access to authenticated requests and request\nMAC values, and will thus be able to mount offline brute-force attacks to recover the key used. Servers should be careful to\nassign keys which are long enough, and random enough, to resist such attacks for at least the length of time that the **Hawk**\ncredentials are valid.\n\nFor example, if the credentials are valid for two weeks, servers should ensure that it is not possible to mount a brute force\nattack that recovers the key in less than two weeks. Of course, servers are urged to err on the side of caution, and use the\nlongest key reasonable.\n\nIt is equally important that the pseudo-random number generator (PRNG) used to generate these keys be of sufficiently high\nquality. Many PRNG implementations generate number sequences that may appear to be random, but which nevertheless exhibit\npatterns or other weaknesses which make cryptanalysis or brute force attacks easier. Implementers should be careful to use\ncryptographically secure PRNGs to avoid these problems.\n\n### Coverage Limitations\n\nThe request MAC only covers the HTTP `Host` header and optionally the `Content-Type` header. It does not cover any other headers\nwhich can often affect how the request body is interpreted by the server. If the server behavior is influenced by the presence\nor value of such headers, an attacker can manipulate the request headers without being detected. Implementers should use the\n`ext` feature to pass application-specific information via the `Authorization` header which is protected by the request MAC.\n\nThe response authentication, when performed, only covers the response payload, content-type, and the request information \nprovided by the client in it\'s request (method, resource, timestamp, nonce, etc.). It does not cover the HTTP status code or\nany other response header field (e.g. Location) which can affect the client\'s behaviour.\n\n### Future Time Manipulation\n\nThe protocol relies on a clock sync between the client and server. To accomplish this, the server informs the client of its\ncurrent time when an invalid timestamp is received.\n\nIf an attacker is able to manipulate this information and cause the client to use an incorrect time, it would be able to cause\nthe client to generate authenticated requests using time in the future. Such requests will fail when sent by the client, and will\nnot likely leave a trace on the server (given the common implementation of nonce, if at all enforced). The attacker will then\nbe able to replay the request at the correct time without detection.\n\nThe client must only use the time information provided by the server if:\n* it was delivered over a TLS connection and the server identity has been verified, or\n* the `tsm` MAC digest calculated using the same client credentials over the timestamp has been verified.\n\n### Client Clock Poisoning\n\nWhen receiving a request with a bad timestamp, the server provides the client with its current time. The client must never use\nthe time received from the server to adjust its own clock, and must only use it to calculate an offset for communicating with\nthat particular server.\n\n### Bewit Limitations\n\nSpecial care must be taken when issuing bewit credentials to third parties. Bewit credentials are valid until expiration and cannot\nbe revoked or limited without using other means. Whatever resource they grant access to will be completely exposed to anyone with\naccess to the bewit credentials which act as bearer credentials for that particular resource. While bewit usage is limited to GET\nrequests only and therefore cannot be used to perform transactions or change server state, it can still be used to expose private\nand sensitive information.\n\n### Host Header Forgery\n\nHawk validates the incoming request MAC against the incoming HTTP Host header. However, unless the optional `host` and `port`\noptions are used with `server.authenticate()`, a malicous client can mint new host names pointing to the server\'s IP address and\nuse that to craft an attack by sending a valid request that\'s meant for another hostname than the one used by the server. Server\nimplementors must manually verify that the host header received matches their expectation (or use the options mentioned above).\n\n# Frequently Asked Questions\n\n### Where is the protocol specification?\n\nIf you are looking for some prose explaining how all this works, **this is it**. **Hawk** is being developed as an open source\nproject instead of a standard. In other words, the [code](/hueniverse/hawk/tree/master/lib) is the specification. Not sure about\nsomething? Open an issue!\n\n### Is it done?\n\nAt if version 0.10.0, **Hawk** is feature-complete. However, until this module reaches version 1.0.0 it is considered experimental\nand is likely to change. This also means your feedback and contribution are very welcome. Feel free to open issues with questions\nand suggestions.\n\n### Where can I find **Hawk** implementations in other languages?\n\n**Hawk**\'s only reference implementation is provided in JavaScript as a node.js module. However, others are actively porting it to other\nplatforms. There is already a [PHP](https://github.com/alexbilbie/PHP-Hawk),\n[.NET](https://github.com/pcibraro/hawknet), and [JAVA](https://github.com/wealdtech/hawk) libraries available. The full list\nis maintained [here](https://github.com/hueniverse/hawk/issues?labels=port). Please add an issue if you are working on another\nport. A cross-platform test-suite is in the works.\n\n### Why isn\'t the algorithm part of the challenge or dynamically negotiated?\n\nThe algorithm used is closely related to the key issued as different algorithms require different key sizes (and other\nrequirements). While some keys can be used for multiple algorithm, the protocol is designed to closely bind the key and algorithm\ntogether as part of the issued credentials.\n\n### Why is Host and Content-Type the only headers covered by the request MAC?\n\nIt is really hard to include other headers. Headers can be changed by proxies and other intermediaries and there is no\nwell-established way to normalize them. Many platforms change the case of header field names and values. The only\nstraight-forward solution is to include the headers in some blob (say, base64 encoded JSON) and include that with the request,\nan approach taken by JWT and other such formats. However, that design violates the HTTP header boundaries, repeats information,\nand introduces other security issues because firewalls will not be aware of these "hidden" headers. In addition, any information\nrepeated must be compared to the duplicated information in the header and therefore only moves the problem elsewhere.\n\n### Why not just use HTTP Digest?\n\nDigest requires pre-negotiation to establish a nonce. This means you can\'t just make a request - you must first send\na protocol handshake to the server. This pattern has become unacceptable for most web services, especially mobile\nwhere extra round-trip are costly.\n\n### Why bother with all this nonce and timestamp business?\n\n**Hawk** is an attempt to find a reasonable, practical compromise between security and usability. OAuth 1.0 got timestamp\nand nonces halfway right but failed when it came to scalability and consistent developer experience. **Hawk** addresses\nit by requiring the client to sync its clock, but provides it with tools to accomplish it.\n\nIn general, replay protection is a matter of application-specific threat model. It is less of an issue on a TLS-protected\nsystem where the clients are implemented using best practices and are under the control of the server. Instead of dropping\nreplay protection, **Hawk** offers a required time window and an optional nonce verification. Together, it provides developers\nwith the ability to decide how to enforce their security policy without impacting the client\'s implementation.\n\n### What are `app` and `dlg` in the authorization header and normalized mac string?\n\nThe original motivation for **Hawk** was to replace the OAuth 1.0 use cases. This included both a simple client-server mode which\nthis module is specifically designed for, and a delegated access mode which is being developed separately in\n[Oz](https://github.com/hueniverse/oz). In addition to the **Hawk** use cases, Oz requires another attribute: the application id `app`.\nThis provides binding between the credentials and the application in a way that prevents an attacker from tricking an application\nto use credentials issued to someone else. It also has an optional \'delegated-by\' attribute `dlg` which is the application id of the\napplication the credentials were directly issued to. The goal of these two additions is to allow Oz to utilize **Hawk** directly,\nbut with the additional security of delegated credentials.\n\n### What is the purpose of the static strings used in each normalized MAC input?\n\nWhen calculating a hash or MAC, a static prefix (tag) is added. The prefix is used to prevent MAC values from being\nused or reused for a purpose other than what they were created for (i.e. prevents switching MAC values between a request,\nresponse, and a bewit use cases). It also protects against expliots created after a potential change in how the protocol\ncreates the normalized string. For example, if a future version would switch the order of nonce and timestamp, it\ncan create an exploit opportunity for cases where the nonce is similar in format to a timestamp.\n\n### Does **Hawk** have anything to do with OAuth?\n\nShort answer: no.\n\n**Hawk** was originally proposed as the OAuth MAC Token specification. However, the OAuth working group in its consistent\nincompetence failed to produce a final, usable solution to address one of the most popular use cases of OAuth 1.0 - using it\nto authenticate simple client-server transactions (i.e. two-legged). As you can guess, the OAuth working group is still hard\nat work to produce more garbage.\n\n**Hawk** provides a simple HTTP authentication scheme for making client-server requests. It does not address the OAuth use case\nof delegating access to a third party. If you are looking for an OAuth alternative, check out [Oz](https://github.com/hueniverse/oz).\n\n\n# Acknowledgements\n\n**Hawk** is a derivative work of the [HTTP MAC Authentication Scheme](http://tools.ietf.org/html/draft-hammer-oauth-v2-mac-token-05) proposal\nco-authored by Ben Adida, Adam Barth, and Eran Hammer, which in turn was based on the OAuth 1.0 community specification.\n\nSpecial thanks to Ben Laurie for his always insightful feedback and advice.\n\nThe **Hawk** logo was created by [Chris Carrasco](http://chriscarrasco.com).\n',
18246 silly resolved     readmeFilename: 'README.md',
18246 silly resolved     bugs: { url: 'https://github.com/hueniverse/hawk/issues' },
18246 silly resolved     homepage: 'https://github.com/hueniverse/hawk',
18246 silly resolved     _id: 'hawk@1.0.0',
18246 silly resolved     dist: { shasum: 'b90bb169807285411da7ffcb8dd2598502d3b52d' },
18246 silly resolved     _from: 'hawk@~1.0.0',
18246 silly resolved     _resolved: 'https://registry.npmjs.org/hawk/-/hawk-1.0.0.tgz' } ]
18247 info install mime@1.2.11 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18248 info install json-stringify-safe@5.0.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18249 info install tunnel-agent@0.3.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18250 info install forever-agent@0.5.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18251 info install oauth-sign@0.3.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18252 info install aws-sign@0.3.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18253 info install cookie-jar@0.3.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18254 info install form-data@0.1.2 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18255 info install qs@0.6.5 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18256 info install node-uuid@1.4.1 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18257 info install http-signature@0.10.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18258 info install hawk@1.0.0 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request
18259 info installOne mime@1.2.11
18260 info installOne json-stringify-safe@5.0.0
18261 info installOne tunnel-agent@0.3.0
18262 info installOne forever-agent@0.5.0
18263 info installOne oauth-sign@0.3.0
18264 info installOne aws-sign@0.3.0
18265 info installOne cookie-jar@0.3.0
18266 info installOne form-data@0.1.2
18267 info installOne qs@0.6.5
18268 info installOne node-uuid@1.4.1
18269 info installOne http-signature@0.10.0
18270 info installOne hawk@1.0.0
18271 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime unbuild
18272 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe unbuild
18273 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent unbuild
18274 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent unbuild
18275 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign unbuild
18276 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign unbuild
18277 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar unbuild
18278 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data unbuild
18279 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs unbuild
18280 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid unbuild
18281 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/http-signature unbuild
18282 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/hawk unbuild
18283 verbose tar unpack /home/lerenzo/.npm/mime/1.2.11/package.tgz
18284 silly lockFile a8e1c428-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime
18285 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime /home/lerenzo/.npm/a8e1c428-odules-request-node-modules-mime.lock
18286 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
18287 verbose lock tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz /home/lerenzo/.npm/dba079eb-enzo-npm-mime-1-2-11-package-tgz.lock
18288 verbose tar unpack /home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
18289 silly lockFile e4903097-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe
18290 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe /home/lerenzo/.npm/e4903097-node-modules-json-stringify-safe.lock
18291 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
18292 verbose lock tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz /home/lerenzo/.npm/413a03be-stringify-safe-5-0-0-package-tgz.lock
18293 verbose tar unpack /home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
18294 silly lockFile 5c89c90f-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent
18295 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent /home/lerenzo/.npm/5c89c90f-equest-node-modules-tunnel-agent.lock
18296 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
18297 verbose lock tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz /home/lerenzo/.npm/c531b4e3-m-tunnel-agent-0-3-0-package-tgz.lock
18298 verbose tar unpack /home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
18299 silly lockFile ac83826d-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent
18300 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent /home/lerenzo/.npm/ac83826d-quest-node-modules-forever-agent.lock
18301 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
18302 verbose lock tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz /home/lerenzo/.npm/c91d8733--forever-agent-0-5-0-package-tgz.lock
18303 verbose tar unpack /home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
18304 silly lockFile 16f0479c--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign
18305 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign /home/lerenzo/.npm/16f0479c--request-node-modules-oauth-sign.lock
18306 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
18307 verbose lock tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz /home/lerenzo/.npm/9da3dad5-npm-oauth-sign-0-3-0-package-tgz.lock
18308 verbose tar unpack /home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
18309 silly lockFile 2fdde302-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign
18310 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign /home/lerenzo/.npm/2fdde302-es-request-node-modules-aws-sign.lock
18311 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
18312 verbose lock tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz /home/lerenzo/.npm/ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz.lock
18313 verbose tar unpack /home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
18314 silly lockFile b7217cb5--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar
18315 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar /home/lerenzo/.npm/b7217cb5--request-node-modules-cookie-jar.lock
18316 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
18317 verbose lock tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz /home/lerenzo/.npm/5a5d76b2-npm-cookie-jar-0-3-0-package-tgz.lock
18318 verbose tar unpack /home/lerenzo/.npm/form-data/0.1.2/package.tgz
18319 silly lockFile 229179e4-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data
18320 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data /home/lerenzo/.npm/229179e4-s-request-node-modules-form-data.lock
18321 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
18322 verbose lock tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz /home/lerenzo/.npm/adb4a40c--npm-form-data-0-1-2-package-tgz.lock
18323 verbose tar unpack /home/lerenzo/.npm/qs/0.6.5/package.tgz
18324 silly lockFile 3abd9e24--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs
18325 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs /home/lerenzo/.npm/3abd9e24--modules-request-node-modules-qs.lock
18326 silly lockFile e7954461-lerenzo-npm-qs-0-6-5-package-tgz tar:///home/lerenzo/.npm/qs/0.6.5/package.tgz
18327 verbose lock tar:///home/lerenzo/.npm/qs/0.6.5/package.tgz /home/lerenzo/.npm/e7954461-lerenzo-npm-qs-0-6-5-package-tgz.lock
18328 verbose tar unpack /home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
18329 silly lockFile 018b40e4-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid
18330 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid /home/lerenzo/.npm/018b40e4-s-request-node-modules-node-uuid.lock
18331 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
18332 verbose lock tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz /home/lerenzo/.npm/97bc16a5--npm-node-uuid-1-4-1-package-tgz.lock
18333 verbose tar unpack /home/lerenzo/.npm/http-signature/0.10.0/package.tgz
18334 silly lockFile c30aac8b-uest-node-modules-http-signature tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/http-signature
18335 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/http-signature /home/lerenzo/.npm/c30aac8b-uest-node-modules-http-signature.lock
18336 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
18337 verbose lock tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz /home/lerenzo/.npm/d6728d0b-ttp-signature-0-10-0-package-tgz.lock
18338 verbose tar unpack /home/lerenzo/.npm/hawk/1.0.0/package.tgz
18339 silly lockFile bb380052-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/hawk
18340 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/hawk /home/lerenzo/.npm/bb380052-odules-request-node-modules-hawk.lock
18341 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18342 verbose lock tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz /home/lerenzo/.npm/c401199b-renzo-npm-hawk-1-0-0-package-tgz.lock
18343 silly gunzTarPerm modes [ '755', '644' ]
18344 silly gunzTarPerm modes [ '755', '644' ]
18345 silly gunzTarPerm modes [ '755', '644' ]
18346 silly gunzTarPerm modes [ '755', '644' ]
18347 silly gunzTarPerm modes [ '755', '644' ]
18348 silly gunzTarPerm modes [ '755', '644' ]
18349 silly gunzTarPerm modes [ '755', '644' ]
18350 silly gunzTarPerm modes [ '755', '644' ]
18351 silly gunzTarPerm modes [ '755', '644' ]
18352 silly gunzTarPerm modes [ '755', '644' ]
18353 silly gunzTarPerm modes [ '755', '644' ]
18354 silly gunzTarPerm modes [ '755', '644' ]
18355 silly gunzTarPerm extractEntry package.json
18356 silly gunzTarPerm extractEntry package.json
18357 silly gunzTarPerm extractEntry package.json
18358 silly gunzTarPerm extractEntry package.json
18359 silly gunzTarPerm extractEntry package.json
18360 silly gunzTarPerm extractEntry package.json
18361 silly gunzTarPerm extractEntry package.json
18362 silly gunzTarPerm extractEntry package.json
18363 silly gunzTarPerm extractEntry package.json
18364 silly gunzTarPerm extractEntry package.json
18365 silly gunzTarPerm extractEntry package.json
18366 silly gunzTarPerm extractEntry README.md
18367 silly gunzTarPerm extractEntry LICENSE
18368 silly gunzTarPerm extractEntry README.md
18369 silly gunzTarPerm extractEntry LICENSE
18370 silly gunzTarPerm extractEntry README.md
18371 silly gunzTarPerm extractEntry LICENSE
18372 silly gunzTarPerm extractEntry README.md
18373 silly gunzTarPerm extractEntry LICENSE
18374 silly gunzTarPerm extractEntry README.md
18375 silly gunzTarPerm extractEntry LICENSE
18376 silly gunzTarPerm extractEntry README.md
18377 silly gunzTarPerm extractEntry LICENSE
18378 silly gunzTarPerm extractEntry README.md
18379 silly gunzTarPerm extractEntry LICENSE
18380 silly gunzTarPerm extractEntry License
18381 silly gunzTarPerm extractEntry Readme.md
18382 silly gunzTarPerm extractEntry .npmignore
18383 silly gunzTarPerm extractEntry README.md
18384 silly gunzTarPerm extractEntry .npmignore
18385 silly gunzTarPerm extractEntry README.md
18386 silly gunzTarPerm extractEntry .npmignore
18387 silly gunzTarPerm extractEntry README.md
18388 silly gunzTarPerm extractEntry mime.js
18389 silly gunzTarPerm extractEntry test.js
18390 silly gunzTarPerm extractEntry stringify.js
18391 silly gunzTarPerm extractEntry test.js
18392 silly gunzTarPerm extractEntry index.js
18393 silly gunzTarPerm extractEntry index.js
18394 silly gunzTarPerm extractEntry index.js
18395 silly gunzTarPerm extractEntry test.js
18396 silly gunzTarPerm extractEntry index.js
18397 silly gunzTarPerm extractEntry index.js
18398 silly gunzTarPerm extractEntry jar.js
18399 silly gunzTarPerm extractEntry lib/form_data.js
18400 silly gunzTarPerm extractEntry uuid.js
18401 silly gunzTarPerm extractEntry LICENSE.md
18402 silly gunzTarPerm extractEntry benchmark/README.md
18403 silly gunzTarPerm extractEntry benchmark/benchmark.js
18404 silly gunzTarPerm extractEntry benchmark/bench.gnu
18405 silly gunzTarPerm extractEntry benchmark/bench.sh
18406 silly gunzTarPerm extractEntry benchmark/benchmark-native.c
18407 silly gunzTarPerm extractEntry component.json
18408 silly gunzTarPerm extractEntry test/compare_v1.js
18409 silly gunzTarPerm extractEntry test/test.js
18410 silly gunzTarPerm extractEntry test/test.html
18411 silly gunzTarPerm extractEntry LICENSE
18412 silly gunzTarPerm extractEntry .dir-locals.el
18413 silly gunzTarPerm extractEntry LICENSE
18414 silly gunzTarPerm extractEntry package.json
18415 silly gunzTarPerm extractEntry tests/run.js
18416 silly gunzTarPerm extractEntry tests/test-cookie.js
18417 silly gunzTarPerm extractEntry tests/test-cookiejar.js
18418 silly gunzTarPerm extractEntry .npmignore
18419 silly gunzTarPerm extractEntry index.js
18420 silly gunzTarPerm extractEntry http_signing.md
18421 silly gunzTarPerm extractEntry lib/index.js
18422 silly gunzTarPerm extractEntry lib/parser.js
18423 silly gunzTarPerm extractEntry lib/signer.js
18424 silly gunzTarPerm extractEntry lib/util.js
18425 silly gunzTarPerm extractEntry lib/verify.js
18426 silly gunzTarPerm extractEntry index.js
18427 silly gunzTarPerm extractEntry .travis.yml
18428 silly gunzTarPerm extractEntry types/mime.types
18429 silly gunzTarPerm extractEntry types/node.types
18430 silly gunzTarPerm extractEntry .gitmodules
18431 silly gunzTarPerm extractEntry Readme.md
18432 silly lockFile e4903097-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe
18433 silly lockFile e4903097-node-modules-json-stringify-safe tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe
18434 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
18435 silly lockFile 413a03be-stringify-safe-5-0-0-package-tgz tar:///home/lerenzo/.npm/json-stringify-safe/5.0.0/package.tgz
18436 info preinstall json-stringify-safe@5.0.0
18437 silly lockFile ac83826d-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent
18438 silly lockFile ac83826d-quest-node-modules-forever-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent
18439 silly lockFile 2fdde302-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign
18440 silly lockFile 2fdde302-es-request-node-modules-aws-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign
18441 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
18442 silly lockFile c91d8733--forever-agent-0-5-0-package-tgz tar:///home/lerenzo/.npm/forever-agent/0.5.0/package.tgz
18443 verbose readDependencies using package.json deps
18444 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
18445 silly lockFile ed6a65e0-o-npm-aws-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/aws-sign/0.3.0/package.tgz
18446 verbose readDependencies using package.json deps
18447 silly resolved []
18448 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe
18449 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/json-stringify-safe
18450 verbose linkStuff [ true,
18450 verbose linkStuff   '/usr/local/lib/node_modules',
18450 verbose linkStuff   false,
18450 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18451 info linkStuff json-stringify-safe@5.0.0
18452 verbose linkBins json-stringify-safe@5.0.0
18453 verbose linkMans json-stringify-safe@5.0.0
18454 verbose rebuildBundles json-stringify-safe@5.0.0
18455 info install json-stringify-safe@5.0.0
18456 silly lockFile 229179e4-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data
18457 silly lockFile 229179e4-s-request-node-modules-form-data tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data
18458 silly lockFile 5c89c90f-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent
18459 silly lockFile 5c89c90f-equest-node-modules-tunnel-agent tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent
18460 info preinstall forever-agent@0.5.0
18461 info postinstall json-stringify-safe@5.0.0
18462 info preinstall aws-sign@0.3.0
18463 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
18464 silly lockFile adb4a40c--npm-form-data-0-1-2-package-tgz tar:///home/lerenzo/.npm/form-data/0.1.2/package.tgz
18465 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
18466 silly lockFile c531b4e3-m-tunnel-agent-0-3-0-package-tgz tar:///home/lerenzo/.npm/tunnel-agent/0.3.0/package.tgz
18467 silly lockFile 16f0479c--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign
18468 silly lockFile 16f0479c--request-node-modules-oauth-sign tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign
18469 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
18470 silly lockFile 9da3dad5-npm-oauth-sign-0-3-0-package-tgz tar:///home/lerenzo/.npm/oauth-sign/0.3.0/package.tgz
18471 verbose readDependencies using package.json deps
18472 verbose readDependencies using package.json deps
18473 verbose readDependencies using package.json deps
18474 silly resolved []
18475 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent
18476 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/forever-agent
18477 verbose linkStuff [ true,
18477 verbose linkStuff   '/usr/local/lib/node_modules',
18477 verbose linkStuff   false,
18477 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18478 info linkStuff forever-agent@0.5.0
18479 verbose linkBins forever-agent@0.5.0
18480 verbose linkMans forever-agent@0.5.0
18481 verbose rebuildBundles forever-agent@0.5.0
18482 verbose readDependencies using package.json deps
18483 silly resolved []
18484 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign
18485 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/aws-sign
18486 verbose linkStuff [ true,
18486 verbose linkStuff   '/usr/local/lib/node_modules',
18486 verbose linkStuff   false,
18486 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18487 info linkStuff aws-sign@0.3.0
18488 verbose linkBins aws-sign@0.3.0
18489 verbose linkMans aws-sign@0.3.0
18490 verbose rebuildBundles aws-sign@0.3.0
18491 info preinstall form-data@0.1.2
18492 info preinstall tunnel-agent@0.3.0
18493 info install forever-agent@0.5.0
18494 info install aws-sign@0.3.0
18495 info preinstall oauth-sign@0.3.0
18496 info postinstall forever-agent@0.5.0
18497 info postinstall aws-sign@0.3.0
18498 verbose readDependencies using package.json deps
18499 verbose readDependencies using package.json deps
18500 verbose readDependencies using package.json deps
18501 verbose readDependencies using package.json deps
18502 silly resolved []
18503 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent
18504 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/tunnel-agent
18505 verbose linkStuff [ true,
18505 verbose linkStuff   '/usr/local/lib/node_modules',
18505 verbose linkStuff   false,
18505 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18506 info linkStuff tunnel-agent@0.3.0
18507 verbose linkBins tunnel-agent@0.3.0
18508 verbose linkMans tunnel-agent@0.3.0
18509 verbose rebuildBundles tunnel-agent@0.3.0
18510 verbose readDependencies using package.json deps
18511 info install tunnel-agent@0.3.0
18512 verbose readDependencies using package.json deps
18513 silly resolved []
18514 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign
18515 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/oauth-sign
18516 verbose linkStuff [ true,
18516 verbose linkStuff   '/usr/local/lib/node_modules',
18516 verbose linkStuff   false,
18516 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18517 info linkStuff oauth-sign@0.3.0
18518 verbose linkBins oauth-sign@0.3.0
18519 verbose linkMans oauth-sign@0.3.0
18520 verbose rebuildBundles oauth-sign@0.3.0
18521 info install oauth-sign@0.3.0
18522 info postinstall tunnel-agent@0.3.0
18523 verbose cache add [ 'combined-stream@~0.0.4', null ]
18524 verbose cache add name=undefined spec="combined-stream@~0.0.4" args=["combined-stream@~0.0.4",null]
18525 verbose parsed url { protocol: null,
18525 verbose parsed url   slashes: null,
18525 verbose parsed url   auth: null,
18525 verbose parsed url   host: null,
18525 verbose parsed url   port: null,
18525 verbose parsed url   hostname: null,
18525 verbose parsed url   hash: null,
18525 verbose parsed url   search: null,
18525 verbose parsed url   query: null,
18525 verbose parsed url   pathname: 'combined-stream@~0.0.4',
18525 verbose parsed url   path: 'combined-stream@~0.0.4',
18525 verbose parsed url   href: 'combined-stream@~0.0.4' }
18526 verbose cache add name="combined-stream" spec="~0.0.4" args=["combined-stream","~0.0.4"]
18527 verbose parsed url { protocol: null,
18527 verbose parsed url   slashes: null,
18527 verbose parsed url   auth: null,
18527 verbose parsed url   host: null,
18527 verbose parsed url   port: null,
18527 verbose parsed url   hostname: null,
18527 verbose parsed url   hash: null,
18527 verbose parsed url   search: null,
18527 verbose parsed url   query: null,
18527 verbose parsed url   pathname: '~0.0.4',
18527 verbose parsed url   path: '~0.0.4',
18527 verbose parsed url   href: '~0.0.4' }
18528 verbose addNamed [ 'combined-stream', '~0.0.4' ]
18529 info postinstall oauth-sign@0.3.0
18530 verbose cache add [ 'async@~0.2.9', null ]
18531 verbose cache add name=undefined spec="async@~0.2.9" args=["async@~0.2.9",null]
18532 verbose parsed url { protocol: null,
18532 verbose parsed url   slashes: null,
18532 verbose parsed url   auth: null,
18532 verbose parsed url   host: null,
18532 verbose parsed url   port: null,
18532 verbose parsed url   hostname: null,
18532 verbose parsed url   hash: null,
18532 verbose parsed url   search: null,
18532 verbose parsed url   query: null,
18532 verbose parsed url   pathname: 'async@~0.2.9',
18532 verbose parsed url   path: 'async@~0.2.9',
18532 verbose parsed url   href: 'async@~0.2.9' }
18533 verbose cache add name="async" spec="~0.2.9" args=["async","~0.2.9"]
18534 verbose parsed url { protocol: null,
18534 verbose parsed url   slashes: null,
18534 verbose parsed url   auth: null,
18534 verbose parsed url   host: null,
18534 verbose parsed url   port: null,
18534 verbose parsed url   hostname: null,
18534 verbose parsed url   hash: null,
18534 verbose parsed url   search: null,
18534 verbose parsed url   query: null,
18534 verbose parsed url   pathname: '~0.2.9',
18534 verbose parsed url   path: '~0.2.9',
18534 verbose parsed url   href: '~0.2.9' }
18535 verbose addNamed [ 'async', '~0.2.9' ]
18536 verbose addNamed [ null, '>=0.2.9-0 <0.3.0-0' ]
18537 silly lockFile 5d51c871-async-0-2-9 async@~0.2.9
18538 verbose lock async@~0.2.9 /home/lerenzo/.npm/5d51c871-async-0-2-9.lock
18539 silly lockFile 3abd9e24--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs
18540 silly lockFile 3abd9e24--modules-request-node-modules-qs tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs
18541 silly lockFile e7954461-lerenzo-npm-qs-0-6-5-package-tgz tar:///home/lerenzo/.npm/qs/0.6.5/package.tgz
18542 silly lockFile e7954461-lerenzo-npm-qs-0-6-5-package-tgz tar:///home/lerenzo/.npm/qs/0.6.5/package.tgz
18543 silly gunzTarPerm extractEntry images/hawk.png
18544 silly gunzTarPerm extractEntry images/logo.png
18545 silly addNameRange { name: 'async', range: '>=0.2.9-0 <0.3.0-0', hasData: false }
18546 info preinstall qs@0.6.5
18547 verbose url raw async
18548 verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
18549 verbose url resolved https://registry.npmjs.org/async
18550 info trying registry request attempt 1 at 14:14:11
18551 verbose etag "7E0IPNSW1RSEG1H124PUN9R66"
18552 http GET https://registry.npmjs.org/async
18553 verbose readDependencies using package.json deps
18554 verbose readDependencies using package.json deps
18555 silly resolved []
18556 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs
18557 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/qs
18558 verbose linkStuff [ true,
18558 verbose linkStuff   '/usr/local/lib/node_modules',
18558 verbose linkStuff   false,
18558 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18559 info linkStuff qs@0.6.5
18560 verbose linkBins qs@0.6.5
18561 verbose linkMans qs@0.6.5
18562 verbose rebuildBundles qs@0.6.5
18563 info install qs@0.6.5
18564 silly gunzTarPerm extractEntry Makefile
18565 info postinstall qs@0.6.5
18566 silly lockFile b7217cb5--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar
18567 silly lockFile b7217cb5--request-node-modules-cookie-jar tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar
18568 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
18569 silly lockFile 5a5d76b2-npm-cookie-jar-0-3-0-package-tgz tar:///home/lerenzo/.npm/cookie-jar/0.3.0/package.tgz
18570 silly gunzTarPerm extractEntry lib/browser.js
18571 silly gunzTarPerm extractEntry lib/client.js
18572 info preinstall cookie-jar@0.3.0
18573 verbose readDependencies using package.json deps
18574 silly gunzTarPerm extractEntry lib/crypto.js
18575 silly gunzTarPerm extractEntry lib/index.js
18576 verbose readDependencies using package.json deps
18577 silly resolved []
18578 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar
18579 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/cookie-jar
18580 verbose linkStuff [ true,
18580 verbose linkStuff   '/usr/local/lib/node_modules',
18580 verbose linkStuff   false,
18580 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18581 info linkStuff cookie-jar@0.3.0
18582 verbose linkBins cookie-jar@0.3.0
18583 verbose linkMans cookie-jar@0.3.0
18584 verbose rebuildBundles cookie-jar@0.3.0
18585 info install cookie-jar@0.3.0
18586 info postinstall cookie-jar@0.3.0
18587 silly gunzTarPerm extractEntry lib/server.js
18588 silly gunzTarPerm extractEntry lib/utils.js
18589 silly lockFile c30aac8b-uest-node-modules-http-signature tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/http-signature
18590 silly lockFile c30aac8b-uest-node-modules-http-signature tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/http-signature
18591 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
18592 silly lockFile d6728d0b-ttp-signature-0-10-0-package-tgz tar:///home/lerenzo/.npm/http-signature/0.10.0/package.tgz
18593 info preinstall http-signature@0.10.0
18594 verbose readDependencies using package.json deps
18595 verbose readDependencies using package.json deps
18596 verbose cache add [ 'assert-plus@0.1.2', null ]
18597 verbose cache add name=undefined spec="assert-plus@0.1.2" args=["assert-plus@0.1.2",null]
18598 verbose parsed url { protocol: null,
18598 verbose parsed url   slashes: null,
18598 verbose parsed url   auth: null,
18598 verbose parsed url   host: null,
18598 verbose parsed url   port: null,
18598 verbose parsed url   hostname: null,
18598 verbose parsed url   hash: null,
18598 verbose parsed url   search: null,
18598 verbose parsed url   query: null,
18598 verbose parsed url   pathname: 'assert-plus@0.1.2',
18598 verbose parsed url   path: 'assert-plus@0.1.2',
18598 verbose parsed url   href: 'assert-plus@0.1.2' }
18599 verbose cache add name="assert-plus" spec="0.1.2" args=["assert-plus","0.1.2"]
18600 verbose parsed url { protocol: null,
18600 verbose parsed url   slashes: null,
18600 verbose parsed url   auth: null,
18600 verbose parsed url   host: null,
18600 verbose parsed url   port: null,
18600 verbose parsed url   hostname: null,
18600 verbose parsed url   hash: null,
18600 verbose parsed url   search: null,
18600 verbose parsed url   query: null,
18600 verbose parsed url   pathname: '0.1.2',
18600 verbose parsed url   path: '0.1.2',
18600 verbose parsed url   href: '0.1.2' }
18601 verbose addNamed [ 'assert-plus', '0.1.2' ]
18602 verbose addNamed [ '0.1.2', '0.1.2' ]
18603 silly lockFile 46222085-assert-plus-0-1-2 assert-plus@0.1.2
18604 verbose lock assert-plus@0.1.2 /home/lerenzo/.npm/46222085-assert-plus-0-1-2.lock
18605 verbose cache add [ 'asn1@0.1.11', null ]
18606 verbose cache add name=undefined spec="asn1@0.1.11" args=["asn1@0.1.11",null]
18607 verbose parsed url { protocol: null,
18607 verbose parsed url   slashes: null,
18607 verbose parsed url   auth: null,
18607 verbose parsed url   host: null,
18607 verbose parsed url   port: null,
18607 verbose parsed url   hostname: null,
18607 verbose parsed url   hash: null,
18607 verbose parsed url   search: null,
18607 verbose parsed url   query: null,
18607 verbose parsed url   pathname: 'asn1@0.1.11',
18607 verbose parsed url   path: 'asn1@0.1.11',
18607 verbose parsed url   href: 'asn1@0.1.11' }
18608 verbose cache add name="asn1" spec="0.1.11" args=["asn1","0.1.11"]
18609 verbose parsed url { protocol: null,
18609 verbose parsed url   slashes: null,
18609 verbose parsed url   auth: null,
18609 verbose parsed url   host: null,
18609 verbose parsed url   port: null,
18609 verbose parsed url   hostname: null,
18609 verbose parsed url   hash: null,
18609 verbose parsed url   search: null,
18609 verbose parsed url   query: null,
18609 verbose parsed url   pathname: '0.1.11',
18609 verbose parsed url   path: '0.1.11',
18609 verbose parsed url   href: '0.1.11' }
18610 verbose addNamed [ 'asn1', '0.1.11' ]
18611 verbose addNamed [ '0.1.11', '0.1.11' ]
18612 silly lockFile 41ecb821-asn1-0-1-11 asn1@0.1.11
18613 verbose lock asn1@0.1.11 /home/lerenzo/.npm/41ecb821-asn1-0-1-11.lock
18614 verbose cache add [ 'ctype@0.5.2', null ]
18615 verbose cache add name=undefined spec="ctype@0.5.2" args=["ctype@0.5.2",null]
18616 verbose parsed url { protocol: null,
18616 verbose parsed url   slashes: null,
18616 verbose parsed url   auth: null,
18616 verbose parsed url   host: null,
18616 verbose parsed url   port: null,
18616 verbose parsed url   hostname: null,
18616 verbose parsed url   hash: null,
18616 verbose parsed url   search: null,
18616 verbose parsed url   query: null,
18616 verbose parsed url   pathname: 'ctype@0.5.2',
18616 verbose parsed url   path: 'ctype@0.5.2',
18616 verbose parsed url   href: 'ctype@0.5.2' }
18617 verbose cache add name="ctype" spec="0.5.2" args=["ctype","0.5.2"]
18618 verbose parsed url { protocol: null,
18618 verbose parsed url   slashes: null,
18618 verbose parsed url   auth: null,
18618 verbose parsed url   host: null,
18618 verbose parsed url   port: null,
18618 verbose parsed url   hostname: null,
18618 verbose parsed url   hash: null,
18618 verbose parsed url   search: null,
18618 verbose parsed url   query: null,
18618 verbose parsed url   pathname: '0.5.2',
18618 verbose parsed url   path: '0.5.2',
18618 verbose parsed url   href: '0.5.2' }
18619 verbose addNamed [ 'ctype', '0.5.2' ]
18620 verbose addNamed [ '0.5.2', '0.5.2' ]
18621 silly lockFile c556016e-ctype-0-5-2 ctype@0.5.2
18622 verbose lock ctype@0.5.2 /home/lerenzo/.npm/c556016e-ctype-0-5-2.lock
18623 verbose url raw assert-plus/0.1.2
18624 verbose url resolving [ 'https://registry.npmjs.org/', './assert-plus/0.1.2' ]
18625 verbose url resolved https://registry.npmjs.org/assert-plus/0.1.2
18626 info trying registry request attempt 1 at 14:14:11
18627 http GET https://registry.npmjs.org/assert-plus/0.1.2
18628 verbose url raw asn1/0.1.11
18629 verbose url resolving [ 'https://registry.npmjs.org/', './asn1/0.1.11' ]
18630 verbose url resolved https://registry.npmjs.org/asn1/0.1.11
18631 info trying registry request attempt 1 at 14:14:11
18632 http GET https://registry.npmjs.org/asn1/0.1.11
18633 verbose url raw ctype/0.5.2
18634 verbose url resolving [ 'https://registry.npmjs.org/', './ctype/0.5.2' ]
18635 verbose url resolved https://registry.npmjs.org/ctype/0.5.2
18636 info trying registry request attempt 1 at 14:14:11
18637 http GET https://registry.npmjs.org/ctype/0.5.2
18638 silly lockFile 018b40e4-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid
18639 silly lockFile 018b40e4-s-request-node-modules-node-uuid tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid
18640 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
18641 silly lockFile 97bc16a5--npm-node-uuid-1-4-1-package-tgz tar:///home/lerenzo/.npm/node-uuid/1.4.1/package.tgz
18642 silly lockFile a8e1c428-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime
18643 silly lockFile a8e1c428-odules-request-node-modules-mime tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime
18644 info preinstall node-uuid@1.4.1
18645 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
18646 silly lockFile dba079eb-enzo-npm-mime-1-2-11-package-tgz tar:///home/lerenzo/.npm/mime/1.2.11/package.tgz
18647 verbose readDependencies using package.json deps
18648 verbose readDependencies using package.json deps
18649 silly resolved []
18650 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid
18651 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/node-uuid
18652 verbose linkStuff [ true,
18652 verbose linkStuff   '/usr/local/lib/node_modules',
18652 verbose linkStuff   false,
18652 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18653 info linkStuff node-uuid@1.4.1
18654 verbose linkBins node-uuid@1.4.1
18655 verbose linkMans node-uuid@1.4.1
18656 verbose rebuildBundles node-uuid@1.4.1
18657 info preinstall mime@1.2.11
18658 info install node-uuid@1.4.1
18659 info postinstall node-uuid@1.4.1
18660 verbose readDependencies using package.json deps
18661 verbose readDependencies using package.json deps
18662 silly resolved []
18663 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime
18664 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/mime
18665 verbose linkStuff [ true,
18665 verbose linkStuff   '/usr/local/lib/node_modules',
18665 verbose linkStuff   false,
18665 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules' ]
18666 info linkStuff mime@1.2.11
18667 verbose linkBins mime@1.2.11
18668 verbose linkMans mime@1.2.11
18669 verbose rebuildBundles mime@1.2.11
18670 info install mime@1.2.11
18671 info postinstall mime@1.2.11
18672 silly gunzTarPerm extractEntry test/browser.js
18673 silly gunzTarPerm extractEntry test/client.js
18674 silly gunzTarPerm extractEntry test/crypto.js
18675 silly gunzTarPerm extractEntry test/index.js
18676 silly gunzTarPerm extractEntry test/message.js
18677 silly gunzTarPerm extractEntry test/readme.js
18678 silly gunzTarPerm extractEntry test/server.js
18679 silly gunzTarPerm extractEntry test/uri.js
18680 silly gunzTarPerm extractEntry test/utils.js
18681 silly gunzTarPerm extractEntry example/usage.js
18682 silly lockFile bb380052-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/hawk
18683 silly lockFile bb380052-odules-request-node-modules-hawk tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/hawk
18684 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18685 silly lockFile c401199b-renzo-npm-hawk-1-0-0-package-tgz tar:///home/lerenzo/.npm/hawk/1.0.0/package.tgz
18686 info preinstall hawk@1.0.0
18687 verbose readDependencies using package.json deps
18688 verbose readDependencies using package.json deps
18689 verbose cache add [ 'hoek@0.9.x', null ]
18690 verbose cache add name=undefined spec="hoek@0.9.x" args=["hoek@0.9.x",null]
18691 verbose parsed url { protocol: null,
18691 verbose parsed url   slashes: null,
18691 verbose parsed url   auth: null,
18691 verbose parsed url   host: null,
18691 verbose parsed url   port: null,
18691 verbose parsed url   hostname: null,
18691 verbose parsed url   hash: null,
18691 verbose parsed url   search: null,
18691 verbose parsed url   query: null,
18691 verbose parsed url   pathname: 'hoek@0.9.x',
18691 verbose parsed url   path: 'hoek@0.9.x',
18691 verbose parsed url   href: 'hoek@0.9.x' }
18692 verbose cache add name="hoek" spec="0.9.x" args=["hoek","0.9.x"]
18693 verbose parsed url { protocol: null,
18693 verbose parsed url   slashes: null,
18693 verbose parsed url   auth: null,
18693 verbose parsed url   host: null,
18693 verbose parsed url   port: null,
18693 verbose parsed url   hostname: null,
18693 verbose parsed url   hash: null,
18693 verbose parsed url   search: null,
18693 verbose parsed url   query: null,
18693 verbose parsed url   pathname: '0.9.x',
18693 verbose parsed url   path: '0.9.x',
18693 verbose parsed url   href: '0.9.x' }
18694 verbose addNamed [ 'hoek', '0.9.x' ]
18695 verbose addNamed [ null, '>=0.9.0-0 <0.10.0-0' ]
18696 silly lockFile 58ccaf9a-hoek-0-9-x hoek@0.9.x
18697 verbose lock hoek@0.9.x /home/lerenzo/.npm/58ccaf9a-hoek-0-9-x.lock
18698 verbose cache add [ 'boom@0.4.x', null ]
18699 verbose cache add name=undefined spec="boom@0.4.x" args=["boom@0.4.x",null]
18700 verbose parsed url { protocol: null,
18700 verbose parsed url   slashes: null,
18700 verbose parsed url   auth: null,
18700 verbose parsed url   host: null,
18700 verbose parsed url   port: null,
18700 verbose parsed url   hostname: null,
18700 verbose parsed url   hash: null,
18700 verbose parsed url   search: null,
18700 verbose parsed url   query: null,
18700 verbose parsed url   pathname: 'boom@0.4.x',
18700 verbose parsed url   path: 'boom@0.4.x',
18700 verbose parsed url   href: 'boom@0.4.x' }
18701 verbose cache add name="boom" spec="0.4.x" args=["boom","0.4.x"]
18702 verbose parsed url { protocol: null,
18702 verbose parsed url   slashes: null,
18702 verbose parsed url   auth: null,
18702 verbose parsed url   host: null,
18702 verbose parsed url   port: null,
18702 verbose parsed url   hostname: null,
18702 verbose parsed url   hash: null,
18702 verbose parsed url   search: null,
18702 verbose parsed url   query: null,
18702 verbose parsed url   pathname: '0.4.x',
18702 verbose parsed url   path: '0.4.x',
18702 verbose parsed url   href: '0.4.x' }
18703 verbose addNamed [ 'boom', '0.4.x' ]
18704 verbose addNamed [ null, '>=0.4.0-0 <0.5.0-0' ]
18705 silly lockFile 225d04ea-boom-0-4-x boom@0.4.x
18706 verbose lock boom@0.4.x /home/lerenzo/.npm/225d04ea-boom-0-4-x.lock
18707 verbose cache add [ 'cryptiles@0.2.x', null ]
18708 verbose cache add name=undefined spec="cryptiles@0.2.x" args=["cryptiles@0.2.x",null]
18709 verbose parsed url { protocol: null,
18709 verbose parsed url   slashes: null,
18709 verbose parsed url   auth: null,
18709 verbose parsed url   host: null,
18709 verbose parsed url   port: null,
18709 verbose parsed url   hostname: null,
18709 verbose parsed url   hash: null,
18709 verbose parsed url   search: null,
18709 verbose parsed url   query: null,
18709 verbose parsed url   pathname: 'cryptiles@0.2.x',
18709 verbose parsed url   path: 'cryptiles@0.2.x',
18709 verbose parsed url   href: 'cryptiles@0.2.x' }
18710 verbose cache add name="cryptiles" spec="0.2.x" args=["cryptiles","0.2.x"]
18711 verbose parsed url { protocol: null,
18711 verbose parsed url   slashes: null,
18711 verbose parsed url   auth: null,
18711 verbose parsed url   host: null,
18711 verbose parsed url   port: null,
18711 verbose parsed url   hostname: null,
18711 verbose parsed url   hash: null,
18711 verbose parsed url   search: null,
18711 verbose parsed url   query: null,
18711 verbose parsed url   pathname: '0.2.x',
18711 verbose parsed url   path: '0.2.x',
18711 verbose parsed url   href: '0.2.x' }
18712 verbose addNamed [ 'cryptiles', '0.2.x' ]
18713 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
18714 silly lockFile 75d7e584-cryptiles-0-2-x cryptiles@0.2.x
18715 verbose lock cryptiles@0.2.x /home/lerenzo/.npm/75d7e584-cryptiles-0-2-x.lock
18716 silly addNameRange { name: 'hoek', range: '>=0.9.0-0 <0.10.0-0', hasData: false }
18717 silly addNameRange { name: 'boom', range: '>=0.4.0-0 <0.5.0-0', hasData: false }
18718 verbose url raw hoek
18719 verbose url resolving [ 'https://registry.npmjs.org/', './hoek' ]
18720 verbose url resolved https://registry.npmjs.org/hoek
18721 info trying registry request attempt 1 at 14:14:11
18722 http GET https://registry.npmjs.org/hoek
18723 silly addNameRange { name: 'cryptiles',
18723 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
18723 silly addNameRange   hasData: false }
18724 verbose cache add [ 'sntp@0.2.x', null ]
18725 verbose cache add name=undefined spec="sntp@0.2.x" args=["sntp@0.2.x",null]
18726 verbose parsed url { protocol: null,
18726 verbose parsed url   slashes: null,
18726 verbose parsed url   auth: null,
18726 verbose parsed url   host: null,
18726 verbose parsed url   port: null,
18726 verbose parsed url   hostname: null,
18726 verbose parsed url   hash: null,
18726 verbose parsed url   search: null,
18726 verbose parsed url   query: null,
18726 verbose parsed url   pathname: 'sntp@0.2.x',
18726 verbose parsed url   path: 'sntp@0.2.x',
18726 verbose parsed url   href: 'sntp@0.2.x' }
18727 verbose cache add name="sntp" spec="0.2.x" args=["sntp","0.2.x"]
18728 verbose parsed url { protocol: null,
18728 verbose parsed url   slashes: null,
18728 verbose parsed url   auth: null,
18728 verbose parsed url   host: null,
18728 verbose parsed url   port: null,
18728 verbose parsed url   hostname: null,
18728 verbose parsed url   hash: null,
18728 verbose parsed url   search: null,
18728 verbose parsed url   query: null,
18728 verbose parsed url   pathname: '0.2.x',
18728 verbose parsed url   path: '0.2.x',
18728 verbose parsed url   href: '0.2.x' }
18729 verbose addNamed [ 'sntp', '0.2.x' ]
18730 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
18731 silly lockFile b35a0361-sntp-0-2-x sntp@0.2.x
18732 verbose lock sntp@0.2.x /home/lerenzo/.npm/b35a0361-sntp-0-2-x.lock
18733 verbose url raw cryptiles
18734 verbose url resolving [ 'https://registry.npmjs.org/', './cryptiles' ]
18735 verbose url resolved https://registry.npmjs.org/cryptiles
18736 info trying registry request attempt 1 at 14:14:11
18737 http GET https://registry.npmjs.org/cryptiles
18738 silly addNameRange { name: 'sntp', range: '>=0.2.0-0 <0.3.0-0', hasData: false }
18739 verbose url raw sntp
18740 verbose url resolving [ 'https://registry.npmjs.org/', './sntp' ]
18741 verbose url resolved https://registry.npmjs.org/sntp
18742 info trying registry request attempt 1 at 14:14:11
18743 http GET https://registry.npmjs.org/sntp
18744 verbose registry.get boom not expired, no request
18745 silly addNameRange number 2 { name: 'boom', range: '>=0.4.0-0 <0.5.0-0', hasData: true }
18746 silly addNameRange versions [ 'boom',
18746 silly addNameRange   [ '0.0.1',
18746 silly addNameRange     '0.0.2',
18746 silly addNameRange     '0.1.0',
18746 silly addNameRange     '0.2.0',
18746 silly addNameRange     '0.2.1',
18746 silly addNameRange     '0.3.0',
18746 silly addNameRange     '0.3.1',
18746 silly addNameRange     '0.3.2',
18746 silly addNameRange     '0.3.3',
18746 silly addNameRange     '0.3.4',
18746 silly addNameRange     '0.3.5',
18746 silly addNameRange     '0.3.6',
18746 silly addNameRange     '0.3.7',
18746 silly addNameRange     '0.3.8',
18746 silly addNameRange     '0.4.0',
18746 silly addNameRange     '0.4.1',
18746 silly addNameRange     '0.4.2',
18746 silly addNameRange     '1.0.0',
18746 silly addNameRange     '1.0.1',
18746 silly addNameRange     '1.0.2',
18746 silly addNameRange     '1.1.0',
18746 silly addNameRange     '1.1.1',
18746 silly addNameRange     '1.1.2',
18746 silly addNameRange     '1.2.0',
18746 silly addNameRange     '1.2.1' ] ]
18747 verbose addNamed [ 'boom', '0.4.2' ]
18748 verbose addNamed [ '0.4.2', '0.4.2' ]
18749 silly lockFile 5b106bb4-boom-0-4-2 boom@0.4.2
18750 verbose lock boom@0.4.2 /home/lerenzo/.npm/5b106bb4-boom-0-4-2.lock
18751 silly lockFile bdf270f2-ry-npmjs-org-boom-boom-0-4-2-tgz https://registry.npmjs.org/boom/-/boom-0.4.2.tgz
18752 verbose lock https://registry.npmjs.org/boom/-/boom-0.4.2.tgz /home/lerenzo/.npm/bdf270f2-ry-npmjs-org-boom-boom-0-4-2-tgz.lock
18753 verbose addRemoteTarball [ 'https://registry.npmjs.org/boom/-/boom-0.4.2.tgz',
18753 verbose addRemoteTarball   '7a636e9ded4efcefb19cef4947a3c67dfaee911b' ]
18754 info retry fetch attempt 1 at 14:14:11
18755 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451432-0.7101081013679504/tmp.tgz
18756 http GET https://registry.npmjs.org/boom/-/boom-0.4.2.tgz
18757 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz
18758 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18759 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package /home/lerenzo/.npm/34be932f-3261-0-05008199601434171-package.lock
18760 silly lockFile 9105fcd2-3261-0-05008199601434171-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz
18761 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz /home/lerenzo/.npm/9105fcd2-3261-0-05008199601434171-tmp-tgz.lock
18762 silly gunzTarPerm modes [ '755', '644' ]
18763 silly gunzTarPerm extractEntry package.json
18764 silly gunzTarPerm extractEntry .npmignore
18765 silly gunzTarPerm extractEntry README.md
18766 silly gunzTarPerm extractEntry color-spaces.pl
18767 silly gunzTarPerm extractEntry examples/cursorPosition.js
18768 silly gunzTarPerm extractEntry examples/starwars.js
18769 silly gunzTarPerm extractEntry examples/beep/index.js
18770 silly gunzTarPerm extractEntry examples/clear/index.js
18771 silly gunzTarPerm extractEntry examples/progress/index.js
18772 silly gunzTarPerm extractEntry lib/ansi.js
18773 silly gunzTarPerm extractEntry lib/newlines.js
18774 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18775 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18776 silly lockFile 9105fcd2-3261-0-05008199601434171-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz
18777 silly lockFile 9105fcd2-3261-0-05008199601434171-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/tmp.tgz
18778 verbose tar pack [ '/home/lerenzo/.npm/ansi/0.2.1/package.tgz',
18778 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package' ]
18779 verbose tarball /home/lerenzo/.npm/ansi/0.2.1/package.tgz
18780 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18781 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18782 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package /home/lerenzo/.npm/34be932f-3261-0-05008199601434171-package.lock
18783 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18784 verbose lock tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz /home/lerenzo/.npm/ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz.lock
18785 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18786 silly lockFile 34be932f-3261-0-05008199601434171-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572433261-0.05008199601434171/package
18787 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18788 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18789 silly lockFile ee0ef59a-e-lerenzo-npm-ansi-0-2-1-package /home/lerenzo/.npm/ansi/0.2.1/package
18790 verbose lock /home/lerenzo/.npm/ansi/0.2.1/package /home/lerenzo/.npm/ee0ef59a-e-lerenzo-npm-ansi-0-2-1-package.lock
18791 silly lockFile ee0ef59a-e-lerenzo-npm-ansi-0-2-1-package /home/lerenzo/.npm/ansi/0.2.1/package
18792 silly lockFile ee0ef59a-e-lerenzo-npm-ansi-0-2-1-package /home/lerenzo/.npm/ansi/0.2.1/package
18793 verbose tar unpack /home/lerenzo/.npm/ansi/0.2.1/package.tgz
18794 silly lockFile 3fa7b077-e-lerenzo-npm-ansi-0-2-1-package tar:///home/lerenzo/.npm/ansi/0.2.1/package
18795 verbose lock tar:///home/lerenzo/.npm/ansi/0.2.1/package /home/lerenzo/.npm/3fa7b077-e-lerenzo-npm-ansi-0-2-1-package.lock
18796 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18797 verbose lock tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz /home/lerenzo/.npm/ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz.lock
18798 silly gunzTarPerm modes [ '755', '644' ]
18799 silly gunzTarPerm extractEntry package.json
18800 silly gunzTarPerm extractEntry .npmignore
18801 silly gunzTarPerm extractEntry README.md
18802 silly gunzTarPerm extractEntry color-spaces.pl
18803 silly gunzTarPerm extractEntry examples/cursorPosition.js
18804 silly gunzTarPerm extractEntry examples/starwars.js
18805 silly gunzTarPerm extractEntry examples/beep/index.js
18806 silly gunzTarPerm extractEntry examples/clear/index.js
18807 silly gunzTarPerm extractEntry examples/progress/index.js
18808 silly gunzTarPerm extractEntry lib/ansi.js
18809 silly gunzTarPerm extractEntry lib/newlines.js
18810 silly lockFile 3fa7b077-e-lerenzo-npm-ansi-0-2-1-package tar:///home/lerenzo/.npm/ansi/0.2.1/package
18811 silly lockFile 3fa7b077-e-lerenzo-npm-ansi-0-2-1-package tar:///home/lerenzo/.npm/ansi/0.2.1/package
18812 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18813 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18814 verbose chmod /home/lerenzo/.npm/ansi/0.2.1/package.tgz 644
18815 verbose chown /home/lerenzo/.npm/ansi/0.2.1/package.tgz [ 1000, 1000 ]
18816 silly lockFile 57de2c01-ry-npmjs-org-ansi-ansi-0-2-1-tgz https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz
18817 silly lockFile 57de2c01-ry-npmjs-org-ansi-ansi-0-2-1-tgz https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz
18818 silly lockFile ce01b7e1-ansi-0-2-1 ansi@0.2.1
18819 silly lockFile ce01b7e1-ansi-0-2-1 ansi@0.2.1
18820 silly lockFile 36148370-ansi-0-2-1 ansi@~0.2.1
18821 silly lockFile 36148370-ansi-0-2-1 ansi@~0.2.1
18822 silly resolved [ { name: 'ansi',
18822 silly resolved     description: 'Advanced ANSI formatting tool for Node.js',
18822 silly resolved     keywords:
18822 silly resolved      [ 'ansi',
18822 silly resolved        'formatting',
18822 silly resolved        'cursor',
18822 silly resolved        'color',
18822 silly resolved        'terminal',
18822 silly resolved        'rgb',
18822 silly resolved        '256',
18822 silly resolved        'stream' ],
18822 silly resolved     version: '0.2.1',
18822 silly resolved     author:
18822 silly resolved      { name: 'Nathan Rajlich',
18822 silly resolved        email: 'nathan@tootallnate.net',
18822 silly resolved        url: 'http://tootallnate.net' },
18822 silly resolved     repository: { type: 'git', url: 'git://github.com/TooTallNate/ansi.js.git' },
18822 silly resolved     main: './lib/ansi.js',
18822 silly resolved     bin:
18822 silly resolved      { beep: './examples/beep/index.js',
18822 silly resolved        clear: './examples/clear/index.js',
18822 silly resolved        starwars: './examples/starwars.js' },
18822 silly resolved     scripts: { test: 'mocha --reporter spec' },
18822 silly resolved     devDependencies: { mocha: '*' },
18822 silly resolved     engines: { node: '*' },
18822 silly resolved     readme: 'ansi.js\n=========\n### Advanced ANSI formatting tool for Node.js\n\n`ansi.js` is a module for Node.js that provides an easy-to-use API for\nwriting ANSI escape codes to `Stream` instances. ANSI escape codes are used to do\nfancy things in a terminal window, like render text in colors, delete characters,\nlines, the entire window, or hide and show the cursor, and lots more!\n\nThe code for the example in the screenshot above can be found in the\n`examples/imgcat` directory.\n\n#### Features:\n\n * 256 color support for the terminal!\n * Make a beep sound from your terminal!\n * Works with *any* writable `Stream` instance.\n * Allows you to move the cursor anywhere on the terminal window.\n * Allows you to delete existing contents from the terminal window.\n * Allows you to hide and show the cursor.\n * Converts CSS color codes and RGB values into ANSI escape codes.\n * Low-level; you are in control of when escape codes are used, it\'s not abstracted.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ansi\n```\n\n\nExample\n-------\n\n``` js\nvar ansi = require(\'ansi\')\n  , cursor = ansi(process.stdout)\n\n// You can chain your calls forever:\ncursor\n  .red()                 // Set font color to red\n  .bg.grey()             // Set background color to grey\n  .write(\'Hello World!\') // Write \'Hello World!\' to stdout\n  .bg.reset()            // Reset the bgcolor before writing the trailing \\n,\n                         //      to avoid Terminal glitches\n  .write(\'\\n\')           // And a final \\n to wrap things up\n\n// Rendering modes are persistent:\ncursor.hex(\'#660000\').bold().underline()\n\n// You can use the regular logging functions, text will be green\nconsole.log(\'This is blood red, bold text\')\n\n// To reset just the foreground color:\ncursor.fg.reset()\n\nconsole.log(\'This will still be bold\')\n\n// Clean up after yourself!\ncursor.reset()\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
18822 silly resolved     readmeFilename: 'README.md',
18822 silly resolved     bugs: { url: 'https://github.com/TooTallNate/ansi.js/issues' },
18822 silly resolved     homepage: 'https://github.com/TooTallNate/ansi.js',
18822 silly resolved     _id: 'ansi@0.2.1',
18822 silly resolved     dist: { shasum: '8d80c3f71f304b806db91e84235cff391339afa8' },
18822 silly resolved     _from: 'ansi@~0.2.1',
18822 silly resolved     _resolved: 'https://registry.npmjs.org/ansi/-/ansi-0.2.1.tgz' } ]
18823 info install ansi@0.2.1 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
18824 info installOne ansi@0.2.1
18825 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi unbuild
18826 verbose tar unpack /home/lerenzo/.npm/ansi/0.2.1/package.tgz
18827 silly lockFile c3d13d7e-modules-npmlog-node-modules-ansi tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi
18828 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi /home/lerenzo/.npm/c3d13d7e-modules-npmlog-node-modules-ansi.lock
18829 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18830 verbose lock tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz /home/lerenzo/.npm/ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz.lock
18831 silly gunzTarPerm modes [ '755', '644' ]
18832 silly gunzTarPerm extractEntry package.json
18833 silly gunzTarPerm extractEntry .npmignore
18834 silly gunzTarPerm extractEntry README.md
18835 silly gunzTarPerm extractEntry color-spaces.pl
18836 silly gunzTarPerm extractEntry examples/cursorPosition.js
18837 silly gunzTarPerm extractEntry examples/starwars.js
18838 silly gunzTarPerm extractEntry examples/beep/index.js
18839 silly gunzTarPerm extractEntry examples/clear/index.js
18840 silly gunzTarPerm extractEntry examples/progress/index.js
18841 silly gunzTarPerm extractEntry lib/ansi.js
18842 silly gunzTarPerm extractEntry lib/newlines.js
18843 silly lockFile c3d13d7e-modules-npmlog-node-modules-ansi tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi
18844 silly lockFile c3d13d7e-modules-npmlog-node-modules-ansi tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi
18845 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18846 silly lockFile ccd0b44c-renzo-npm-ansi-0-2-1-package-tgz tar:///home/lerenzo/.npm/ansi/0.2.1/package.tgz
18847 info preinstall ansi@0.2.1
18848 verbose readDependencies using package.json deps
18849 verbose readDependencies using package.json deps
18850 silly resolved []
18851 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi
18852 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/ansi
18853 verbose linkStuff [ true,
18853 verbose linkStuff   '/usr/local/lib/node_modules',
18853 verbose linkStuff   false,
18853 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules' ]
18854 info linkStuff ansi@0.2.1
18855 verbose linkBins ansi@0.2.1
18856 verbose link bins [ { beep: './examples/beep/index.js',
18856 verbose link bins     clear: './examples/clear/index.js',
18856 verbose link bins     starwars: './examples/starwars.js' },
18856 verbose link bins   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog/node_modules/.bin',
18856 verbose link bins   false ]
18857 verbose linkMans ansi@0.2.1
18858 verbose rebuildBundles ansi@0.2.1
18859 info install ansi@0.2.1
18860 info postinstall ansi@0.2.1
18861 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
18862 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules/npmlog
18863 verbose linkStuff [ true,
18863 verbose linkStuff   '/usr/local/lib/node_modules',
18863 verbose linkStuff   false,
18863 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/read-installed/node_modules' ]
18864 info linkStuff npmlog@0.0.6
18865 verbose linkBins npmlog@0.0.6
18866 verbose linkMans npmlog@0.0.6
18867 verbose rebuildBundles npmlog@0.0.6
18868 verbose rebuildBundles [ '.bin', 'ansi' ]
18869 info install npmlog@0.0.6
18870 info postinstall npmlog@0.0.6
18871 http 200 https://registry.npmjs.org/boom/-/boom-0.3.8.tgz
18872 http 200 https://registry.npmjs.org/cryptiles
18873 silly registry.get cb [ 200,
18873 silly registry.get   { vary: 'Accept',
18873 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18873 silly registry.get     etag: '"F4YRPWOFSNDWTMW0BMHMCVGKB"',
18873 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:05 GMT',
18873 silly registry.get     'content-type': 'application/json',
18873 silly registry.get     'content-length': '15815' } ]
18874 silly addNameRange number 2 { name: 'cryptiles', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
18875 silly addNameRange versions [ 'cryptiles',
18875 silly addNameRange   [ '0.0.1',
18875 silly addNameRange     '0.0.2',
18875 silly addNameRange     '0.1.0',
18875 silly addNameRange     '0.1.1',
18875 silly addNameRange     '0.1.2',
18875 silly addNameRange     '0.1.3',
18875 silly addNameRange     '0.2.0',
18875 silly addNameRange     '0.2.1',
18875 silly addNameRange     '0.2.2',
18875 silly addNameRange     '1.0.0',
18875 silly addNameRange     '1.0.1' ] ]
18876 verbose addNamed [ 'cryptiles', '0.1.3' ]
18877 verbose addNamed [ '0.1.3', '0.1.3' ]
18878 silly lockFile 811b50c8-cryptiles-0-1-3 cryptiles@0.1.3
18879 verbose lock cryptiles@0.1.3 /home/lerenzo/.npm/811b50c8-cryptiles-0-1-3.lock
18880 silly lockFile 54c50d58-rg-cryptiles-cryptiles-0-1-3-tgz https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz
18881 verbose lock https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz /home/lerenzo/.npm/54c50d58-rg-cryptiles-cryptiles-0-1-3-tgz.lock
18882 verbose addRemoteTarball [ 'https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz',
18882 verbose addRemoteTarball   '1a556734f06d24ba34862ae9cb9e709a3afbff1c' ]
18883 info retry fetch attempt 1 at 14:14:11
18884 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz
18885 http GET https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz
18886 http 200 https://registry.npmjs.org/boom/-/boom-0.4.2.tgz
18887 http 200 https://registry.npmjs.org/sntp
18888 silly registry.get cb [ 200,
18888 silly registry.get   { vary: 'Accept',
18888 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18888 silly registry.get     etag: '"48K641ZSC8TVJFWQYSQSOSALX"',
18888 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:11 GMT',
18888 silly registry.get     'content-type': 'application/json',
18888 silly registry.get     'content-length': '39645' } ]
18889 silly addNameRange number 2 { name: 'sntp', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
18890 silly addNameRange versions [ 'sntp',
18890 silly addNameRange   [ '0.0.0',
18890 silly addNameRange     '0.0.1',
18890 silly addNameRange     '0.1.0',
18890 silly addNameRange     '0.1.1',
18890 silly addNameRange     '0.1.2',
18890 silly addNameRange     '0.1.3',
18890 silly addNameRange     '0.1.4',
18890 silly addNameRange     '0.2.0',
18890 silly addNameRange     '0.2.1',
18890 silly addNameRange     '0.2.2',
18890 silly addNameRange     '0.2.3',
18890 silly addNameRange     '0.2.4',
18890 silly addNameRange     '1.0.0',
18890 silly addNameRange     '1.0.1' ] ]
18891 verbose addNamed [ 'sntp', '0.1.4' ]
18892 verbose addNamed [ '0.1.4', '0.1.4' ]
18893 silly lockFile 4dfc12c0-sntp-0-1-4 sntp@0.1.4
18894 verbose lock sntp@0.1.4 /home/lerenzo/.npm/4dfc12c0-sntp-0-1-4.lock
18895 silly lockFile de663c85-ry-npmjs-org-sntp-sntp-0-1-4-tgz https://registry.npmjs.org/sntp/-/sntp-0.1.4.tgz
18896 verbose lock https://registry.npmjs.org/sntp/-/sntp-0.1.4.tgz /home/lerenzo/.npm/de663c85-ry-npmjs-org-sntp-sntp-0-1-4-tgz.lock
18897 verbose addRemoteTarball [ 'https://registry.npmjs.org/sntp/-/sntp-0.1.4.tgz',
18897 verbose addRemoteTarball   '5ef481b951a7b29affdf4afd7f26838fc1120f84' ]
18898 info retry fetch attempt 1 at 14:14:15
18899 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572455970-0.49597085756249726/tmp.tgz
18900 http GET https://registry.npmjs.org/sntp/-/sntp-0.1.4.tgz
18901 http 304 https://registry.npmjs.org/graceful-fs
18902 silly registry.get cb [ 304,
18902 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
18902 silly registry.get     etag: '"8VTIGE3KHXX4861152PVTWGF8"',
18902 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:16 GMT',
18902 silly registry.get     'content-length': '0' } ]
18903 verbose etag graceful-fs from cache
18904 silly addNameRange number 2 { name: 'graceful-fs',
18904 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
18904 silly addNameRange   hasData: true }
18905 silly addNameRange versions [ 'graceful-fs',
18905 silly addNameRange   [ '1.0.0',
18905 silly addNameRange     '1.0.1',
18905 silly addNameRange     '1.0.2',
18905 silly addNameRange     '1.1.0',
18905 silly addNameRange     '1.1.1',
18905 silly addNameRange     '1.1.2',
18905 silly addNameRange     '1.1.3',
18905 silly addNameRange     '1.1.4',
18905 silly addNameRange     '1.1.5',
18905 silly addNameRange     '1.1.6',
18905 silly addNameRange     '1.1.7',
18905 silly addNameRange     '1.1.8',
18905 silly addNameRange     '1.1.9',
18905 silly addNameRange     '1.1.10',
18905 silly addNameRange     '1.1.11',
18905 silly addNameRange     '1.1.12',
18905 silly addNameRange     '1.1.13',
18905 silly addNameRange     '1.1.14',
18905 silly addNameRange     '1.2.0',
18905 silly addNameRange     '1.2.1',
18905 silly addNameRange     '1.2.2',
18905 silly addNameRange     '1.2.3',
18905 silly addNameRange     '2.0.0',
18905 silly addNameRange     '2.0.1' ] ]
18906 verbose addNamed [ 'graceful-fs', '1.2.3' ]
18907 verbose addNamed [ '1.2.3', '1.2.3' ]
18908 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
18909 verbose lock graceful-fs@1.2.3 /home/lerenzo/.npm/6c7102cf-graceful-fs-1-2-3.lock
18910 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
18911 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
18912 silly lockFile ef839b18-graceful-fs-1-2 graceful-fs@~1.2
18913 silly lockFile ef839b18-graceful-fs-1-2 graceful-fs@~1.2
18914 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz
18915 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18916 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package /home/lerenzo/.npm/4ff48a62-5353-0-22714988351799548-package.lock
18917 silly lockFile 7d7cc616-5353-0-22714988351799548-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz
18918 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz /home/lerenzo/.npm/7d7cc616-5353-0-22714988351799548-tmp-tgz.lock
18919 silly gunzTarPerm modes [ '755', '644' ]
18920 silly gunzTarPerm extractEntry package.json
18921 silly gunzTarPerm extractEntry .npmignore
18922 silly gunzTarPerm extractEntry README.md
18923 silly gunzTarPerm extractEntry LICENSE
18924 silly gunzTarPerm extractEntry index.js
18925 silly gunzTarPerm extractEntry test/index.js
18926 silly gunzTarPerm extractEntry lib/index.js
18927 silly gunzTarPerm extractEntry images/boom.png
18928 silly gunzTarPerm extractEntry Makefile
18929 silly gunzTarPerm extractEntry .travis.yml
18930 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18931 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18932 silly lockFile 7d7cc616-5353-0-22714988351799548-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz
18933 silly lockFile 7d7cc616-5353-0-22714988351799548-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/tmp.tgz
18934 verbose tar pack [ '/home/lerenzo/.npm/boom/0.3.8/package.tgz',
18934 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package' ]
18935 verbose tarball /home/lerenzo/.npm/boom/0.3.8/package.tgz
18936 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18937 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18938 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package /home/lerenzo/.npm/4ff48a62-5353-0-22714988351799548-package.lock
18939 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18940 verbose lock tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz /home/lerenzo/.npm/177f232e-renzo-npm-boom-0-3-8-package-tgz.lock
18941 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18942 silly lockFile 4ff48a62-5353-0-22714988351799548-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572445353-0.22714988351799548/package
18943 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18944 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18945 silly lockFile 46620b63-e-lerenzo-npm-boom-0-3-8-package /home/lerenzo/.npm/boom/0.3.8/package
18946 verbose lock /home/lerenzo/.npm/boom/0.3.8/package /home/lerenzo/.npm/46620b63-e-lerenzo-npm-boom-0-3-8-package.lock
18947 silly lockFile 46620b63-e-lerenzo-npm-boom-0-3-8-package /home/lerenzo/.npm/boom/0.3.8/package
18948 silly lockFile 46620b63-e-lerenzo-npm-boom-0-3-8-package /home/lerenzo/.npm/boom/0.3.8/package
18949 verbose tar unpack /home/lerenzo/.npm/boom/0.3.8/package.tgz
18950 silly lockFile f57e4889-e-lerenzo-npm-boom-0-3-8-package tar:///home/lerenzo/.npm/boom/0.3.8/package
18951 verbose lock tar:///home/lerenzo/.npm/boom/0.3.8/package /home/lerenzo/.npm/f57e4889-e-lerenzo-npm-boom-0-3-8-package.lock
18952 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18953 verbose lock tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz /home/lerenzo/.npm/177f232e-renzo-npm-boom-0-3-8-package-tgz.lock
18954 silly gunzTarPerm modes [ '755', '644' ]
18955 silly gunzTarPerm extractEntry package.json
18956 silly gunzTarPerm extractEntry .npmignore
18957 silly gunzTarPerm extractEntry README.md
18958 silly gunzTarPerm extractEntry LICENSE
18959 silly gunzTarPerm extractEntry index.js
18960 silly gunzTarPerm extractEntry .travis.yml
18961 silly gunzTarPerm extractEntry Makefile
18962 silly gunzTarPerm extractEntry images/boom.png
18963 silly gunzTarPerm extractEntry lib/index.js
18964 silly gunzTarPerm extractEntry test/index.js
18965 silly lockFile f57e4889-e-lerenzo-npm-boom-0-3-8-package tar:///home/lerenzo/.npm/boom/0.3.8/package
18966 silly lockFile f57e4889-e-lerenzo-npm-boom-0-3-8-package tar:///home/lerenzo/.npm/boom/0.3.8/package
18967 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18968 silly lockFile 177f232e-renzo-npm-boom-0-3-8-package-tgz tar:///home/lerenzo/.npm/boom/0.3.8/package.tgz
18969 verbose chmod /home/lerenzo/.npm/boom/0.3.8/package.tgz 644
18970 verbose chown /home/lerenzo/.npm/boom/0.3.8/package.tgz [ 1000, 1000 ]
18971 silly lockFile be966501-ry-npmjs-org-boom-boom-0-3-8-tgz https://registry.npmjs.org/boom/-/boom-0.3.8.tgz
18972 silly lockFile be966501-ry-npmjs-org-boom-boom-0-3-8-tgz https://registry.npmjs.org/boom/-/boom-0.3.8.tgz
18973 silly lockFile 886cb87b-boom-0-3-8 boom@0.3.8
18974 silly lockFile 886cb87b-boom-0-3-8 boom@0.3.8
18975 silly lockFile 3a42bd65-boom-0-3-x boom@0.3.x
18976 silly lockFile 3a42bd65-boom-0-3-x boom@0.3.x
18977 http 200 https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz
18978 http 200 https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz
18979 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz
18980 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
18981 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package /home/lerenzo/.npm/e34fd0a8-657-0-010378551669418812-package.lock
18982 silly lockFile c41d6e6a-657-0-010378551669418812-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz
18983 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz /home/lerenzo/.npm/c41d6e6a-657-0-010378551669418812-tmp-tgz.lock
18984 silly gunzTarPerm modes [ '755', '644' ]
18985 silly gunzTarPerm extractEntry package.json
18986 silly gunzTarPerm extractEntry .npmignore
18987 silly gunzTarPerm extractEntry lib/combined_stream.js
18988 silly gunzTarPerm extractEntry License
18989 silly gunzTarPerm extractEntry Makefile
18990 silly gunzTarPerm extractEntry Readme.md
18991 silly gunzTarPerm extractEntry test/common.js
18992 silly gunzTarPerm extractEntry test/run.js
18993 silly gunzTarPerm extractEntry test/fixture/file1.txt
18994 silly gunzTarPerm extractEntry test/fixture/file2.txt
18995 silly gunzTarPerm extractEntry test/integration/test-callback-streams.js
18996 silly gunzTarPerm extractEntry test/integration/test-data-size.js
18997 silly gunzTarPerm extractEntry test/integration/test-delayed-streams-and-buffers-and-strings.js
18998 silly gunzTarPerm extractEntry test/integration/test-delayed-streams.js
18999 silly gunzTarPerm extractEntry test/integration/test-empty-string.js
19000 silly gunzTarPerm extractEntry test/integration/test-is-stream-like.js
19001 silly gunzTarPerm extractEntry test/integration/test-max-data-size.js
19002 silly gunzTarPerm extractEntry test/integration/test-unpaused-streams.js
19003 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19004 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19005 silly lockFile c41d6e6a-657-0-010378551669418812-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz
19006 silly lockFile c41d6e6a-657-0-010378551669418812-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/tmp.tgz
19007 verbose tar pack [ '/home/lerenzo/.npm/combined-stream/0.0.4/package.tgz',
19007 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package' ]
19008 verbose tarball /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19009 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19010 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19011 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package /home/lerenzo/.npm/e34fd0a8-657-0-010378551669418812-package.lock
19012 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19013 verbose lock tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz /home/lerenzo/.npm/935b78f9-ombined-stream-0-0-4-package-tgz.lock
19014 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19015 silly lockFile e34fd0a8-657-0-010378551669418812-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572438657-0.010378551669418812/package
19016 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19017 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19018 silly lockFile 36c1f58b-pm-combined-stream-0-0-4-package /home/lerenzo/.npm/combined-stream/0.0.4/package
19019 verbose lock /home/lerenzo/.npm/combined-stream/0.0.4/package /home/lerenzo/.npm/36c1f58b-pm-combined-stream-0-0-4-package.lock
19020 silly lockFile 36c1f58b-pm-combined-stream-0-0-4-package /home/lerenzo/.npm/combined-stream/0.0.4/package
19021 silly lockFile 36c1f58b-pm-combined-stream-0-0-4-package /home/lerenzo/.npm/combined-stream/0.0.4/package
19022 verbose tar unpack /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19023 silly lockFile 85945008-pm-combined-stream-0-0-4-package tar:///home/lerenzo/.npm/combined-stream/0.0.4/package
19024 verbose lock tar:///home/lerenzo/.npm/combined-stream/0.0.4/package /home/lerenzo/.npm/85945008-pm-combined-stream-0-0-4-package.lock
19025 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19026 verbose lock tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz /home/lerenzo/.npm/935b78f9-ombined-stream-0-0-4-package-tgz.lock
19027 silly gunzTarPerm modes [ '755', '644' ]
19028 silly gunzTarPerm extractEntry package.json
19029 silly gunzTarPerm extractEntry .npmignore
19030 silly gunzTarPerm extractEntry License
19031 silly gunzTarPerm extractEntry Makefile
19032 silly gunzTarPerm extractEntry Readme.md
19033 silly gunzTarPerm extractEntry lib/combined_stream.js
19034 silly gunzTarPerm extractEntry test/common.js
19035 silly gunzTarPerm extractEntry test/run.js
19036 silly gunzTarPerm extractEntry test/fixture/file1.txt
19037 silly gunzTarPerm extractEntry test/fixture/file2.txt
19038 silly gunzTarPerm extractEntry test/integration/test-callback-streams.js
19039 silly gunzTarPerm extractEntry test/integration/test-data-size.js
19040 silly gunzTarPerm extractEntry test/integration/test-delayed-streams-and-buffers-and-strings.js
19041 silly gunzTarPerm extractEntry test/integration/test-delayed-streams.js
19042 silly gunzTarPerm extractEntry test/integration/test-empty-string.js
19043 silly gunzTarPerm extractEntry test/integration/test-is-stream-like.js
19044 silly gunzTarPerm extractEntry test/integration/test-max-data-size.js
19045 silly gunzTarPerm extractEntry test/integration/test-unpaused-streams.js
19046 silly lockFile 85945008-pm-combined-stream-0-0-4-package tar:///home/lerenzo/.npm/combined-stream/0.0.4/package
19047 silly lockFile 85945008-pm-combined-stream-0-0-4-package tar:///home/lerenzo/.npm/combined-stream/0.0.4/package
19048 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19049 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19050 verbose chmod /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz 644
19051 verbose chown /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz [ 1000, 1000 ]
19052 silly lockFile f1cfa584-stream-combined-stream-0-0-4-tgz https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz
19053 silly lockFile f1cfa584-stream-combined-stream-0-0-4-tgz https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz
19054 silly lockFile fa19b583-combined-stream-0-0-4 combined-stream@0.0.4
19055 silly lockFile fa19b583-combined-stream-0-0-4 combined-stream@0.0.4
19056 silly lockFile 97e270a8-combined-stream-0-0-4 combined-stream@~0.0.4
19057 silly lockFile 97e270a8-combined-stream-0-0-4 combined-stream@~0.0.4
19058 silly resolved [ { name: 'async',
19058 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19058 silly resolved     main: './lib/async',
19058 silly resolved     author: { name: 'Caolan McMahon' },
19058 silly resolved     version: '0.2.9',
19058 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
19058 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
19058 silly resolved     licenses: [ [Object] ],
19058 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19058 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
19058 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
19058 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19058 silly resolved     readmeFilename: 'README.md',
19058 silly resolved     homepage: 'https://github.com/caolan/async',
19058 silly resolved     _id: 'async@0.2.9',
19058 silly resolved     dist: { shasum: 'df63060fbf3d33286a76aaf6d55a2986d9ff8619' },
19058 silly resolved     _from: 'async@~0.2.7',
19058 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.2.9.tgz' },
19058 silly resolved   { author:
19058 silly resolved      { name: 'Felix Geisendörfer',
19058 silly resolved        email: 'felix@debuggable.com',
19058 silly resolved        url: 'http://debuggable.com/' },
19058 silly resolved     name: 'combined-stream',
19058 silly resolved     description: 'A stream that emits multiple other streams one after another.',
19058 silly resolved     version: '0.0.4',
19058 silly resolved     homepage: 'https://github.com/felixge/node-combined-stream',
19058 silly resolved     repository:
19058 silly resolved      { type: 'git',
19058 silly resolved        url: 'git://github.com/felixge/node-combined-stream.git' },
19058 silly resolved     main: './lib/combined_stream',
19058 silly resolved     engines: { node: '*' },
19058 silly resolved     dependencies: { 'delayed-stream': '0.0.5' },
19058 silly resolved     devDependencies: { far: '0.0.1' },
19058 silly resolved     readme: '# combined-stream\n\nA stream that emits multiple other streams one after another.\n\n## Installation\n\n``` bash\nnpm install combined-stream\n```\n\n## Usage\n\nHere is a simple example that shows how you can use combined-stream to combine\ntwo files into one:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(fs.createReadStream(\'file1.txt\'));\ncombinedStream.append(fs.createReadStream(\'file2.txt\'));\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\nWhile the example above works great, it will pause all source streams until\nthey are needed. If you don\'t want that to happen, you can set `pauseStreams`\nto `false`:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create({pauseStreams: false});\ncombinedStream.append(fs.createReadStream(\'file1.txt\'));\ncombinedStream.append(fs.createReadStream(\'file2.txt\'));\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\nHowever, what if you don\'t have all the source streams yet, or you don\'t want\nto allocate the resources (file descriptors, memory, etc.) for them right away?\nWell, in that case you can simply provide a callback that supplies the stream\nby calling a `next()` function:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(function(next) {\n  next(fs.createReadStream(\'file1.txt\'));\n});\ncombinedStream.append(function(next) {\n  next(fs.createReadStream(\'file2.txt\'));\n});\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\n## API\n\n### CombinedStream.create([options])\n\nReturns a new combined stream object. Available options are:\n\n* `maxDataSize`\n* `pauseStreams`\n\nThe effect of those options is described below.\n\n### combinedStream.pauseStreams = true\n\nWhether to apply back pressure to the underlaying streams. If set to `false`,\nthe underlaying streams will never be paused. If set to `true`, the\nunderlaying streams will be paused right after being appended, as well as when\n`delayedStream.pipe()` wants to throttle.\n\n### combinedStream.maxDataSize = 2 * 1024 * 1024\n\nThe maximum amount of bytes (or characters) to buffer for all source streams.\nIf this value is exceeded, `combinedStream` emits an `\'error\'` event.\n\n### combinedStream.dataSize = 0\n\nThe amount of bytes (or characters) currently buffered by `combinedStream`.\n\n### combinedStream.append(stream)\n\nAppends the given `stream` to the combinedStream object. If `pauseStreams` is\nset to `true, this stream will also be paused right away.\n\n`streams` can also be a function that takes one parameter called `next`. `next`\nis a function that must be invoked in order to provide the `next` stream, see\nexample above.\n\nRegardless of how the `stream` is appended, combined-stream always attaches an\n`\'error\'` listener to it, so you don\'t have to do that manually.\n\nSpecial case: `stream` can also be a String or Buffer.\n\n### combinedStream.write(data)\n\nYou should not call this, `combinedStream` takes care of piping the appended\nstreams into itself for you.\n\n### combinedStream.resume()\n\nCauses `combinedStream` to start drain the streams it manages. The function is\nidempotent, and also emits a `\'resume\'` event each time which usually goes to\nthe stream that is currently being drained.\n\n### combinedStream.pause();\n\nIf `combinedStream.pauseStreams` is set to `false`, this does nothing.\nOtherwise a `\'pause\'` event is emitted, this goes to the stream that is\ncurrently being drained, so you can use it to apply back pressure.\n\n### combinedStream.end();\n\nSets `combinedStream.writable` to false, emits an `\'end\'` event, and removes\nall streams from the queue.\n\n### combinedStream.destroy();\n\nSame as `combinedStream.end()`, except it emits a `\'close\'` event instead of\n`\'end\'`.\n\n## License\n\ncombined-stream is licensed under the MIT license.\n',
19058 silly resolved     readmeFilename: 'Readme.md',
19058 silly resolved     bugs: { url: 'https://github.com/felixge/node-combined-stream/issues' },
19058 silly resolved     _id: 'combined-stream@0.0.4',
19058 silly resolved     dist: { shasum: '5c38e18675140e6f8aeac1dfc6fb350f16ac49fc' },
19058 silly resolved     _from: 'combined-stream@~0.0.4',
19058 silly resolved     _resolved: 'https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz' } ]
19059 info install async@0.2.9 into /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data
19060 info install combined-stream@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data
19061 info installOne async@0.2.9
19062 info installOne combined-stream@0.0.4
19063 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async unbuild
19064 info /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/combined-stream unbuild
19065 verbose tar unpack /home/lerenzo/.npm/async/0.2.9/package.tgz
19066 silly lockFile 86959830-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async
19067 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async /home/lerenzo/.npm/86959830-les-form-data-node-modules-async.lock
19068 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19069 verbose lock tar:///home/lerenzo/.npm/async/0.2.9/package.tgz /home/lerenzo/.npm/a48b6624-enzo-npm-async-0-2-9-package-tgz.lock
19070 verbose tar unpack /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19071 silly lockFile e81936da-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/combined-stream
19072 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/combined-stream /home/lerenzo/.npm/e81936da-ata-node-modules-combined-stream.lock
19073 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19074 verbose lock tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz /home/lerenzo/.npm/935b78f9-ombined-stream-0-0-4-package-tgz.lock
19075 silly gunzTarPerm modes [ '755', '644' ]
19076 silly gunzTarPerm modes [ '755', '644' ]
19077 silly gunzTarPerm extractEntry package.json
19078 silly gunzTarPerm extractEntry package.json
19079 silly gunzTarPerm extractEntry README.md
19080 silly gunzTarPerm extractEntry LICENSE
19081 silly gunzTarPerm extractEntry component.json
19082 silly gunzTarPerm extractEntry lib/async.js
19083 silly gunzTarPerm extractEntry .npmignore
19084 silly gunzTarPerm extractEntry License
19085 silly gunzTarPerm extractEntry Makefile
19086 silly gunzTarPerm extractEntry Readme.md
19087 silly gunzTarPerm extractEntry lib/combined_stream.js
19088 silly gunzTarPerm extractEntry test/common.js
19089 silly gunzTarPerm extractEntry test/run.js
19090 silly gunzTarPerm extractEntry test/fixture/file1.txt
19091 silly gunzTarPerm extractEntry test/fixture/file2.txt
19092 silly gunzTarPerm extractEntry test/integration/test-callback-streams.js
19093 silly gunzTarPerm extractEntry test/integration/test-data-size.js
19094 silly gunzTarPerm extractEntry test/integration/test-delayed-streams-and-buffers-and-strings.js
19095 silly gunzTarPerm extractEntry test/integration/test-delayed-streams.js
19096 silly gunzTarPerm extractEntry test/integration/test-empty-string.js
19097 silly gunzTarPerm extractEntry test/integration/test-is-stream-like.js
19098 silly gunzTarPerm extractEntry test/integration/test-max-data-size.js
19099 silly gunzTarPerm extractEntry test/integration/test-unpaused-streams.js
19100 silly lockFile 86959830-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async
19101 silly lockFile 86959830-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async
19102 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19103 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19104 info preinstall async@0.2.9
19105 verbose readDependencies using package.json deps
19106 verbose readDependencies using package.json deps
19107 silly resolved []
19108 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async
19109 info build /usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/async
19110 verbose linkStuff [ true,
19110 verbose linkStuff   '/usr/local/lib/node_modules',
19110 verbose linkStuff   false,
19110 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules' ]
19111 info linkStuff async@0.2.9
19112 verbose linkBins async@0.2.9
19113 verbose linkMans async@0.2.9
19114 verbose rebuildBundles async@0.2.9
19115 info install async@0.2.9
19116 info postinstall async@0.2.9
19117 silly lockFile e81936da-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/combined-stream
19118 silly lockFile e81936da-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/request/node_modules/form-data/node_modules/combined-stream
19119 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19120 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19121 info preinstall combined-stream@0.0.4
19122 verbose readDependencies using package.json deps
19123 verbose readDependencies using package.json deps
19124 verbose cache add [ 'delayed-stream@0.0.5', null ]
19125 verbose cache add name=undefined spec="delayed-stream@0.0.5" args=["delayed-stream@0.0.5",null]
19126 verbose parsed url { protocol: null,
19126 verbose parsed url   slashes: null,
19126 verbose parsed url   auth: null,
19126 verbose parsed url   host: null,
19126 verbose parsed url   port: null,
19126 verbose parsed url   hostname: null,
19126 verbose parsed url   hash: null,
19126 verbose parsed url   search: null,
19126 verbose parsed url   query: null,
19126 verbose parsed url   pathname: 'delayed-stream@0.0.5',
19126 verbose parsed url   path: 'delayed-stream@0.0.5',
19126 verbose parsed url   href: 'delayed-stream@0.0.5' }
19127 verbose cache add name="delayed-stream" spec="0.0.5" args=["delayed-stream","0.0.5"]
19128 verbose parsed url { protocol: null,
19128 verbose parsed url   slashes: null,
19128 verbose parsed url   auth: null,
19128 verbose parsed url   host: null,
19128 verbose parsed url   port: null,
19128 verbose parsed url   hostname: null,
19128 verbose parsed url   hash: null,
19128 verbose parsed url   search: null,
19128 verbose parsed url   query: null,
19128 verbose parsed url   pathname: '0.0.5',
19128 verbose parsed url   path: '0.0.5',
19128 verbose parsed url   href: '0.0.5' }
19129 verbose addNamed [ 'delayed-stream', '0.0.5' ]
19130 verbose addNamed [ '0.0.5', '0.0.5' ]
19131 silly lockFile 1ace22b7-delayed-stream-0-0-5 delayed-stream@0.0.5
19132 verbose lock delayed-stream@0.0.5 /home/lerenzo/.npm/1ace22b7-delayed-stream-0-0-5.lock
19133 verbose url raw delayed-stream/0.0.5
19134 verbose url resolving [ 'https://registry.npmjs.org/', './delayed-stream/0.0.5' ]
19135 verbose url resolved https://registry.npmjs.org/delayed-stream/0.0.5
19136 info trying registry request attempt 1 at 14:14:18
19137 http GET https://registry.npmjs.org/delayed-stream/0.0.5
19138 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz
19139 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19140 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package /home/lerenzo/.npm/30a6b6b9-1638-0-07769848313182592-package.lock
19141 silly lockFile 1249c2f6-1638-0-07769848313182592-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz
19142 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz /home/lerenzo/.npm/1249c2f6-1638-0-07769848313182592-tmp-tgz.lock
19143 silly gunzTarPerm modes [ '755', '644' ]
19144 silly gunzTarPerm extractEntry package.json
19145 silly gunzTarPerm extractEntry .npmignore
19146 silly gunzTarPerm extractEntry README.md
19147 silly gunzTarPerm extractEntry LICENSE
19148 silly gunzTarPerm extractEntry index.js
19149 silly gunzTarPerm extractEntry test/index.js
19150 silly gunzTarPerm extractEntry lib/index.js
19151 silly gunzTarPerm extractEntry Makefile
19152 silly gunzTarPerm extractEntry .travis.yml
19153 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19154 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19155 silly lockFile 1249c2f6-1638-0-07769848313182592-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz
19156 silly lockFile 1249c2f6-1638-0-07769848313182592-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/tmp.tgz
19157 verbose tar pack [ '/home/lerenzo/.npm/cryptiles/0.1.3/package.tgz',
19157 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package' ]
19158 verbose tarball /home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19159 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19160 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19161 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package /home/lerenzo/.npm/30a6b6b9-1638-0-07769848313182592-package.lock
19162 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19163 verbose lock tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz /home/lerenzo/.npm/4bca2598--npm-cryptiles-0-1-3-package-tgz.lock
19164 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19165 silly lockFile 30a6b6b9-1638-0-07769848313182592-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572451638-0.07769848313182592/package
19166 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19167 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19168 silly lockFile 73e99d08-enzo-npm-cryptiles-0-1-3-package /home/lerenzo/.npm/cryptiles/0.1.3/package
19169 verbose lock /home/lerenzo/.npm/cryptiles/0.1.3/package /home/lerenzo/.npm/73e99d08-enzo-npm-cryptiles-0-1-3-package.lock
19170 silly lockFile 73e99d08-enzo-npm-cryptiles-0-1-3-package /home/lerenzo/.npm/cryptiles/0.1.3/package
19171 silly lockFile 73e99d08-enzo-npm-cryptiles-0-1-3-package /home/lerenzo/.npm/cryptiles/0.1.3/package
19172 verbose tar unpack /home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19173 silly lockFile 190359f8-enzo-npm-cryptiles-0-1-3-package tar:///home/lerenzo/.npm/cryptiles/0.1.3/package
19174 verbose lock tar:///home/lerenzo/.npm/cryptiles/0.1.3/package /home/lerenzo/.npm/190359f8-enzo-npm-cryptiles-0-1-3-package.lock
19175 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19176 verbose lock tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz /home/lerenzo/.npm/4bca2598--npm-cryptiles-0-1-3-package-tgz.lock
19177 silly gunzTarPerm modes [ '755', '644' ]
19178 silly gunzTarPerm extractEntry package.json
19179 silly gunzTarPerm extractEntry .npmignore
19180 silly gunzTarPerm extractEntry README.md
19181 silly gunzTarPerm extractEntry LICENSE
19182 silly gunzTarPerm extractEntry index.js
19183 silly gunzTarPerm extractEntry .travis.yml
19184 silly gunzTarPerm extractEntry Makefile
19185 silly gunzTarPerm extractEntry lib/index.js
19186 silly gunzTarPerm extractEntry test/index.js
19187 silly lockFile 190359f8-enzo-npm-cryptiles-0-1-3-package tar:///home/lerenzo/.npm/cryptiles/0.1.3/package
19188 silly lockFile 190359f8-enzo-npm-cryptiles-0-1-3-package tar:///home/lerenzo/.npm/cryptiles/0.1.3/package
19189 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19190 silly lockFile 4bca2598--npm-cryptiles-0-1-3-package-tgz tar:///home/lerenzo/.npm/cryptiles/0.1.3/package.tgz
19191 verbose chmod /home/lerenzo/.npm/cryptiles/0.1.3/package.tgz 644
19192 verbose chown /home/lerenzo/.npm/cryptiles/0.1.3/package.tgz [ 1000, 1000 ]
19193 silly lockFile 54c50d58-rg-cryptiles-cryptiles-0-1-3-tgz https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz
19194 silly lockFile 54c50d58-rg-cryptiles-cryptiles-0-1-3-tgz https://registry.npmjs.org/cryptiles/-/cryptiles-0.1.3.tgz
19195 silly lockFile 811b50c8-cryptiles-0-1-3 cryptiles@0.1.3
19196 silly lockFile 811b50c8-cryptiles-0-1-3 cryptiles@0.1.3
19197 silly lockFile 30375358-cryptiles-0-1-x cryptiles@0.1.x
19198 silly lockFile 30375358-cryptiles-0-1-x cryptiles@0.1.x
19199 http 200 https://registry.npmjs.org/extendable
19200 silly registry.get cb [ 200,
19200 silly registry.get   { vary: 'Accept',
19200 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
19200 silly registry.get     etag: '"V8WC8SQDO6PPMLEH95Q11QXI"',
19200 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:17 GMT',
19200 silly registry.get     'content-type': 'application/json',
19200 silly registry.get     'content-length': '11474' } ]
19201 silly addNameRange number 2 { name: 'extendable',
19201 silly addNameRange   range: '>=0.0.0-0 <0.1.0-0',
19201 silly addNameRange   hasData: true }
19202 silly addNameRange versions [ 'extendable',
19202 silly addNameRange   [ '0.0.0', '0.0.1', '0.0.2', '0.0.3', '0.0.4', '0.0.5', '0.0.6' ] ]
19203 verbose addNamed [ 'extendable', '0.0.6' ]
19204 verbose addNamed [ '0.0.6', '0.0.6' ]
19205 silly lockFile 84399eb0-extendable-0-0-6 extendable@0.0.6
19206 verbose lock extendable@0.0.6 /home/lerenzo/.npm/84399eb0-extendable-0-0-6.lock
19207 silly lockFile 40426a2f--extendable-extendable-0-0-6-tgz https://registry.npmjs.org/extendable/-/extendable-0.0.6.tgz
19208 verbose lock https://registry.npmjs.org/extendable/-/extendable-0.0.6.tgz /home/lerenzo/.npm/40426a2f--extendable-extendable-0-0-6-tgz.lock
19209 verbose addRemoteTarball [ 'https://registry.npmjs.org/extendable/-/extendable-0.0.6.tgz',
19209 verbose addRemoteTarball   'b85c6a081630b2c9d83588239c20cb3be4776fe6' ]
19210 info retry fetch attempt 1 at 14:14:20
19211 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572460460-0.9991256066132337/tmp.tgz
19212 http GET https://registry.npmjs.org/extendable/-/extendable-0.0.6.tgz
19213 http 304 https://registry.npmjs.org/async
19214 silly registry.get cb [ 304,
19214 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
19214 silly registry.get     etag: '"7E0IPNSW1RSEG1H124PUN9R66"',
19214 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:20 GMT',
19214 silly registry.get     'content-length': '0' } ]
19215 verbose etag async from cache
19216 silly addNameRange number 2 { name: 'async', range: '>=0.2.9-0 <0.3.0-0', hasData: true }
19217 silly addNameRange versions [ 'async',
19217 silly addNameRange   [ '0.1.0',
19217 silly addNameRange     '0.1.1',
19217 silly addNameRange     '0.1.2',
19217 silly addNameRange     '0.1.3',
19217 silly addNameRange     '0.1.4',
19217 silly addNameRange     '0.1.5',
19217 silly addNameRange     '0.1.6',
19217 silly addNameRange     '0.1.7',
19217 silly addNameRange     '0.1.8',
19217 silly addNameRange     '0.1.9',
19217 silly addNameRange     '0.1.10',
19217 silly addNameRange     '0.1.11',
19217 silly addNameRange     '0.1.12',
19217 silly addNameRange     '0.1.13',
19217 silly addNameRange     '0.1.14',
19217 silly addNameRange     '0.1.15',
19217 silly addNameRange     '0.1.16',
19217 silly addNameRange     '0.1.17',
19217 silly addNameRange     '0.1.18',
19217 silly addNameRange     '0.1.19',
19217 silly addNameRange     '0.1.20',
19217 silly addNameRange     '0.1.21',
19217 silly addNameRange     '0.1.22',
19217 silly addNameRange     '0.2.0',
19217 silly addNameRange     '0.2.1',
19217 silly addNameRange     '0.2.2',
19217 silly addNameRange     '0.2.3',
19217 silly addNameRange     '0.2.4',
19217 silly addNameRange     '0.2.5',
19217 silly addNameRange     '0.2.6',
19217 silly addNameRange     '0.2.7',
19217 silly addNameRange     '0.2.8',
19217 silly addNameRange     '0.2.9' ] ]
19218 verbose addNamed [ 'async', '0.2.9' ]
19219 verbose addNamed [ '0.2.9', '0.2.9' ]
19220 silly lockFile be62480b-async-0-2-9 async@0.2.9
19221 verbose lock async@0.2.9 /home/lerenzo/.npm/be62480b-async-0-2-9.lock
19222 silly lockFile be62480b-async-0-2-9 async@0.2.9
19223 silly lockFile be62480b-async-0-2-9 async@0.2.9
19224 silly lockFile 5d51c871-async-0-2-9 async@~0.2.9
19225 silly lockFile 5d51c871-async-0-2-9 async@~0.2.9
19226 silly resolved [ { author:
19226 silly resolved      { name: 'Felix Geisendörfer',
19226 silly resolved        email: 'felix@debuggable.com',
19226 silly resolved        url: 'http://debuggable.com/' },
19226 silly resolved     name: 'combined-stream',
19226 silly resolved     description: 'A stream that emits multiple other streams one after another.',
19226 silly resolved     version: '0.0.4',
19226 silly resolved     homepage: 'https://github.com/felixge/node-combined-stream',
19226 silly resolved     repository:
19226 silly resolved      { type: 'git',
19226 silly resolved        url: 'git://github.com/felixge/node-combined-stream.git' },
19226 silly resolved     main: './lib/combined_stream',
19226 silly resolved     engines: { node: '*' },
19226 silly resolved     dependencies: { 'delayed-stream': '0.0.5' },
19226 silly resolved     devDependencies: { far: '0.0.1' },
19226 silly resolved     readme: '# combined-stream\n\nA stream that emits multiple other streams one after another.\n\n## Installation\n\n``` bash\nnpm install combined-stream\n```\n\n## Usage\n\nHere is a simple example that shows how you can use combined-stream to combine\ntwo files into one:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(fs.createReadStream(\'file1.txt\'));\ncombinedStream.append(fs.createReadStream(\'file2.txt\'));\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\nWhile the example above works great, it will pause all source streams until\nthey are needed. If you don\'t want that to happen, you can set `pauseStreams`\nto `false`:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create({pauseStreams: false});\ncombinedStream.append(fs.createReadStream(\'file1.txt\'));\ncombinedStream.append(fs.createReadStream(\'file2.txt\'));\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\nHowever, what if you don\'t have all the source streams yet, or you don\'t want\nto allocate the resources (file descriptors, memory, etc.) for them right away?\nWell, in that case you can simply provide a callback that supplies the stream\nby calling a `next()` function:\n\n``` javascript\nvar CombinedStream = require(\'combined-stream\');\nvar fs = require(\'fs\');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(function(next) {\n  next(fs.createReadStream(\'file1.txt\'));\n});\ncombinedStream.append(function(next) {\n  next(fs.createReadStream(\'file2.txt\'));\n});\n\ncombinedStream.pipe(fs.createWriteStream(\'combined.txt\'));\n```\n\n## API\n\n### CombinedStream.create([options])\n\nReturns a new combined stream object. Available options are:\n\n* `maxDataSize`\n* `pauseStreams`\n\nThe effect of those options is described below.\n\n### combinedStream.pauseStreams = true\n\nWhether to apply back pressure to the underlaying streams. If set to `false`,\nthe underlaying streams will never be paused. If set to `true`, the\nunderlaying streams will be paused right after being appended, as well as when\n`delayedStream.pipe()` wants to throttle.\n\n### combinedStream.maxDataSize = 2 * 1024 * 1024\n\nThe maximum amount of bytes (or characters) to buffer for all source streams.\nIf this value is exceeded, `combinedStream` emits an `\'error\'` event.\n\n### combinedStream.dataSize = 0\n\nThe amount of bytes (or characters) currently buffered by `combinedStream`.\n\n### combinedStream.append(stream)\n\nAppends the given `stream` to the combinedStream object. If `pauseStreams` is\nset to `true, this stream will also be paused right away.\n\n`streams` can also be a function that takes one parameter called `next`. `next`\nis a function that must be invoked in order to provide the `next` stream, see\nexample above.\n\nRegardless of how the `stream` is appended, combined-stream always attaches an\n`\'error\'` listener to it, so you don\'t have to do that manually.\n\nSpecial case: `stream` can also be a String or Buffer.\n\n### combinedStream.write(data)\n\nYou should not call this, `combinedStream` takes care of piping the appended\nstreams into itself for you.\n\n### combinedStream.resume()\n\nCauses `combinedStream` to start drain the streams it manages. The function is\nidempotent, and also emits a `\'resume\'` event each time which usually goes to\nthe stream that is currently being drained.\n\n### combinedStream.pause();\n\nIf `combinedStream.pauseStreams` is set to `false`, this does nothing.\nOtherwise a `\'pause\'` event is emitted, this goes to the stream that is\ncurrently being drained, so you can use it to apply back pressure.\n\n### combinedStream.end();\n\nSets `combinedStream.writable` to false, emits an `\'end\'` event, and removes\nall streams from the queue.\n\n### combinedStream.destroy();\n\nSame as `combinedStream.end()`, except it emits a `\'close\'` event instead of\n`\'end\'`.\n\n## License\n\ncombined-stream is licensed under the MIT license.\n',
19226 silly resolved     readmeFilename: 'Readme.md',
19226 silly resolved     bugs: { url: 'https://github.com/felixge/node-combined-stream/issues' },
19226 silly resolved     _id: 'combined-stream@0.0.4',
19226 silly resolved     dist: { shasum: '5c38e18675140e6f8aeac1dfc6fb350f16ac49fc' },
19226 silly resolved     _from: 'combined-stream@~0.0.4',
19226 silly resolved     _resolved: 'https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz',
19226 silly resolved     scripts: {} },
19226 silly resolved   { name: 'async',
19226 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19226 silly resolved     main: './lib/async',
19226 silly resolved     author: { name: 'Caolan McMahon' },
19226 silly resolved     version: '0.2.9',
19226 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
19226 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
19226 silly resolved     licenses: [ [Object] ],
19226 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19226 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
19226 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
19226 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19226 silly resolved     readmeFilename: 'README.md',
19226 silly resolved     homepage: 'https://github.com/caolan/async',
19226 silly resolved     _id: 'async@0.2.9',
19226 silly resolved     dist: { shasum: 'df63060fbf3d33286a76aaf6d55a2986d9ff8619' },
19226 silly resolved     _from: 'async@~0.2.9',
19226 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.2.9.tgz' } ]
19227 info install combined-stream@0.0.4 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data
19228 info install async@0.2.9 into /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data
19229 info installOne combined-stream@0.0.4
19230 info installOne async@0.2.9
19231 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/combined-stream unbuild
19232 info /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async unbuild
19233 verbose tar unpack /home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19234 silly lockFile 4ba5dc31-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/combined-stream
19235 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/combined-stream /home/lerenzo/.npm/4ba5dc31-ata-node-modules-combined-stream.lock
19236 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19237 verbose lock tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz /home/lerenzo/.npm/935b78f9-ombined-stream-0-0-4-package-tgz.lock
19238 verbose tar unpack /home/lerenzo/.npm/async/0.2.9/package.tgz
19239 silly lockFile f3090259-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async
19240 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async /home/lerenzo/.npm/f3090259-les-form-data-node-modules-async.lock
19241 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19242 verbose lock tar:///home/lerenzo/.npm/async/0.2.9/package.tgz /home/lerenzo/.npm/a48b6624-enzo-npm-async-0-2-9-package-tgz.lock
19243 silly gunzTarPerm modes [ '755', '644' ]
19244 silly gunzTarPerm modes [ '755', '644' ]
19245 silly gunzTarPerm extractEntry package.json
19246 silly gunzTarPerm extractEntry package.json
19247 silly gunzTarPerm extractEntry .npmignore
19248 silly gunzTarPerm extractEntry License
19249 silly gunzTarPerm extractEntry README.md
19250 silly gunzTarPerm extractEntry LICENSE
19251 silly gunzTarPerm extractEntry component.json
19252 silly gunzTarPerm extractEntry lib/async.js
19253 silly gunzTarPerm extractEntry Makefile
19254 silly gunzTarPerm extractEntry Readme.md
19255 silly gunzTarPerm extractEntry lib/combined_stream.js
19256 silly gunzTarPerm extractEntry test/common.js
19257 silly gunzTarPerm extractEntry test/run.js
19258 silly gunzTarPerm extractEntry test/fixture/file1.txt
19259 silly gunzTarPerm extractEntry test/fixture/file2.txt
19260 silly gunzTarPerm extractEntry test/integration/test-callback-streams.js
19261 silly gunzTarPerm extractEntry test/integration/test-data-size.js
19262 silly gunzTarPerm extractEntry test/integration/test-delayed-streams-and-buffers-and-strings.js
19263 silly gunzTarPerm extractEntry test/integration/test-delayed-streams.js
19264 silly gunzTarPerm extractEntry test/integration/test-empty-string.js
19265 silly gunzTarPerm extractEntry test/integration/test-is-stream-like.js
19266 silly gunzTarPerm extractEntry test/integration/test-max-data-size.js
19267 silly gunzTarPerm extractEntry test/integration/test-unpaused-streams.js
19268 silly lockFile f3090259-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async
19269 silly lockFile f3090259-les-form-data-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async
19270 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19271 silly lockFile a48b6624-enzo-npm-async-0-2-9-package-tgz tar:///home/lerenzo/.npm/async/0.2.9/package.tgz
19272 info preinstall async@0.2.9
19273 verbose readDependencies using package.json deps
19274 verbose readDependencies using package.json deps
19275 silly resolved []
19276 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async
19277 info build /usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/async
19278 verbose linkStuff [ true,
19278 verbose linkStuff   '/usr/local/lib/node_modules',
19278 verbose linkStuff   false,
19278 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules' ]
19279 info linkStuff async@0.2.9
19280 verbose linkBins async@0.2.9
19281 verbose linkMans async@0.2.9
19282 verbose rebuildBundles async@0.2.9
19283 info install async@0.2.9
19284 info postinstall async@0.2.9
19285 silly lockFile 4ba5dc31-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/combined-stream
19286 silly lockFile 4ba5dc31-ata-node-modules-combined-stream tar:///usr/local/lib/node_modules/jitsu/node_modules/nodejitsu-api/node_modules/request/node_modules/form-data/node_modules/combined-stream
19287 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19288 silly lockFile 935b78f9-ombined-stream-0-0-4-package-tgz tar:///home/lerenzo/.npm/combined-stream/0.0.4/package.tgz
19289 info preinstall combined-stream@0.0.4
19290 verbose readDependencies using package.json deps
19291 verbose readDependencies using package.json deps
19292 verbose cache add [ 'delayed-stream@0.0.5', null ]
19293 verbose cache add name=undefined spec="delayed-stream@0.0.5" args=["delayed-stream@0.0.5",null]
19294 verbose parsed url { protocol: null,
19294 verbose parsed url   slashes: null,
19294 verbose parsed url   auth: null,
19294 verbose parsed url   host: null,
19294 verbose parsed url   port: null,
19294 verbose parsed url   hostname: null,
19294 verbose parsed url   hash: null,
19294 verbose parsed url   search: null,
19294 verbose parsed url   query: null,
19294 verbose parsed url   pathname: 'delayed-stream@0.0.5',
19294 verbose parsed url   path: 'delayed-stream@0.0.5',
19294 verbose parsed url   href: 'delayed-stream@0.0.5' }
19295 verbose cache add name="delayed-stream" spec="0.0.5" args=["delayed-stream","0.0.5"]
19296 verbose parsed url { protocol: null,
19296 verbose parsed url   slashes: null,
19296 verbose parsed url   auth: null,
19296 verbose parsed url   host: null,
19296 verbose parsed url   port: null,
19296 verbose parsed url   hostname: null,
19296 verbose parsed url   hash: null,
19296 verbose parsed url   search: null,
19296 verbose parsed url   query: null,
19296 verbose parsed url   pathname: '0.0.5',
19296 verbose parsed url   path: '0.0.5',
19296 verbose parsed url   href: '0.0.5' }
19297 verbose addNamed [ 'delayed-stream', '0.0.5' ]
19298 http 200 https://registry.npmjs.org/assert-plus/0.1.2
19299 silly registry.get cb [ 200,
19299 silly registry.get   { vary: 'Accept',
19299 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
19299 silly registry.get     etag: '"5GMLJD867DHJ7US50G4NJK7IE"',
19299 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:21 GMT',
19299 silly registry.get     'content-type': 'application/json',
19299 silly registry.get     'content-length': '4630' } ]
19300 silly lockFile 4359eee0-ssert-plus-assert-plus-0-1-2-tgz https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz
19301 verbose lock https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz /home/lerenzo/.npm/4359eee0-ssert-plus-assert-plus-0-1-2-tgz.lock
19302 verbose addRemoteTarball [ 'https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz',
19302 verbose addRemoteTarball   'd93ffdbb67ac5507779be316a7d65146417beef8' ]
19303 info retry fetch attempt 1 at 14:14:21
19304 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz
19305 http GET https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz
19306 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz
19307 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19308 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package /home/lerenzo/.npm/3991d0ef-24601-0-7206006194464862-package.lock
19309 silly lockFile 06140d9a-24601-0-7206006194464862-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz
19310 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz /home/lerenzo/.npm/06140d9a-24601-0-7206006194464862-tmp-tgz.lock
19311 silly gunzTarPerm modes [ '755', '644' ]
19312 silly gunzTarPerm extractEntry package.json
19313 silly gunzTarPerm extractEntry README.md
19314 silly gunzTarPerm extractEntry LICENSE
19315 silly gunzTarPerm extractEntry aws.js
19316 silly gunzTarPerm extractEntry forever.js
19317 silly gunzTarPerm extractEntry main.js
19318 silly gunzTarPerm extractEntry mimetypes.js
19319 silly gunzTarPerm extractEntry aws2.js
19320 silly gunzTarPerm extractEntry uuid.js
19321 silly gunzTarPerm extractEntry tunnel.js
19322 silly gunzTarPerm extractEntry oauth.js
19323 silly gunzTarPerm extractEntry tests/test-tunnel.js
19324 silly gunzTarPerm extractEntry tests/test-defaults.js
19325 silly gunzTarPerm extractEntry tests/test-errors.js
19326 silly gunzTarPerm extractEntry tests/test-headers.js
19327 silly gunzTarPerm extractEntry tests/test-cookiejar.js
19328 silly gunzTarPerm extractEntry tests/run.js
19329 silly gunzTarPerm extractEntry tests/test-https.js
19330 silly gunzTarPerm extractEntry tests/test-oauth.js
19331 silly gunzTarPerm extractEntry tests/test-params.js
19332 silly gunzTarPerm extractEntry tests/test-pipes.js
19333 silly gunzTarPerm extractEntry tests/test-cookie.js
19334 silly gunzTarPerm extractEntry tests/test-pool.js
19335 silly gunzTarPerm extractEntry tests/test-body.js
19336 silly gunzTarPerm extractEntry tests/test-proxy.js
19337 silly gunzTarPerm extractEntry tests/test-timeout.js
19338 silly gunzTarPerm extractEntry tests/test-qs.js
19339 silly gunzTarPerm extractEntry tests/test-toJSON.js
19340 silly gunzTarPerm extractEntry tests/test-redirect.js
19341 silly gunzTarPerm extractEntry tests/server.js
19342 silly gunzTarPerm extractEntry tests/test-s3.js
19343 silly gunzTarPerm extractEntry tests/test-httpModule.js
19344 silly gunzTarPerm extractEntry tests/test-https-strict.js
19345 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
19346 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
19347 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
19348 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
19349 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
19350 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
19351 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
19352 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
19353 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
19354 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
19355 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
19356 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
19357 silly gunzTarPerm extractEntry tests/ssl/test.crt
19358 silly gunzTarPerm extractEntry tests/ssl/test.key
19359 silly gunzTarPerm extractEntry tests/squid.conf
19360 silly gunzTarPerm extractEntry tests/googledoodle.png
19361 silly gunzTarPerm extractEntry vendor/cookie/index.js
19362 silly gunzTarPerm extractEntry vendor/cookie/jar.js
19363 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19364 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19365 silly lockFile 06140d9a-24601-0-7206006194464862-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz
19366 silly lockFile 06140d9a-24601-0-7206006194464862-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/tmp.tgz
19367 verbose tar pack [ '/home/lerenzo/.npm/request/2.9.203/package.tgz',
19367 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package' ]
19368 verbose tarball /home/lerenzo/.npm/request/2.9.203/package.tgz
19369 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19370 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19371 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package /home/lerenzo/.npm/3991d0ef-24601-0-7206006194464862-package.lock
19372 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19373 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19374 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19375 silly lockFile 3991d0ef-24601-0-7206006194464862-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572424601-0.7206006194464862/package
19376 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19377 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19378 silly lockFile 7c021738-enzo-npm-request-2-9-203-package /home/lerenzo/.npm/request/2.9.203/package
19379 verbose lock /home/lerenzo/.npm/request/2.9.203/package /home/lerenzo/.npm/7c021738-enzo-npm-request-2-9-203-package.lock
19380 silly lockFile 7c021738-enzo-npm-request-2-9-203-package /home/lerenzo/.npm/request/2.9.203/package
19381 silly lockFile 7c021738-enzo-npm-request-2-9-203-package /home/lerenzo/.npm/request/2.9.203/package
19382 verbose tar unpack /home/lerenzo/.npm/request/2.9.203/package.tgz
19383 silly lockFile 6ad656e2-enzo-npm-request-2-9-203-package tar:///home/lerenzo/.npm/request/2.9.203/package
19384 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package /home/lerenzo/.npm/6ad656e2-enzo-npm-request-2-9-203-package.lock
19385 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19386 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19387 silly gunzTarPerm modes [ '755', '644' ]
19388 silly gunzTarPerm extractEntry package.json
19389 silly gunzTarPerm extractEntry README.md
19390 silly gunzTarPerm extractEntry LICENSE
19391 silly gunzTarPerm extractEntry aws.js
19392 silly gunzTarPerm extractEntry aws2.js
19393 silly gunzTarPerm extractEntry forever.js
19394 silly gunzTarPerm extractEntry main.js
19395 silly gunzTarPerm extractEntry oauth.js
19396 silly gunzTarPerm extractEntry uuid.js
19397 silly gunzTarPerm extractEntry tunnel.js
19398 silly gunzTarPerm extractEntry mimetypes.js
19399 silly gunzTarPerm extractEntry tests/test-tunnel.js
19400 silly gunzTarPerm extractEntry tests/test-defaults.js
19401 silly gunzTarPerm extractEntry tests/test-errors.js
19402 silly gunzTarPerm extractEntry tests/test-headers.js
19403 silly gunzTarPerm extractEntry tests/test-cookiejar.js
19404 silly gunzTarPerm extractEntry tests/run.js
19405 silly gunzTarPerm extractEntry tests/test-https.js
19406 silly gunzTarPerm extractEntry tests/test-oauth.js
19407 silly gunzTarPerm extractEntry tests/test-params.js
19408 silly gunzTarPerm extractEntry tests/test-pipes.js
19409 silly gunzTarPerm extractEntry tests/test-cookie.js
19410 silly gunzTarPerm extractEntry tests/test-pool.js
19411 silly gunzTarPerm extractEntry tests/test-body.js
19412 silly gunzTarPerm extractEntry tests/test-proxy.js
19413 silly gunzTarPerm extractEntry tests/test-timeout.js
19414 silly gunzTarPerm extractEntry tests/test-qs.js
19415 silly gunzTarPerm extractEntry tests/test-toJSON.js
19416 silly gunzTarPerm extractEntry tests/test-redirect.js
19417 silly gunzTarPerm extractEntry tests/server.js
19418 silly gunzTarPerm extractEntry tests/test-s3.js
19419 silly gunzTarPerm extractEntry tests/test-httpModule.js
19420 silly gunzTarPerm extractEntry tests/test-https-strict.js
19421 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
19422 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
19423 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
19424 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
19425 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
19426 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
19427 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
19428 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
19429 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
19430 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
19431 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
19432 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
19433 silly gunzTarPerm extractEntry tests/ssl/test.crt
19434 silly gunzTarPerm extractEntry tests/ssl/test.key
19435 silly gunzTarPerm extractEntry tests/squid.conf
19436 silly gunzTarPerm extractEntry tests/googledoodle.png
19437 silly gunzTarPerm extractEntry vendor/cookie/index.js
19438 silly gunzTarPerm extractEntry vendor/cookie/jar.js
19439 silly lockFile 6ad656e2-enzo-npm-request-2-9-203-package tar:///home/lerenzo/.npm/request/2.9.203/package
19440 silly lockFile 6ad656e2-enzo-npm-request-2-9-203-package tar:///home/lerenzo/.npm/request/2.9.203/package
19441 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19442 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19443 verbose chmod /home/lerenzo/.npm/request/2.9.203/package.tgz 644
19444 verbose chown /home/lerenzo/.npm/request/2.9.203/package.tgz [ 1000, 1000 ]
19445 silly lockFile 96e7181b--org-request-request-2-9-203-tgz https://registry.npmjs.org/request/-/request-2.9.203.tgz
19446 silly lockFile 96e7181b--org-request-request-2-9-203-tgz https://registry.npmjs.org/request/-/request-2.9.203.tgz
19447 silly lockFile 3887d89d-request-2-9-203 request@2.9.203
19448 silly lockFile 3887d89d-request-2-9-203 request@2.9.203
19449 silly lockFile 0258777d-request-2-9-x request@2.9.x
19450 silly lockFile 0258777d-request-2-9-x request@2.9.x
19451 silly resolved [ { name: 'eyes',
19451 silly resolved     description: 'a customizable value inspector',
19451 silly resolved     url: 'http://github.com/cloudhead/eyes.js',
19451 silly resolved     keywords: [ 'inspector', 'debug', 'inspect', 'print' ],
19451 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
19451 silly resolved     contributors: [ [Object] ],
19451 silly resolved     licenses: [ 'MIT' ],
19451 silly resolved     main: './lib/eyes',
19451 silly resolved     version: '0.1.8',
19451 silly resolved     scripts: { test: 'node test/*-test.js' },
19451 silly resolved     directories: { lib: './lib', test: './test' },
19451 silly resolved     engines: { node: '> 0.1.90' },
19451 silly resolved     readme: 'eyes\n====\n\na customizable value inspector for Node.js\n\nsynopsis\n--------\n\nI was tired of looking at cluttered output in the console -- something needed to be done,\n`sys.inspect()` didn\'t display regexps correctly, and was too verbose, and I had an hour or two to spare. \nSo I decided to have some fun. _eyes_ were born.\n\n![eyes-ss](http://dl.dropbox.com/u/251849/eyes-js-ss.gif)\n\n_example of the output of a user-customized eyes.js inspector_\n\n*eyes* also deals with circular objects in an intelligent way, and can pretty-print object literals.\n\nusage\n-----\n\n    var inspect = require(\'eyes\').inspector({styles: {all: \'magenta\'}});\n\n    inspect(something); // inspect with the settings passed to `inspector`\n\nor\n\n    var eyes = require(\'eyes\');\n\n    eyes.inspect(something); // inspect with the default settings\n\nyou can pass a _label_ to `inspect()`, to keep track of your inspections:\n\n    eyes.inspect(something, "a random value");\n\nIf you want to return the output of eyes without printing it, you can set it up this way:\n\n    var inspect = require(\'eyes\').inspector({ stream: null });\n\n    sys.puts(inspect({ something: 42 }));\n\ncustomization\n-------------\n\nThese are the default styles and settings used by _eyes_.\n\n    styles: {                 // Styles applied to stdout\n        all:     \'cyan\',      // Overall style applied to everything\n        label:   \'underline\', // Inspection labels, like \'array\' in `array: [1, 2, 3]`\n        other:   \'inverted\',  // Objects which don\'t have a literal representation, such as functions\n        key:     \'bold\',      // The keys in object literals, like \'a\' in `{a: 1}`\n        special: \'grey\',      // null, undefined...\n        string:  \'green\',\n        number:  \'magenta\',\n        bool:    \'blue\',      // true false\n        regexp:  \'green\',     // /\\d+/\n    },\n    \n    pretty: true,             // Indent object literals\n    hideFunctions: false,     // Don\'t output functions at all\n    stream: process.stdout,   // Stream to write to, or null\n    maxLength: 2048           // Truncate output if longer\n\nYou can overwrite them with your own, by passing a similar object to `inspector()` or `inspect()`.\n\n    var inspect = require(\'eyes\').inspector({\n        styles: {\n            all: \'magenta\',\n            special: \'bold\'\n        },\n        maxLength: 512\n    });\n\n',
19451 silly resolved     readmeFilename: 'README.md',
19451 silly resolved     _id: 'eyes@0.1.8',
19451 silly resolved     dist: { shasum: 'ac1caf2ee18750246460c884201bd1b9d5c3d4c2' },
19451 silly resolved     _from: 'eyes@0.1.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz' },
19451 silly resolved   { name: 'pkginfo',
19451 silly resolved     version: '0.2.3',
19451 silly resolved     description: 'An easy way to expose properties on a module from a package.json',
19451 silly resolved     author: { name: 'Charlie Robbins', email: 'charlie.robbins@gmail.com' },
19451 silly resolved     repository:
19451 silly resolved      { type: 'git',
19451 silly resolved        url: 'http://github.com/indexzero/node-pkginfo.git' },
19451 silly resolved     keywords: [ 'info', 'tools', 'package.json' ],
19451 silly resolved     devDependencies: { vows: '0.6.x' },
19451 silly resolved     main: './lib/pkginfo',
19451 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
19451 silly resolved     engines: { node: '>= 0.4.0' },
19451 silly resolved     readme: '# node-pkginfo\n\nAn easy way to expose properties on a module from a package.json\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing pkginfo\n```\n  [sudo] npm install pkginfo\n```\n\n## Motivation\nHow often when writing node.js modules have you written the following line(s) of code? \n\n* Hard code your version string into your code\n\n``` js\n  exports.version = \'0.1.0\';\n```\n\n* Programmatically expose the version from the package.json\n\n``` js\n  exports.version = JSON.parse(fs.readFileSync(\'/path/to/package.json\', \'utf8\')).version;\n```\n\nIn other words, how often have you wanted to expose basic information from your package.json onto your module programmatically? **WELL NOW YOU CAN!**\n\n## Usage\n\nUsing `pkginfo` is idiot-proof, just require and invoke it. \n\n``` js\n  var pkginfo = require(\'pkginfo\')(module);\n  \n  console.dir(module.exports);\n```\n\nBy invoking the `pkginfo` module all of the properties in your `package.json` file will be automatically exposed on the callee module (i.e. the parent module of `pkginfo`). \n\nHere\'s a sample of the output:\n\n```\n  { name: \'simple-app\',\n    description: \'A test fixture for pkginfo\',\n    version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\',\n    keywords: [ \'test\', \'fixture\' ],\n    main: \'./index.js\',\n    scripts: { test: \'vows test/*-test.js --spec\' },\n    engines: { node: \'>= 0.4.0\' } }\n```\n\n### Expose specific properties\nIf you don\'t want to expose **all** properties on from your `package.json` on your module then simple pass those properties to the `pkginfo` function:\n\n``` js\n  var pkginfo = require(\'pkginfo\')(module, \'version\', \'author\');\n  \n  console.dir(module.exports);\n```\n\n```\n  { version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\' }\n```\n\nIf you\'re looking for further usage see the [examples][0] included in this repository. \n\n## Run Tests\nTests are written in [vows][1] and give complete coverage of all APIs.\n\n```\n  vows test/*-test.js --spec\n```\n\n[0]: https://github.com/indexzero/node-pkginfo/tree/master/examples\n[1]: http://vowsjs.org\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)',
19451 silly resolved     readmeFilename: 'README.md',
19451 silly resolved     bugs: { url: 'https://github.com/indexzero/node-pkginfo/issues' },
19451 silly resolved     homepage: 'https://github.com/indexzero/node-pkginfo',
19451 silly resolved     _id: 'pkginfo@0.2.3',
19451 silly resolved     dist: { shasum: 'bc4d08892eea7e47359d0b3dd256e5349fcd0d1e' },
19451 silly resolved     _from: 'pkginfo@0.2.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz' },
19451 silly resolved   { name: 'cycle',
19451 silly resolved     description: 'decycle your json',
19451 silly resolved     author: '',
19451 silly resolved     version: '1.0.2',
19451 silly resolved     main: './cycle.js',
19451 silly resolved     homepage: 'https://github.com/douglascrockford/JSON-js',
19451 silly resolved     repository: { type: 'git', url: 'http://github.com/dscape/cycle.git' },
19451 silly resolved     bugs: { url: 'http://github.com/douglascrockford/JSON-js/issues' },
19451 silly resolved     keywords: [ 'json', 'cycle', 'stringify', 'parse' ],
19451 silly resolved     engines: { node: '>=0.4.0' },
19451 silly resolved     readme: 'Fork of https://github.com/douglascrockford/JSON-js, maintained in npm as `cycle`.\n\nOriginal readme follows\n\n# JSON in JavaScript\n\nDouglas Crockford\ndouglas@crockford.com\n\n2010-11-18\n\n\nJSON is a light-weight, language independent, data interchange format.\nSee http://www.JSON.org/\n\nThe files in this collection implement JSON encoders/decoders in JavaScript.\n\nJSON became a built-in feature of JavaScript when the ECMAScript Programming\nLanguage Standard - Fifth Edition was adopted by the ECMA General Assembly\nin December 2009. Most of the files in this collection are for applications\nthat are expected to run in obsolete web browsers. For most purposes, json2.js\nis the best choice.\n\n\njson2.js: This file creates a JSON property in the global object, if there\nisn\'t already one, setting its value to an object containing a stringify\nmethod and a parse method. The parse method uses the eval method to do the\nparsing, guarding it with several regular expressions to defend against\naccidental code execution hazards. On current browsers, this file does nothing,\nprefering the built-in JSON object.\n\njson.js: This file does everything that json2.js does. It also adds a\ntoJSONString method and a parseJSON method to Object.prototype. Use of this\nfile is not recommended.\n\njson_parse.js: This file contains an alternative JSON parse function that\nuses recursive descent instead of eval.\n\njson_parse_state.js: This files contains an alternative JSON parse function that\nuses a state machine instead of eval.\n\ncycle.js: This file contains two functions, JSON.decycle and JSON.retrocycle,\nwhich make it possible to encode cyclical structures and dags in JSON, and to\nthen recover them. JSONPath is used to represent the links.\nhttp://GOESSNER.net/articles/JsonPath/\n',
19451 silly resolved     readmeFilename: 'README.md',
19451 silly resolved     _id: 'cycle@1.0.2',
19451 silly resolved     dist: { shasum: '5e3c1c00b09bb3e59eab48d566889a72d487db26' },
19451 silly resolved     _from: 'cycle@1.0.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz' },
19451 silly resolved   { author:
19451 silly resolved      { name: 'Felix Geisendörfer',
19451 silly resolved        email: 'felix@debuggable.com',
19451 silly resolved        url: 'http://debuggable.com/' },
19451 silly resolved     name: 'stack-trace',
19451 silly resolved     description: 'Get v8 stack traces as an array of CallSite objects.',
19451 silly resolved     version: '0.0.7',
19451 silly resolved     homepage: 'https://github.com/felixge/node-stack-trace',
19451 silly resolved     repository:
19451 silly resolved      { type: 'git',
19451 silly resolved        url: 'git://github.com/felixge/node-stack-trace.git' },
19451 silly resolved     main: './lib/stack-trace',
19451 silly resolved     engines: { node: '*' },
19451 silly resolved     dependencies: {},
19451 silly resolved     devDependencies: { far: '0.0.3', 'long-stack-traces': '0.1.2' },
19451 silly resolved     readme: '# stack-trace\n\nGet v8 stack traces as an array of CallSite objects.\n\n## Install\n\n``` bash\nnpm install stack-trace\n```\n\n## Usage\n\nThe stack-trace module makes it easy for you to capture the current stack:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar trace = stackTrace.get();\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nHowever, sometimes you have already popped the stack you are interested in,\nand all you have left is an `Error` object. This module can help:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar err = new Error(\'something went wrong\');\nvar trace = stackTrace.parse(err);\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nPlease note that parsing the `Error#stack` property is not perfect, only\ncertain properties can be retrieved with it as noted in the API docs below.\n\n## Long stack traces\n\nstack-trace works great with [long-stack-traces][], when parsing an `err.stack`\nthat has crossed the event loop boundary, a `CallSite` object returning\n`\'----------------------------------------\'` for `getFileName()` is created.\nAll other methods of the event loop boundary call site return `null`.\n\n[long-stack-traces]: https://github.com/tlrobinson/long-stack-traces\n\n## API\n\n### stackTrace.get([belowFn])\n\nReturns an array of `CallSite` objects, where element `0` is the current call\nsite.\n\nWhen passing a function on the current stack as the `belowFn` parameter, the\nreturned array will only include `CallSite` objects below this function.\n\n### stackTrace.parse(err)\n\nParses the `err.stack` property of an `Error` object into an array compatible\nwith those returned by `stackTrace.get()`. However, only the following methods\nare implemented on the returned `CallSite` objects.\n\n* getTypeName\n* getFunctionName\n* getMethodName\n* getFileName\n* getLineNumber\n* getColumnNumber\n* isNative\n\nNote: Except `getFunctionName()`, all of the above methods return exactly the\nsame values as you would get from `stackTrace.get()`. `getFunctionName()`\nis sometimes a little different, but still useful.\n\n### CallSite\n\nThe official v8 CallSite object API can be found [here][v8stackapi]. A quick\nexcerpt:\n\n> A CallSite object defines the following methods:\n>\n> * **getThis**: returns the value of this\n> * **getTypeName**: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object\'s [[Class]] internal property.\n> * **getFunction**: returns the current function\n> * **getFunctionName**: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function\'s context.\n> * **getMethodName**: returns the name of the property of this or one of its prototypes that holds the current function\n> * **getFileName**: if this function was defined in a script returns the name of the script\n> * **getLineNumber**: if this function was defined in a script returns the current line number\n> * **getColumnNumber**: if this function was defined in a script returns the current column number\n> * **getEvalOrigin**: if this function was created using a call to eval returns a CallSite object representing the location where eval was called\n> * **isToplevel**: is this a toplevel invocation, that is, is this the global object?\n> * **isEval**: does this call take place in code defined by a call to eval?\n> * **isNative**: is this call in native V8 code?\n> * **isConstructor**: is this a constructor call?\n\n[v8stackapi]: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n## License\n\nstack-trace is licensed under the MIT license.\n',
19451 silly resolved     readmeFilename: 'Readme.md',
19451 silly resolved     bugs: { url: 'https://github.com/felixge/node-stack-trace/issues' },
19451 silly resolved     _id: 'stack-trace@0.0.7',
19451 silly resolved     dist: { shasum: '90147438635cfebf7476144f00cfacbc1b4c65ff' },
19451 silly resolved     _from: 'stack-trace@0.0.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz' },
19451 silly resolved   { name: 'async',
19451 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19451 silly resolved     main: './index',
19451 silly resolved     author: { name: 'Caolan McMahon' },
19451 silly resolved     version: '0.1.22',
19451 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
19451 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
19451 silly resolved     licenses: [ [Object] ],
19451 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19451 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19451 silly resolved     readmeFilename: 'README.md',
19451 silly resolved     homepage: 'https://github.com/caolan/async',
19451 silly resolved     _id: 'async@0.1.22',
19451 silly resolved     dist: { shasum: '16e128d886add7ca553a871f9fcb0cc189befa58' },
19451 silly resolved     _from: 'async@0.1.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.1.22.tgz',
19451 silly resolved     scripts: {} },
19451 silly resolved   { name: 'request',
19451 silly resolved     description: 'Simplified HTTP request client.',
19451 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
19451 silly resolved     version: '2.9.203',
19451 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
19451 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
19451 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
19451 silly resolved     engines: [ 'node >= 0.3.6' ],
19451 silly resolved     main: './main',
19451 silly resolved     scripts: { test: 'node tests/run.js' },
19451 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Assume by some stretch of magic you aquired the verifier\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: VERIFIER\n      , token_secret: access_token.oauth_token_secret\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - sets `body` but to querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don\'t want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second in an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are enabled by default (so they can be used in subsequent requests). To disable cookies set jar to false (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: false})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
19451 silly resolved     readmeFilename: 'README.md',
19451 silly resolved     homepage: 'https://github.com/mikeal/request',
19451 silly resolved     _id: 'request@2.9.203',
19451 silly resolved     dist: { shasum: '80dc7922c7c26344e6198855790bba35b13060a1' },
19451 silly resolved     _from: 'request@2.9.x',
19451 silly resolved     _resolved: 'https://registry.npmjs.org/request/-/request-2.9.203.tgz' } ]
19452 info install eyes@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19453 info install pkginfo@0.2.3 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19454 info install cycle@1.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19455 info install stack-trace@0.0.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19456 info install async@0.1.22 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19457 info install request@2.9.203 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19458 info installOne eyes@0.1.8
19459 info installOne pkginfo@0.2.3
19460 info installOne cycle@1.0.2
19461 info installOne stack-trace@0.0.7
19462 info installOne async@0.1.22
19463 info installOne request@2.9.203
19464 silly resolved [ { name: 'pkginfo',
19464 silly resolved     version: '0.2.3',
19464 silly resolved     description: 'An easy way to expose properties on a module from a package.json',
19464 silly resolved     author: { name: 'Charlie Robbins', email: 'charlie.robbins@gmail.com' },
19464 silly resolved     repository:
19464 silly resolved      { type: 'git',
19464 silly resolved        url: 'http://github.com/indexzero/node-pkginfo.git' },
19464 silly resolved     keywords: [ 'info', 'tools', 'package.json' ],
19464 silly resolved     devDependencies: { vows: '0.6.x' },
19464 silly resolved     main: './lib/pkginfo',
19464 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
19464 silly resolved     engines: { node: '>= 0.4.0' },
19464 silly resolved     readme: '# node-pkginfo\n\nAn easy way to expose properties on a module from a package.json\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing pkginfo\n```\n  [sudo] npm install pkginfo\n```\n\n## Motivation\nHow often when writing node.js modules have you written the following line(s) of code? \n\n* Hard code your version string into your code\n\n``` js\n  exports.version = \'0.1.0\';\n```\n\n* Programmatically expose the version from the package.json\n\n``` js\n  exports.version = JSON.parse(fs.readFileSync(\'/path/to/package.json\', \'utf8\')).version;\n```\n\nIn other words, how often have you wanted to expose basic information from your package.json onto your module programmatically? **WELL NOW YOU CAN!**\n\n## Usage\n\nUsing `pkginfo` is idiot-proof, just require and invoke it. \n\n``` js\n  var pkginfo = require(\'pkginfo\')(module);\n  \n  console.dir(module.exports);\n```\n\nBy invoking the `pkginfo` module all of the properties in your `package.json` file will be automatically exposed on the callee module (i.e. the parent module of `pkginfo`). \n\nHere\'s a sample of the output:\n\n```\n  { name: \'simple-app\',\n    description: \'A test fixture for pkginfo\',\n    version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\',\n    keywords: [ \'test\', \'fixture\' ],\n    main: \'./index.js\',\n    scripts: { test: \'vows test/*-test.js --spec\' },\n    engines: { node: \'>= 0.4.0\' } }\n```\n\n### Expose specific properties\nIf you don\'t want to expose **all** properties on from your `package.json` on your module then simple pass those properties to the `pkginfo` function:\n\n``` js\n  var pkginfo = require(\'pkginfo\')(module, \'version\', \'author\');\n  \n  console.dir(module.exports);\n```\n\n```\n  { version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\' }\n```\n\nIf you\'re looking for further usage see the [examples][0] included in this repository. \n\n## Run Tests\nTests are written in [vows][1] and give complete coverage of all APIs.\n\n```\n  vows test/*-test.js --spec\n```\n\n[0]: https://github.com/indexzero/node-pkginfo/tree/master/examples\n[1]: http://vowsjs.org\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)',
19464 silly resolved     readmeFilename: 'README.md',
19464 silly resolved     bugs: { url: 'https://github.com/indexzero/node-pkginfo/issues' },
19464 silly resolved     homepage: 'https://github.com/indexzero/node-pkginfo',
19464 silly resolved     _id: 'pkginfo@0.2.3',
19464 silly resolved     dist: { shasum: 'bc4d08892eea7e47359d0b3dd256e5349fcd0d1e' },
19464 silly resolved     _from: 'pkginfo@0.2.x',
19464 silly resolved     _resolved: 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz' },
19464 silly resolved   { name: 'cycle',
19464 silly resolved     description: 'decycle your json',
19464 silly resolved     author: '',
19464 silly resolved     version: '1.0.2',
19464 silly resolved     main: './cycle.js',
19464 silly resolved     homepage: 'https://github.com/douglascrockford/JSON-js',
19464 silly resolved     repository: { type: 'git', url: 'http://github.com/dscape/cycle.git' },
19464 silly resolved     bugs: { url: 'http://github.com/douglascrockford/JSON-js/issues' },
19464 silly resolved     keywords: [ 'json', 'cycle', 'stringify', 'parse' ],
19464 silly resolved     engines: { node: '>=0.4.0' },
19464 silly resolved     readme: 'Fork of https://github.com/douglascrockford/JSON-js, maintained in npm as `cycle`.\n\nOriginal readme follows\n\n# JSON in JavaScript\n\nDouglas Crockford\ndouglas@crockford.com\n\n2010-11-18\n\n\nJSON is a light-weight, language independent, data interchange format.\nSee http://www.JSON.org/\n\nThe files in this collection implement JSON encoders/decoders in JavaScript.\n\nJSON became a built-in feature of JavaScript when the ECMAScript Programming\nLanguage Standard - Fifth Edition was adopted by the ECMA General Assembly\nin December 2009. Most of the files in this collection are for applications\nthat are expected to run in obsolete web browsers. For most purposes, json2.js\nis the best choice.\n\n\njson2.js: This file creates a JSON property in the global object, if there\nisn\'t already one, setting its value to an object containing a stringify\nmethod and a parse method. The parse method uses the eval method to do the\nparsing, guarding it with several regular expressions to defend against\naccidental code execution hazards. On current browsers, this file does nothing,\nprefering the built-in JSON object.\n\njson.js: This file does everything that json2.js does. It also adds a\ntoJSONString method and a parseJSON method to Object.prototype. Use of this\nfile is not recommended.\n\njson_parse.js: This file contains an alternative JSON parse function that\nuses recursive descent instead of eval.\n\njson_parse_state.js: This files contains an alternative JSON parse function that\nuses a state machine instead of eval.\n\ncycle.js: This file contains two functions, JSON.decycle and JSON.retrocycle,\nwhich make it possible to encode cyclical structures and dags in JSON, and to\nthen recover them. JSONPath is used to represent the links.\nhttp://GOESSNER.net/articles/JsonPath/\n',
19464 silly resolved     readmeFilename: 'README.md',
19464 silly resolved     _id: 'cycle@1.0.2',
19464 silly resolved     dist: { shasum: '5e3c1c00b09bb3e59eab48d566889a72d487db26' },
19464 silly resolved     _from: 'cycle@1.0.x',
19464 silly resolved     _resolved: 'https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz' },
19464 silly resolved   { author:
19464 silly resolved      { name: 'Felix Geisendörfer',
19464 silly resolved        email: 'felix@debuggable.com',
19464 silly resolved        url: 'http://debuggable.com/' },
19464 silly resolved     name: 'stack-trace',
19464 silly resolved     description: 'Get v8 stack traces as an array of CallSite objects.',
19464 silly resolved     version: '0.0.7',
19464 silly resolved     homepage: 'https://github.com/felixge/node-stack-trace',
19464 silly resolved     repository:
19464 silly resolved      { type: 'git',
19464 silly resolved        url: 'git://github.com/felixge/node-stack-trace.git' },
19464 silly resolved     main: './lib/stack-trace',
19464 silly resolved     engines: { node: '*' },
19464 silly resolved     dependencies: {},
19464 silly resolved     devDependencies: { far: '0.0.3', 'long-stack-traces': '0.1.2' },
19464 silly resolved     readme: '# stack-trace\n\nGet v8 stack traces as an array of CallSite objects.\n\n## Install\n\n``` bash\nnpm install stack-trace\n```\n\n## Usage\n\nThe stack-trace module makes it easy for you to capture the current stack:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar trace = stackTrace.get();\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nHowever, sometimes you have already popped the stack you are interested in,\nand all you have left is an `Error` object. This module can help:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar err = new Error(\'something went wrong\');\nvar trace = stackTrace.parse(err);\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nPlease note that parsing the `Error#stack` property is not perfect, only\ncertain properties can be retrieved with it as noted in the API docs below.\n\n## Long stack traces\n\nstack-trace works great with [long-stack-traces][], when parsing an `err.stack`\nthat has crossed the event loop boundary, a `CallSite` object returning\n`\'----------------------------------------\'` for `getFileName()` is created.\nAll other methods of the event loop boundary call site return `null`.\n\n[long-stack-traces]: https://github.com/tlrobinson/long-stack-traces\n\n## API\n\n### stackTrace.get([belowFn])\n\nReturns an array of `CallSite` objects, where element `0` is the current call\nsite.\n\nWhen passing a function on the current stack as the `belowFn` parameter, the\nreturned array will only include `CallSite` objects below this function.\n\n### stackTrace.parse(err)\n\nParses the `err.stack` property of an `Error` object into an array compatible\nwith those returned by `stackTrace.get()`. However, only the following methods\nare implemented on the returned `CallSite` objects.\n\n* getTypeName\n* getFunctionName\n* getMethodName\n* getFileName\n* getLineNumber\n* getColumnNumber\n* isNative\n\nNote: Except `getFunctionName()`, all of the above methods return exactly the\nsame values as you would get from `stackTrace.get()`. `getFunctionName()`\nis sometimes a little different, but still useful.\n\n### CallSite\n\nThe official v8 CallSite object API can be found [here][v8stackapi]. A quick\nexcerpt:\n\n> A CallSite object defines the following methods:\n>\n> * **getThis**: returns the value of this\n> * **getTypeName**: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object\'s [[Class]] internal property.\n> * **getFunction**: returns the current function\n> * **getFunctionName**: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function\'s context.\n> * **getMethodName**: returns the name of the property of this or one of its prototypes that holds the current function\n> * **getFileName**: if this function was defined in a script returns the name of the script\n> * **getLineNumber**: if this function was defined in a script returns the current line number\n> * **getColumnNumber**: if this function was defined in a script returns the current column number\n> * **getEvalOrigin**: if this function was created using a call to eval returns a CallSite object representing the location where eval was called\n> * **isToplevel**: is this a toplevel invocation, that is, is this the global object?\n> * **isEval**: does this call take place in code defined by a call to eval?\n> * **isNative**: is this call in native V8 code?\n> * **isConstructor**: is this a constructor call?\n\n[v8stackapi]: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n## License\n\nstack-trace is licensed under the MIT license.\n',
19464 silly resolved     readmeFilename: 'Readme.md',
19464 silly resolved     bugs: { url: 'https://github.com/felixge/node-stack-trace/issues' },
19464 silly resolved     _id: 'stack-trace@0.0.7',
19464 silly resolved     dist: { shasum: '90147438635cfebf7476144f00cfacbc1b4c65ff' },
19464 silly resolved     _from: 'stack-trace@0.0.x',
19464 silly resolved     _resolved: 'https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz' },
19464 silly resolved   { name: 'async',
19464 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19464 silly resolved     main: './index',
19464 silly resolved     author: { name: 'Caolan McMahon' },
19464 silly resolved     version: '0.1.22',
19464 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
19464 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
19464 silly resolved     licenses: [ [Object] ],
19464 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19464 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19464 silly resolved     readmeFilename: 'README.md',
19464 silly resolved     homepage: 'https://github.com/caolan/async',
19464 silly resolved     _id: 'async@0.1.22',
19464 silly resolved     dist: { shasum: '16e128d886add7ca553a871f9fcb0cc189befa58' },
19464 silly resolved     _from: 'async@0.1.x',
19464 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.1.22.tgz',
19464 silly resolved     scripts: {} },
19464 silly resolved   { name: 'request',
19464 silly resolved     description: 'Simplified HTTP request client.',
19464 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
19464 silly resolved     version: '2.9.203',
19464 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
19464 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
19464 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
19464 silly resolved     engines: [ 'node >= 0.3.6' ],
19464 silly resolved     main: './main',
19464 silly resolved     scripts: { test: 'node tests/run.js' },
19464 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Assume by some stretch of magic you aquired the verifier\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: VERIFIER\n      , token_secret: access_token.oauth_token_secret\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - sets `body` but to querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don\'t want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second in an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are enabled by default (so they can be used in subsequent requests). To disable cookies set jar to false (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: false})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
19464 silly resolved     readmeFilename: 'README.md',
19464 silly resolved     homepage: 'https://github.com/mikeal/request',
19464 silly resolved     _id: 'request@2.9.203',
19464 silly resolved     dist: { shasum: '80dc7922c7c26344e6198855790bba35b13060a1' },
19464 silly resolved     _from: 'request@2.9.x',
19464 silly resolved     _resolved: 'https://registry.npmjs.org/request/-/request-2.9.203.tgz' } ]
19465 info install pkginfo@0.2.3 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
19466 info install cycle@1.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
19467 info install stack-trace@0.0.7 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
19468 info install async@0.1.22 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
19469 info install request@2.9.203 into /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
19470 info installOne pkginfo@0.2.3
19471 info installOne cycle@1.0.2
19472 info installOne stack-trace@0.0.7
19473 info installOne async@0.1.22
19474 info installOne request@2.9.203
19475 silly resolved [ { name: 'eyes',
19475 silly resolved     description: 'a customizable value inspector',
19475 silly resolved     url: 'http://github.com/cloudhead/eyes.js',
19475 silly resolved     keywords: [ 'inspector', 'debug', 'inspect', 'print' ],
19475 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
19475 silly resolved     contributors: [ [Object] ],
19475 silly resolved     licenses: [ 'MIT' ],
19475 silly resolved     main: './lib/eyes',
19475 silly resolved     version: '0.1.8',
19475 silly resolved     scripts: { test: 'node test/*-test.js' },
19475 silly resolved     directories: { lib: './lib', test: './test' },
19475 silly resolved     engines: { node: '> 0.1.90' },
19475 silly resolved     readme: 'eyes\n====\n\na customizable value inspector for Node.js\n\nsynopsis\n--------\n\nI was tired of looking at cluttered output in the console -- something needed to be done,\n`sys.inspect()` didn\'t display regexps correctly, and was too verbose, and I had an hour or two to spare. \nSo I decided to have some fun. _eyes_ were born.\n\n![eyes-ss](http://dl.dropbox.com/u/251849/eyes-js-ss.gif)\n\n_example of the output of a user-customized eyes.js inspector_\n\n*eyes* also deals with circular objects in an intelligent way, and can pretty-print object literals.\n\nusage\n-----\n\n    var inspect = require(\'eyes\').inspector({styles: {all: \'magenta\'}});\n\n    inspect(something); // inspect with the settings passed to `inspector`\n\nor\n\n    var eyes = require(\'eyes\');\n\n    eyes.inspect(something); // inspect with the default settings\n\nyou can pass a _label_ to `inspect()`, to keep track of your inspections:\n\n    eyes.inspect(something, "a random value");\n\nIf you want to return the output of eyes without printing it, you can set it up this way:\n\n    var inspect = require(\'eyes\').inspector({ stream: null });\n\n    sys.puts(inspect({ something: 42 }));\n\ncustomization\n-------------\n\nThese are the default styles and settings used by _eyes_.\n\n    styles: {                 // Styles applied to stdout\n        all:     \'cyan\',      // Overall style applied to everything\n        label:   \'underline\', // Inspection labels, like \'array\' in `array: [1, 2, 3]`\n        other:   \'inverted\',  // Objects which don\'t have a literal representation, such as functions\n        key:     \'bold\',      // The keys in object literals, like \'a\' in `{a: 1}`\n        special: \'grey\',      // null, undefined...\n        string:  \'green\',\n        number:  \'magenta\',\n        bool:    \'blue\',      // true false\n        regexp:  \'green\',     // /\\d+/\n    },\n    \n    pretty: true,             // Indent object literals\n    hideFunctions: false,     // Don\'t output functions at all\n    stream: process.stdout,   // Stream to write to, or null\n    maxLength: 2048           // Truncate output if longer\n\nYou can overwrite them with your own, by passing a similar object to `inspector()` or `inspect()`.\n\n    var inspect = require(\'eyes\').inspector({\n        styles: {\n            all: \'magenta\',\n            special: \'bold\'\n        },\n        maxLength: 512\n    });\n\n',
19475 silly resolved     readmeFilename: 'README.md',
19475 silly resolved     _id: 'eyes@0.1.8',
19475 silly resolved     dist: { shasum: 'ac1caf2ee18750246460c884201bd1b9d5c3d4c2' },
19475 silly resolved     _from: 'eyes@0.1.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz' },
19475 silly resolved   { name: 'pkginfo',
19475 silly resolved     version: '0.2.3',
19475 silly resolved     description: 'An easy way to expose properties on a module from a package.json',
19475 silly resolved     author: { name: 'Charlie Robbins', email: 'charlie.robbins@gmail.com' },
19475 silly resolved     repository:
19475 silly resolved      { type: 'git',
19475 silly resolved        url: 'http://github.com/indexzero/node-pkginfo.git' },
19475 silly resolved     keywords: [ 'info', 'tools', 'package.json' ],
19475 silly resolved     devDependencies: { vows: '0.6.x' },
19475 silly resolved     main: './lib/pkginfo',
19475 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
19475 silly resolved     engines: { node: '>= 0.4.0' },
19475 silly resolved     readme: '# node-pkginfo\n\nAn easy way to expose properties on a module from a package.json\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing pkginfo\n```\n  [sudo] npm install pkginfo\n```\n\n## Motivation\nHow often when writing node.js modules have you written the following line(s) of code? \n\n* Hard code your version string into your code\n\n``` js\n  exports.version = \'0.1.0\';\n```\n\n* Programmatically expose the version from the package.json\n\n``` js\n  exports.version = JSON.parse(fs.readFileSync(\'/path/to/package.json\', \'utf8\')).version;\n```\n\nIn other words, how often have you wanted to expose basic information from your package.json onto your module programmatically? **WELL NOW YOU CAN!**\n\n## Usage\n\nUsing `pkginfo` is idiot-proof, just require and invoke it. \n\n``` js\n  var pkginfo = require(\'pkginfo\')(module);\n  \n  console.dir(module.exports);\n```\n\nBy invoking the `pkginfo` module all of the properties in your `package.json` file will be automatically exposed on the callee module (i.e. the parent module of `pkginfo`). \n\nHere\'s a sample of the output:\n\n```\n  { name: \'simple-app\',\n    description: \'A test fixture for pkginfo\',\n    version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\',\n    keywords: [ \'test\', \'fixture\' ],\n    main: \'./index.js\',\n    scripts: { test: \'vows test/*-test.js --spec\' },\n    engines: { node: \'>= 0.4.0\' } }\n```\n\n### Expose specific properties\nIf you don\'t want to expose **all** properties on from your `package.json` on your module then simple pass those properties to the `pkginfo` function:\n\n``` js\n  var pkginfo = require(\'pkginfo\')(module, \'version\', \'author\');\n  \n  console.dir(module.exports);\n```\n\n```\n  { version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\' }\n```\n\nIf you\'re looking for further usage see the [examples][0] included in this repository. \n\n## Run Tests\nTests are written in [vows][1] and give complete coverage of all APIs.\n\n```\n  vows test/*-test.js --spec\n```\n\n[0]: https://github.com/indexzero/node-pkginfo/tree/master/examples\n[1]: http://vowsjs.org\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)',
19475 silly resolved     readmeFilename: 'README.md',
19475 silly resolved     bugs: { url: 'https://github.com/indexzero/node-pkginfo/issues' },
19475 silly resolved     homepage: 'https://github.com/indexzero/node-pkginfo',
19475 silly resolved     _id: 'pkginfo@0.2.3',
19475 silly resolved     dist: { shasum: 'bc4d08892eea7e47359d0b3dd256e5349fcd0d1e' },
19475 silly resolved     _from: 'pkginfo@0.2.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz' },
19475 silly resolved   { name: 'cycle',
19475 silly resolved     description: 'decycle your json',
19475 silly resolved     author: '',
19475 silly resolved     version: '1.0.2',
19475 silly resolved     main: './cycle.js',
19475 silly resolved     homepage: 'https://github.com/douglascrockford/JSON-js',
19475 silly resolved     repository: { type: 'git', url: 'http://github.com/dscape/cycle.git' },
19475 silly resolved     bugs: { url: 'http://github.com/douglascrockford/JSON-js/issues' },
19475 silly resolved     keywords: [ 'json', 'cycle', 'stringify', 'parse' ],
19475 silly resolved     engines: { node: '>=0.4.0' },
19475 silly resolved     readme: 'Fork of https://github.com/douglascrockford/JSON-js, maintained in npm as `cycle`.\n\nOriginal readme follows\n\n# JSON in JavaScript\n\nDouglas Crockford\ndouglas@crockford.com\n\n2010-11-18\n\n\nJSON is a light-weight, language independent, data interchange format.\nSee http://www.JSON.org/\n\nThe files in this collection implement JSON encoders/decoders in JavaScript.\n\nJSON became a built-in feature of JavaScript when the ECMAScript Programming\nLanguage Standard - Fifth Edition was adopted by the ECMA General Assembly\nin December 2009. Most of the files in this collection are for applications\nthat are expected to run in obsolete web browsers. For most purposes, json2.js\nis the best choice.\n\n\njson2.js: This file creates a JSON property in the global object, if there\nisn\'t already one, setting its value to an object containing a stringify\nmethod and a parse method. The parse method uses the eval method to do the\nparsing, guarding it with several regular expressions to defend against\naccidental code execution hazards. On current browsers, this file does nothing,\nprefering the built-in JSON object.\n\njson.js: This file does everything that json2.js does. It also adds a\ntoJSONString method and a parseJSON method to Object.prototype. Use of this\nfile is not recommended.\n\njson_parse.js: This file contains an alternative JSON parse function that\nuses recursive descent instead of eval.\n\njson_parse_state.js: This files contains an alternative JSON parse function that\nuses a state machine instead of eval.\n\ncycle.js: This file contains two functions, JSON.decycle and JSON.retrocycle,\nwhich make it possible to encode cyclical structures and dags in JSON, and to\nthen recover them. JSONPath is used to represent the links.\nhttp://GOESSNER.net/articles/JsonPath/\n',
19475 silly resolved     readmeFilename: 'README.md',
19475 silly resolved     _id: 'cycle@1.0.2',
19475 silly resolved     dist: { shasum: '5e3c1c00b09bb3e59eab48d566889a72d487db26' },
19475 silly resolved     _from: 'cycle@1.0.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz' },
19475 silly resolved   { author:
19475 silly resolved      { name: 'Felix Geisendörfer',
19475 silly resolved        email: 'felix@debuggable.com',
19475 silly resolved        url: 'http://debuggable.com/' },
19475 silly resolved     name: 'stack-trace',
19475 silly resolved     description: 'Get v8 stack traces as an array of CallSite objects.',
19475 silly resolved     version: '0.0.7',
19475 silly resolved     homepage: 'https://github.com/felixge/node-stack-trace',
19475 silly resolved     repository:
19475 silly resolved      { type: 'git',
19475 silly resolved        url: 'git://github.com/felixge/node-stack-trace.git' },
19475 silly resolved     main: './lib/stack-trace',
19475 silly resolved     engines: { node: '*' },
19475 silly resolved     dependencies: {},
19475 silly resolved     devDependencies: { far: '0.0.3', 'long-stack-traces': '0.1.2' },
19475 silly resolved     readme: '# stack-trace\n\nGet v8 stack traces as an array of CallSite objects.\n\n## Install\n\n``` bash\nnpm install stack-trace\n```\n\n## Usage\n\nThe stack-trace module makes it easy for you to capture the current stack:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar trace = stackTrace.get();\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nHowever, sometimes you have already popped the stack you are interested in,\nand all you have left is an `Error` object. This module can help:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar err = new Error(\'something went wrong\');\nvar trace = stackTrace.parse(err);\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nPlease note that parsing the `Error#stack` property is not perfect, only\ncertain properties can be retrieved with it as noted in the API docs below.\n\n## Long stack traces\n\nstack-trace works great with [long-stack-traces][], when parsing an `err.stack`\nthat has crossed the event loop boundary, a `CallSite` object returning\n`\'----------------------------------------\'` for `getFileName()` is created.\nAll other methods of the event loop boundary call site return `null`.\n\n[long-stack-traces]: https://github.com/tlrobinson/long-stack-traces\n\n## API\n\n### stackTrace.get([belowFn])\n\nReturns an array of `CallSite` objects, where element `0` is the current call\nsite.\n\nWhen passing a function on the current stack as the `belowFn` parameter, the\nreturned array will only include `CallSite` objects below this function.\n\n### stackTrace.parse(err)\n\nParses the `err.stack` property of an `Error` object into an array compatible\nwith those returned by `stackTrace.get()`. However, only the following methods\nare implemented on the returned `CallSite` objects.\n\n* getTypeName\n* getFunctionName\n* getMethodName\n* getFileName\n* getLineNumber\n* getColumnNumber\n* isNative\n\nNote: Except `getFunctionName()`, all of the above methods return exactly the\nsame values as you would get from `stackTrace.get()`. `getFunctionName()`\nis sometimes a little different, but still useful.\n\n### CallSite\n\nThe official v8 CallSite object API can be found [here][v8stackapi]. A quick\nexcerpt:\n\n> A CallSite object defines the following methods:\n>\n> * **getThis**: returns the value of this\n> * **getTypeName**: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object\'s [[Class]] internal property.\n> * **getFunction**: returns the current function\n> * **getFunctionName**: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function\'s context.\n> * **getMethodName**: returns the name of the property of this or one of its prototypes that holds the current function\n> * **getFileName**: if this function was defined in a script returns the name of the script\n> * **getLineNumber**: if this function was defined in a script returns the current line number\n> * **getColumnNumber**: if this function was defined in a script returns the current column number\n> * **getEvalOrigin**: if this function was created using a call to eval returns a CallSite object representing the location where eval was called\n> * **isToplevel**: is this a toplevel invocation, that is, is this the global object?\n> * **isEval**: does this call take place in code defined by a call to eval?\n> * **isNative**: is this call in native V8 code?\n> * **isConstructor**: is this a constructor call?\n\n[v8stackapi]: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n## License\n\nstack-trace is licensed under the MIT license.\n',
19475 silly resolved     readmeFilename: 'Readme.md',
19475 silly resolved     bugs: { url: 'https://github.com/felixge/node-stack-trace/issues' },
19475 silly resolved     _id: 'stack-trace@0.0.7',
19475 silly resolved     dist: { shasum: '90147438635cfebf7476144f00cfacbc1b4c65ff' },
19475 silly resolved     _from: 'stack-trace@0.0.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz' },
19475 silly resolved   { name: 'async',
19475 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19475 silly resolved     main: './index',
19475 silly resolved     author: { name: 'Caolan McMahon' },
19475 silly resolved     version: '0.1.22',
19475 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
19475 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
19475 silly resolved     licenses: [ [Object] ],
19475 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19475 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19475 silly resolved     readmeFilename: 'README.md',
19475 silly resolved     homepage: 'https://github.com/caolan/async',
19475 silly resolved     _id: 'async@0.1.22',
19475 silly resolved     dist: { shasum: '16e128d886add7ca553a871f9fcb0cc189befa58' },
19475 silly resolved     _from: 'async@0.1.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.1.22.tgz',
19475 silly resolved     scripts: {} },
19475 silly resolved   { name: 'request',
19475 silly resolved     description: 'Simplified HTTP request client.',
19475 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
19475 silly resolved     version: '2.9.203',
19475 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
19475 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
19475 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
19475 silly resolved     engines: [ 'node >= 0.3.6' ],
19475 silly resolved     main: './main',
19475 silly resolved     scripts: { test: 'node tests/run.js' },
19475 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Assume by some stretch of magic you aquired the verifier\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: VERIFIER\n      , token_secret: access_token.oauth_token_secret\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - sets `body` but to querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don\'t want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second in an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are enabled by default (so they can be used in subsequent requests). To disable cookies set jar to false (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: false})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
19475 silly resolved     readmeFilename: 'README.md',
19475 silly resolved     homepage: 'https://github.com/mikeal/request',
19475 silly resolved     _id: 'request@2.9.203',
19475 silly resolved     dist: { shasum: '80dc7922c7c26344e6198855790bba35b13060a1' },
19475 silly resolved     _from: 'request@2.9.x',
19475 silly resolved     _resolved: 'https://registry.npmjs.org/request/-/request-2.9.203.tgz' } ]
19476 info install eyes@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19477 info install pkginfo@0.2.3 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19478 info install cycle@1.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19479 info install stack-trace@0.0.7 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19480 info install async@0.1.22 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19481 info install request@2.9.203 into /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
19482 info installOne eyes@0.1.8
19483 info installOne pkginfo@0.2.3
19484 info installOne cycle@1.0.2
19485 info installOne stack-trace@0.0.7
19486 info installOne async@0.1.22
19487 info installOne request@2.9.203
19488 silly resolved [ { name: 'eyes',
19488 silly resolved     description: 'a customizable value inspector',
19488 silly resolved     url: 'http://github.com/cloudhead/eyes.js',
19488 silly resolved     keywords: [ 'inspector', 'debug', 'inspect', 'print' ],
19488 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
19488 silly resolved     contributors: [ [Object] ],
19488 silly resolved     licenses: [ 'MIT' ],
19488 silly resolved     main: './lib/eyes',
19488 silly resolved     version: '0.1.8',
19488 silly resolved     scripts: { test: 'node test/*-test.js' },
19488 silly resolved     directories: { lib: './lib', test: './test' },
19488 silly resolved     engines: { node: '> 0.1.90' },
19488 silly resolved     readme: 'eyes\n====\n\na customizable value inspector for Node.js\n\nsynopsis\n--------\n\nI was tired of looking at cluttered output in the console -- something needed to be done,\n`sys.inspect()` didn\'t display regexps correctly, and was too verbose, and I had an hour or two to spare. \nSo I decided to have some fun. _eyes_ were born.\n\n![eyes-ss](http://dl.dropbox.com/u/251849/eyes-js-ss.gif)\n\n_example of the output of a user-customized eyes.js inspector_\n\n*eyes* also deals with circular objects in an intelligent way, and can pretty-print object literals.\n\nusage\n-----\n\n    var inspect = require(\'eyes\').inspector({styles: {all: \'magenta\'}});\n\n    inspect(something); // inspect with the settings passed to `inspector`\n\nor\n\n    var eyes = require(\'eyes\');\n\n    eyes.inspect(something); // inspect with the default settings\n\nyou can pass a _label_ to `inspect()`, to keep track of your inspections:\n\n    eyes.inspect(something, "a random value");\n\nIf you want to return the output of eyes without printing it, you can set it up this way:\n\n    var inspect = require(\'eyes\').inspector({ stream: null });\n\n    sys.puts(inspect({ something: 42 }));\n\ncustomization\n-------------\n\nThese are the default styles and settings used by _eyes_.\n\n    styles: {                 // Styles applied to stdout\n        all:     \'cyan\',      // Overall style applied to everything\n        label:   \'underline\', // Inspection labels, like \'array\' in `array: [1, 2, 3]`\n        other:   \'inverted\',  // Objects which don\'t have a literal representation, such as functions\n        key:     \'bold\',      // The keys in object literals, like \'a\' in `{a: 1}`\n        special: \'grey\',      // null, undefined...\n        string:  \'green\',\n        number:  \'magenta\',\n        bool:    \'blue\',      // true false\n        regexp:  \'green\',     // /\\d+/\n    },\n    \n    pretty: true,             // Indent object literals\n    hideFunctions: false,     // Don\'t output functions at all\n    stream: process.stdout,   // Stream to write to, or null\n    maxLength: 2048           // Truncate output if longer\n\nYou can overwrite them with your own, by passing a similar object to `inspector()` or `inspect()`.\n\n    var inspect = require(\'eyes\').inspector({\n        styles: {\n            all: \'magenta\',\n            special: \'bold\'\n        },\n        maxLength: 512\n    });\n\n',
19488 silly resolved     readmeFilename: 'README.md',
19488 silly resolved     _id: 'eyes@0.1.8',
19488 silly resolved     dist: { shasum: 'ac1caf2ee18750246460c884201bd1b9d5c3d4c2' },
19488 silly resolved     _from: 'eyes@0.1.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz' },
19488 silly resolved   { name: 'pkginfo',
19488 silly resolved     version: '0.2.3',
19488 silly resolved     description: 'An easy way to expose properties on a module from a package.json',
19488 silly resolved     author: { name: 'Charlie Robbins', email: 'charlie.robbins@gmail.com' },
19488 silly resolved     repository:
19488 silly resolved      { type: 'git',
19488 silly resolved        url: 'http://github.com/indexzero/node-pkginfo.git' },
19488 silly resolved     keywords: [ 'info', 'tools', 'package.json' ],
19488 silly resolved     devDependencies: { vows: '0.6.x' },
19488 silly resolved     main: './lib/pkginfo',
19488 silly resolved     scripts: { test: 'vows test/*-test.js --spec' },
19488 silly resolved     engines: { node: '>= 0.4.0' },
19488 silly resolved     readme: '# node-pkginfo\n\nAn easy way to expose properties on a module from a package.json\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing pkginfo\n```\n  [sudo] npm install pkginfo\n```\n\n## Motivation\nHow often when writing node.js modules have you written the following line(s) of code? \n\n* Hard code your version string into your code\n\n``` js\n  exports.version = \'0.1.0\';\n```\n\n* Programmatically expose the version from the package.json\n\n``` js\n  exports.version = JSON.parse(fs.readFileSync(\'/path/to/package.json\', \'utf8\')).version;\n```\n\nIn other words, how often have you wanted to expose basic information from your package.json onto your module programmatically? **WELL NOW YOU CAN!**\n\n## Usage\n\nUsing `pkginfo` is idiot-proof, just require and invoke it. \n\n``` js\n  var pkginfo = require(\'pkginfo\')(module);\n  \n  console.dir(module.exports);\n```\n\nBy invoking the `pkginfo` module all of the properties in your `package.json` file will be automatically exposed on the callee module (i.e. the parent module of `pkginfo`). \n\nHere\'s a sample of the output:\n\n```\n  { name: \'simple-app\',\n    description: \'A test fixture for pkginfo\',\n    version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\',\n    keywords: [ \'test\', \'fixture\' ],\n    main: \'./index.js\',\n    scripts: { test: \'vows test/*-test.js --spec\' },\n    engines: { node: \'>= 0.4.0\' } }\n```\n\n### Expose specific properties\nIf you don\'t want to expose **all** properties on from your `package.json` on your module then simple pass those properties to the `pkginfo` function:\n\n``` js\n  var pkginfo = require(\'pkginfo\')(module, \'version\', \'author\');\n  \n  console.dir(module.exports);\n```\n\n```\n  { version: \'0.1.0\',\n    author: \'Charlie Robbins <charlie.robbins@gmail.com>\' }\n```\n\nIf you\'re looking for further usage see the [examples][0] included in this repository. \n\n## Run Tests\nTests are written in [vows][1] and give complete coverage of all APIs.\n\n```\n  vows test/*-test.js --spec\n```\n\n[0]: https://github.com/indexzero/node-pkginfo/tree/master/examples\n[1]: http://vowsjs.org\n\n#### Author: [Charlie Robbins](http://nodejitsu.com)',
19488 silly resolved     readmeFilename: 'README.md',
19488 silly resolved     bugs: { url: 'https://github.com/indexzero/node-pkginfo/issues' },
19488 silly resolved     homepage: 'https://github.com/indexzero/node-pkginfo',
19488 silly resolved     _id: 'pkginfo@0.2.3',
19488 silly resolved     dist: { shasum: 'bc4d08892eea7e47359d0b3dd256e5349fcd0d1e' },
19488 silly resolved     _from: 'pkginfo@0.2.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/pkginfo/-/pkginfo-0.2.3.tgz' },
19488 silly resolved   { name: 'cycle',
19488 silly resolved     description: 'decycle your json',
19488 silly resolved     author: '',
19488 silly resolved     version: '1.0.2',
19488 silly resolved     main: './cycle.js',
19488 silly resolved     homepage: 'https://github.com/douglascrockford/JSON-js',
19488 silly resolved     repository: { type: 'git', url: 'http://github.com/dscape/cycle.git' },
19488 silly resolved     bugs: { url: 'http://github.com/douglascrockford/JSON-js/issues' },
19488 silly resolved     keywords: [ 'json', 'cycle', 'stringify', 'parse' ],
19488 silly resolved     engines: { node: '>=0.4.0' },
19488 silly resolved     readme: 'Fork of https://github.com/douglascrockford/JSON-js, maintained in npm as `cycle`.\n\nOriginal readme follows\n\n# JSON in JavaScript\n\nDouglas Crockford\ndouglas@crockford.com\n\n2010-11-18\n\n\nJSON is a light-weight, language independent, data interchange format.\nSee http://www.JSON.org/\n\nThe files in this collection implement JSON encoders/decoders in JavaScript.\n\nJSON became a built-in feature of JavaScript when the ECMAScript Programming\nLanguage Standard - Fifth Edition was adopted by the ECMA General Assembly\nin December 2009. Most of the files in this collection are for applications\nthat are expected to run in obsolete web browsers. For most purposes, json2.js\nis the best choice.\n\n\njson2.js: This file creates a JSON property in the global object, if there\nisn\'t already one, setting its value to an object containing a stringify\nmethod and a parse method. The parse method uses the eval method to do the\nparsing, guarding it with several regular expressions to defend against\naccidental code execution hazards. On current browsers, this file does nothing,\nprefering the built-in JSON object.\n\njson.js: This file does everything that json2.js does. It also adds a\ntoJSONString method and a parseJSON method to Object.prototype. Use of this\nfile is not recommended.\n\njson_parse.js: This file contains an alternative JSON parse function that\nuses recursive descent instead of eval.\n\njson_parse_state.js: This files contains an alternative JSON parse function that\nuses a state machine instead of eval.\n\ncycle.js: This file contains two functions, JSON.decycle and JSON.retrocycle,\nwhich make it possible to encode cyclical structures and dags in JSON, and to\nthen recover them. JSONPath is used to represent the links.\nhttp://GOESSNER.net/articles/JsonPath/\n',
19488 silly resolved     readmeFilename: 'README.md',
19488 silly resolved     _id: 'cycle@1.0.2',
19488 silly resolved     dist: { shasum: '5e3c1c00b09bb3e59eab48d566889a72d487db26' },
19488 silly resolved     _from: 'cycle@1.0.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/cycle/-/cycle-1.0.2.tgz' },
19488 silly resolved   { author:
19488 silly resolved      { name: 'Felix Geisendörfer',
19488 silly resolved        email: 'felix@debuggable.com',
19488 silly resolved        url: 'http://debuggable.com/' },
19488 silly resolved     name: 'stack-trace',
19488 silly resolved     description: 'Get v8 stack traces as an array of CallSite objects.',
19488 silly resolved     version: '0.0.7',
19488 silly resolved     homepage: 'https://github.com/felixge/node-stack-trace',
19488 silly resolved     repository:
19488 silly resolved      { type: 'git',
19488 silly resolved        url: 'git://github.com/felixge/node-stack-trace.git' },
19488 silly resolved     main: './lib/stack-trace',
19488 silly resolved     engines: { node: '*' },
19488 silly resolved     dependencies: {},
19488 silly resolved     devDependencies: { far: '0.0.3', 'long-stack-traces': '0.1.2' },
19488 silly resolved     readme: '# stack-trace\n\nGet v8 stack traces as an array of CallSite objects.\n\n## Install\n\n``` bash\nnpm install stack-trace\n```\n\n## Usage\n\nThe stack-trace module makes it easy for you to capture the current stack:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar trace = stackTrace.get();\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nHowever, sometimes you have already popped the stack you are interested in,\nand all you have left is an `Error` object. This module can help:\n\n``` javascript\nvar stackTrace = require(\'stack-trace\');\nvar err = new Error(\'something went wrong\');\nvar trace = stackTrace.parse(err);\n\nrequire(\'assert\').strictEqual(trace[0].getFileName(), __filename);\n```\n\nPlease note that parsing the `Error#stack` property is not perfect, only\ncertain properties can be retrieved with it as noted in the API docs below.\n\n## Long stack traces\n\nstack-trace works great with [long-stack-traces][], when parsing an `err.stack`\nthat has crossed the event loop boundary, a `CallSite` object returning\n`\'----------------------------------------\'` for `getFileName()` is created.\nAll other methods of the event loop boundary call site return `null`.\n\n[long-stack-traces]: https://github.com/tlrobinson/long-stack-traces\n\n## API\n\n### stackTrace.get([belowFn])\n\nReturns an array of `CallSite` objects, where element `0` is the current call\nsite.\n\nWhen passing a function on the current stack as the `belowFn` parameter, the\nreturned array will only include `CallSite` objects below this function.\n\n### stackTrace.parse(err)\n\nParses the `err.stack` property of an `Error` object into an array compatible\nwith those returned by `stackTrace.get()`. However, only the following methods\nare implemented on the returned `CallSite` objects.\n\n* getTypeName\n* getFunctionName\n* getMethodName\n* getFileName\n* getLineNumber\n* getColumnNumber\n* isNative\n\nNote: Except `getFunctionName()`, all of the above methods return exactly the\nsame values as you would get from `stackTrace.get()`. `getFunctionName()`\nis sometimes a little different, but still useful.\n\n### CallSite\n\nThe official v8 CallSite object API can be found [here][v8stackapi]. A quick\nexcerpt:\n\n> A CallSite object defines the following methods:\n>\n> * **getThis**: returns the value of this\n> * **getTypeName**: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object\'s [[Class]] internal property.\n> * **getFunction**: returns the current function\n> * **getFunctionName**: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function\'s context.\n> * **getMethodName**: returns the name of the property of this or one of its prototypes that holds the current function\n> * **getFileName**: if this function was defined in a script returns the name of the script\n> * **getLineNumber**: if this function was defined in a script returns the current line number\n> * **getColumnNumber**: if this function was defined in a script returns the current column number\n> * **getEvalOrigin**: if this function was created using a call to eval returns a CallSite object representing the location where eval was called\n> * **isToplevel**: is this a toplevel invocation, that is, is this the global object?\n> * **isEval**: does this call take place in code defined by a call to eval?\n> * **isNative**: is this call in native V8 code?\n> * **isConstructor**: is this a constructor call?\n\n[v8stackapi]: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n## License\n\nstack-trace is licensed under the MIT license.\n',
19488 silly resolved     readmeFilename: 'Readme.md',
19488 silly resolved     bugs: { url: 'https://github.com/felixge/node-stack-trace/issues' },
19488 silly resolved     _id: 'stack-trace@0.0.7',
19488 silly resolved     dist: { shasum: '90147438635cfebf7476144f00cfacbc1b4c65ff' },
19488 silly resolved     _from: 'stack-trace@0.0.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.7.tgz' },
19488 silly resolved   { name: 'async',
19488 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
19488 silly resolved     main: './index',
19488 silly resolved     author: { name: 'Caolan McMahon' },
19488 silly resolved     version: '0.1.22',
19488 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
19488 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
19488 silly resolved     licenses: [ [Object] ],
19488 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
19488 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
19488 silly resolved     readmeFilename: 'README.md',
19488 silly resolved     homepage: 'https://github.com/caolan/async',
19488 silly resolved     _id: 'async@0.1.22',
19488 silly resolved     dist: { shasum: '16e128d886add7ca553a871f9fcb0cc189befa58' },
19488 silly resolved     _from: 'async@0.1.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.1.22.tgz',
19488 silly resolved     scripts: {} },
19488 silly resolved   { name: 'request',
19488 silly resolved     description: 'Simplified HTTP request client.',
19488 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
19488 silly resolved     version: '2.9.203',
19488 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
19488 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
19488 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
19488 silly resolved     engines: [ 'node >= 0.3.6' ],
19488 silly resolved     main: './main',
19488 silly resolved     scripts: { test: 'node tests/run.js' },
19488 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Assume by some stretch of magic you aquired the verifier\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: VERIFIER\n      , token_secret: access_token.oauth_token_secret\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - sets `body` but to querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don\'t want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second in an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are enabled by default (so they can be used in subsequent requests). To disable cookies set jar to false (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: false})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
19488 silly resolved     readmeFilename: 'README.md',
19488 silly resolved     homepage: 'https://github.com/mikeal/request',
19488 silly resolved     _id: 'request@2.9.203',
19488 silly resolved     dist: { shasum: '80dc7922c7c26344e6198855790bba35b13060a1' },
19488 silly resolved     _from: 'request@2.9.x',
19488 silly resolved     _resolved: 'https://registry.npmjs.org/request/-/request-2.9.203.tgz' } ]
19489 info install eyes@0.1.8 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19490 info install pkginfo@0.2.3 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19491 info install cycle@1.0.2 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19492 info install stack-trace@0.0.7 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19493 info install async@0.1.22 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19494 info install request@2.9.203 into /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
19495 info installOne eyes@0.1.8
19496 info installOne pkginfo@0.2.3
19497 info installOne cycle@1.0.2
19498 info installOne stack-trace@0.0.7
19499 info installOne async@0.1.22
19500 info installOne request@2.9.203
19501 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes unbuild
19502 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo unbuild
19503 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle unbuild
19504 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace unbuild
19505 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async unbuild
19506 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request unbuild
19507 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo unbuild
19508 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle unbuild
19509 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace unbuild
19510 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async unbuild
19511 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request unbuild
19512 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes unbuild
19513 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo unbuild
19514 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle unbuild
19515 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace unbuild
19516 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async unbuild
19517 info /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request unbuild
19518 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes unbuild
19519 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo unbuild
19520 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle unbuild
19521 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace unbuild
19522 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async unbuild
19523 info /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request unbuild
19524 verbose tar unpack /home/lerenzo/.npm/eyes/0.1.8/package.tgz
19525 silly lockFile 36fe7cdc-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes
19526 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes /home/lerenzo/.npm/36fe7cdc-odules-winston-node-modules-eyes.lock
19527 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19528 verbose lock tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz /home/lerenzo/.npm/b7667f40-renzo-npm-eyes-0-1-8-package-tgz.lock
19529 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19530 silly lockFile d6cc06f2-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo
19531 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo /home/lerenzo/.npm/d6cc06f2-les-winston-node-modules-pkginfo.lock
19532 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19533 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
19534 verbose tar unpack /home/lerenzo/.npm/cycle/1.0.2/package.tgz
19535 silly lockFile ea940368-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle
19536 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle /home/lerenzo/.npm/ea940368-dules-winston-node-modules-cycle.lock
19537 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19538 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
19539 verbose tar unpack /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19540 silly lockFile 3d8ae087-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace
19541 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace /home/lerenzo/.npm/3d8ae087-winston-node-modules-stack-trace.lock
19542 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19543 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
19544 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
19545 silly lockFile b44c82d3-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async
19546 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async /home/lerenzo/.npm/b44c82d3-dules-winston-node-modules-async.lock
19547 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19548 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
19549 verbose tar unpack /home/lerenzo/.npm/request/2.9.203/package.tgz
19550 silly lockFile be2f61c0-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request
19551 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request /home/lerenzo/.npm/be2f61c0-les-winston-node-modules-request.lock
19552 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19553 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19554 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19555 silly lockFile ba43bf9f-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo
19556 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo /home/lerenzo/.npm/ba43bf9f-les-winston-node-modules-pkginfo.lock
19557 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19558 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
19559 verbose tar unpack /home/lerenzo/.npm/cycle/1.0.2/package.tgz
19560 silly lockFile f7d5350e-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle
19561 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle /home/lerenzo/.npm/f7d5350e-dules-winston-node-modules-cycle.lock
19562 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19563 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
19564 verbose tar unpack /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19565 silly lockFile aa4a27bb-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace
19566 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace /home/lerenzo/.npm/aa4a27bb-winston-node-modules-stack-trace.lock
19567 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19568 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
19569 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
19570 silly lockFile 3df9d3eb-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async
19571 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async /home/lerenzo/.npm/3df9d3eb-dules-winston-node-modules-async.lock
19572 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19573 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
19574 verbose tar unpack /home/lerenzo/.npm/request/2.9.203/package.tgz
19575 silly lockFile da80c05e-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request
19576 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request /home/lerenzo/.npm/da80c05e-les-winston-node-modules-request.lock
19577 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19578 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19579 verbose tar unpack /home/lerenzo/.npm/eyes/0.1.8/package.tgz
19580 silly lockFile c6e841de-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes
19581 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes /home/lerenzo/.npm/c6e841de-odules-winston-node-modules-eyes.lock
19582 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19583 verbose lock tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz /home/lerenzo/.npm/b7667f40-renzo-npm-eyes-0-1-8-package-tgz.lock
19584 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19585 silly lockFile 91e3afe8-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo
19586 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo /home/lerenzo/.npm/91e3afe8-les-winston-node-modules-pkginfo.lock
19587 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19588 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
19589 verbose tar unpack /home/lerenzo/.npm/cycle/1.0.2/package.tgz
19590 silly lockFile 04173660-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle
19591 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle /home/lerenzo/.npm/04173660-dules-winston-node-modules-cycle.lock
19592 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19593 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
19594 verbose tar unpack /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19595 silly lockFile 2a5ba3ae-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace
19596 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace /home/lerenzo/.npm/2a5ba3ae-winston-node-modules-stack-trace.lock
19597 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19598 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
19599 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
19600 silly lockFile cbd0bbce-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async
19601 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async /home/lerenzo/.npm/cbd0bbce-dules-winston-node-modules-async.lock
19602 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19603 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
19604 verbose tar unpack /home/lerenzo/.npm/request/2.9.203/package.tgz
19605 silly lockFile f755f386-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request
19606 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request /home/lerenzo/.npm/f755f386-les-winston-node-modules-request.lock
19607 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19608 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19609 verbose tar unpack /home/lerenzo/.npm/eyes/0.1.8/package.tgz
19610 silly lockFile 7852ff76-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes
19611 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes /home/lerenzo/.npm/7852ff76-odules-winston-node-modules-eyes.lock
19612 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19613 verbose lock tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz /home/lerenzo/.npm/b7667f40-renzo-npm-eyes-0-1-8-package-tgz.lock
19614 verbose tar unpack /home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19615 silly lockFile bcae225b-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo
19616 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo /home/lerenzo/.npm/bcae225b-les-winston-node-modules-pkginfo.lock
19617 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19618 verbose lock tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz /home/lerenzo/.npm/2b79035e-zo-npm-pkginfo-0-2-3-package-tgz.lock
19619 verbose tar unpack /home/lerenzo/.npm/cycle/1.0.2/package.tgz
19620 silly lockFile aeb84bde-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle
19621 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle /home/lerenzo/.npm/aeb84bde-dules-winston-node-modules-cycle.lock
19622 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19623 verbose lock tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz /home/lerenzo/.npm/af31e829-enzo-npm-cycle-1-0-2-package-tgz.lock
19624 verbose tar unpack /home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19625 silly lockFile 47ce9583-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace
19626 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace /home/lerenzo/.npm/47ce9583-winston-node-modules-stack-trace.lock
19627 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19628 verbose lock tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz /home/lerenzo/.npm/4fbc65da-pm-stack-trace-0-0-7-package-tgz.lock
19629 verbose tar unpack /home/lerenzo/.npm/async/0.1.22/package.tgz
19630 silly lockFile 6be48b73-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async
19631 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async /home/lerenzo/.npm/6be48b73-dules-winston-node-modules-async.lock
19632 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19633 verbose lock tar:///home/lerenzo/.npm/async/0.1.22/package.tgz /home/lerenzo/.npm/ff61bc1b-nzo-npm-async-0-1-22-package-tgz.lock
19634 verbose tar unpack /home/lerenzo/.npm/request/2.9.203/package.tgz
19635 silly lockFile 11a0fabb-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request
19636 verbose lock tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request /home/lerenzo/.npm/11a0fabb-les-winston-node-modules-request.lock
19637 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19638 verbose lock tar:///home/lerenzo/.npm/request/2.9.203/package.tgz /home/lerenzo/.npm/c861620b--npm-request-2-9-203-package-tgz.lock
19639 silly gunzTarPerm modes [ '755', '644' ]
19640 silly gunzTarPerm modes [ '755', '644' ]
19641 silly gunzTarPerm modes [ '755', '644' ]
19642 silly gunzTarPerm modes [ '755', '644' ]
19643 silly gunzTarPerm modes [ '755', '644' ]
19644 silly gunzTarPerm modes [ '755', '644' ]
19645 silly gunzTarPerm extractEntry package.json
19646 silly gunzTarPerm extractEntry package.json
19647 silly gunzTarPerm extractEntry package.json
19648 silly gunzTarPerm extractEntry package.json
19649 silly gunzTarPerm extractEntry package.json
19650 silly gunzTarPerm extractEntry package.json
19651 silly gunzTarPerm extractEntry README.md
19652 silly gunzTarPerm extractEntry LICENSE
19653 silly gunzTarPerm extractEntry .npmignore
19654 silly gunzTarPerm extractEntry README.md
19655 silly gunzTarPerm extractEntry README.md
19656 silly gunzTarPerm extractEntry cycle.js
19657 silly gunzTarPerm extractEntry .npmignore
19658 silly gunzTarPerm extractEntry License
19659 silly gunzTarPerm extractEntry .npmignore
19660 silly gunzTarPerm extractEntry README.md
19661 silly gunzTarPerm extractEntry README.md
19662 silly gunzTarPerm extractEntry LICENSE
19663 silly gunzTarPerm extractEntry Makefile
19664 silly gunzTarPerm extractEntry lib/eyes.js
19665 silly gunzTarPerm extractEntry docs/docco.css
19666 silly gunzTarPerm extractEntry docs/pkginfo.html
19667 silly gunzTarPerm extractEntry aws.js
19668 silly gunzTarPerm extractEntry Makefile
19669 silly gunzTarPerm extractEntry Readme.md
19670 silly gunzTarPerm extractEntry LICENSE
19671 silly gunzTarPerm extractEntry examples/package.json
19672 silly gunzTarPerm extractEntry lib/stack-trace.js
19673 silly gunzTarPerm extractEntry index.js
19674 silly gunzTarPerm extractEntry .gitmodules
19675 silly gunzTarPerm extractEntry test/eyes-test.js
19676 silly gunzTarPerm extractEntry examples/all-properties.js
19677 silly gunzTarPerm extractEntry examples/array-argument.js
19678 silly gunzTarPerm extractEntry aws2.js
19679 silly gunzTarPerm extractEntry forever.js
19680 silly lockFile ea940368-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle
19681 silly lockFile ea940368-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle
19682 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19683 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19684 info preinstall cycle@1.0.2
19685 silly gunzTarPerm extractEntry examples/multiple-properties.js
19686 silly gunzTarPerm extractEntry examples/object-argument.js
19687 verbose readDependencies using package.json deps
19688 verbose readDependencies using package.json deps
19689 silly resolved []
19690 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle
19691 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/cycle
19692 verbose linkStuff [ true,
19692 verbose linkStuff   '/usr/local/lib/node_modules',
19692 verbose linkStuff   false,
19692 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19693 info linkStuff cycle@1.0.2
19694 verbose linkBins cycle@1.0.2
19695 verbose linkMans cycle@1.0.2
19696 verbose rebuildBundles cycle@1.0.2
19697 info install cycle@1.0.2
19698 info postinstall cycle@1.0.2
19699 silly gunzTarPerm extractEntry main.js
19700 silly gunzTarPerm extractEntry oauth.js
19701 silly lockFile 3d8ae087-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace
19702 silly lockFile 3d8ae087-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace
19703 silly gunzTarPerm extractEntry uuid.js
19704 silly gunzTarPerm extractEntry tunnel.js
19705 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19706 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19707 info preinstall stack-trace@0.0.7
19708 verbose readDependencies using package.json deps
19709 verbose readDependencies using package.json deps
19710 silly resolved []
19711 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace
19712 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/stack-trace
19713 verbose linkStuff [ true,
19713 verbose linkStuff   '/usr/local/lib/node_modules',
19713 verbose linkStuff   false,
19713 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19714 info linkStuff stack-trace@0.0.7
19715 verbose linkBins stack-trace@0.0.7
19716 verbose linkMans stack-trace@0.0.7
19717 verbose rebuildBundles stack-trace@0.0.7
19718 info install stack-trace@0.0.7
19719 silly lockFile 36fe7cdc-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes
19720 silly lockFile 36fe7cdc-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes
19721 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19722 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19723 info postinstall stack-trace@0.0.7
19724 silly gunzTarPerm extractEntry Makefile
19725 silly gunzTarPerm extractEntry lib/async.js
19726 silly gunzTarPerm extractEntry examples/single-property.js
19727 silly gunzTarPerm extractEntry lib/pkginfo.js
19728 info preinstall eyes@0.1.8
19729 verbose readDependencies using package.json deps
19730 verbose readDependencies using package.json deps
19731 silly resolved []
19732 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes
19733 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/eyes
19734 verbose linkStuff [ true,
19734 verbose linkStuff   '/usr/local/lib/node_modules',
19734 verbose linkStuff   false,
19734 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19735 info linkStuff eyes@0.1.8
19736 verbose linkBins eyes@0.1.8
19737 verbose linkMans eyes@0.1.8
19738 verbose rebuildBundles eyes@0.1.8
19739 info install eyes@0.1.8
19740 info postinstall eyes@0.1.8
19741 silly gunzTarPerm extractEntry test/pkginfo-test.js
19742 silly gunzTarPerm extractEntry mimetypes.js
19743 silly gunzTarPerm extractEntry tests/test-tunnel.js
19744 silly gunzTarPerm extractEntry tests/test-defaults.js
19745 silly gunzTarPerm extractEntry tests/test-errors.js
19746 silly lockFile d6cc06f2-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo
19747 silly lockFile d6cc06f2-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo
19748 silly gunzTarPerm extractEntry tests/test-headers.js
19749 silly gunzTarPerm extractEntry tests/test-cookiejar.js
19750 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19751 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19752 silly lockFile b44c82d3-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async
19753 silly lockFile b44c82d3-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async
19754 info preinstall pkginfo@0.2.3
19755 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19756 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19757 verbose readDependencies using package.json deps
19758 verbose readDependencies using package.json deps
19759 silly resolved []
19760 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo
19761 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/pkginfo
19762 verbose linkStuff [ true,
19762 verbose linkStuff   '/usr/local/lib/node_modules',
19762 verbose linkStuff   false,
19762 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19763 info linkStuff pkginfo@0.2.3
19764 verbose linkBins pkginfo@0.2.3
19765 verbose linkMans pkginfo@0.2.3
19766 verbose rebuildBundles pkginfo@0.2.3
19767 silly gunzTarPerm extractEntry tests/run.js
19768 silly gunzTarPerm extractEntry tests/test-https.js
19769 info preinstall async@0.1.22
19770 info install pkginfo@0.2.3
19771 info postinstall pkginfo@0.2.3
19772 verbose readDependencies using package.json deps
19773 verbose readDependencies using package.json deps
19774 silly resolved []
19775 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async
19776 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/async
19777 verbose linkStuff [ true,
19777 verbose linkStuff   '/usr/local/lib/node_modules',
19777 verbose linkStuff   false,
19777 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19778 info linkStuff async@0.1.22
19779 verbose linkBins async@0.1.22
19780 verbose linkMans async@0.1.22
19781 verbose rebuildBundles async@0.1.22
19782 info install async@0.1.22
19783 info postinstall async@0.1.22
19784 silly gunzTarPerm extractEntry tests/test-oauth.js
19785 silly gunzTarPerm extractEntry tests/test-params.js
19786 silly gunzTarPerm extractEntry tests/test-pipes.js
19787 silly gunzTarPerm extractEntry tests/test-cookie.js
19788 silly gunzTarPerm extractEntry tests/test-pool.js
19789 silly gunzTarPerm extractEntry tests/test-body.js
19790 silly gunzTarPerm extractEntry tests/test-proxy.js
19791 silly gunzTarPerm extractEntry tests/test-timeout.js
19792 silly gunzTarPerm extractEntry tests/test-qs.js
19793 silly gunzTarPerm extractEntry tests/test-toJSON.js
19794 silly gunzTarPerm extractEntry tests/test-redirect.js
19795 silly gunzTarPerm extractEntry tests/server.js
19796 silly gunzTarPerm extractEntry tests/test-s3.js
19797 silly gunzTarPerm extractEntry tests/test-httpModule.js
19798 silly gunzTarPerm extractEntry tests/test-https-strict.js
19799 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
19800 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
19801 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
19802 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
19803 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
19804 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
19805 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
19806 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
19807 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
19808 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
19809 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
19810 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
19811 silly gunzTarPerm extractEntry tests/ssl/test.crt
19812 silly gunzTarPerm extractEntry tests/ssl/test.key
19813 silly gunzTarPerm extractEntry tests/squid.conf
19814 silly gunzTarPerm extractEntry tests/googledoodle.png
19815 silly gunzTarPerm extractEntry vendor/cookie/index.js
19816 silly gunzTarPerm extractEntry vendor/cookie/jar.js
19817 silly lockFile be2f61c0-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request
19818 silly lockFile be2f61c0-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request
19819 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19820 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
19821 info preinstall request@2.9.203
19822 verbose readDependencies using package.json deps
19823 verbose readDependencies using package.json deps
19824 silly resolved []
19825 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request
19826 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules/request
19827 verbose linkStuff [ true,
19827 verbose linkStuff   '/usr/local/lib/node_modules',
19827 verbose linkStuff   false,
19827 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston/node_modules' ]
19828 info linkStuff request@2.9.203
19829 verbose linkBins request@2.9.203
19830 verbose linkMans request@2.9.203
19831 verbose rebuildBundles request@2.9.203
19832 info install request@2.9.203
19833 info postinstall request@2.9.203
19834 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19835 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules/winston
19836 verbose linkStuff [ true,
19836 verbose linkStuff   '/usr/local/lib/node_modules',
19836 verbose linkStuff   false,
19836 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/broadway/node_modules' ]
19837 info linkStuff winston@0.6.2
19838 verbose linkBins winston@0.6.2
19839 verbose linkMans winston@0.6.2
19840 verbose rebuildBundles winston@0.6.2
19841 verbose rebuildBundles [ 'async', 'cycle', 'eyes', 'pkginfo', 'request', 'stack-trace' ]
19842 info install winston@0.6.2
19843 info postinstall winston@0.6.2
19844 silly gunzTarPerm modes [ '755', '644' ]
19845 silly gunzTarPerm modes [ '755', '644' ]
19846 silly gunzTarPerm modes [ '755', '644' ]
19847 silly gunzTarPerm modes [ '755', '644' ]
19848 silly gunzTarPerm modes [ '755', '644' ]
19849 silly gunzTarPerm modes [ '755', '644' ]
19850 silly gunzTarPerm extractEntry package.json
19851 silly gunzTarPerm extractEntry package.json
19852 silly gunzTarPerm extractEntry package.json
19853 silly gunzTarPerm extractEntry package.json
19854 silly gunzTarPerm extractEntry package.json
19855 silly gunzTarPerm extractEntry package.json
19856 silly gunzTarPerm extractEntry .npmignore
19857 silly gunzTarPerm extractEntry README.md
19858 silly gunzTarPerm extractEntry README.md
19859 silly gunzTarPerm extractEntry LICENSE
19860 silly gunzTarPerm extractEntry README.md
19861 silly gunzTarPerm extractEntry cycle.js
19862 silly gunzTarPerm extractEntry .npmignore
19863 silly gunzTarPerm extractEntry License
19864 silly gunzTarPerm extractEntry .npmignore
19865 silly gunzTarPerm extractEntry README.md
19866 silly gunzTarPerm extractEntry README.md
19867 silly gunzTarPerm extractEntry LICENSE
19868 silly gunzTarPerm extractEntry docs/docco.css
19869 silly gunzTarPerm extractEntry docs/pkginfo.html
19870 silly gunzTarPerm extractEntry aws.js
19871 silly gunzTarPerm extractEntry Makefile
19872 silly gunzTarPerm extractEntry lib/eyes.js
19873 silly gunzTarPerm extractEntry Makefile
19874 silly gunzTarPerm extractEntry Readme.md
19875 silly gunzTarPerm extractEntry LICENSE
19876 silly gunzTarPerm extractEntry examples/package.json
19877 silly gunzTarPerm extractEntry lib/stack-trace.js
19878 silly gunzTarPerm extractEntry index.js
19879 silly gunzTarPerm extractEntry .gitmodules
19880 silly gunzTarPerm extractEntry test/eyes-test.js
19881 silly gunzTarPerm extractEntry examples/all-properties.js
19882 silly gunzTarPerm extractEntry examples/array-argument.js
19883 silly gunzTarPerm extractEntry aws2.js
19884 silly gunzTarPerm extractEntry forever.js
19885 silly lockFile f7d5350e-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle
19886 silly lockFile f7d5350e-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle
19887 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19888 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
19889 silly gunzTarPerm extractEntry examples/multiple-properties.js
19890 silly gunzTarPerm extractEntry examples/object-argument.js
19891 info preinstall cycle@1.0.2
19892 verbose readDependencies using package.json deps
19893 verbose readDependencies using package.json deps
19894 silly resolved []
19895 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle
19896 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/cycle
19897 verbose linkStuff [ true,
19897 verbose linkStuff   '/usr/local/lib/node_modules',
19897 verbose linkStuff   false,
19897 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules' ]
19898 info linkStuff cycle@1.0.2
19899 verbose linkBins cycle@1.0.2
19900 verbose linkMans cycle@1.0.2
19901 verbose rebuildBundles cycle@1.0.2
19902 info install cycle@1.0.2
19903 info postinstall cycle@1.0.2
19904 silly gunzTarPerm extractEntry main.js
19905 silly gunzTarPerm extractEntry oauth.js
19906 silly lockFile aa4a27bb-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace
19907 silly lockFile aa4a27bb-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace
19908 silly gunzTarPerm extractEntry uuid.js
19909 silly gunzTarPerm extractEntry tunnel.js
19910 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19911 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
19912 info preinstall stack-trace@0.0.7
19913 verbose readDependencies using package.json deps
19914 verbose readDependencies using package.json deps
19915 silly resolved []
19916 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace
19917 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/stack-trace
19918 verbose linkStuff [ true,
19918 verbose linkStuff   '/usr/local/lib/node_modules',
19918 verbose linkStuff   false,
19918 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules' ]
19919 info linkStuff stack-trace@0.0.7
19920 verbose linkBins stack-trace@0.0.7
19921 verbose linkMans stack-trace@0.0.7
19922 verbose rebuildBundles stack-trace@0.0.7
19923 info install stack-trace@0.0.7
19924 silly lockFile c6e841de-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes
19925 silly lockFile c6e841de-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes
19926 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19927 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
19928 info postinstall stack-trace@0.0.7
19929 silly gunzTarPerm extractEntry examples/single-property.js
19930 silly gunzTarPerm extractEntry lib/pkginfo.js
19931 silly gunzTarPerm extractEntry Makefile
19932 silly gunzTarPerm extractEntry lib/async.js
19933 info preinstall eyes@0.1.8
19934 verbose readDependencies using package.json deps
19935 verbose readDependencies using package.json deps
19936 silly resolved []
19937 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes
19938 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/eyes
19939 verbose linkStuff [ true,
19939 verbose linkStuff   '/usr/local/lib/node_modules',
19939 verbose linkStuff   false,
19939 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
19940 info linkStuff eyes@0.1.8
19941 verbose linkBins eyes@0.1.8
19942 verbose linkMans eyes@0.1.8
19943 verbose rebuildBundles eyes@0.1.8
19944 info install eyes@0.1.8
19945 silly gunzTarPerm extractEntry test/pkginfo-test.js
19946 info postinstall eyes@0.1.8
19947 silly gunzTarPerm extractEntry mimetypes.js
19948 silly gunzTarPerm extractEntry tests/test-tunnel.js
19949 silly gunzTarPerm extractEntry tests/test-defaults.js
19950 silly gunzTarPerm extractEntry tests/test-errors.js
19951 silly gunzTarPerm extractEntry tests/test-headers.js
19952 silly gunzTarPerm extractEntry tests/test-cookiejar.js
19953 silly lockFile 3df9d3eb-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async
19954 silly lockFile 3df9d3eb-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async
19955 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19956 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
19957 info preinstall async@0.1.22
19958 silly gunzTarPerm extractEntry tests/run.js
19959 silly gunzTarPerm extractEntry tests/test-https.js
19960 verbose readDependencies using package.json deps
19961 verbose readDependencies using package.json deps
19962 silly resolved []
19963 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async
19964 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/async
19965 verbose linkStuff [ true,
19965 verbose linkStuff   '/usr/local/lib/node_modules',
19965 verbose linkStuff   false,
19965 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules' ]
19966 info linkStuff async@0.1.22
19967 verbose linkBins async@0.1.22
19968 verbose linkMans async@0.1.22
19969 verbose rebuildBundles async@0.1.22
19970 info install async@0.1.22
19971 info postinstall async@0.1.22
19972 silly gunzTarPerm extractEntry tests/test-oauth.js
19973 silly gunzTarPerm extractEntry tests/test-params.js
19974 silly gunzTarPerm extractEntry tests/test-pipes.js
19975 silly gunzTarPerm extractEntry tests/test-cookie.js
19976 silly gunzTarPerm extractEntry tests/test-pool.js
19977 silly gunzTarPerm extractEntry tests/test-body.js
19978 silly gunzTarPerm extractEntry tests/test-proxy.js
19979 silly gunzTarPerm extractEntry tests/test-timeout.js
19980 silly gunzTarPerm extractEntry tests/test-qs.js
19981 silly gunzTarPerm extractEntry tests/test-toJSON.js
19982 silly lockFile ba43bf9f-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo
19983 silly lockFile ba43bf9f-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo
19984 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19985 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
19986 info preinstall pkginfo@0.2.3
19987 silly gunzTarPerm extractEntry tests/test-redirect.js
19988 silly gunzTarPerm extractEntry tests/server.js
19989 verbose readDependencies using package.json deps
19990 verbose readDependencies using package.json deps
19991 silly resolved []
19992 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo
19993 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/pkginfo
19994 verbose linkStuff [ true,
19994 verbose linkStuff   '/usr/local/lib/node_modules',
19994 verbose linkStuff   false,
19994 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules' ]
19995 info linkStuff pkginfo@0.2.3
19996 verbose linkBins pkginfo@0.2.3
19997 verbose linkMans pkginfo@0.2.3
19998 verbose rebuildBundles pkginfo@0.2.3
19999 info install pkginfo@0.2.3
20000 info postinstall pkginfo@0.2.3
20001 silly gunzTarPerm extractEntry tests/test-s3.js
20002 silly gunzTarPerm extractEntry tests/test-httpModule.js
20003 silly gunzTarPerm extractEntry tests/test-https-strict.js
20004 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
20005 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
20006 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
20007 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
20008 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
20009 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
20010 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
20011 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
20012 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
20013 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
20014 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
20015 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
20016 silly gunzTarPerm extractEntry tests/ssl/test.crt
20017 silly gunzTarPerm extractEntry tests/ssl/test.key
20018 silly gunzTarPerm extractEntry tests/squid.conf
20019 silly gunzTarPerm extractEntry tests/googledoodle.png
20020 silly gunzTarPerm extractEntry vendor/cookie/index.js
20021 silly gunzTarPerm extractEntry vendor/cookie/jar.js
20022 silly gunzTarPerm modes [ '755', '644' ]
20023 silly gunzTarPerm modes [ '755', '644' ]
20024 silly gunzTarPerm modes [ '755', '644' ]
20025 silly gunzTarPerm modes [ '755', '644' ]
20026 silly gunzTarPerm modes [ '755', '644' ]
20027 silly gunzTarPerm extractEntry package.json
20028 silly gunzTarPerm extractEntry package.json
20029 silly gunzTarPerm extractEntry package.json
20030 silly gunzTarPerm extractEntry package.json
20031 silly gunzTarPerm extractEntry package.json
20032 silly gunzTarPerm extractEntry README.md
20033 silly gunzTarPerm extractEntry LICENSE
20034 silly gunzTarPerm extractEntry .npmignore
20035 silly gunzTarPerm extractEntry README.md
20036 silly gunzTarPerm extractEntry README.md
20037 silly gunzTarPerm extractEntry cycle.js
20038 silly gunzTarPerm extractEntry .npmignore
20039 silly gunzTarPerm extractEntry License
20040 silly gunzTarPerm extractEntry .npmignore
20041 silly gunzTarPerm extractEntry README.md
20042 silly gunzTarPerm extractEntry docs/docco.css
20043 silly gunzTarPerm extractEntry docs/pkginfo.html
20044 silly gunzTarPerm extractEntry Makefile
20045 silly gunzTarPerm extractEntry lib/eyes.js
20046 silly gunzTarPerm extractEntry Makefile
20047 silly gunzTarPerm extractEntry Readme.md
20048 silly gunzTarPerm extractEntry LICENSE
20049 silly gunzTarPerm extractEntry examples/package.json
20050 silly gunzTarPerm extractEntry lib/stack-trace.js
20051 silly gunzTarPerm extractEntry index.js
20052 silly gunzTarPerm extractEntry .gitmodules
20053 silly gunzTarPerm extractEntry test/eyes-test.js
20054 silly gunzTarPerm extractEntry examples/all-properties.js
20055 silly gunzTarPerm extractEntry examples/array-argument.js
20056 silly lockFile 04173660-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle
20057 silly lockFile 04173660-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle
20058 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
20059 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
20060 info preinstall cycle@1.0.2
20061 silly gunzTarPerm extractEntry examples/multiple-properties.js
20062 silly gunzTarPerm extractEntry examples/object-argument.js
20063 verbose readDependencies using package.json deps
20064 verbose readDependencies using package.json deps
20065 silly resolved []
20066 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle
20067 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/cycle
20068 verbose linkStuff [ true,
20068 verbose linkStuff   '/usr/local/lib/node_modules',
20068 verbose linkStuff   false,
20068 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
20069 info linkStuff cycle@1.0.2
20070 verbose linkBins cycle@1.0.2
20071 verbose linkMans cycle@1.0.2
20072 verbose rebuildBundles cycle@1.0.2
20073 info install cycle@1.0.2
20074 info postinstall cycle@1.0.2
20075 silly lockFile 2a5ba3ae-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20076 silly lockFile 2a5ba3ae-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20077 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
20078 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
20079 info preinstall stack-trace@0.0.7
20080 verbose readDependencies using package.json deps
20081 verbose readDependencies using package.json deps
20082 silly resolved []
20083 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20084 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20085 verbose linkStuff [ true,
20085 verbose linkStuff   '/usr/local/lib/node_modules',
20085 verbose linkStuff   false,
20085 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
20086 info linkStuff stack-trace@0.0.7
20087 verbose linkBins stack-trace@0.0.7
20088 verbose linkMans stack-trace@0.0.7
20089 verbose rebuildBundles stack-trace@0.0.7
20090 info install stack-trace@0.0.7
20091 silly lockFile 7852ff76-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes
20092 silly lockFile 7852ff76-odules-winston-node-modules-eyes tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes
20093 info postinstall stack-trace@0.0.7
20094 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
20095 silly lockFile b7667f40-renzo-npm-eyes-0-1-8-package-tgz tar:///home/lerenzo/.npm/eyes/0.1.8/package.tgz
20096 silly gunzTarPerm extractEntry Makefile
20097 silly gunzTarPerm extractEntry lib/async.js
20098 silly gunzTarPerm extractEntry examples/single-property.js
20099 silly gunzTarPerm extractEntry lib/pkginfo.js
20100 info preinstall eyes@0.1.8
20101 verbose readDependencies using package.json deps
20102 verbose readDependencies using package.json deps
20103 silly resolved []
20104 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes
20105 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/eyes
20106 verbose linkStuff [ true,
20106 verbose linkStuff   '/usr/local/lib/node_modules',
20106 verbose linkStuff   false,
20106 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20107 info linkStuff eyes@0.1.8
20108 verbose linkBins eyes@0.1.8
20109 verbose linkMans eyes@0.1.8
20110 verbose rebuildBundles eyes@0.1.8
20111 info install eyes@0.1.8
20112 info postinstall eyes@0.1.8
20113 silly gunzTarPerm extractEntry test/pkginfo-test.js
20114 silly lockFile da80c05e-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request
20115 silly lockFile da80c05e-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request
20116 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20117 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20118 info preinstall request@2.9.203
20119 verbose readDependencies using package.json deps
20120 verbose readDependencies using package.json deps
20121 silly resolved []
20122 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request
20123 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules/request
20124 verbose linkStuff [ true,
20124 verbose linkStuff   '/usr/local/lib/node_modules',
20124 verbose linkStuff   false,
20124 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston/node_modules' ]
20125 info linkStuff request@2.9.203
20126 verbose linkBins request@2.9.203
20127 verbose linkMans request@2.9.203
20128 verbose rebuildBundles request@2.9.203
20129 info install request@2.9.203
20130 info postinstall request@2.9.203
20131 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
20132 info build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/winston
20133 verbose linkStuff [ true,
20133 verbose linkStuff   '/usr/local/lib/node_modules',
20133 verbose linkStuff   false,
20133 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules' ]
20134 info linkStuff winston@0.6.2
20135 verbose linkBins winston@0.6.2
20136 verbose linkMans winston@0.6.2
20137 verbose rebuildBundles winston@0.6.2
20138 verbose rebuildBundles [ 'async', 'cycle', 'pkginfo', 'request', 'stack-trace' ]
20139 info install winston@0.6.2
20140 info postinstall winston@0.6.2
20141 silly lockFile 91e3afe8-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20142 silly lockFile 91e3afe8-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20143 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
20144 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
20145 silly lockFile cbd0bbce-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async
20146 silly lockFile cbd0bbce-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async
20147 info preinstall pkginfo@0.2.3
20148 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
20149 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
20150 verbose readDependencies using package.json deps
20151 verbose readDependencies using package.json deps
20152 silly resolved []
20153 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20154 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20155 verbose linkStuff [ true,
20155 verbose linkStuff   '/usr/local/lib/node_modules',
20155 verbose linkStuff   false,
20155 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
20156 info linkStuff pkginfo@0.2.3
20157 verbose linkBins pkginfo@0.2.3
20158 verbose linkMans pkginfo@0.2.3
20159 verbose rebuildBundles pkginfo@0.2.3
20160 info preinstall async@0.1.22
20161 info install pkginfo@0.2.3
20162 info postinstall pkginfo@0.2.3
20163 verbose readDependencies using package.json deps
20164 verbose readDependencies using package.json deps
20165 silly resolved []
20166 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async
20167 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/async
20168 verbose linkStuff [ true,
20168 verbose linkStuff   '/usr/local/lib/node_modules',
20168 verbose linkStuff   false,
20168 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
20169 info linkStuff async@0.1.22
20170 verbose linkBins async@0.1.22
20171 verbose linkMans async@0.1.22
20172 verbose rebuildBundles async@0.1.22
20173 info install async@0.1.22
20174 info postinstall async@0.1.22
20175 http 200 https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz
20176 silly gunzTarPerm modes [ '755', '644' ]
20177 silly gunzTarPerm modes [ '755', '644' ]
20178 silly gunzTarPerm modes [ '755', '644' ]
20179 silly gunzTarPerm modes [ '755', '644' ]
20180 silly gunzTarPerm modes [ '755', '644' ]
20181 silly gunzTarPerm extractEntry package.json
20182 silly gunzTarPerm extractEntry package.json
20183 silly gunzTarPerm extractEntry package.json
20184 silly gunzTarPerm extractEntry package.json
20185 silly gunzTarPerm extractEntry package.json
20186 silly gunzTarPerm extractEntry .npmignore
20187 silly gunzTarPerm extractEntry README.md
20188 silly gunzTarPerm extractEntry README.md
20189 silly gunzTarPerm extractEntry LICENSE
20190 silly gunzTarPerm extractEntry README.md
20191 silly gunzTarPerm extractEntry cycle.js
20192 silly gunzTarPerm extractEntry .npmignore
20193 silly gunzTarPerm extractEntry License
20194 silly gunzTarPerm extractEntry .npmignore
20195 silly gunzTarPerm extractEntry README.md
20196 silly gunzTarPerm extractEntry docs/docco.css
20197 silly gunzTarPerm extractEntry docs/pkginfo.html
20198 silly gunzTarPerm extractEntry aws.js
20199 silly gunzTarPerm extractEntry Makefile
20200 silly gunzTarPerm extractEntry Readme.md
20201 silly gunzTarPerm extractEntry LICENSE
20202 silly gunzTarPerm extractEntry examples/package.json
20203 silly gunzTarPerm extractEntry lib/stack-trace.js
20204 silly gunzTarPerm extractEntry index.js
20205 silly gunzTarPerm extractEntry .gitmodules
20206 silly gunzTarPerm extractEntry examples/all-properties.js
20207 silly gunzTarPerm extractEntry examples/array-argument.js
20208 silly gunzTarPerm extractEntry aws2.js
20209 silly gunzTarPerm extractEntry forever.js
20210 silly lockFile aeb84bde-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle
20211 silly lockFile aeb84bde-dules-winston-node-modules-cycle tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle
20212 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
20213 silly lockFile af31e829-enzo-npm-cycle-1-0-2-package-tgz tar:///home/lerenzo/.npm/cycle/1.0.2/package.tgz
20214 silly gunzTarPerm extractEntry examples/multiple-properties.js
20215 silly gunzTarPerm extractEntry examples/object-argument.js
20216 info preinstall cycle@1.0.2
20217 verbose readDependencies using package.json deps
20218 verbose readDependencies using package.json deps
20219 silly resolved []
20220 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle
20221 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/cycle
20222 verbose linkStuff [ true,
20222 verbose linkStuff   '/usr/local/lib/node_modules',
20222 verbose linkStuff   false,
20222 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20223 info linkStuff cycle@1.0.2
20224 verbose linkBins cycle@1.0.2
20225 verbose linkMans cycle@1.0.2
20226 verbose rebuildBundles cycle@1.0.2
20227 info install cycle@1.0.2
20228 silly gunzTarPerm extractEntry main.js
20229 silly gunzTarPerm extractEntry oauth.js
20230 info postinstall cycle@1.0.2
20231 silly lockFile 47ce9583-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20232 silly lockFile 47ce9583-winston-node-modules-stack-trace tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20233 silly gunzTarPerm extractEntry uuid.js
20234 silly gunzTarPerm extractEntry tunnel.js
20235 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
20236 silly lockFile 4fbc65da-pm-stack-trace-0-0-7-package-tgz tar:///home/lerenzo/.npm/stack-trace/0.0.7/package.tgz
20237 info preinstall stack-trace@0.0.7
20238 verbose readDependencies using package.json deps
20239 verbose readDependencies using package.json deps
20240 silly resolved []
20241 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20242 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/stack-trace
20243 verbose linkStuff [ true,
20243 verbose linkStuff   '/usr/local/lib/node_modules',
20243 verbose linkStuff   false,
20243 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20244 info linkStuff stack-trace@0.0.7
20245 verbose linkBins stack-trace@0.0.7
20246 verbose linkMans stack-trace@0.0.7
20247 verbose rebuildBundles stack-trace@0.0.7
20248 info install stack-trace@0.0.7
20249 info postinstall stack-trace@0.0.7
20250 silly gunzTarPerm extractEntry Makefile
20251 silly gunzTarPerm extractEntry lib/async.js
20252 silly gunzTarPerm extractEntry examples/single-property.js
20253 silly gunzTarPerm extractEntry lib/pkginfo.js
20254 silly gunzTarPerm extractEntry test/pkginfo-test.js
20255 silly gunzTarPerm extractEntry mimetypes.js
20256 silly gunzTarPerm extractEntry tests/test-tunnel.js
20257 silly gunzTarPerm extractEntry tests/test-defaults.js
20258 silly gunzTarPerm extractEntry tests/test-errors.js
20259 silly lockFile bcae225b-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20260 silly lockFile bcae225b-les-winston-node-modules-pkginfo tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20261 silly gunzTarPerm extractEntry tests/test-headers.js
20262 silly gunzTarPerm extractEntry tests/test-cookiejar.js
20263 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
20264 silly lockFile 2b79035e-zo-npm-pkginfo-0-2-3-package-tgz tar:///home/lerenzo/.npm/pkginfo/0.2.3/package.tgz
20265 silly lockFile 6be48b73-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async
20266 silly lockFile 6be48b73-dules-winston-node-modules-async tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async
20267 info preinstall pkginfo@0.2.3
20268 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
20269 silly lockFile ff61bc1b-nzo-npm-async-0-1-22-package-tgz tar:///home/lerenzo/.npm/async/0.1.22/package.tgz
20270 verbose readDependencies using package.json deps
20271 verbose readDependencies using package.json deps
20272 silly resolved []
20273 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20274 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/pkginfo
20275 verbose linkStuff [ true,
20275 verbose linkStuff   '/usr/local/lib/node_modules',
20275 verbose linkStuff   false,
20275 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20276 info linkStuff pkginfo@0.2.3
20277 verbose linkBins pkginfo@0.2.3
20278 verbose linkMans pkginfo@0.2.3
20279 verbose rebuildBundles pkginfo@0.2.3
20280 silly gunzTarPerm extractEntry tests/run.js
20281 silly gunzTarPerm extractEntry tests/test-https.js
20282 info preinstall async@0.1.22
20283 info install pkginfo@0.2.3
20284 info postinstall pkginfo@0.2.3
20285 verbose readDependencies using package.json deps
20286 verbose readDependencies using package.json deps
20287 silly resolved []
20288 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async
20289 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/async
20290 verbose linkStuff [ true,
20290 verbose linkStuff   '/usr/local/lib/node_modules',
20290 verbose linkStuff   false,
20290 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20291 info linkStuff async@0.1.22
20292 verbose linkBins async@0.1.22
20293 verbose linkMans async@0.1.22
20294 verbose rebuildBundles async@0.1.22
20295 info install async@0.1.22
20296 info postinstall async@0.1.22
20297 silly gunzTarPerm extractEntry tests/test-oauth.js
20298 silly gunzTarPerm extractEntry tests/test-params.js
20299 silly gunzTarPerm extractEntry tests/test-pipes.js
20300 silly gunzTarPerm extractEntry tests/test-cookie.js
20301 silly gunzTarPerm extractEntry tests/test-pool.js
20302 silly gunzTarPerm extractEntry tests/test-body.js
20303 silly gunzTarPerm extractEntry tests/test-proxy.js
20304 silly gunzTarPerm extractEntry tests/test-timeout.js
20305 silly gunzTarPerm extractEntry tests/test-qs.js
20306 silly gunzTarPerm extractEntry tests/test-toJSON.js
20307 silly gunzTarPerm extractEntry tests/test-redirect.js
20308 silly gunzTarPerm extractEntry tests/server.js
20309 silly gunzTarPerm extractEntry tests/test-s3.js
20310 silly gunzTarPerm extractEntry tests/test-httpModule.js
20311 silly gunzTarPerm extractEntry tests/test-https-strict.js
20312 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
20313 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
20314 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
20315 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
20316 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
20317 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
20318 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
20319 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
20320 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
20321 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
20322 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
20323 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
20324 silly gunzTarPerm extractEntry tests/ssl/test.crt
20325 silly gunzTarPerm extractEntry tests/ssl/test.key
20326 silly gunzTarPerm extractEntry tests/squid.conf
20327 silly gunzTarPerm extractEntry tests/googledoodle.png
20328 silly gunzTarPerm extractEntry vendor/cookie/index.js
20329 silly gunzTarPerm extractEntry vendor/cookie/jar.js
20330 silly lockFile f755f386-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request
20331 silly lockFile f755f386-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request
20332 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20333 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20334 info preinstall request@2.9.203
20335 verbose readDependencies using package.json deps
20336 verbose readDependencies using package.json deps
20337 silly resolved []
20338 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request
20339 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules/request
20340 verbose linkStuff [ true,
20340 verbose linkStuff   '/usr/local/lib/node_modules',
20340 verbose linkStuff   false,
20340 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston/node_modules' ]
20341 info linkStuff request@2.9.203
20342 verbose linkBins request@2.9.203
20343 verbose linkMans request@2.9.203
20344 verbose rebuildBundles request@2.9.203
20345 info install request@2.9.203
20346 info postinstall request@2.9.203
20347 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
20348 info build /usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules/winston
20349 verbose linkStuff [ true,
20349 verbose linkStuff   '/usr/local/lib/node_modules',
20349 verbose linkStuff   false,
20349 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/wizard/node_modules/prompt/node_modules' ]
20350 info linkStuff winston@0.6.2
20351 verbose linkBins winston@0.6.2
20352 verbose linkMans winston@0.6.2
20353 verbose rebuildBundles winston@0.6.2
20354 silly gunzTarPerm modes [ '755', '644' ]
20355 verbose rebuildBundles [ 'async', 'cycle', 'eyes', 'pkginfo', 'request', 'stack-trace' ]
20356 info install winston@0.6.2
20357 info postinstall winston@0.6.2
20358 silly gunzTarPerm extractEntry package.json
20359 silly gunzTarPerm extractEntry README.md
20360 silly gunzTarPerm extractEntry LICENSE
20361 silly gunzTarPerm extractEntry aws.js
20362 silly gunzTarPerm extractEntry aws2.js
20363 silly gunzTarPerm extractEntry forever.js
20364 silly gunzTarPerm extractEntry main.js
20365 silly gunzTarPerm extractEntry oauth.js
20366 silly gunzTarPerm extractEntry uuid.js
20367 silly gunzTarPerm extractEntry tunnel.js
20368 silly gunzTarPerm extractEntry mimetypes.js
20369 silly gunzTarPerm extractEntry tests/test-tunnel.js
20370 silly gunzTarPerm extractEntry tests/test-defaults.js
20371 silly gunzTarPerm extractEntry tests/test-errors.js
20372 silly gunzTarPerm extractEntry tests/test-headers.js
20373 silly gunzTarPerm extractEntry tests/test-cookiejar.js
20374 silly gunzTarPerm extractEntry tests/run.js
20375 silly gunzTarPerm extractEntry tests/test-https.js
20376 silly gunzTarPerm extractEntry tests/test-oauth.js
20377 silly gunzTarPerm extractEntry tests/test-params.js
20378 silly gunzTarPerm extractEntry tests/test-pipes.js
20379 silly gunzTarPerm extractEntry tests/test-cookie.js
20380 silly gunzTarPerm extractEntry tests/test-pool.js
20381 silly gunzTarPerm extractEntry tests/test-body.js
20382 silly gunzTarPerm extractEntry tests/test-proxy.js
20383 silly gunzTarPerm extractEntry tests/test-timeout.js
20384 silly gunzTarPerm extractEntry tests/test-qs.js
20385 silly gunzTarPerm extractEntry tests/test-toJSON.js
20386 silly gunzTarPerm extractEntry tests/test-redirect.js
20387 silly gunzTarPerm extractEntry tests/server.js
20388 silly gunzTarPerm extractEntry tests/test-s3.js
20389 silly gunzTarPerm extractEntry tests/test-httpModule.js
20390 silly gunzTarPerm extractEntry tests/test-https-strict.js
20391 silly gunzTarPerm extractEntry tests/ssl/ca/server.js
20392 silly gunzTarPerm extractEntry tests/ssl/ca/ca.srl
20393 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crt
20394 silly gunzTarPerm extractEntry tests/ssl/ca/ca.csr
20395 silly gunzTarPerm extractEntry tests/ssl/ca/ca.key
20396 silly gunzTarPerm extractEntry tests/ssl/ca/ca.crl
20397 silly gunzTarPerm extractEntry tests/ssl/ca/server.cnf
20398 silly gunzTarPerm extractEntry tests/ssl/ca/server.crt
20399 silly gunzTarPerm extractEntry tests/ssl/ca/server.csr
20400 silly gunzTarPerm extractEntry tests/ssl/ca/ca.cnf
20401 silly gunzTarPerm extractEntry tests/ssl/ca/server.key
20402 silly gunzTarPerm extractEntry tests/ssl/npm-ca.crt
20403 silly gunzTarPerm extractEntry tests/ssl/test.crt
20404 silly gunzTarPerm extractEntry tests/ssl/test.key
20405 silly gunzTarPerm extractEntry tests/squid.conf
20406 silly gunzTarPerm extractEntry tests/googledoodle.png
20407 silly gunzTarPerm extractEntry vendor/cookie/index.js
20408 silly gunzTarPerm extractEntry vendor/cookie/jar.js
20409 silly lockFile 11a0fabb-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request
20410 silly lockFile 11a0fabb-les-winston-node-modules-request tar:///usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request
20411 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20412 silly lockFile c861620b--npm-request-2-9-203-package-tgz tar:///home/lerenzo/.npm/request/2.9.203/package.tgz
20413 info preinstall request@2.9.203
20414 verbose readDependencies using package.json deps
20415 verbose readDependencies using package.json deps
20416 silly resolved []
20417 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request
20418 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules/request
20419 verbose linkStuff [ true,
20419 verbose linkStuff   '/usr/local/lib/node_modules',
20419 verbose linkStuff   false,
20419 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston/node_modules' ]
20420 info linkStuff request@2.9.203
20421 verbose linkBins request@2.9.203
20422 verbose linkMans request@2.9.203
20423 verbose rebuildBundles request@2.9.203
20424 info install request@2.9.203
20425 info postinstall request@2.9.203
20426 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
20427 info build /usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules/winston
20428 verbose linkStuff [ true,
20428 verbose linkStuff   '/usr/local/lib/node_modules',
20428 verbose linkStuff   false,
20428 verbose linkStuff   '/usr/local/lib/node_modules/jitsu/node_modules/flatiron/node_modules/prompt/node_modules' ]
20429 info linkStuff winston@0.6.2
20430 verbose linkBins winston@0.6.2
20431 verbose linkMans winston@0.6.2
20432 verbose rebuildBundles winston@0.6.2
20433 verbose rebuildBundles [ 'async', 'cycle', 'eyes', 'pkginfo', 'request', 'stack-trace' ]
20434 info install winston@0.6.2
20435 info postinstall winston@0.6.2
20436 verbose tar unpack /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz
20437 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20438 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package /home/lerenzo/.npm/c8fb15ca-61947-0-5428379827644676-package.lock
20439 silly lockFile 01ba16c2-61947-0-5428379827644676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz
20440 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz /home/lerenzo/.npm/01ba16c2-61947-0-5428379827644676-tmp-tgz.lock
20441 silly gunzTarPerm modes [ '755', '644' ]
20442 silly gunzTarPerm extractEntry package.json
20443 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
20444 silly gunzTarPerm extractEntry README.md
20445 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
20446 silly gunzTarPerm extractEntry assert.js
20447 silly gunzTarPerm modified mode [ 'assert.js', 438, 420 ]
20448 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20449 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20450 silly lockFile 01ba16c2-61947-0-5428379827644676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz
20451 silly lockFile 01ba16c2-61947-0-5428379827644676-tmp-tgz tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/tmp.tgz
20452 verbose tar pack [ '/home/lerenzo/.npm/assert-plus/0.1.2/package.tgz',
20452 verbose tar pack   '/home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package' ]
20453 verbose tarball /home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20454 verbose folder /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20455 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20456 verbose lock tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package /home/lerenzo/.npm/c8fb15ca-61947-0-5428379827644676-package.lock
20457 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20458 verbose lock tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz /home/lerenzo/.npm/a226d493-pm-assert-plus-0-1-2-package-tgz.lock
20459 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20460 silly lockFile c8fb15ca-61947-0-5428379827644676-package tar:///home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572461947-0.5428379827644676/package
20461 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20462 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20463 silly lockFile 493bd52e-zo-npm-assert-plus-0-1-2-package /home/lerenzo/.npm/assert-plus/0.1.2/package
20464 verbose lock /home/lerenzo/.npm/assert-plus/0.1.2/package /home/lerenzo/.npm/493bd52e-zo-npm-assert-plus-0-1-2-package.lock
20465 silly lockFile 493bd52e-zo-npm-assert-plus-0-1-2-package /home/lerenzo/.npm/assert-plus/0.1.2/package
20466 silly lockFile 493bd52e-zo-npm-assert-plus-0-1-2-package /home/lerenzo/.npm/assert-plus/0.1.2/package
20467 verbose tar unpack /home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20468 silly lockFile da62d83f-zo-npm-assert-plus-0-1-2-package tar:///home/lerenzo/.npm/assert-plus/0.1.2/package
20469 verbose lock tar:///home/lerenzo/.npm/assert-plus/0.1.2/package /home/lerenzo/.npm/da62d83f-zo-npm-assert-plus-0-1-2-package.lock
20470 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20471 verbose lock tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz /home/lerenzo/.npm/a226d493-pm-assert-plus-0-1-2-package-tgz.lock
20472 silly gunzTarPerm modes [ '755', '644' ]
20473 silly gunzTarPerm extractEntry package.json
20474 silly gunzTarPerm extractEntry README.md
20475 silly gunzTarPerm extractEntry assert.js
20476 silly lockFile da62d83f-zo-npm-assert-plus-0-1-2-package tar:///home/lerenzo/.npm/assert-plus/0.1.2/package
20477 silly lockFile da62d83f-zo-npm-assert-plus-0-1-2-package tar:///home/lerenzo/.npm/assert-plus/0.1.2/package
20478 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20479 silly lockFile a226d493-pm-assert-plus-0-1-2-package-tgz tar:///home/lerenzo/.npm/assert-plus/0.1.2/package.tgz
20480 verbose chmod /home/lerenzo/.npm/assert-plus/0.1.2/package.tgz 644
20481 verbose chown /home/lerenzo/.npm/assert-plus/0.1.2/package.tgz [ 1000, 1000 ]
20482 silly lockFile 4359eee0-ssert-plus-assert-plus-0-1-2-tgz https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz
20483 silly lockFile 4359eee0-ssert-plus-assert-plus-0-1-2-tgz https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz
20484 silly lockFile 46222085-assert-plus-0-1-2 assert-plus@0.1.2
20485 silly lockFile 46222085-assert-plus-0-1-2 assert-plus@0.1.2
20486 http 200 https://registry.npmjs.org/asn1/0.1.11
20487 silly registry.get cb [ 200,
20487 silly registry.get   { vary: 'Accept',
20487 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
20487 silly registry.get     etag: '"C1OXAD9Q0M1L7P5CSXLMR6RZF"',
20487 silly registry.get     date: 'Wed, 27 Nov 2013 17:14:22 GMT',
20487 silly registry.get     'content-type': 'application/json',
20487 silly registry.get     'content-length': '2302' } ]
20488 silly lockFile 1acbaaf5-y-npmjs-org-asn1-asn1-0-1-11-tgz https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz
20489 verbose lock https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz /home/lerenzo/.npm/1acbaaf5-y-npmjs-org-asn1-asn1-0-1-11-tgz.lock
20490 verbose addRemoteTarball [ 'https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz',
20490 verbose addRemoteTarball   '559be18376d08a4ec4dbe80877d27818639b2df7' ]
20491 info retry fetch attempt 1 at 14:14:23
20492 verbose fetch to= /home/lerenzo/tmp/npm-5525-OWYCE2_U/1385572463613-0.09755919757299125/tmp.tgz
20493 http GET https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz
20494 http 200 https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz
20495 http 200 https://registry.npmjs.org/uglify-js
20496 verbose bad json {"_id":"uglify-js","_rev":"131-cfc44c91bf89c54b9146256ce80ba1a5","name":"uglify-js","dist-tags":{"latest":"2.4.4"},"versions":{"0.0.1":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.1","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.1.tgz","shasum":"2f759acd04cf779a8fa1367f3966a635112c7a15"},"directories":{}},"0.0.2":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.2","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.3.5-pre","dist":{"shasum":"baaf5c2223440d31f008bd248aaa728e8c771a8a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.3","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.3.5-pre","dist":{"shasum":"04e48708cb7175fba8b23aba7596e39c849ccfab","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.3.tgz"},"directories":{}},"0.0.4":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.4","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8-pre","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"48b2d19b65c284a82c4d6ccab6ed141b8e313a72","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.4.tgz"}},"0.0.5":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.5","main":"index.js","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.5","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c40d18e51784a230477bb0354fa415ec361dba5e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.5.tgz"}},"1.0.1":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b34b3220e7d634401f388c8bd69e9663cec6ca94","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.1.tgz"},"directories":{}},"1.0.2":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"28494cc77c26042d4065d73736391d78417d680a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.2.tgz"},"directories":{}},"1.0.3":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.3","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"73c4f09bcec47ec5e8669cb37c11b95b7014f945","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.3.tgz"},"directories":{}},"1.0.4":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"7512dbbfca85e749683800c65407e55491700778","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.4.tgz"},"directories":{}},"1.0.5":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.5","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"25679bdcff52f9500774a644cef3129b8ddb5cf2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.5.tgz"},"directories":{}},"1.0.6":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.6","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.6","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"f0d3aafd463f26a437b9ebc19f4947ab7e8078aa","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.6.tgz"},"directories":{}},"1.0.7":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.7","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.7","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"2b7a10e628f88029a553d2b4bbb17409343755c0","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.7.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.1.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.1.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.1.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"ac8976646d2c5a844d915cb9c50a73a17425ccad","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.1.0.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.1.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.1.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.1.1","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.94","_nodeVersion":"v0.5.8","_defaultsLoaded":true,"dist":{"shasum":"ee71a97c4cefd06a1a9b20437f34118982aa035b","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.1.1.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.0","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"dd0e535f92dc5047a7526d667327bd5581e153fc","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.0.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.1","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"7edd89daadd1997b71037b80d4e9b3fd147e726e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.1.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.2":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.2","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"76bc64ea1777c92d8d93bebaeec0ecba6e6fc075","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.2.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.3":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.3","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"3b0ce6631a28dcaa64302b893123b20876bdc536","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.3.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.4":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.4","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"e65de3ca3030d34d9f2ce82ac887c407e1f4b0e2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.4.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.5":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.5","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b542c2c76f78efb34b200b20177634330ff702b6","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.6":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.6","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.6","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"d354b2d3c1cf10ebc18fa78c11a28bdd9ce1580d","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.6.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.0","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"4e92734af143c7889ffbd61a9af296f3171ae0e2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.0.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.1","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"86b927f44b9752ddb327052e83964799abebecbc","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.1.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.2":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.2","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"7ed11c9dedf77f29632286ea4dc96a2229aef98e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.2.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.3":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.3","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"ddd3e98aa27f5f47e589cfb3f95cddba26096190","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.4":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"readme":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\nlang=\"en\" xml:lang=\"en\">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<meta name=\"generator\" content=\"Org-mode\"/>\n<meta name=\"generated\" content=\"2012-08-27 12:38:12 EEST\"/>\n<meta name=\"author\" content=\"Mihai Bazon\"/>\n<meta name=\"description\" content=\"a JavaScript parser/compressor/beautifier in JavaScript\"/>\n<meta name=\"keywords\" content=\"javascript, js, parser, compiler, compressor, mangle, minify, minifier\"/>\n<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"docstyle.css\" />\n<script type=\"text/javascript\">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = \"code-highlighted\";\n     elem.className   = \"code-highlighted\";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id=\"preamble\">\n\n</div>\n\n<div id=\"content\">\n<h1 class=\"title\">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"text-table-of-contents\">\n<ul>\n<li><a href=\"#sec-1\">1 NEW: UglifyJS2 </a></li>\n<li><a href=\"#sec-2\">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href=\"#sec-2-1\">2.1 Unsafe transformations </a>\n<ul>\n<li><a href=\"#sec-2-1-1\">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href=\"#sec-2-1-2\">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-2\">2.2 Install (NPM) </a></li>\n<li><a href=\"#sec-2-3\">2.3 Install latest code from GitHub </a></li>\n<li><a href=\"#sec-2-4\">2.4 Usage </a>\n<ul>\n<li><a href=\"#sec-2-4-1\">2.4.1 API </a></li>\n<li><a href=\"#sec-2-4-2\">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href=\"#sec-2-4-3\">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-5\">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href=\"#sec-2-6\">2.6 Bugs? </a></li>\n<li><a href=\"#sec-2-7\">2.7 Links </a></li>\n<li><a href=\"#sec-2-8\">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> NEW: UglifyJS2 </h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n\n\n<p>\nI started working on UglifyJS's successor, version 2.  It's almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I've detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href=\"https://github.com/mishoo/UglifyJS2\">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n<p>\nPlease help me focus on version 2 by <a href=\"http://pledgie.com/campaigns/18110\">making a donation</a>!\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href=\"http://nodejs.org/\">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn't support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href=\"../lib/parse-js.js\">parse-js.js</a> and it's a\nport to JavaScript of the excellent <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> Common Lisp library from <a href=\"http://marijn.haverbeke.nl/\">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href=\"http://github.com/mishoo/cl-uglify-js\">cl-uglify-js</a> if you're looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href=\"../lib/process.js\">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo[\"bar\"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don't replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> <span class=\"target\">Unsafe transformations</span>  </h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n\n\n<p>\nThe following transformations can in theory break code, although they're\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id=\"outline-container-2-1-1\" class=\"outline-4\">\n<h4 id=\"sec-2-1-1\"><span class=\"section-number-4\">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(5)           =&gt; Array(5)\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn't redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don't see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn't touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 1.  globally declared variable</span>\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be declared later)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be a function)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 2.  declared in a function</span>\n  (<span class=\"org-keyword\">function</span>(){\n    a = <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(<span class=\"org-variable-name\">Array</span>){\n    <span class=\"org-keyword\">return</span> Array(5, 6, 7);\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(){\n    <span class=\"org-keyword\">return</span> <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4);\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-1-2\" class=\"outline-4\">\n<h4 id=\"sec-2-1-2\"><span class=\"section-number-4\">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n\n\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Install (NPM) </h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js</code> should do\nthe job.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Install latest code from GitHub </h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n\n\n\n\n\n<pre class=\"src src-sh\"><span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class=\"org-builtin\">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class=\"org-builtin\">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class=\"org-builtin\">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">(then add ~/bin to your $PATH if it's not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Usage </h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class=\"src src-sh\">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don't specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won't bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you'll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don't mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don't call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don't do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, \"a = 10; b = 20; foo();\" will be written as\n  \"a=10,b=20,foo();\".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn't given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as =\"object\"= or\n  ='https://github.com'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+\"\"\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I've seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you'd specify &ndash;reserved-names \"require,$super\".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-4-1\" class=\"outline-4\">\n<h4 id=\"sec-2-4-1\"><span class=\"section-number-4\">2.4.1</span> API </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-1\">\n\n\n<p>\nTo use the library from JavaScript, you'd do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">jsp</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).parser;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">pro</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).uglify;\n\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">orig_code</span> = <span class=\"org-string\">\"... JS code here\"</span>;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">ast</span> = jsp.parse(orig_code); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get an AST with compression optimizations</span>\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">final_code</span> = pro.gen_code(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don't want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here's a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn't find it.  For most JS code you don't want that, but it's useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it's not enabled by default) this operation isn't yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it's technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here's an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>, <span class=\"org-variable-name\">d</span>, <span class=\"org-variable-name\">e</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">q</span>;\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">w</span>;\n    w = 10;\n    q = 20;\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 1; i &lt; 10; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 0; i &lt; 1; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">baz</span>(){ ... }\n}\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">transforms into ==&gt;</span>\n\n<span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span>, <span class=\"org-variable-name\">boo</span>, <span class=\"org-variable-name\">w</span> = 10, <span class=\"org-variable-name\">q</span> = 20;\n    <span class=\"org-keyword\">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>() { ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don't touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the \"sequence\" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it's minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-2\" class=\"outline-4\">\n<h4 id=\"sec-2-4-2\"><span class=\"section-number-4\">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-2\">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It's\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don't really want to use it\nto reformat your code, unless you don't have, or don't care about, comments.\n</p>\n<p>\nIn fact it's not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don't really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we'd have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-3\" class=\"outline-4\">\n<h4 id=\"sec-2-4-3\"><span class=\"section-number-4\">2.4.3</span> Use as a code pre-processor </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-3\">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class=\"src src-js\">CLAUSE1: <span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">typeof</span> DEVMODE === <span class=\"org-string\">'undefined'</span>) {\n    DEVMODE = <span class=\"org-constant\">true</span>;\n}\n\n<span class=\"org-function-name\">CLAUSE2</span>: <span class=\"org-keyword\">function</span> init() {\n    <span class=\"org-keyword\">if</span> (DEVMODE) {\n        console.log(<span class=\"org-string\">\"init() called\"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class=\"org-string\">\"init() complete\"</span>);\n}\n\n<span class=\"org-function-name\">CLAUSE3</span>: <span class=\"org-keyword\">function</span> reportDeviceStatus(<span class=\"org-variable-name\">device</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">DEVMODE</span> = device.mode, <span class=\"org-variable-name\">DEVNAME</span> = device.name;\n    <span class=\"org-keyword\">if</span> (DEVMODE === <span class=\"org-string\">'open'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> Compression &ndash; how good is it? </h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe're still a lot better than YUI in terms of compression, though slightly\nslower.  We're still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n<caption></caption>\n<colgroup><col class=\"left\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" />\n</colgroup>\n<thead>\n<tr><th scope=\"col\" class=\"left\">File</th><th scope=\"col\" class=\"left\">UglifyJS</th><th scope=\"col\" class=\"right\">UglifyJS+gzip</th><th scope=\"col\" class=\"left\">Closure</th><th scope=\"col\" class=\"right\">Closure+gzip</th><th scope=\"col\" class=\"left\">YUI</th><th scope=\"col\" class=\"right\">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class=\"left\">jquery-1.6.2.js</td><td class=\"left\">91001 (0:01.59)</td><td class=\"right\">31896</td><td class=\"left\">90678 (0:07.40)</td><td class=\"right\">31979</td><td class=\"left\">101527 (0:01.82)</td><td class=\"right\">34646</td></tr>\n<tr><td class=\"left\">paper.js</td><td class=\"left\">142023 (0:01.65)</td><td class=\"right\">43334</td><td class=\"left\">134301 (0:07.42)</td><td class=\"right\">42495</td><td class=\"left\">173383 (0:01.58)</td><td class=\"right\">48785</td></tr>\n<tr><td class=\"left\">prototype.js</td><td class=\"left\">88544 (0:01.09)</td><td class=\"right\">26680</td><td class=\"left\">86955 (0:06.97)</td><td class=\"right\">26326</td><td class=\"left\">92130 (0:00.79)</td><td class=\"right\">28624</td></tr>\n<tr><td class=\"left\">thelib-full.js (DynarchLIB)</td><td class=\"left\">251939 (0:02.55)</td><td class=\"right\">72535</td><td class=\"left\">249911 (0:09.05)</td><td class=\"right\">72696</td><td class=\"left\">258869 (0:01.94)</td><td class=\"right\">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-6\" class=\"outline-3\">\n<h3 id=\"sec-2-6\"><span class=\"section-number-3\">2.6</span> Bugs? </h3>\n<div class=\"outline-text-3\" id=\"text-2-6\">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class=\"footref\" name=\"fnr.1\" href=\"#fn.1\">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I'm quite confident\nthat it's solid enough for production use.  If you can identify any bugs,\nI'd love to hear about them (<a href=\"http://groups.google.com/group/uglifyjs\">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-7\" class=\"outline-3\">\n<h3 id=\"sec-2-7\"><span class=\"section-number-3\">2.7</span> Links </h3>\n<div class=\"outline-text-3\" id=\"text-2-7\">\n\n\n<ul>\n<li>Twitter: <a href=\"http://twitter.com/UglifyJS\">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href=\"http://github.com/mishoo/UglifyJS\">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href=\"http://groups.google.com/group/uglifyjs\">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href=\"http://marijn.haverbeke.nl/parse-js/\">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href=\"http://github.com/marijnh/js\">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href=\"http://github.com/mishoo/cl-uglify-js\">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-8\" class=\"outline-3\">\n<h3 id=\"sec-2-8\"><span class=\"section-number-3\">2.8</span> License </h3>\n<div class=\"outline-text-3\" id=\"text-2-8\">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class=\"example\">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n<p class=\"footnote\"><sup><a class=\"footnum\" name=\"fn.1\" href=\"#fnr.1\">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-08-27 12:38:12 EEST</p>\n<p class=\"author\">Author: Mihai Bazon</p>\n<p class=\"creator\">Org version 7.7 with Emacs version 23</p>\n<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n","_id":"uglify-js@1.3.4","dist":{"shasum":"282cec40db568798e0ec6d71d0c989d323f0636b","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"2.2.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.0","dist":{"shasum":"305c78992d03fe0ec3b0211f34615b533b7768eb","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.1","dist":{"shasum":"c47e5f0ac40ea8cd951584d7cb08251085a02ea0","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.2","dist":{"shasum":"3f8e186e8061850af4de524bcf867baf29609e16","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.2.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exits.                   [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.3","dist":{"shasum":"a60c6f7234e971e4522a79d27da006589f8911b4","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.3.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.4","dist":{"shasum":"805b40fa468b1fad4da84f3e04cd0ca26bf80a29","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.4.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.5":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.5","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.5","dist":{"shasum":"a6e02a70d839792b9780488b7b8b184c095c99c7","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.5.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.0","dist":{"shasum":"2cdec16d378a8a2b6ecfb6989784cf8b7ae5491f","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.1","dist":{"shasum":"78ce618c52e27aac408298f80f910f56c80cc884","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.2","dist":{"shasum":"de195c311110e100ebf43b3e6bdc396827771469","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.3","dist":{"shasum":"ea82ebd16f75440dc1406a9caa0555050e19a0d8","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.4","dist":{"shasum":"321cd1f7b46c7fa4a0cc76fc194142de0b0d2e40","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.5":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.5","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.5","dist":{"shasum":"3939907b4b4ec7a48a9775463bf43fed33216035","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.6":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.6","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `negate-iife` (default `!beautify`) -- prefer negation, rather than\n  parens, for \"Immediately-Called Function Expressions\".  This defaults to\n  `true` when beautification is off, and `false` if beautification is on;\n  pass it manually to force a value.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.6","dist":{"shasum":"fa0984770b428b7a9b2a8058f46355d14fef211a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"1.3.5":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"readme":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\nlang=\"en\" xml:lang=\"en\">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<meta name=\"generator\" content=\"Org-mode\"/>\n<meta name=\"generated\" content=\"2012-11-22 10:46:14 EET\"/>\n<meta name=\"author\" content=\"Mihai Bazon\"/>\n<meta name=\"description\" content=\"a JavaScript parser/compressor/beautifier in JavaScript\"/>\n<meta name=\"keywords\" content=\"javascript, js, parser, compiler, compressor, mangle, minify, minifier\"/>\n<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"docstyle.css\" />\n<script type=\"text/javascript\">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = \"code-highlighted\";\n     elem.className   = \"code-highlighted\";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id=\"preamble\">\n\n</div>\n\n<div id=\"content\">\n<h1 class=\"title\">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"text-table-of-contents\">\n<ul>\n<li><a href=\"#sec-1\">1 NEW: UglifyJS2 </a></li>\n<li><a href=\"#sec-2\">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href=\"#sec-2-1\">2.1 Unsafe transformations </a>\n<ul>\n<li><a href=\"#sec-2-1-1\">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href=\"#sec-2-1-2\">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-2\">2.2 Install (NPM) </a></li>\n<li><a href=\"#sec-2-3\">2.3 Install latest code from GitHub </a></li>\n<li><a href=\"#sec-2-4\">2.4 Usage </a>\n<ul>\n<li><a href=\"#sec-2-4-1\">2.4.1 API </a></li>\n<li><a href=\"#sec-2-4-2\">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href=\"#sec-2-4-3\">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-5\">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href=\"#sec-2-6\">2.6 Bugs? </a></li>\n<li><a href=\"#sec-2-7\">2.7 Links </a></li>\n<li><a href=\"#sec-2-8\">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> NEW: UglifyJS2 </h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n\n\n<p>\nI started working on UglifyJS's successor, version 2.  It's almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I've detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href=\"https://github.com/mishoo/UglifyJS2\">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href=\"http://nodejs.org/\">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn't support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href=\"../lib/parse-js.js\">parse-js.js</a> and it's a\nport to JavaScript of the excellent <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> Common Lisp library from <a href=\"http://marijn.haverbeke.nl/\">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href=\"http://github.com/mishoo/cl-uglify-js\">cl-uglify-js</a> if you're looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href=\"../lib/process.js\">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo[\"bar\"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don't replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> <span class=\"target\">Unsafe transformations</span>  </h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n\n\n<p>\nThe following transformations can in theory break code, although they're\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id=\"outline-container-2-1-1\" class=\"outline-4\">\n<h4 id=\"sec-2-1-1\"><span class=\"section-number-4\">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(5)           =&gt; Array(5)\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn't redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don't see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn't touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 1.  globally declared variable</span>\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be declared later)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be a function)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 2.  declared in a function</span>\n  (<span class=\"org-keyword\">function</span>(){\n    a = <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(<span class=\"org-variable-name\">Array</span>){\n    <span class=\"org-keyword\">return</span> Array(5, 6, 7);\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(){\n    <span class=\"org-keyword\">return</span> <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4);\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-1-2\" class=\"outline-4\">\n<h4 id=\"sec-2-1-2\"><span class=\"section-number-4\">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n\n\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Install (NPM) </h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js@1</code> should\ndo the job.\n</p>\n<p>\n<b>NOTE:</b> The NPM package has been upgraded to UglifyJS2.  If you need to\ninstall version 1.x you need to add `@1` to the command, as I did above.  I\nstrongly suggest you to try to upgrade, though this might not be simple (v2\nhas a completely different AST structure and API).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Install latest code from GitHub </h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n\n\n\n\n\n<pre class=\"src src-sh\"><span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class=\"org-builtin\">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class=\"org-builtin\">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class=\"org-builtin\">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">(then add ~/bin to your $PATH if it's not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Usage </h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class=\"src src-sh\">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don't specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won't bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you'll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don't mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don't call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don't do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, \"a = 10; b = 20; foo();\" will be written as\n  \"a=10,b=20,foo();\".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn't given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as =\"object\"= or\n  ='https://github.com'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+\"\"\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I've seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you'd specify &ndash;reserved-names \"require,$super\".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-4-1\" class=\"outline-4\">\n<h4 id=\"sec-2-4-1\"><span class=\"section-number-4\">2.4.1</span> API </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-1\">\n\n\n<p>\nTo use the library from JavaScript, you'd do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">jsp</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).parser;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">pro</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).uglify;\n\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">orig_code</span> = <span class=\"org-string\">\"... JS code here\"</span>;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">ast</span> = jsp.parse(orig_code); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get an AST with compression optimizations</span>\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">final_code</span> = pro.gen_code(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don't want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here's a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn't find it.  For most JS code you don't want that, but it's useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it's not enabled by default) this operation isn't yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it's technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here's an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>, <span class=\"org-variable-name\">d</span>, <span class=\"org-variable-name\">e</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">q</span>;\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">w</span>;\n    w = 10;\n    q = 20;\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 1; i &lt; 10; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 0; i &lt; 1; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">baz</span>(){ ... }\n}\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">transforms into ==&gt;</span>\n\n<span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span>, <span class=\"org-variable-name\">boo</span>, <span class=\"org-variable-name\">w</span> = 10, <span class=\"org-variable-name\">q</span> = 20;\n    <span class=\"org-keyword\">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>() { ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don't touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value. For example,\n    <code>{ defines: { DEBUG: ['name', 'false'], VERSION: ['string', '1.0'] } }</code>\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the \"sequence\" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it's minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-2\" class=\"outline-4\">\n<h4 id=\"sec-2-4-2\"><span class=\"section-number-4\">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-2\">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It's\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don't really want to use it\nto reformat your code, unless you don't have, or don't care about, comments.\n</p>\n<p>\nIn fact it's not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don't really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we'd have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-3\" class=\"outline-4\">\n<h4 id=\"sec-2-4-3\"><span class=\"section-number-4\">2.4.3</span> Use as a code pre-processor </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-3\">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class=\"src src-js\">CLAUSE1: <span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">typeof</span> DEVMODE === <span class=\"org-string\">'undefined'</span>) {\n    DEVMODE = <span class=\"org-constant\">true</span>;\n}\n\n<span class=\"org-function-name\">CLAUSE2</span>: <span class=\"org-keyword\">function</span> init() {\n    <span class=\"org-keyword\">if</span> (DEVMODE) {\n        console.log(<span class=\"org-string\">\"init() called\"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class=\"org-string\">\"init() complete\"</span>);\n}\n\n<span class=\"org-function-name\">CLAUSE3</span>: <span class=\"org-keyword\">function</span> reportDeviceStatus(<span class=\"org-variable-name\">device</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">DEVMODE</span> = device.mode, <span class=\"org-variable-name\">DEVNAME</span> = device.name;\n    <span class=\"org-keyword\">if</span> (DEVMODE === <span class=\"org-string\">'open'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> Compression &ndash; how good is it? </h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe're still a lot better than YUI in terms of compression, though slightly\nslower.  We're still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n<caption></caption>\n<colgroup><col class=\"left\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" />\n</colgroup>\n<thead>\n<tr><th scope=\"col\" class=\"left\">File</th><th scope=\"col\" class=\"left\">UglifyJS</th><th scope=\"col\" class=\"right\">UglifyJS+gzip</th><th scope=\"col\" class=\"left\">Closure</th><th scope=\"col\" class=\"right\">Closure+gzip</th><th scope=\"col\" class=\"left\">YUI</th><th scope=\"col\" class=\"right\">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class=\"left\">jquery-1.6.2.js</td><td class=\"left\">91001 (0:01.59)</td><td class=\"right\">31896</td><td class=\"left\">90678 (0:07.40)</td><td class=\"right\">31979</td><td class=\"left\">101527 (0:01.82)</td><td class=\"right\">34646</td></tr>\n<tr><td class=\"left\">paper.js</td><td class=\"left\">142023 (0:01.65)</td><td class=\"right\">43334</td><td class=\"left\">134301 (0:07.42)</td><td class=\"right\">42495</td><td class=\"left\">173383 (0:01.58)</td><td class=\"right\">48785</td></tr>\n<tr><td class=\"left\">prototype.js</td><td class=\"left\">88544 (0:01.09)</td><td class=\"right\">26680</td><td class=\"left\">86955 (0:06.97)</td><td class=\"right\">26326</td><td class=\"left\">92130 (0:00.79)</td><td class=\"right\">28624</td></tr>\n<tr><td class=\"left\">thelib-full.js (DynarchLIB)</td><td class=\"left\">251939 (0:02.55)</td><td class=\"right\">72535</td><td class=\"left\">249911 (0:09.05)</td><td class=\"right\">72696</td><td class=\"left\">258869 (0:01.94)</td><td class=\"right\">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-6\" class=\"outline-3\">\n<h3 id=\"sec-2-6\"><span class=\"section-number-3\">2.6</span> Bugs? </h3>\n<div class=\"outline-text-3\" id=\"text-2-6\">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class=\"footref\" name=\"fnr.1\" href=\"#fn.1\">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I'm quite confident\nthat it's solid enough for production use.  If you can identify any bugs,\nI'd love to hear about them (<a href=\"http://groups.google.com/group/uglifyjs\">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-7\" class=\"outline-3\">\n<h3 id=\"sec-2-7\"><span class=\"section-number-3\">2.7</span> Links </h3>\n<div class=\"outline-text-3\" id=\"text-2-7\">\n\n\n<ul>\n<li>Twitter: <a href=\"http://twitter.com/UglifyJS\">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href=\"http://github.com/mishoo/UglifyJS\">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href=\"http://groups.google.com/group/uglifyjs\">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href=\"http://marijn.haverbeke.nl/parse-js/\">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href=\"http://github.com/marijnh/js\">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href=\"http://github.com/mishoo/cl-uglify-js\">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-8\" class=\"outline-3\">\n<h3 id=\"sec-2-8\"><span class=\"section-number-3\">2.8</span> License </h3>\n<div class=\"outline-text-3\" id=\"text-2-8\">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class=\"example\">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n<p class=\"footnote\"><sup><a class=\"footnum\" name=\"fn.1\" href=\"#fnr.1\">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-11-22 10:46:14 EET</p>\n<p class=\"author\">Author: Mihai Bazon</p>\n<p class=\"creator\">Org version 7.7 with Emacs version 24</p>\n<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n","readmeFilename":"README.html","_id":"uglify-js@1.3.5","dist":{"shasum":"4b5bfff9186effbaa888e4c9e94bd9fc4c94929d","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"2.4.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.0","dist":{"shasum":"a5f2b6b1b817fb34c16a04234328c89ba1e77137","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.0.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.1","dist":{"shasum":"57b97aaf8160e5fa2118127e07082bf3a5c2b6e5","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.1.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.2","dist":{"shasum":"9301b81a179b7f82be0118f0768d8df01a8afe89","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.2.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.3","dist":{"shasum":"6883cd4b837a4d004191c9ea05394cfa596c3748","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.3.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.4","dist":{"shasum":"f629e1e46bbe0bf4cf7232c7919e66b25a8fc529","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.4.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}}},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"time":{"0.0.1":"2011-01-05T17:56:48.593Z","0.0.2":"2011-01-09T13:47:55.729Z","0.0.3":"2011-01-25T05:53:18.848Z","0.0.4":"2011-02-05T13:28:37.926Z","0.0.5":"2011-02-20T16:37:04.786Z","1.0.1":"2011-04-03T22:03:32.396Z","1.0.2":"2011-05-19T16:13:13.281Z","1.0.3":"2011-06-27T16:52:42.404Z","1.0.4":"2011-07-01T10:26:41.824Z","1.0.5":"2011-07-14T09:54:00.537Z","1.0.6":"2011-07-14T20:36:30.484Z","1.0.7":"2011-08-20T07:13:48.144Z","1.1.0":"2011-09-20T16:07:57.319Z","1.1.1":"2011-10-11T16:31:12.608Z","1.2.0":"2011-12-10T09:38:41.304Z","1.2.1":"2011-12-13T21:02:54.998Z","1.2.2":"2011-12-13T21:10:39.550Z","1.2.3":"2011-12-24T09:56:19.291Z","1.2.4":"2012-01-05T16:47:31.476Z","1.2.5":"2012-01-13T09:10:15.951Z","1.2.6":"2012-03-18T09:29:14.974Z","1.3.0":"2012-05-28T09:10:23.712Z","1.3.1":"2012-06-18T07:54:10.490Z","1.3.2":"2012-06-26T12:54:45.687Z","1.3.3":"2012-07-24T19:07:48.674Z","1.3.4":"2012-10-20T07:21:44.910Z","2.2.0":"2012-11-21T11:27:34.522Z","2.2.1":"2012-11-23T08:26:39.028Z","2.2.2":"2012-12-06T12:26:20.026Z","2.2.3":"2013-01-04T20:50:30.189Z","2.2.4":"2013-02-01T11:33:01.270Z","2.2.5":"2013-02-14T10:50:15.455Z","2.3.0":"2013-05-01T10:16:47.272Z","2.3.1":"2013-05-08T13:47:14.500Z","2.3.2":"2013-05-09T06:00:22.335Z","2.3.3":"2013-05-14T08:34:55.623Z","2.3.4":"2013-05-15T10:28:50.098Z","2.3.5":"2013-05-19T11:26:06.547Z","2.3.6":"2013-05-23T20:44:06.610Z","1.3.5":"2013-06-07T11:23:52.416Z","2.4.0":"2013-08-22T12:14:06.635Z","2.4.1":"2013-10-22T18:53:41.224Z","2.4.2":"2013-11-03T21:48:06.131Z","2.4.3":"2013-11-06T08:50:52.703Z","2.4.4":"2013-11-27T12:26:15.238Z"},"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"description":"JavaScript parser, mangler/compressor and beautifier toolkit","users":{"coverslide":true,"substack":true,"vtsvang":true,"pvorb":true,"mikl":true,"vasc":true,"dodo":true,"chrisdickinson":true,"matthiasg":true,"sjonnet":true,"tellnes":true,"fgribreau":true,"sjonnet19":true,"pid":true,"shanewholloway":true,"m42am":true,"af":true,"freethenation":true,"fibo":true,"cj.nichols":true,"dbrockman":true,"meryn":true,"eugene-eeo":true,"leesei":true,"dubban":true,"getify":true,"netroy":true,"aniketpant":true},"_attachments":{"uglify-js-2.4.4.tgz":{"content_type":"application/octet-stream","revpos":130,"digest":"md5-vQ3nz5NtgXNrwwxPfiWP7A==","length":78149,"stub":true},"uglify-js-2.4.3.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-4FiH8PPZNvDRZ6usbGJKdQ==","length":78195,"stub":true},"uglify-js-2.4.2.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-6fwRkUCVUysM9ZAHBmBFDw==","length":78163,"stub":true},"uglify-js-2.4.1.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-+/QUM9QfTwtRrCnF3ekP6Q==","length":76951,"stub":true},"uglify-js-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":117,"digest":"md5-iOHiqHMpJn+aFZJuB5dVjA==","length":74485,"stub":true},"uglify-js-1.3.5.tgz":{"content_type":"application/octet-stream","revpos":112,"digest":"md5-WnK34r45oYtxJVNrJ615jA==","length":82442,"stub":true},"uglify-js-2.3.6.tgz":{"content_type":"application/octet-stream","revpos":109,"digest":"md5-omyc70k5xoOieJNrdcLqHg==","length":73687,"stub":true},"uglify-js-2.3.5.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-B//iOvbJRT7E7dAOfzARfg==","length":73561,"stub":true},"uglify-js-2.3.4.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-F5h8STmO13xjxP84BVn1tg==","length":73558,"stub":true},"uglify-js-2.3.3.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-buzC9q/EH2ymeX1cUJPsQw==","length":73458,"stub":true},"uglify-js-2.3.2.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-18METGxzuiWg+ZGHanFoGA==","length":72947,"stub":true},"uglify-js-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":98,"digest":"md5-6oHa6vU+qRLsoKto2kj2Uw==","length":72898,"stub":true},"uglify-js-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-XiM8u
20497 error registry error parsing json
20498 silly registry.get cb [ 200,
20498 silly registry.get   { vary: 'Accept',
20498 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
20498 silly registry.get     etag: '"9CGLVFVH3SPUUZMKQ4XIISFLK"',
20498 silly registry.get     date: 'Wed, 27 Nov 2013 17:13:21 GMT',
20498 silly registry.get     'content-type': 'application/json',
20498 silly registry.get     'content-length': '576808' } ]
20499 silly lockFile 25e14726-uglify-js-1-1-1 uglify-js@~1.1.1
20500 silly lockFile 25e14726-uglify-js-1-1-1 uglify-js@~1.1.1
20501 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito
20502 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules/burrito unbuild
20503 info preuninstall burrito@0.2.12
20504 info uninstall burrito@0.2.12
20505 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective/node_modules unbuild burrito@0.2.12
20506 info postuninstall burrito@0.2.12
20507 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective
20508 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules/detective unbuild
20509 info preuninstall detective@0.0.4
20510 info uninstall detective@0.0.4
20511 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/jitsu/node_modules/require-analyzer/node_modules unbuild detective@0.0.4
20512 info postuninstall detective@0.0.4
20513 verbose about to build /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer
20514 info /usr/local/lib/node_modules/jitsu/node_modules/require-analyzer unbuild
20515 info preuninstall require-analyzer@0.5.0
20516 info uninstall require-analyzer@0.5.0
20517 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/jitsu/node_modules unbuild require-analyzer@0.5.0
20518 verbose /usr/local/lib/node_modules/jitsu/node_modules/.bin,[object Object] binRoot
20519 info postuninstall require-analyzer@0.5.0
20520 verbose about to build /usr/local/lib/node_modules/jitsu
20521 info /usr/local/lib/node_modules/jitsu unbuild
20522 info preuninstall jitsu@0.13.3
20523 info uninstall jitsu@0.13.3
20524 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild jitsu@0.13.3
20525 verbose /usr/local/bin,[object Object] binRoot
20526 info postuninstall jitsu@0.13.3
20527 error SyntaxError: Unexpected end of input
20527 error {"_id":"uglify-js","_rev":"131-cfc44c91bf89c54b9146256ce80ba1a5","name":"uglify-js","dist-tags":{"latest":"2.4.4"},"versions":{"0.0.1":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.1","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.2.4","dist":{"tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.1.tgz","shasum":"2f759acd04cf779a8fa1367f3966a635112c7a15"},"directories":{}},"0.0.2":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.2","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.3.5-pre","dist":{"shasum":"baaf5c2223440d31f008bd248aaa728e8c771a8a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.3","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.3.5-pre","dist":{"shasum":"04e48708cb7175fba8b23aba7596e39c849ccfab","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.3.tgz"},"directories":{}},"0.0.4":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.4","main":"index","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8-pre","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"48b2d19b65c284a82c4d6ccab6ed141b8e313a72","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.4.tgz"}},"0.0.5":{"name":"uglify-js","author":{"name":"Mihai Bazon - http://github.com/mishoo"},"version":"0.0.5","main":"index.js","bin":{"uglifyjs":"./bin/uglifyjs"},"_id":"uglify-js@0.0.5","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c40d18e51784a230477bb0354fa415ec361dba5e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-0.0.5.tgz"}},"1.0.1":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b34b3220e7d634401f388c8bd69e9663cec6ca94","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.1.tgz"},"directories":{}},"1.0.2":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"28494cc77c26042d4065d73736391d78417d680a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.2.tgz"},"directories":{}},"1.0.3":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.3","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"73c4f09bcec47ec5e8669cb37c11b95b7014f945","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.3.tgz"},"directories":{}},"1.0.4":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"7512dbbfca85e749683800c65407e55491700778","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.4.tgz"},"directories":{}},"1.0.5":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.5","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"25679bdcff52f9500774a644cef3129b8ddb5cf2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.5.tgz"},"directories":{}},"1.0.6":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.6","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.6","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"f0d3aafd463f26a437b9ebc19f4947ab7e8078aa","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.6.tgz"},"directories":{}},"1.0.7":{"name":"uglify-js","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.0.7","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.0.7","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"2b7a10e628f88029a553d2b4bbb17409343755c0","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.0.7.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.1.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.1.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"dependencies":{},"devDependencies":{},"_id":"uglify-js@1.1.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc5","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"ac8976646d2c5a844d915cb9c50a73a17425ccad","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.1.0.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.1.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.1.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.1.1","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.94","_nodeVersion":"v0.5.8","_defaultsLoaded":true,"dist":{"shasum":"ee71a97c4cefd06a1a9b20437f34118982aa035b","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.1.1.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.0","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"dd0e535f92dc5047a7526d667327bd5581e153fc","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.0.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.1","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"7edd89daadd1997b71037b80d4e9b3fd147e726e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.1.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.2":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.2","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"76bc64ea1777c92d8d93bebaeec0ecba6e6fc075","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.2.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.3":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.3","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"3b0ce6631a28dcaa64302b893123b20876bdc536","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.3.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.4":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.4","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"e65de3ca3030d34d9f2ce82ac887c407e1f4b0e2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.4.tgz"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.5":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.5","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b542c2c76f78efb34b200b20177634330ff702b6","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.5.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.2.6":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.2.6","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.2.6","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"d354b2d3c1cf10ebc18fa78c11a28bdd9ce1580d","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.2.6.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.0":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.0","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.0","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"4e92734af143c7889ffbd61a9af296f3171ae0e2","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.0.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.1":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.1","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.1","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"86b927f44b9752ddb327052e83964799abebecbc","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.1.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.2":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.2","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.2","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"7ed11c9dedf77f29632286ea4dc96a2229aef98e","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.2.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.3":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.3","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"_id":"uglify-js@1.3.3","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.10-pre","_defaultsLoaded":true,"dist":{"shasum":"ddd3e98aa27f5f47e589cfb3f95cddba26096190","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.3.tgz"},"readme":"","maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"1.3.4":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.4","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"readme":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\nlang=\"en\" xml:lang=\"en\">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<meta name=\"generator\" content=\"Org-mode\"/>\n<meta name=\"generated\" content=\"2012-08-27 12:38:12 EEST\"/>\n<meta name=\"author\" content=\"Mihai Bazon\"/>\n<meta name=\"description\" content=\"a JavaScript parser/compressor/beautifier in JavaScript\"/>\n<meta name=\"keywords\" content=\"javascript, js, parser, compiler, compressor, mangle, minify, minifier\"/>\n<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"docstyle.css\" />\n<script type=\"text/javascript\">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = \"code-highlighted\";\n     elem.className   = \"code-highlighted\";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id=\"preamble\">\n\n</div>\n\n<div id=\"content\">\n<h1 class=\"title\">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"text-table-of-contents\">\n<ul>\n<li><a href=\"#sec-1\">1 NEW: UglifyJS2 </a></li>\n<li><a href=\"#sec-2\">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href=\"#sec-2-1\">2.1 Unsafe transformations </a>\n<ul>\n<li><a href=\"#sec-2-1-1\">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href=\"#sec-2-1-2\">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-2\">2.2 Install (NPM) </a></li>\n<li><a href=\"#sec-2-3\">2.3 Install latest code from GitHub </a></li>\n<li><a href=\"#sec-2-4\">2.4 Usage </a>\n<ul>\n<li><a href=\"#sec-2-4-1\">2.4.1 API </a></li>\n<li><a href=\"#sec-2-4-2\">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href=\"#sec-2-4-3\">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-5\">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href=\"#sec-2-6\">2.6 Bugs? </a></li>\n<li><a href=\"#sec-2-7\">2.7 Links </a></li>\n<li><a href=\"#sec-2-8\">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> NEW: UglifyJS2 </h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n\n\n<p>\nI started working on UglifyJS's successor, version 2.  It's almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I've detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href=\"https://github.com/mishoo/UglifyJS2\">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n<p>\nPlease help me focus on version 2 by <a href=\"http://pledgie.com/campaigns/18110\">making a donation</a>!\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href=\"http://nodejs.org/\">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn't support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href=\"../lib/parse-js.js\">parse-js.js</a> and it's a\nport to JavaScript of the excellent <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> Common Lisp library from <a href=\"http://marijn.haverbeke.nl/\">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href=\"http://github.com/mishoo/cl-uglify-js\">cl-uglify-js</a> if you're looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href=\"../lib/process.js\">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo[\"bar\"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don't replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> <span class=\"target\">Unsafe transformations</span>  </h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n\n\n<p>\nThe following transformations can in theory break code, although they're\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id=\"outline-container-2-1-1\" class=\"outline-4\">\n<h4 id=\"sec-2-1-1\"><span class=\"section-number-4\">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(5)           =&gt; Array(5)\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn't redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don't see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn't touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 1.  globally declared variable</span>\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be declared later)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be a function)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 2.  declared in a function</span>\n  (<span class=\"org-keyword\">function</span>(){\n    a = <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(<span class=\"org-variable-name\">Array</span>){\n    <span class=\"org-keyword\">return</span> Array(5, 6, 7);\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(){\n    <span class=\"org-keyword\">return</span> <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4);\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-1-2\" class=\"outline-4\">\n<h4 id=\"sec-2-1-2\"><span class=\"section-number-4\">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n\n\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Install (NPM) </h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js</code> should do\nthe job.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Install latest code from GitHub </h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n\n\n\n\n\n<pre class=\"src src-sh\"><span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class=\"org-builtin\">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class=\"org-builtin\">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class=\"org-builtin\">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">(then add ~/bin to your $PATH if it's not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Usage </h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class=\"src src-sh\">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don't specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won't bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you'll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don't mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don't call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don't do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, \"a = 10; b = 20; foo();\" will be written as\n  \"a=10,b=20,foo();\".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn't given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as =\"object\"= or\n  ='https://github.com'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+\"\"\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I've seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you'd specify &ndash;reserved-names \"require,$super\".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-4-1\" class=\"outline-4\">\n<h4 id=\"sec-2-4-1\"><span class=\"section-number-4\">2.4.1</span> API </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-1\">\n\n\n<p>\nTo use the library from JavaScript, you'd do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">jsp</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).parser;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">pro</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).uglify;\n\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">orig_code</span> = <span class=\"org-string\">\"... JS code here\"</span>;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">ast</span> = jsp.parse(orig_code); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get an AST with compression optimizations</span>\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">final_code</span> = pro.gen_code(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don't want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here's a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn't find it.  For most JS code you don't want that, but it's useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it's not enabled by default) this operation isn't yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it's technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here's an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>, <span class=\"org-variable-name\">d</span>, <span class=\"org-variable-name\">e</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">q</span>;\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">w</span>;\n    w = 10;\n    q = 20;\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 1; i &lt; 10; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 0; i &lt; 1; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">baz</span>(){ ... }\n}\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">transforms into ==&gt;</span>\n\n<span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span>, <span class=\"org-variable-name\">boo</span>, <span class=\"org-variable-name\">w</span> = 10, <span class=\"org-variable-name\">q</span> = 20;\n    <span class=\"org-keyword\">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>() { ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don't touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the \"sequence\" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it's minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-2\" class=\"outline-4\">\n<h4 id=\"sec-2-4-2\"><span class=\"section-number-4\">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-2\">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It's\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don't really want to use it\nto reformat your code, unless you don't have, or don't care about, comments.\n</p>\n<p>\nIn fact it's not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don't really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we'd have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-3\" class=\"outline-4\">\n<h4 id=\"sec-2-4-3\"><span class=\"section-number-4\">2.4.3</span> Use as a code pre-processor </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-3\">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class=\"src src-js\">CLAUSE1: <span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">typeof</span> DEVMODE === <span class=\"org-string\">'undefined'</span>) {\n    DEVMODE = <span class=\"org-constant\">true</span>;\n}\n\n<span class=\"org-function-name\">CLAUSE2</span>: <span class=\"org-keyword\">function</span> init() {\n    <span class=\"org-keyword\">if</span> (DEVMODE) {\n        console.log(<span class=\"org-string\">\"init() called\"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class=\"org-string\">\"init() complete\"</span>);\n}\n\n<span class=\"org-function-name\">CLAUSE3</span>: <span class=\"org-keyword\">function</span> reportDeviceStatus(<span class=\"org-variable-name\">device</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">DEVMODE</span> = device.mode, <span class=\"org-variable-name\">DEVNAME</span> = device.name;\n    <span class=\"org-keyword\">if</span> (DEVMODE === <span class=\"org-string\">'open'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> Compression &ndash; how good is it? </h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe're still a lot better than YUI in terms of compression, though slightly\nslower.  We're still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n<caption></caption>\n<colgroup><col class=\"left\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" />\n</colgroup>\n<thead>\n<tr><th scope=\"col\" class=\"left\">File</th><th scope=\"col\" class=\"left\">UglifyJS</th><th scope=\"col\" class=\"right\">UglifyJS+gzip</th><th scope=\"col\" class=\"left\">Closure</th><th scope=\"col\" class=\"right\">Closure+gzip</th><th scope=\"col\" class=\"left\">YUI</th><th scope=\"col\" class=\"right\">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class=\"left\">jquery-1.6.2.js</td><td class=\"left\">91001 (0:01.59)</td><td class=\"right\">31896</td><td class=\"left\">90678 (0:07.40)</td><td class=\"right\">31979</td><td class=\"left\">101527 (0:01.82)</td><td class=\"right\">34646</td></tr>\n<tr><td class=\"left\">paper.js</td><td class=\"left\">142023 (0:01.65)</td><td class=\"right\">43334</td><td class=\"left\">134301 (0:07.42)</td><td class=\"right\">42495</td><td class=\"left\">173383 (0:01.58)</td><td class=\"right\">48785</td></tr>\n<tr><td class=\"left\">prototype.js</td><td class=\"left\">88544 (0:01.09)</td><td class=\"right\">26680</td><td class=\"left\">86955 (0:06.97)</td><td class=\"right\">26326</td><td class=\"left\">92130 (0:00.79)</td><td class=\"right\">28624</td></tr>\n<tr><td class=\"left\">thelib-full.js (DynarchLIB)</td><td class=\"left\">251939 (0:02.55)</td><td class=\"right\">72535</td><td class=\"left\">249911 (0:09.05)</td><td class=\"right\">72696</td><td class=\"left\">258869 (0:01.94)</td><td class=\"right\">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-6\" class=\"outline-3\">\n<h3 id=\"sec-2-6\"><span class=\"section-number-3\">2.6</span> Bugs? </h3>\n<div class=\"outline-text-3\" id=\"text-2-6\">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class=\"footref\" name=\"fnr.1\" href=\"#fn.1\">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I'm quite confident\nthat it's solid enough for production use.  If you can identify any bugs,\nI'd love to hear about them (<a href=\"http://groups.google.com/group/uglifyjs\">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-7\" class=\"outline-3\">\n<h3 id=\"sec-2-7\"><span class=\"section-number-3\">2.7</span> Links </h3>\n<div class=\"outline-text-3\" id=\"text-2-7\">\n\n\n<ul>\n<li>Twitter: <a href=\"http://twitter.com/UglifyJS\">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href=\"http://github.com/mishoo/UglifyJS\">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href=\"http://groups.google.com/group/uglifyjs\">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href=\"http://marijn.haverbeke.nl/parse-js/\">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href=\"http://github.com/marijnh/js\">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href=\"http://github.com/mishoo/cl-uglify-js\">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-8\" class=\"outline-3\">\n<h3 id=\"sec-2-8\"><span class=\"section-number-3\">2.8</span> License </h3>\n<div class=\"outline-text-3\" id=\"text-2-8\">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class=\"example\">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n<p class=\"footnote\"><sup><a class=\"footnum\" name=\"fn.1\" href=\"#fnr.1\">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-08-27 12:38:12 EEST</p>\n<p class=\"author\">Author: Mihai Bazon</p>\n<p class=\"creator\">Org version 7.7 with Emacs version 23</p>\n<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n","_id":"uglify-js@1.3.4","dist":{"shasum":"282cec40db568798e0ec6d71d0c989d323f0636b","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"2.2.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.0","dist":{"shasum":"305c78992d03fe0ec3b0211f34615b533b7768eb","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.1","dist":{"shasum":"c47e5f0ac40ea8cd951584d7cb08251085a02ea0","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n","readmeFilename":"README.md","_id":"uglify-js@2.2.2","dist":{"shasum":"3f8e186e8061850af4de524bcf867baf29609e16","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.2.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFrom NPM:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exits.                   [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead-code` -- remove unreachable code\n- `drop-debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist-funs` -- hoist function declarations\n- `hoist-vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if-return` -- optimizations for if/return and if/continue\n- `join-vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    // see \"fromString\" below if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.3","dist":{"shasum":"a60c6f7234e971e4522a79d27da006589f8911b4","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.3.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.4","dist":{"shasum":"805b40fa468b1fad4da84f3e04cd0ca26bf80a29","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.4.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.2.5":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.2.5","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.2.5","dist":{"shasum":"a6e02a70d839792b9780488b7b8b184c095c99c7","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.2.5.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.0","dist":{"shasum":"2cdec16d378a8a2b6ecfb6989784cf8b7ae5491f","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.1","dist":{"shasum":"78ce618c52e27aac408298f80f910f56c80cc884","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.2","dist":{"shasum":"de195c311110e100ebf43b3e6bdc396827771469","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.3","dist":{"shasum":"ea82ebd16f75440dc1406a9caa0555050e19a0d8","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repositories":[{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"}],"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.4","dist":{"shasum":"321cd1f7b46c7fa4a0cc76fc194142de0b0d2e40","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.5":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.5","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.5","dist":{"shasum":"3939907b4b4ec7a48a9775463bf43fed33216035","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.3.6":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.3.6","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5"},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    --screw-ie8        Pass this flag if you don't care about full compliance with\n                       Internet Explorer 6-8 quirks (by default UglifyJS will try\n                       to be IE-proof).\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `negate-iife` (default `!beautify`) -- prefer negation, rather than\n  parens, for \"Immediately-Called Function Expressions\".  This defaults to\n  `true` when beautification is off, and `false` if beautification is on;\n  pass it manually to force a value.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","_id":"uglify-js@2.3.6","dist":{"shasum":"fa0984770b428b7a9b2a8058f46355d14fef211a","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.3.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"1.3.5":{"name":"uglify-js","description":"JavaScript parser and compressor/beautifier toolkit","author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"version":"1.3.5","main":"./uglify-js.js","bin":{"uglifyjs":"./bin/uglifyjs"},"repository":{"type":"git","url":"git@github.com:mishoo/UglifyJS.git"},"devDependencies":{"nodeunit":"0.7.x"},"scripts":{"test":"$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js"},"readme":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\nlang=\"en\" xml:lang=\"en\">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<meta name=\"generator\" content=\"Org-mode\"/>\n<meta name=\"generated\" content=\"2012-11-22 10:46:14 EET\"/>\n<meta name=\"author\" content=\"Mihai Bazon\"/>\n<meta name=\"description\" content=\"a JavaScript parser/compressor/beautifier in JavaScript\"/>\n<meta name=\"keywords\" content=\"javascript, js, parser, compiler, compressor, mangle, minify, minifier\"/>\n<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"docstyle.css\" />\n<script type=\"text/javascript\">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = \"code-highlighted\";\n     elem.className   = \"code-highlighted\";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id=\"preamble\">\n\n</div>\n\n<div id=\"content\">\n<h1 class=\"title\">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"text-table-of-contents\">\n<ul>\n<li><a href=\"#sec-1\">1 NEW: UglifyJS2 </a></li>\n<li><a href=\"#sec-2\">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href=\"#sec-2-1\">2.1 Unsafe transformations </a>\n<ul>\n<li><a href=\"#sec-2-1-1\">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href=\"#sec-2-1-2\">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-2\">2.2 Install (NPM) </a></li>\n<li><a href=\"#sec-2-3\">2.3 Install latest code from GitHub </a></li>\n<li><a href=\"#sec-2-4\">2.4 Usage </a>\n<ul>\n<li><a href=\"#sec-2-4-1\">2.4.1 API </a></li>\n<li><a href=\"#sec-2-4-2\">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href=\"#sec-2-4-3\">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href=\"#sec-2-5\">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href=\"#sec-2-6\">2.6 Bugs? </a></li>\n<li><a href=\"#sec-2-7\">2.7 Links </a></li>\n<li><a href=\"#sec-2-8\">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> NEW: UglifyJS2 </h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n\n\n<p>\nI started working on UglifyJS's successor, version 2.  It's almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I've detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href=\"https://github.com/mishoo/UglifyJS2\">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href=\"http://nodejs.org/\">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn't support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href=\"../lib/parse-js.js\">parse-js.js</a> and it's a\nport to JavaScript of the excellent <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> Common Lisp library from <a href=\"http://marijn.haverbeke.nl/\">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href=\"http://github.com/mishoo/cl-uglify-js\">cl-uglify-js</a> if you're looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href=\"../lib/process.js\">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo[\"bar\"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don't replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> <span class=\"target\">Unsafe transformations</span>  </h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n\n\n<p>\nThe following transformations can in theory break code, although they're\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id=\"outline-container-2-1-1\" class=\"outline-4\">\n<h4 id=\"sec-2-1-1\"><span class=\"section-number-4\">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(5)           =&gt; Array(5)\n<span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn't redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don't see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn't touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 1.  globally declared variable</span>\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be declared later)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or (can be a function)</span>\n  <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n  <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">case 2.  declared in a function</span>\n  (<span class=\"org-keyword\">function</span>(){\n    a = <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">Array</span>;\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(<span class=\"org-variable-name\">Array</span>){\n    <span class=\"org-keyword\">return</span> Array(5, 6, 7);\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">or</span>\n  (<span class=\"org-keyword\">function</span>(){\n    <span class=\"org-keyword\">return</span> <span class=\"org-keyword\">new</span> <span class=\"org-type\">Array</span>(1, 2, 3, 4);\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">Array</span>() { ... }\n  })();\n\n  <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-1-2\" class=\"outline-4\">\n<h4 id=\"sec-2-1-2\"><span class=\"section-number-4\">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n\n\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Install (NPM) </h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js@1</code> should\ndo the job.\n</p>\n<p>\n<b>NOTE:</b> The NPM package has been upgraded to UglifyJS2.  If you need to\ninstall version 1.x you need to add `@1` to the command, as I did above.  I\nstrongly suggest you to try to upgrade, though this might not be simple (v2\nhas a completely different AST structure and API).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Install latest code from GitHub </h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n\n\n\n\n\n<pre class=\"src src-sh\"><span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class=\"org-builtin\">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class=\"org-builtin\">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class=\"org-comment-delimiter\">## </span><span class=\"org-comment\">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class=\"org-builtin\">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class=\"org-comment-delimiter\"># </span><span class=\"org-comment\">(then add ~/bin to your $PATH if it's not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Usage </h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class=\"src src-sh\">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don't specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won't bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you'll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don't mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don't call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don't do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, \"a = 10; b = 20; foo();\" will be written as\n  \"a=10,b=20,foo();\".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn't given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as =\"object\"= or\n  ='https://github.com'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+\"\"\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I've seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you'd specify &ndash;reserved-names \"require,$super\".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id=\"outline-container-2-4-1\" class=\"outline-4\">\n<h4 id=\"sec-2-4-1\"><span class=\"section-number-4\">2.4.1</span> API </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-1\">\n\n\n<p>\nTo use the library from JavaScript, you'd do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">jsp</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).parser;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">pro</span> = require(<span class=\"org-string\">\"uglify-js\"</span>).uglify;\n\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">orig_code</span> = <span class=\"org-string\">\"... JS code here\"</span>;\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">ast</span> = jsp.parse(orig_code); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">get an AST with compression optimizations</span>\n<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">final_code</span> = pro.gen_code(ast); <span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don't want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here's a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn't find it.  For most JS code you don't want that, but it's useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it's not enabled by default) this operation isn't yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it's technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here's an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class=\"src src-js\"><span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>, <span class=\"org-variable-name\">d</span>, <span class=\"org-variable-name\">e</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">q</span>;\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">w</span>;\n    w = 10;\n    q = 20;\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 1; i &lt; 10; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (<span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span> = 0; i &lt; 1; ++i) {\n        <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">boo</span> = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>(){ ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">baz</span>(){ ... }\n}\n\n<span class=\"org-comment-delimiter\">// </span><span class=\"org-comment\">transforms into ==&gt;</span>\n\n<span class=\"org-keyword\">function</span> <span class=\"org-function-name\">f</span>(<span class=\"org-variable-name\">a</span>, <span class=\"org-variable-name\">b</span>, <span class=\"org-variable-name\">c</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">i</span>, <span class=\"org-variable-name\">boo</span>, <span class=\"org-variable-name\">w</span> = 10, <span class=\"org-variable-name\">q</span> = 20;\n    <span class=\"org-keyword\">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class=\"org-keyword\">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">foo</span>() { ... }\n    <span class=\"org-keyword\">function</span> <span class=\"org-function-name\">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don't touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value. For example,\n    <code>{ defines: { DEBUG: ['name', 'false'], VERSION: ['string', '1.0'] } }</code>\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the \"sequence\" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it's minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-2\" class=\"outline-4\">\n<h4 id=\"sec-2-4-2\"><span class=\"section-number-4\">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-2\">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It's\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don't really want to use it\nto reformat your code, unless you don't have, or don't care about, comments.\n</p>\n<p>\nIn fact it's not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don't really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we'd have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-4-3\" class=\"outline-4\">\n<h4 id=\"sec-2-4-3\"><span class=\"section-number-4\">2.4.3</span> Use as a code pre-processor </h4>\n<div class=\"outline-text-4\" id=\"text-2-4-3\">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class=\"src src-js\">CLAUSE1: <span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">typeof</span> DEVMODE === <span class=\"org-string\">'undefined'</span>) {\n    DEVMODE = <span class=\"org-constant\">true</span>;\n}\n\n<span class=\"org-function-name\">CLAUSE2</span>: <span class=\"org-keyword\">function</span> init() {\n    <span class=\"org-keyword\">if</span> (DEVMODE) {\n        console.log(<span class=\"org-string\">\"init() called\"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class=\"org-string\">\"init() complete\"</span>);\n}\n\n<span class=\"org-function-name\">CLAUSE3</span>: <span class=\"org-keyword\">function</span> reportDeviceStatus(<span class=\"org-variable-name\">device</span>) {\n    <span class=\"org-keyword\">var</span> <span class=\"org-variable-name\">DEVMODE</span> = device.mode, <span class=\"org-variable-name\">DEVNAME</span> = device.name;\n    <span class=\"org-keyword\">if</span> (DEVMODE === <span class=\"org-string\">'open'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> Compression &ndash; how good is it? </h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe're still a lot better than YUI in terms of compression, though slightly\nslower.  We're still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n<caption></caption>\n<colgroup><col class=\"left\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" /><col class=\"left\" /><col class=\"right\" />\n</colgroup>\n<thead>\n<tr><th scope=\"col\" class=\"left\">File</th><th scope=\"col\" class=\"left\">UglifyJS</th><th scope=\"col\" class=\"right\">UglifyJS+gzip</th><th scope=\"col\" class=\"left\">Closure</th><th scope=\"col\" class=\"right\">Closure+gzip</th><th scope=\"col\" class=\"left\">YUI</th><th scope=\"col\" class=\"right\">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class=\"left\">jquery-1.6.2.js</td><td class=\"left\">91001 (0:01.59)</td><td class=\"right\">31896</td><td class=\"left\">90678 (0:07.40)</td><td class=\"right\">31979</td><td class=\"left\">101527 (0:01.82)</td><td class=\"right\">34646</td></tr>\n<tr><td class=\"left\">paper.js</td><td class=\"left\">142023 (0:01.65)</td><td class=\"right\">43334</td><td class=\"left\">134301 (0:07.42)</td><td class=\"right\">42495</td><td class=\"left\">173383 (0:01.58)</td><td class=\"right\">48785</td></tr>\n<tr><td class=\"left\">prototype.js</td><td class=\"left\">88544 (0:01.09)</td><td class=\"right\">26680</td><td class=\"left\">86955 (0:06.97)</td><td class=\"right\">26326</td><td class=\"left\">92130 (0:00.79)</td><td class=\"right\">28624</td></tr>\n<tr><td class=\"left\">thelib-full.js (DynarchLIB)</td><td class=\"left\">251939 (0:02.55)</td><td class=\"right\">72535</td><td class=\"left\">249911 (0:09.05)</td><td class=\"right\">72696</td><td class=\"left\">258869 (0:01.94)</td><td class=\"right\">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-6\" class=\"outline-3\">\n<h3 id=\"sec-2-6\"><span class=\"section-number-3\">2.6</span> Bugs? </h3>\n<div class=\"outline-text-3\" id=\"text-2-6\">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class=\"footref\" name=\"fnr.1\" href=\"#fn.1\">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I'm quite confident\nthat it's solid enough for production use.  If you can identify any bugs,\nI'd love to hear about them (<a href=\"http://groups.google.com/group/uglifyjs\">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id=\"outline-container-2-7\" class=\"outline-3\">\n<h3 id=\"sec-2-7\"><span class=\"section-number-3\">2.7</span> Links </h3>\n<div class=\"outline-text-3\" id=\"text-2-7\">\n\n\n<ul>\n<li>Twitter: <a href=\"http://twitter.com/UglifyJS\">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href=\"http://github.com/mishoo/UglifyJS\">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href=\"http://groups.google.com/group/uglifyjs\">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href=\"http://marijn.haverbeke.nl/parse-js/\">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href=\"http://github.com/marijnh/js\">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href=\"http://github.com/mishoo/cl-uglify-js\">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id=\"outline-container-2-8\" class=\"outline-3\">\n<h3 id=\"sec-2-8\"><span class=\"section-number-3\">2.8</span> License </h3>\n<div class=\"outline-text-3\" id=\"text-2-8\">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class=\"example\">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n<p class=\"footnote\"><sup><a class=\"footnum\" name=\"fn.1\" href=\"#fnr.1\">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href=\"http://marijn.haverbeke.nl/parse-js/\">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id=\"postamble\">\n<p class=\"date\">Date: 2012-11-22 10:46:14 EET</p>\n<p class=\"author\">Author: Mihai Bazon</p>\n<p class=\"creator\">Org version 7.7 with Emacs version 24</p>\n<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n","readmeFilename":"README.html","_id":"uglify-js@1.3.5","dist":{"shasum":"4b5bfff9186effbaa888e4c9e94bd9fc4c94929d","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-1.3.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"directories":{}},"2.4.0":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.0","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.0","dist":{"shasum":"a5f2b6b1b817fb34c16a04234328c89ba1e77137","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.0.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.1":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.1","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `\"undefined\"` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.1","dist":{"shasum":"57b97aaf8160e5fa2118127e07082bf3a5c2b6e5","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.1.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.2":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.2","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.2","dist":{"shasum":"9301b81a179b7f82be0118f0768d8df01a8afe89","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.2.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.3":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.3","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.3","dist":{"shasum":"6883cd4b837a4d004191c9ea05394cfa596c3748","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.3.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}},"2.4.4":{"name":"uglify-js","description":"JavaScript parser, mangler/compressor and beautifier toolkit","homepage":"http://lisperator.net/uglifyjs","main":"tools/node.js","version":"2.4.4","engines":{"node":">=0.4.0"},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"dependencies":{"async":"~0.2.6","source-map":"~0.1.7","optimist":"~0.3.5","uglify-to-browserify":"~1.0.0"},"browserify":{"transform":["uglify-to-browserify"]},"bin":{"uglifyjs":"bin/uglifyjs"},"scripts":{"test":"node test/run-tests.js"},"readme":"UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mishoo/UglifyJS2/issues"},"_id":"uglify-js@2.4.4","dist":{"shasum":"f629e1e46bbe0bf4cf7232c7919e66b25a8fc529","tarball":"http://registry.npmjs.org/uglify-js/-/uglify-js-2.4.4.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"mishoo","email":"mihai.bazon@gmail.com"},"directories":{}}},"maintainers":[{"name":"caires","email":"cairesvs@gmail.com"},{"name":"mape","email":"mape@mape.me"},{"name":"mishoo","email":"mihai.bazon@gmail.com"}],"author":{"name":"Mihai Bazon","email":"mihai.bazon@gmail.com","url":"http://mihai.bazon.net/blog"},"time":{"0.0.1":"2011-01-05T17:56:48.593Z","0.0.2":"2011-01-09T13:47:55.729Z","0.0.3":"2011-01-25T05:53:18.848Z","0.0.4":"2011-02-05T13:28:37.926Z","0.0.5":"2011-02-20T16:37:04.786Z","1.0.1":"2011-04-03T22:03:32.396Z","1.0.2":"2011-05-19T16:13:13.281Z","1.0.3":"2011-06-27T16:52:42.404Z","1.0.4":"2011-07-01T10:26:41.824Z","1.0.5":"2011-07-14T09:54:00.537Z","1.0.6":"2011-07-14T20:36:30.484Z","1.0.7":"2011-08-20T07:13:48.144Z","1.1.0":"2011-09-20T16:07:57.319Z","1.1.1":"2011-10-11T16:31:12.608Z","1.2.0":"2011-12-10T09:38:41.304Z","1.2.1":"2011-12-13T21:02:54.998Z","1.2.2":"2011-12-13T21:10:39.550Z","1.2.3":"2011-12-24T09:56:19.291Z","1.2.4":"2012-01-05T16:47:31.476Z","1.2.5":"2012-01-13T09:10:15.951Z","1.2.6":"2012-03-18T09:29:14.974Z","1.3.0":"2012-05-28T09:10:23.712Z","1.3.1":"2012-06-18T07:54:10.490Z","1.3.2":"2012-06-26T12:54:45.687Z","1.3.3":"2012-07-24T19:07:48.674Z","1.3.4":"2012-10-20T07:21:44.910Z","2.2.0":"2012-11-21T11:27:34.522Z","2.2.1":"2012-11-23T08:26:39.028Z","2.2.2":"2012-12-06T12:26:20.026Z","2.2.3":"2013-01-04T20:50:30.189Z","2.2.4":"2013-02-01T11:33:01.270Z","2.2.5":"2013-02-14T10:50:15.455Z","2.3.0":"2013-05-01T10:16:47.272Z","2.3.1":"2013-05-08T13:47:14.500Z","2.3.2":"2013-05-09T06:00:22.335Z","2.3.3":"2013-05-14T08:34:55.623Z","2.3.4":"2013-05-15T10:28:50.098Z","2.3.5":"2013-05-19T11:26:06.547Z","2.3.6":"2013-05-23T20:44:06.610Z","1.3.5":"2013-06-07T11:23:52.416Z","2.4.0":"2013-08-22T12:14:06.635Z","2.4.1":"2013-10-22T18:53:41.224Z","2.4.2":"2013-11-03T21:48:06.131Z","2.4.3":"2013-11-06T08:50:52.703Z","2.4.4":"2013-11-27T12:26:15.238Z"},"repository":{"type":"git","url":"https://github.com/mishoo/UglifyJS2.git"},"description":"JavaScript parser, mangler/compressor and beautifier toolkit","users":{"coverslide":true,"substack":true,"vtsvang":true,"pvorb":true,"mikl":true,"vasc":true,"dodo":true,"chrisdickinson":true,"matthiasg":true,"sjonnet":true,"tellnes":true,"fgribreau":true,"sjonnet19":true,"pid":true,"shanewholloway":true,"m42am":true,"af":true,"freethenation":true,"fibo":true,"cj.nichols":true,"dbrockman":true,"meryn":true,"eugene-eeo":true,"leesei":true,"dubban":true,"getify":true,"netroy":true,"aniketpant":true},"_attachments":{"uglify-js-2.4.4.tgz":{"content_type":"application/octet-stream","revpos":130,"digest":"md5-vQ3nz5NtgXNrwwxPfiWP7A==","length":78149,"stub":true},"uglify-js-2.4.3.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-4FiH8PPZNvDRZ6usbGJKdQ==","length":78195,"stub":true},"uglify-js-2.4.2.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-6fwRkUCVUysM9ZAHBmBFDw==","length":78163,"stub":true},"uglify-js-2.4.1.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-+/QUM9QfTwtRrCnF3ekP6Q==","length":76951,"stub":true},"uglify-js-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":117,"digest":"md5-iOHiqHMpJn+aFZJuB5dVjA==","length":74485,"stub":true},"uglify-js-1.3.5.tgz":{"content_type":"application/octet-stream","revpos":112,"digest":"md5-WnK34r45oYtxJVNrJ615jA==","length":82442,"stub":true},"uglify-js-2.3.6.tgz":{"content_type":"application/octet-stream","revpos":109,"digest":"md5-omyc70k5xoOieJNrdcLqHg==","length":73687,"stub":true},"uglify-js-2.3.5.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-B//iOvbJRT7E7dAOfzARfg==","length":73561,"stub":true},"uglify-js-2.3.4.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-F5h8STmO13xjxP84BVn1tg==","length":73558,"stub":true},"uglify-js-2.3.3.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-buzC9q/EH2ymeX1cUJPsQw==","length":73458,"stub":true},"uglify-js-2.3.2.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-18METGxzuiWg+ZGHanFoGA==","length":72947,"stub":true},"uglify-js-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":98,"digest":"md5-6oHa6vU+qRLsoKto2kj2Uw==","length":72898,"stub":true},"uglify-js-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-XiM8u
20527 error     at Object.parse (native)
20527 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:23)
20527 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:129:22)
20527 error     at Request.EventEmitter.emit (events.js:98:17)
20527 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:873:14)
20527 error     at Request.EventEmitter.emit (events.js:117:20)
20527 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:824:12)
20527 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
20527 error     at _stream_readable.js:920:16
20527 error     at process._tickCallback (node.js:415:13)
20528 error If you need help, you may report this log at:
20528 error     <http://github.com/isaacs/npm/issues>
20528 error or email it to:
20528 error     <npm-@googlegroups.com>
20529 error System Linux 3.11.0-13-generic
20530 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "-g" "jitsu"
20531 error cwd /home/lerenzo/Public/requireJs
20532 error node -v v0.10.22
20533 error npm -v 1.3.14
20534 error type unexpected_eos
20535 verbose exit [ 1, true ]
